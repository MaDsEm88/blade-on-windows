if(!window['BLADE_CHUNKS']){window['BLADE_CHUNKS']={}};window['BLADE_BUNDLE']='2798746487';var __create = Object.create;
var __getProtoOf = Object.getPrototypeOf;
var __defProp = Object.defineProperty;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __toESM = (mod, isNodeMode, target) => {
  target = mod != null ? __create(__getProtoOf(mod)) : {};
  const to = isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target;
  for (let key of __getOwnPropNames(mod))
    if (!__hasOwnProp.call(to, key))
      __defProp(to, key, {
        get: () => mod[key],
        enumerable: true
      });
  return to;
};
var __commonJS = (cb, mod) => () => (mod || cb((mod = { exports: {} }).exports, mod), mod.exports);

// node_modules/react/cjs/react.development.js
var require_react_development = __commonJS((exports, module) => {
  if (true) {
    (function() {
      if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart === "function") {
        __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart(new Error);
      }
      var ReactVersion = "18.3.0-experimental-df12d7eac-20230510";
      var REACT_ELEMENT_TYPE = Symbol.for("react.element");
      var REACT_PORTAL_TYPE = Symbol.for("react.portal");
      var REACT_FRAGMENT_TYPE = Symbol.for("react.fragment");
      var REACT_STRICT_MODE_TYPE = Symbol.for("react.strict_mode");
      var REACT_PROFILER_TYPE = Symbol.for("react.profiler");
      var REACT_PROVIDER_TYPE = Symbol.for("react.provider");
      var REACT_CONTEXT_TYPE = Symbol.for("react.context");
      var REACT_SERVER_CONTEXT_TYPE = Symbol.for("react.server_context");
      var REACT_FORWARD_REF_TYPE2 = Symbol.for("react.forward_ref");
      var REACT_SUSPENSE_TYPE = Symbol.for("react.suspense");
      var REACT_SUSPENSE_LIST_TYPE = Symbol.for("react.suspense_list");
      var REACT_MEMO_TYPE = Symbol.for("react.memo");
      var REACT_LAZY_TYPE = Symbol.for("react.lazy");
      var REACT_DEBUG_TRACING_MODE_TYPE = Symbol.for("react.debug_trace_mode");
      var REACT_OFFSCREEN_TYPE = Symbol.for("react.offscreen");
      var REACT_CACHE_TYPE = Symbol.for("react.cache");
      var REACT_SERVER_CONTEXT_DEFAULT_VALUE_NOT_LOADED = Symbol.for("react.default_value");
      var MAYBE_ITERATOR_SYMBOL = Symbol.iterator;
      var FAUX_ITERATOR_SYMBOL = "@@iterator";
      function getIteratorFn(maybeIterable) {
        if (maybeIterable === null || typeof maybeIterable !== "object") {
          return null;
        }
        var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];
        if (typeof maybeIterator === "function") {
          return maybeIterator;
        }
        return null;
      }
      var ReactCurrentDispatcher$1 = {
        current: null
      };
      var ReactCurrentCache = {
        current: null
      };
      var ReactCurrentBatchConfig = {
        transition: null
      };
      var ReactCurrentActQueue = {
        current: null,
        isBatchingLegacy: false,
        didScheduleLegacyUpdate: false,
        didUsePromise: false
      };
      var ReactCurrentOwner = {
        current: null
      };
      var ReactDebugCurrentFrame$1 = {};
      var currentExtraStackFrame = null;
      function setExtraStackFrame(stack) {
        {
          currentExtraStackFrame = stack;
        }
      }
      {
        ReactDebugCurrentFrame$1.setExtraStackFrame = function(stack) {
          {
            currentExtraStackFrame = stack;
          }
        };
        ReactDebugCurrentFrame$1.getCurrentStack = null;
        ReactDebugCurrentFrame$1.getStackAddendum = function() {
          var stack = "";
          if (currentExtraStackFrame) {
            stack += currentExtraStackFrame;
          }
          var impl = ReactDebugCurrentFrame$1.getCurrentStack;
          if (impl) {
            stack += impl() || "";
          }
          return stack;
        };
      }
      var enableScopeAPI = false;
      var enableTransitionTracing = false;
      var enableLegacyHidden = false;
      var enableDebugTracing = false;
      var ContextRegistry$1 = {};
      var ReactSharedInternals = {
        ReactCurrentDispatcher: ReactCurrentDispatcher$1,
        ReactCurrentCache,
        ReactCurrentBatchConfig,
        ReactCurrentOwner
      };
      {
        ReactSharedInternals.ReactDebugCurrentFrame = ReactDebugCurrentFrame$1;
        ReactSharedInternals.ReactCurrentActQueue = ReactCurrentActQueue;
      }
      {
        ReactSharedInternals.ContextRegistry = ContextRegistry$1;
      }
      function warn(format) {
        {
          {
            for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1;_key < _len; _key++) {
              args[_key - 1] = arguments[_key];
            }
            printWarning("warn", format, args);
          }
        }
      }
      function error(format) {
        {
          {
            for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1;_key2 < _len2; _key2++) {
              args[_key2 - 1] = arguments[_key2];
            }
            printWarning("error", format, args);
          }
        }
      }
      function printWarning(level, format, args) {
        {
          var ReactDebugCurrentFrame2 = ReactSharedInternals.ReactDebugCurrentFrame;
          var stack = ReactDebugCurrentFrame2.getStackAddendum();
          if (stack !== "") {
            format += "%s";
            args = args.concat([stack]);
          }
          var argsWithFormat = args.map(function(item) {
            return String(item);
          });
          argsWithFormat.unshift("Warning: " + format);
          Function.prototype.apply.call(console[level], console, argsWithFormat);
        }
      }
      var didWarnStateUpdateForUnmountedComponent = {};
      function warnNoop(publicInstance, callerName) {
        {
          var _constructor = publicInstance.constructor;
          var componentName = _constructor && (_constructor.displayName || _constructor.name) || "ReactClass";
          var warningKey = componentName + "." + callerName;
          if (didWarnStateUpdateForUnmountedComponent[warningKey]) {
            return;
          }
          error("Can't call %s on a component that is not yet mounted. " + "This is a no-op, but it might indicate a bug in your application. " + "Instead, assign to `this.state` directly or define a `state = {};` " + "class property with the desired state in the %s component.", callerName, componentName);
          didWarnStateUpdateForUnmountedComponent[warningKey] = true;
        }
      }
      var ReactNoopUpdateQueue = {
        isMounted: function(publicInstance) {
          return false;
        },
        enqueueForceUpdate: function(publicInstance, callback, callerName) {
          warnNoop(publicInstance, "forceUpdate");
        },
        enqueueReplaceState: function(publicInstance, completeState, callback, callerName) {
          warnNoop(publicInstance, "replaceState");
        },
        enqueueSetState: function(publicInstance, partialState, callback, callerName) {
          warnNoop(publicInstance, "setState");
        }
      };
      var assign = Object.assign;
      var emptyObject = {};
      {
        Object.freeze(emptyObject);
      }
      function Component(props, context, updater) {
        this.props = props;
        this.context = context;
        this.refs = emptyObject;
        this.updater = updater || ReactNoopUpdateQueue;
      }
      Component.prototype.isReactComponent = {};
      Component.prototype.setState = function(partialState, callback) {
        if (typeof partialState !== "object" && typeof partialState !== "function" && partialState != null) {
          throw new Error("setState(...): takes an object of state variables to update or a " + "function which returns an object of state variables.");
        }
        this.updater.enqueueSetState(this, partialState, callback, "setState");
      };
      Component.prototype.forceUpdate = function(callback) {
        this.updater.enqueueForceUpdate(this, callback, "forceUpdate");
      };
      {
        var deprecatedAPIs = {
          isMounted: ["isMounted", "Instead, make sure to clean up subscriptions and pending requests in " + "componentWillUnmount to prevent memory leaks."],
          replaceState: ["replaceState", "Refactor your code to use setState instead (see " + "https://github.com/facebook/react/issues/3236)."]
        };
        var defineDeprecationWarning = function(methodName, info) {
          Object.defineProperty(Component.prototype, methodName, {
            get: function() {
              warn("%s(...) is deprecated in plain JavaScript React classes. %s", info[0], info[1]);
              return;
            }
          });
        };
        for (var fnName in deprecatedAPIs) {
          if (deprecatedAPIs.hasOwnProperty(fnName)) {
            defineDeprecationWarning(fnName, deprecatedAPIs[fnName]);
          }
        }
      }
      function ComponentDummy() {}
      ComponentDummy.prototype = Component.prototype;
      function PureComponent(props, context, updater) {
        this.props = props;
        this.context = context;
        this.refs = emptyObject;
        this.updater = updater || ReactNoopUpdateQueue;
      }
      var pureComponentPrototype = PureComponent.prototype = new ComponentDummy;
      pureComponentPrototype.constructor = PureComponent;
      assign(pureComponentPrototype, Component.prototype);
      pureComponentPrototype.isPureReactComponent = true;
      function createRef() {
        var refObject = {
          current: null
        };
        {
          Object.seal(refObject);
        }
        return refObject;
      }
      var isArrayImpl = Array.isArray;
      function isArray(a) {
        return isArrayImpl(a);
      }
      function typeName(value) {
        {
          var hasToStringTag = typeof Symbol === "function" && Symbol.toStringTag;
          var type = hasToStringTag && value[Symbol.toStringTag] || value.constructor.name || "Object";
          return type;
        }
      }
      function willCoercionThrow(value) {
        {
          try {
            testStringCoercion(value);
            return false;
          } catch (e) {
            return true;
          }
        }
      }
      function testStringCoercion(value) {
        return "" + value;
      }
      function checkKeyStringCoercion(value) {
        {
          if (willCoercionThrow(value)) {
            error("The provided key is an unsupported type %s." + " This value must be coerced to a string before before using it here.", typeName(value));
            return testStringCoercion(value);
          }
        }
      }
      function getWrappedName(outerType, innerType, wrapperName) {
        var displayName = outerType.displayName;
        if (displayName) {
          return displayName;
        }
        var functionName = innerType.displayName || innerType.name || "";
        return functionName !== "" ? wrapperName + "(" + functionName + ")" : wrapperName;
      }
      function getContextName(type) {
        return type.displayName || "Context";
      }
      function getComponentNameFromType(type) {
        if (type == null) {
          return null;
        }
        {
          if (typeof type.tag === "number") {
            error("Received an unexpected object in getComponentNameFromType(). " + "This is likely a bug in React. Please file an issue.");
          }
        }
        if (typeof type === "function") {
          return type.displayName || type.name || null;
        }
        if (typeof type === "string") {
          return type;
        }
        switch (type) {
          case REACT_FRAGMENT_TYPE:
            return "Fragment";
          case REACT_PORTAL_TYPE:
            return "Portal";
          case REACT_PROFILER_TYPE:
            return "Profiler";
          case REACT_STRICT_MODE_TYPE:
            return "StrictMode";
          case REACT_SUSPENSE_TYPE:
            return "Suspense";
          case REACT_SUSPENSE_LIST_TYPE:
            return "SuspenseList";
          case REACT_CACHE_TYPE: {
            return "Cache";
          }
        }
        if (typeof type === "object") {
          switch (type.$$typeof) {
            case REACT_CONTEXT_TYPE:
              var context = type;
              return getContextName(context) + ".Consumer";
            case REACT_PROVIDER_TYPE:
              var provider = type;
              return getContextName(provider._context) + ".Provider";
            case REACT_FORWARD_REF_TYPE2:
              return getWrappedName(type, type.render, "ForwardRef");
            case REACT_MEMO_TYPE:
              var outerName = type.displayName || null;
              if (outerName !== null) {
                return outerName;
              }
              return getComponentNameFromType(type.type) || "Memo";
            case REACT_LAZY_TYPE: {
              var lazyComponent = type;
              var payload = lazyComponent._payload;
              var init = lazyComponent._init;
              try {
                return getComponentNameFromType(init(payload));
              } catch (x) {
                return null;
              }
            }
            case REACT_SERVER_CONTEXT_TYPE: {
              var context2 = type;
              return (context2.displayName || context2._globalName) + ".Provider";
            }
          }
        }
        return null;
      }
      var hasOwnProperty = Object.prototype.hasOwnProperty;
      var RESERVED_PROPS = {
        key: true,
        ref: true,
        __self: true,
        __source: true
      };
      var specialPropKeyWarningShown, specialPropRefWarningShown, didWarnAboutStringRefs;
      {
        didWarnAboutStringRefs = {};
      }
      function hasValidRef(config) {
        {
          if (hasOwnProperty.call(config, "ref")) {
            var getter = Object.getOwnPropertyDescriptor(config, "ref").get;
            if (getter && getter.isReactWarning) {
              return false;
            }
          }
        }
        return config.ref !== undefined;
      }
      function hasValidKey(config) {
        {
          if (hasOwnProperty.call(config, "key")) {
            var getter = Object.getOwnPropertyDescriptor(config, "key").get;
            if (getter && getter.isReactWarning) {
              return false;
            }
          }
        }
        return config.key !== undefined;
      }
      function defineKeyPropWarningGetter(props, displayName) {
        var warnAboutAccessingKey = function() {
          {
            if (!specialPropKeyWarningShown) {
              specialPropKeyWarningShown = true;
              error("%s: `key` is not a prop. Trying to access it will result " + "in `undefined` being returned. If you need to access the same " + "value within the child component, you should pass it as a different " + "prop. (https://reactjs.org/link/special-props)", displayName);
            }
          }
        };
        warnAboutAccessingKey.isReactWarning = true;
        Object.defineProperty(props, "key", {
          get: warnAboutAccessingKey,
          configurable: true
        });
      }
      function defineRefPropWarningGetter(props, displayName) {
        var warnAboutAccessingRef = function() {
          {
            if (!specialPropRefWarningShown) {
              specialPropRefWarningShown = true;
              error("%s: `ref` is not a prop. Trying to access it will result " + "in `undefined` being returned. If you need to access the same " + "value within the child component, you should pass it as a different " + "prop. (https://reactjs.org/link/special-props)", displayName);
            }
          }
        };
        warnAboutAccessingRef.isReactWarning = true;
        Object.defineProperty(props, "ref", {
          get: warnAboutAccessingRef,
          configurable: true
        });
      }
      function warnIfStringRefCannotBeAutoConverted(config) {
        {
          if (typeof config.ref === "string" && ReactCurrentOwner.current && config.__self && ReactCurrentOwner.current.stateNode !== config.__self) {
            var componentName = getComponentNameFromType(ReactCurrentOwner.current.type);
            if (!didWarnAboutStringRefs[componentName]) {
              error('Component "%s" contains the string ref "%s". ' + "Support for string refs will be removed in a future major release. " + "This case cannot be automatically converted to an arrow function. " + "We ask you to manually fix this case by using useRef() or createRef() instead. " + "Learn more about using refs safely here: " + "https://reactjs.org/link/strict-mode-string-ref", componentName, config.ref);
              didWarnAboutStringRefs[componentName] = true;
            }
          }
        }
      }
      function ReactElement(type, key, ref, self, source, owner, props) {
        var element = {
          $$typeof: REACT_ELEMENT_TYPE,
          type,
          key,
          ref,
          props,
          _owner: owner
        };
        {
          element._store = {};
          Object.defineProperty(element._store, "validated", {
            configurable: false,
            enumerable: false,
            writable: true,
            value: false
          });
          Object.defineProperty(element, "_self", {
            configurable: false,
            enumerable: false,
            writable: false,
            value: self
          });
          Object.defineProperty(element, "_source", {
            configurable: false,
            enumerable: false,
            writable: false,
            value: source
          });
          if (Object.freeze) {
            Object.freeze(element.props);
            Object.freeze(element);
          }
        }
        return element;
      }
      function createElement$1(type, config, children) {
        var propName;
        var props = {};
        var key = null;
        var ref = null;
        var self = null;
        var source = null;
        if (config != null) {
          if (hasValidRef(config)) {
            ref = config.ref;
            {
              warnIfStringRefCannotBeAutoConverted(config);
            }
          }
          if (hasValidKey(config)) {
            {
              checkKeyStringCoercion(config.key);
            }
            key = "" + config.key;
          }
          self = config.__self === undefined ? null : config.__self;
          source = config.__source === undefined ? null : config.__source;
          for (propName in config) {
            if (hasOwnProperty.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
              props[propName] = config[propName];
            }
          }
        }
        var childrenLength = arguments.length - 2;
        if (childrenLength === 1) {
          props.children = children;
        } else if (childrenLength > 1) {
          var childArray = Array(childrenLength);
          for (var i = 0;i < childrenLength; i++) {
            childArray[i] = arguments[i + 2];
          }
          {
            if (Object.freeze) {
              Object.freeze(childArray);
            }
          }
          props.children = childArray;
        }
        if (type && type.defaultProps) {
          var defaultProps = type.defaultProps;
          for (propName in defaultProps) {
            if (props[propName] === undefined) {
              props[propName] = defaultProps[propName];
            }
          }
        }
        {
          if (key || ref) {
            var displayName = typeof type === "function" ? type.displayName || type.name || "Unknown" : type;
            if (key) {
              defineKeyPropWarningGetter(props, displayName);
            }
            if (ref) {
              defineRefPropWarningGetter(props, displayName);
            }
          }
        }
        return ReactElement(type, key, ref, self, source, ReactCurrentOwner.current, props);
      }
      function cloneAndReplaceKey(oldElement, newKey) {
        var newElement = ReactElement(oldElement.type, newKey, oldElement.ref, oldElement._self, oldElement._source, oldElement._owner, oldElement.props);
        return newElement;
      }
      function cloneElement$1(element, config, children) {
        if (element === null || element === undefined) {
          throw new Error("React.cloneElement(...): The argument must be a React element, but you passed " + element + ".");
        }
        var propName;
        var props = assign({}, element.props);
        var key = element.key;
        var ref = element.ref;
        var self = element._self;
        var source = element._source;
        var owner = element._owner;
        if (config != null) {
          if (hasValidRef(config)) {
            ref = config.ref;
            owner = ReactCurrentOwner.current;
          }
          if (hasValidKey(config)) {
            {
              checkKeyStringCoercion(config.key);
            }
            key = "" + config.key;
          }
          var defaultProps;
          if (element.type && element.type.defaultProps) {
            defaultProps = element.type.defaultProps;
          }
          for (propName in config) {
            if (hasOwnProperty.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
              if (config[propName] === undefined && defaultProps !== undefined) {
                props[propName] = defaultProps[propName];
              } else {
                props[propName] = config[propName];
              }
            }
          }
        }
        var childrenLength = arguments.length - 2;
        if (childrenLength === 1) {
          props.children = children;
        } else if (childrenLength > 1) {
          var childArray = Array(childrenLength);
          for (var i = 0;i < childrenLength; i++) {
            childArray[i] = arguments[i + 2];
          }
          props.children = childArray;
        }
        return ReactElement(element.type, key, ref, self, source, owner, props);
      }
      function isValidElement(object) {
        return typeof object === "object" && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
      }
      var SEPARATOR = ".";
      var SUBSEPARATOR = ":";
      function escape(key) {
        var escapeRegex = /[=:]/g;
        var escaperLookup = {
          "=": "=0",
          ":": "=2"
        };
        var escapedString = key.replace(escapeRegex, function(match) {
          return escaperLookup[match];
        });
        return "$" + escapedString;
      }
      var didWarnAboutMaps = false;
      var userProvidedKeyEscapeRegex = /\/+/g;
      function escapeUserProvidedKey(text) {
        return text.replace(userProvidedKeyEscapeRegex, "$&/");
      }
      function getElementKey(element, index) {
        if (typeof element === "object" && element !== null && element.key != null) {
          {
            checkKeyStringCoercion(element.key);
          }
          return escape("" + element.key);
        }
        return index.toString(36);
      }
      function mapIntoArray(children, array, escapedPrefix, nameSoFar, callback) {
        var type = typeof children;
        if (type === "undefined" || type === "boolean") {
          children = null;
        }
        var invokeCallback = false;
        if (children === null) {
          invokeCallback = true;
        } else {
          switch (type) {
            case "string":
            case "number":
              invokeCallback = true;
              break;
            case "object":
              switch (children.$$typeof) {
                case REACT_ELEMENT_TYPE:
                case REACT_PORTAL_TYPE:
                  invokeCallback = true;
              }
          }
        }
        if (invokeCallback) {
          var _child = children;
          var mappedChild = callback(_child);
          var childKey = nameSoFar === "" ? SEPARATOR + getElementKey(_child, 0) : nameSoFar;
          if (isArray(mappedChild)) {
            var escapedChildKey = "";
            if (childKey != null) {
              escapedChildKey = escapeUserProvidedKey(childKey) + "/";
            }
            mapIntoArray(mappedChild, array, escapedChildKey, "", function(c) {
              return c;
            });
          } else if (mappedChild != null) {
            if (isValidElement(mappedChild)) {
              {
                if (mappedChild.key && (!_child || _child.key !== mappedChild.key)) {
                  checkKeyStringCoercion(mappedChild.key);
                }
              }
              mappedChild = cloneAndReplaceKey(mappedChild, escapedPrefix + (mappedChild.key && (!_child || _child.key !== mappedChild.key) ? escapeUserProvidedKey("" + mappedChild.key) + "/" : "") + childKey);
            }
            array.push(mappedChild);
          }
          return 1;
        }
        var child;
        var nextName;
        var subtreeCount = 0;
        var nextNamePrefix = nameSoFar === "" ? SEPARATOR : nameSoFar + SUBSEPARATOR;
        if (isArray(children)) {
          for (var i = 0;i < children.length; i++) {
            child = children[i];
            nextName = nextNamePrefix + getElementKey(child, i);
            subtreeCount += mapIntoArray(child, array, escapedPrefix, nextName, callback);
          }
        } else {
          var iteratorFn = getIteratorFn(children);
          if (typeof iteratorFn === "function") {
            var iterableChildren = children;
            {
              if (iteratorFn === iterableChildren.entries) {
                if (!didWarnAboutMaps) {
                  warn("Using Maps as children is not supported. " + "Use an array of keyed ReactElements instead.");
                }
                didWarnAboutMaps = true;
              }
            }
            var iterator = iteratorFn.call(iterableChildren);
            var step;
            var ii = 0;
            while (!(step = iterator.next()).done) {
              child = step.value;
              nextName = nextNamePrefix + getElementKey(child, ii++);
              subtreeCount += mapIntoArray(child, array, escapedPrefix, nextName, callback);
            }
          } else if (type === "object") {
            var childrenString = String(children);
            throw new Error("Objects are not valid as a React child (found: " + (childrenString === "[object Object]" ? "object with keys {" + Object.keys(children).join(", ") + "}" : childrenString) + "). " + "If you meant to render a collection of children, use an array " + "instead.");
          }
        }
        return subtreeCount;
      }
      function mapChildren(children, func, context) {
        if (children == null) {
          return children;
        }
        var result = [];
        var count = 0;
        mapIntoArray(children, result, "", "", function(child) {
          return func.call(context, child, count++);
        });
        return result;
      }
      function countChildren(children) {
        var n = 0;
        mapChildren(children, function() {
          n++;
        });
        return n;
      }
      function forEachChildren(children, forEachFunc, forEachContext) {
        mapChildren(children, function() {
          forEachFunc.apply(this, arguments);
        }, forEachContext);
      }
      function toArray(children) {
        return mapChildren(children, function(child) {
          return child;
        }) || [];
      }
      function onlyChild(children) {
        if (!isValidElement(children)) {
          throw new Error("React.Children.only expected to receive a single React element child.");
        }
        return children;
      }
      function createContext(defaultValue) {
        var context = {
          $$typeof: REACT_CONTEXT_TYPE,
          _currentValue: defaultValue,
          _currentValue2: defaultValue,
          _threadCount: 0,
          Provider: null,
          Consumer: null,
          _defaultValue: null,
          _globalName: null
        };
        context.Provider = {
          $$typeof: REACT_PROVIDER_TYPE,
          _context: context
        };
        var hasWarnedAboutUsingNestedContextConsumers = false;
        var hasWarnedAboutUsingConsumerProvider = false;
        var hasWarnedAboutDisplayNameOnConsumer = false;
        {
          var Consumer = {
            $$typeof: REACT_CONTEXT_TYPE,
            _context: context
          };
          Object.defineProperties(Consumer, {
            Provider: {
              get: function() {
                if (!hasWarnedAboutUsingConsumerProvider) {
                  hasWarnedAboutUsingConsumerProvider = true;
                  error("Rendering <Context.Consumer.Provider> is not supported and will be removed in " + "a future major release. Did you mean to render <Context.Provider> instead?");
                }
                return context.Provider;
              },
              set: function(_Provider) {
                context.Provider = _Provider;
              }
            },
            _currentValue: {
              get: function() {
                return context._currentValue;
              },
              set: function(_currentValue) {
                context._currentValue = _currentValue;
              }
            },
            _currentValue2: {
              get: function() {
                return context._currentValue2;
              },
              set: function(_currentValue2) {
                context._currentValue2 = _currentValue2;
              }
            },
            _threadCount: {
              get: function() {
                return context._threadCount;
              },
              set: function(_threadCount) {
                context._threadCount = _threadCount;
              }
            },
            Consumer: {
              get: function() {
                if (!hasWarnedAboutUsingNestedContextConsumers) {
                  hasWarnedAboutUsingNestedContextConsumers = true;
                  error("Rendering <Context.Consumer.Consumer> is not supported and will be removed in " + "a future major release. Did you mean to render <Context.Consumer> instead?");
                }
                return context.Consumer;
              }
            },
            displayName: {
              get: function() {
                return context.displayName;
              },
              set: function(displayName) {
                if (!hasWarnedAboutDisplayNameOnConsumer) {
                  warn("Setting `displayName` on Context.Consumer has no effect. " + "You should set it directly on the context with Context.displayName = '%s'.", displayName);
                  hasWarnedAboutDisplayNameOnConsumer = true;
                }
              }
            }
          });
          context.Consumer = Consumer;
        }
        {
          context._currentRenderer = null;
          context._currentRenderer2 = null;
        }
        return context;
      }
      var Uninitialized = -1;
      var Pending = 0;
      var Resolved = 1;
      var Rejected = 2;
      function lazyInitializer(payload) {
        if (payload._status === Uninitialized) {
          var ctor = payload._result;
          var thenable = ctor();
          thenable.then(function(moduleObject2) {
            if (payload._status === Pending || payload._status === Uninitialized) {
              var resolved = payload;
              resolved._status = Resolved;
              resolved._result = moduleObject2;
            }
          }, function(error2) {
            if (payload._status === Pending || payload._status === Uninitialized) {
              var rejected = payload;
              rejected._status = Rejected;
              rejected._result = error2;
            }
          });
          if (payload._status === Uninitialized) {
            var pending = payload;
            pending._status = Pending;
            pending._result = thenable;
          }
        }
        if (payload._status === Resolved) {
          var moduleObject = payload._result;
          {
            if (moduleObject === undefined) {
              error("lazy: Expected the result of a dynamic imp" + "ort() call. " + `Instead received: %s

Your code should look like: 
  ` + "const MyComponent = lazy(() => imp" + `ort('./MyComponent'))

` + "Did you accidentally put curly braces around the import?", moduleObject);
            }
          }
          {
            if (!("default" in moduleObject)) {
              error("lazy: Expected the result of a dynamic imp" + "ort() call. " + `Instead received: %s

Your code should look like: 
  ` + "const MyComponent = lazy(() => imp" + "ort('./MyComponent'))", moduleObject);
            }
          }
          return moduleObject.default;
        } else {
          throw payload._result;
        }
      }
      function lazy(ctor) {
        var payload = {
          _status: Uninitialized,
          _result: ctor
        };
        var lazyType = {
          $$typeof: REACT_LAZY_TYPE,
          _payload: payload,
          _init: lazyInitializer
        };
        {
          var defaultProps;
          var propTypes;
          Object.defineProperties(lazyType, {
            defaultProps: {
              configurable: true,
              get: function() {
                return defaultProps;
              },
              set: function(newDefaultProps) {
                error("React.lazy(...): It is not supported to assign `defaultProps` to " + "a lazy component import. Either specify them where the component " + "is defined, or create a wrapping component around it.");
                defaultProps = newDefaultProps;
                Object.defineProperty(lazyType, "defaultProps", {
                  enumerable: true
                });
              }
            },
            propTypes: {
              configurable: true,
              get: function() {
                return propTypes;
              },
              set: function(newPropTypes) {
                error("React.lazy(...): It is not supported to assign `propTypes` to " + "a lazy component import. Either specify them where the component " + "is defined, or create a wrapping component around it.");
                propTypes = newPropTypes;
                Object.defineProperty(lazyType, "propTypes", {
                  enumerable: true
                });
              }
            }
          });
        }
        return lazyType;
      }
      function forwardRef(render) {
        {
          if (render != null && render.$$typeof === REACT_MEMO_TYPE) {
            error("forwardRef requires a render function but received a `memo` " + "component. Instead of forwardRef(memo(...)), use " + "memo(forwardRef(...)).");
          } else if (typeof render !== "function") {
            error("forwardRef requires a render function but was given %s.", render === null ? "null" : typeof render);
          } else {
            if (render.length !== 0 && render.length !== 2) {
              error("forwardRef render functions accept exactly two parameters: props and ref. %s", render.length === 1 ? "Did you forget to use the ref parameter?" : "Any additional parameter will be undefined.");
            }
          }
          if (render != null) {
            if (render.defaultProps != null || render.propTypes != null) {
              error("forwardRef render functions do not support propTypes or defaultProps. " + "Did you accidentally pass a React component?");
            }
          }
        }
        var elementType = {
          $$typeof: REACT_FORWARD_REF_TYPE2,
          render
        };
        {
          var ownName;
          Object.defineProperty(elementType, "displayName", {
            enumerable: false,
            configurable: true,
            get: function() {
              return ownName;
            },
            set: function(name) {
              ownName = name;
              if (!render.name && !render.displayName) {
                render.displayName = name;
              }
            }
          });
        }
        return elementType;
      }
      var REACT_CLIENT_REFERENCE$1 = Symbol.for("react.client.reference");
      function isValidElementType(type) {
        if (typeof type === "string" || typeof type === "function") {
          return true;
        }
        if (type === REACT_FRAGMENT_TYPE || type === REACT_PROFILER_TYPE || enableDebugTracing || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || enableLegacyHidden || type === REACT_OFFSCREEN_TYPE || enableScopeAPI || type === REACT_CACHE_TYPE || enableTransitionTracing) {
          return true;
        }
        if (typeof type === "object" && type !== null) {
          if (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE2 || type.$$typeof === REACT_CLIENT_REFERENCE$1 || type.getModuleId !== undefined) {
            return true;
          }
        }
        return false;
      }
      function memo(type, compare) {
        {
          if (!isValidElementType(type)) {
            error("memo: The first argument must be a component. Instead " + "received: %s", type === null ? "null" : typeof type);
          }
        }
        var elementType = {
          $$typeof: REACT_MEMO_TYPE,
          type,
          compare: compare === undefined ? null : compare
        };
        {
          var ownName;
          Object.defineProperty(elementType, "displayName", {
            enumerable: false,
            configurable: true,
            get: function() {
              return ownName;
            },
            set: function(name) {
              ownName = name;
              if (!type.name && !type.displayName) {
                type.displayName = name;
              }
            }
          });
        }
        return elementType;
      }
      var UNTERMINATED = 0;
      var TERMINATED = 1;
      var ERRORED = 2;
      function createCacheRoot() {
        return new WeakMap;
      }
      function createCacheNode() {
        return {
          s: UNTERMINATED,
          v: undefined,
          o: null,
          p: null
        };
      }
      function cache(fn) {
        return function() {
          var dispatcher = ReactCurrentCache.current;
          if (!dispatcher) {
            return fn.apply(null, arguments);
          }
          var fnMap = dispatcher.getCacheForType(createCacheRoot);
          var fnNode = fnMap.get(fn);
          var cacheNode;
          if (fnNode === undefined) {
            cacheNode = createCacheNode();
            fnMap.set(fn, cacheNode);
          } else {
            cacheNode = fnNode;
          }
          for (var i = 0, l = arguments.length;i < l; i++) {
            var arg = arguments[i];
            if (typeof arg === "function" || typeof arg === "object" && arg !== null) {
              var objectCache = cacheNode.o;
              if (objectCache === null) {
                cacheNode.o = objectCache = new WeakMap;
              }
              var objectNode = objectCache.get(arg);
              if (objectNode === undefined) {
                cacheNode = createCacheNode();
                objectCache.set(arg, cacheNode);
              } else {
                cacheNode = objectNode;
              }
            } else {
              var primitiveCache = cacheNode.p;
              if (primitiveCache === null) {
                cacheNode.p = primitiveCache = new Map;
              }
              var primitiveNode = primitiveCache.get(arg);
              if (primitiveNode === undefined) {
                cacheNode = createCacheNode();
                primitiveCache.set(arg, cacheNode);
              } else {
                cacheNode = primitiveNode;
              }
            }
          }
          if (cacheNode.s === TERMINATED) {
            return cacheNode.v;
          }
          if (cacheNode.s === ERRORED) {
            throw cacheNode.v;
          }
          try {
            var result = fn.apply(null, arguments);
            var terminatedNode = cacheNode;
            terminatedNode.s = TERMINATED;
            terminatedNode.v = result;
            return result;
          } catch (error2) {
            var erroredNode = cacheNode;
            erroredNode.s = ERRORED;
            erroredNode.v = error2;
            throw error2;
          }
        };
      }
      function resolveDispatcher() {
        var dispatcher = ReactCurrentDispatcher$1.current;
        {
          if (dispatcher === null) {
            error("Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for" + ` one of the following reasons:
` + `1. You might have mismatching versions of React and the renderer (such as React DOM)
` + `2. You might be breaking the Rules of Hooks
` + `3. You might have more than one copy of React in the same app
` + "See https://reactjs.org/link/invalid-hook-call for tips about how to debug and fix this problem.");
          }
        }
        return dispatcher;
      }
      function getCacheSignal() {
        var dispatcher = ReactCurrentCache.current;
        if (!dispatcher) {
          var controller = new AbortController;
          var reason = new Error("This CacheSignal was requested outside React which means that it is " + "immediately aborted.");
          controller.abort(reason);
          return controller.signal;
        }
        return dispatcher.getCacheSignal();
      }
      function getCacheForType(resourceType) {
        var dispatcher = ReactCurrentCache.current;
        if (!dispatcher) {
          return resourceType();
        }
        return dispatcher.getCacheForType(resourceType);
      }
      function useContext(Context) {
        var dispatcher = resolveDispatcher();
        {
          if (Context._context !== undefined) {
            var realContext = Context._context;
            if (realContext.Consumer === Context) {
              error("Calling useContext(Context.Consumer) is not supported, may cause bugs, and will be " + "removed in a future major release. Did you mean to call useContext(Context) instead?");
            } else if (realContext.Provider === Context) {
              error("Calling useContext(Context.Provider) is not supported. " + "Did you mean to call useContext(Context) instead?");
            }
          }
        }
        return dispatcher.useContext(Context);
      }
      function useState(initialState) {
        var dispatcher = resolveDispatcher();
        return dispatcher.useState(initialState);
      }
      function useReducer(reducer, initialArg, init) {
        var dispatcher = resolveDispatcher();
        return dispatcher.useReducer(reducer, initialArg, init);
      }
      function useRef(initialValue) {
        var dispatcher = resolveDispatcher();
        return dispatcher.useRef(initialValue);
      }
      function useEffect(create, deps) {
        var dispatcher = resolveDispatcher();
        return dispatcher.useEffect(create, deps);
      }
      function useInsertionEffect(create, deps) {
        var dispatcher = resolveDispatcher();
        return dispatcher.useInsertionEffect(create, deps);
      }
      function useLayoutEffect(create, deps) {
        var dispatcher = resolveDispatcher();
        return dispatcher.useLayoutEffect(create, deps);
      }
      function useCallback(callback, deps) {
        var dispatcher = resolveDispatcher();
        return dispatcher.useCallback(callback, deps);
      }
      function useMemo(create, deps) {
        var dispatcher = resolveDispatcher();
        return dispatcher.useMemo(create, deps);
      }
      function useImperativeHandle(ref, create, deps) {
        var dispatcher = resolveDispatcher();
        return dispatcher.useImperativeHandle(ref, create, deps);
      }
      function useDebugValue(value, formatterFn) {
        {
          var dispatcher = resolveDispatcher();
          return dispatcher.useDebugValue(value, formatterFn);
        }
      }
      function useTransition() {
        var dispatcher = resolveDispatcher();
        return dispatcher.useTransition();
      }
      function useDeferredValue(value) {
        var dispatcher = resolveDispatcher();
        return dispatcher.useDeferredValue(value);
      }
      function useId() {
        var dispatcher = resolveDispatcher();
        return dispatcher.useId();
      }
      function useSyncExternalStore(subscribe, getSnapshot, getServerSnapshot) {
        var dispatcher = resolveDispatcher();
        return dispatcher.useSyncExternalStore(subscribe, getSnapshot, getServerSnapshot);
      }
      function useCacheRefresh() {
        var dispatcher = resolveDispatcher();
        return dispatcher.useCacheRefresh();
      }
      function use(usable) {
        var dispatcher = resolveDispatcher();
        return dispatcher.use(usable);
      }
      function useMemoCache(size) {
        var dispatcher = resolveDispatcher();
        return dispatcher.useMemoCache(size);
      }
      function useEffectEvent(callback) {
        var dispatcher = resolveDispatcher();
        return dispatcher.useEffectEvent(callback);
      }
      function useOptimistic(passthrough, reducer) {
        var dispatcher = resolveDispatcher();
        return dispatcher.useOptimistic(passthrough, reducer);
      }
      var disabledDepth = 0;
      var prevLog;
      var prevInfo;
      var prevWarn;
      var prevError;
      var prevGroup;
      var prevGroupCollapsed;
      var prevGroupEnd;
      function disabledLog() {}
      disabledLog.__reactDisabledLog = true;
      function disableLogs() {
        {
          if (disabledDepth === 0) {
            prevLog = console.log;
            prevInfo = console.info;
            prevWarn = console.warn;
            prevError = console.error;
            prevGroup = console.group;
            prevGroupCollapsed = console.groupCollapsed;
            prevGroupEnd = console.groupEnd;
            var props = {
              configurable: true,
              enumerable: true,
              value: disabledLog,
              writable: true
            };
            Object.defineProperties(console, {
              info: props,
              log: props,
              warn: props,
              error: props,
              group: props,
              groupCollapsed: props,
              groupEnd: props
            });
          }
          disabledDepth++;
        }
      }
      function reenableLogs() {
        {
          disabledDepth--;
          if (disabledDepth === 0) {
            var props = {
              configurable: true,
              enumerable: true,
              writable: true
            };
            Object.defineProperties(console, {
              log: assign({}, props, {
                value: prevLog
              }),
              info: assign({}, props, {
                value: prevInfo
              }),
              warn: assign({}, props, {
                value: prevWarn
              }),
              error: assign({}, props, {
                value: prevError
              }),
              group: assign({}, props, {
                value: prevGroup
              }),
              groupCollapsed: assign({}, props, {
                value: prevGroupCollapsed
              }),
              groupEnd: assign({}, props, {
                value: prevGroupEnd
              })
            });
          }
          if (disabledDepth < 0) {
            error("disabledDepth fell below zero. " + "This is a bug in React. Please file an issue.");
          }
        }
      }
      var ReactCurrentDispatcher = ReactSharedInternals.ReactCurrentDispatcher;
      var prefix;
      function describeBuiltInComponentFrame(name, source, ownerFn) {
        {
          if (prefix === undefined) {
            try {
              throw Error();
            } catch (x) {
              var match = x.stack.trim().match(/\n( *(at )?)/);
              prefix = match && match[1] || "";
            }
          }
          return `
` + prefix + name;
        }
      }
      var reentry = false;
      var componentFrameCache;
      {
        var PossiblyWeakMap = typeof WeakMap === "function" ? WeakMap : Map;
        componentFrameCache = new PossiblyWeakMap;
      }
      function describeNativeComponentFrame(fn, construct) {
        if (!fn || reentry) {
          return "";
        }
        {
          var frame = componentFrameCache.get(fn);
          if (frame !== undefined) {
            return frame;
          }
        }
        var control;
        reentry = true;
        var previousPrepareStackTrace = Error.prepareStackTrace;
        Error.prepareStackTrace = undefined;
        var previousDispatcher;
        {
          previousDispatcher = ReactCurrentDispatcher.current;
          ReactCurrentDispatcher.current = null;
          disableLogs();
        }
        try {
          if (construct) {
            var Fake = function() {
              throw Error();
            };
            Object.defineProperty(Fake.prototype, "props", {
              set: function() {
                throw Error();
              }
            });
            if (typeof Reflect === "object" && Reflect.construct) {
              try {
                Reflect.construct(Fake, []);
              } catch (x) {
                control = x;
              }
              Reflect.construct(fn, [], Fake);
            } else {
              try {
                Fake.call();
              } catch (x) {
                control = x;
              }
              fn.call(Fake.prototype);
            }
          } else {
            try {
              throw Error();
            } catch (x) {
              control = x;
            }
            fn();
          }
        } catch (sample) {
          if (sample && control && typeof sample.stack === "string") {
            var sampleLines = sample.stack.split(`
`);
            var controlLines = control.stack.split(`
`);
            var s = sampleLines.length - 1;
            var c = controlLines.length - 1;
            while (s >= 1 && c >= 0 && sampleLines[s] !== controlLines[c]) {
              c--;
            }
            for (;s >= 1 && c >= 0; s--, c--) {
              if (sampleLines[s] !== controlLines[c]) {
                if (s !== 1 || c !== 1) {
                  do {
                    s--;
                    c--;
                    if (c < 0 || sampleLines[s] !== controlLines[c]) {
                      var _frame = `
` + sampleLines[s].replace(" at new ", " at ");
                      if (fn.displayName && _frame.includes("<anonymous>")) {
                        _frame = _frame.replace("<anonymous>", fn.displayName);
                      }
                      {
                        if (typeof fn === "function") {
                          componentFrameCache.set(fn, _frame);
                        }
                      }
                      return _frame;
                    }
                  } while (s >= 1 && c >= 0);
                }
                break;
              }
            }
          }
        } finally {
          reentry = false;
          {
            ReactCurrentDispatcher.current = previousDispatcher;
            reenableLogs();
          }
          Error.prepareStackTrace = previousPrepareStackTrace;
        }
        var name = fn ? fn.displayName || fn.name : "";
        var syntheticFrame = name ? describeBuiltInComponentFrame(name) : "";
        {
          if (typeof fn === "function") {
            componentFrameCache.set(fn, syntheticFrame);
          }
        }
        return syntheticFrame;
      }
      function describeFunctionComponentFrame(fn, source, ownerFn) {
        {
          return describeNativeComponentFrame(fn, false);
        }
      }
      function shouldConstruct(Component2) {
        var prototype = Component2.prototype;
        return !!(prototype && prototype.isReactComponent);
      }
      function describeUnknownElementTypeFrameInDEV(type, source, ownerFn) {
        if (type == null) {
          return "";
        }
        if (typeof type === "function") {
          {
            return describeNativeComponentFrame(type, shouldConstruct(type));
          }
        }
        if (typeof type === "string") {
          return describeBuiltInComponentFrame(type);
        }
        switch (type) {
          case REACT_SUSPENSE_TYPE:
            return describeBuiltInComponentFrame("Suspense");
          case REACT_SUSPENSE_LIST_TYPE:
            return describeBuiltInComponentFrame("SuspenseList");
        }
        if (typeof type === "object") {
          switch (type.$$typeof) {
            case REACT_FORWARD_REF_TYPE2:
              return describeFunctionComponentFrame(type.render);
            case REACT_MEMO_TYPE:
              return describeUnknownElementTypeFrameInDEV(type.type, source, ownerFn);
            case REACT_LAZY_TYPE: {
              var lazyComponent = type;
              var payload = lazyComponent._payload;
              var init = lazyComponent._init;
              try {
                return describeUnknownElementTypeFrameInDEV(init(payload), source, ownerFn);
              } catch (x) {}
            }
          }
        }
        return "";
      }
      var loggedTypeFailures = {};
      var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;
      function setCurrentlyValidatingElement$1(element) {
        {
          if (element) {
            var owner = element._owner;
            var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
            ReactDebugCurrentFrame.setExtraStackFrame(stack);
          } else {
            ReactDebugCurrentFrame.setExtraStackFrame(null);
          }
        }
      }
      function checkPropTypes(typeSpecs, values, location2, componentName, element) {
        {
          var has = Function.call.bind(hasOwnProperty);
          for (var typeSpecName in typeSpecs) {
            if (has(typeSpecs, typeSpecName)) {
              var error$1 = undefined;
              try {
                if (typeof typeSpecs[typeSpecName] !== "function") {
                  var err = Error((componentName || "React class") + ": " + location2 + " type `" + typeSpecName + "` is invalid; " + "it must be a function, usually from the `prop-types` package, but received `" + typeof typeSpecs[typeSpecName] + "`." + "This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.");
                  err.name = "Invariant Violation";
                  throw err;
                }
                error$1 = typeSpecs[typeSpecName](values, typeSpecName, componentName, location2, null, "SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED");
              } catch (ex) {
                error$1 = ex;
              }
              if (error$1 && !(error$1 instanceof Error)) {
                setCurrentlyValidatingElement$1(element);
                error("%s: type specification of %s" + " `%s` is invalid; the type checker " + "function must return `null` or an `Error` but returned a %s. " + "You may have forgotten to pass an argument to the type checker " + "creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and " + "shape all require an argument).", componentName || "React class", location2, typeSpecName, typeof error$1);
                setCurrentlyValidatingElement$1(null);
              }
              if (error$1 instanceof Error && !(error$1.message in loggedTypeFailures)) {
                loggedTypeFailures[error$1.message] = true;
                setCurrentlyValidatingElement$1(element);
                error("Failed %s type: %s", location2, error$1.message);
                setCurrentlyValidatingElement$1(null);
              }
            }
          }
        }
      }
      var REACT_CLIENT_REFERENCE = Symbol.for("react.client.reference");
      function setCurrentlyValidatingElement(element) {
        {
          if (element) {
            var owner = element._owner;
            var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
            setExtraStackFrame(stack);
          } else {
            setExtraStackFrame(null);
          }
        }
      }
      var propTypesMisspellWarningShown;
      {
        propTypesMisspellWarningShown = false;
      }
      function getDeclarationErrorAddendum() {
        if (ReactCurrentOwner.current) {
          var name = getComponentNameFromType(ReactCurrentOwner.current.type);
          if (name) {
            return `

Check the render method of \`` + name + "`.";
          }
        }
        return "";
      }
      function getSourceInfoErrorAddendum(source) {
        if (source !== undefined) {
          var fileName = source.fileName.replace(/^.*[\\\/]/, "");
          var lineNumber = source.lineNumber;
          return `

Check your code at ` + fileName + ":" + lineNumber + ".";
        }
        return "";
      }
      function getSourceInfoErrorAddendumForProps(elementProps) {
        if (elementProps !== null && elementProps !== undefined) {
          return getSourceInfoErrorAddendum(elementProps.__source);
        }
        return "";
      }
      var ownerHasKeyUseWarning = {};
      function getCurrentComponentErrorInfo(parentType) {
        var info = getDeclarationErrorAddendum();
        if (!info) {
          var parentName = typeof parentType === "string" ? parentType : parentType.displayName || parentType.name;
          if (parentName) {
            info = `

Check the top-level render call using <` + parentName + ">.";
          }
        }
        return info;
      }
      function validateExplicitKey(element, parentType) {
        if (!element._store || element._store.validated || element.key != null) {
          return;
        }
        element._store.validated = true;
        var currentComponentErrorInfo = getCurrentComponentErrorInfo(parentType);
        if (ownerHasKeyUseWarning[currentComponentErrorInfo]) {
          return;
        }
        ownerHasKeyUseWarning[currentComponentErrorInfo] = true;
        var childOwner = "";
        if (element && element._owner && element._owner !== ReactCurrentOwner.current) {
          childOwner = " It was passed a child from " + getComponentNameFromType(element._owner.type) + ".";
        }
        {
          setCurrentlyValidatingElement(element);
          error('Each child in a list should have a unique "key" prop.' + "%s%s See https://reactjs.org/link/warning-keys for more information.", currentComponentErrorInfo, childOwner);
          setCurrentlyValidatingElement(null);
        }
      }
      function validateChildKeys(node, parentType) {
        if (typeof node !== "object" || !node) {
          return;
        }
        if (node.$$typeof === REACT_CLIENT_REFERENCE)
          ;
        else if (isArray(node)) {
          for (var i = 0;i < node.length; i++) {
            var child = node[i];
            if (isValidElement(child)) {
              validateExplicitKey(child, parentType);
            }
          }
        } else if (isValidElement(node)) {
          if (node._store) {
            node._store.validated = true;
          }
        } else {
          var iteratorFn = getIteratorFn(node);
          if (typeof iteratorFn === "function") {
            if (iteratorFn !== node.entries) {
              var iterator = iteratorFn.call(node);
              var step;
              while (!(step = iterator.next()).done) {
                if (isValidElement(step.value)) {
                  validateExplicitKey(step.value, parentType);
                }
              }
            }
          }
        }
      }
      function validatePropTypes(element) {
        {
          var type = element.type;
          if (type === null || type === undefined || typeof type === "string") {
            return;
          }
          if (type.$$typeof === REACT_CLIENT_REFERENCE) {
            return;
          }
          var propTypes;
          if (typeof type === "function") {
            propTypes = type.propTypes;
          } else if (typeof type === "object" && (type.$$typeof === REACT_FORWARD_REF_TYPE2 || type.$$typeof === REACT_MEMO_TYPE)) {
            propTypes = type.propTypes;
          } else {
            return;
          }
          if (propTypes) {
            var name = getComponentNameFromType(type);
            checkPropTypes(propTypes, element.props, "prop", name, element);
          } else if (type.PropTypes !== undefined && !propTypesMisspellWarningShown) {
            propTypesMisspellWarningShown = true;
            var _name = getComponentNameFromType(type);
            error("Component %s declared `PropTypes` instead of `propTypes`. Did you misspell the property assignment?", _name || "Unknown");
          }
          if (typeof type.getDefaultProps === "function" && !type.getDefaultProps.isReactClassApproved) {
            error("getDefaultProps is only used on classic React.createClass " + "definitions. Use a static property named `defaultProps` instead.");
          }
        }
      }
      function validateFragmentProps(fragment) {
        {
          var keys = Object.keys(fragment.props);
          for (var i = 0;i < keys.length; i++) {
            var key = keys[i];
            if (key !== "children" && key !== "key") {
              setCurrentlyValidatingElement(fragment);
              error("Invalid prop `%s` supplied to `React.Fragment`. " + "React.Fragment can only have `key` and `children` props.", key);
              setCurrentlyValidatingElement(null);
              break;
            }
          }
          if (fragment.ref !== null) {
            setCurrentlyValidatingElement(fragment);
            error("Invalid attribute `ref` supplied to `React.Fragment`.");
            setCurrentlyValidatingElement(null);
          }
        }
      }
      function createElementWithValidation(type, props, children) {
        var validType = isValidElementType(type);
        if (!validType) {
          var info = "";
          if (type === undefined || typeof type === "object" && type !== null && Object.keys(type).length === 0) {
            info += " You likely forgot to export your component from the file " + "it's defined in, or you might have mixed up default and named imports.";
          }
          var sourceInfo = getSourceInfoErrorAddendumForProps(props);
          if (sourceInfo) {
            info += sourceInfo;
          } else {
            info += getDeclarationErrorAddendum();
          }
          var typeString;
          if (type === null) {
            typeString = "null";
          } else if (isArray(type)) {
            typeString = "array";
          } else if (type !== undefined && type.$$typeof === REACT_ELEMENT_TYPE) {
            typeString = "<" + (getComponentNameFromType(type.type) || "Unknown") + " />";
            info = " Did you accidentally export a JSX literal instead of a component?";
          } else {
            typeString = typeof type;
          }
          {
            error("React.createElement: type is invalid -- expected a string (for " + "built-in components) or a class/function (for composite " + "components) but got: %s.%s", typeString, info);
          }
        }
        var element = createElement$1.apply(this, arguments);
        if (element == null) {
          return element;
        }
        if (validType) {
          for (var i = 2;i < arguments.length; i++) {
            validateChildKeys(arguments[i], type);
          }
        }
        if (type === REACT_FRAGMENT_TYPE) {
          validateFragmentProps(element);
        } else {
          validatePropTypes(element);
        }
        return element;
      }
      var didWarnAboutDeprecatedCreateFactory = false;
      function createFactoryWithValidation(type) {
        var validatedFactory = createElementWithValidation.bind(null, type);
        validatedFactory.type = type;
        {
          if (!didWarnAboutDeprecatedCreateFactory) {
            didWarnAboutDeprecatedCreateFactory = true;
            warn("React.createFactory() is deprecated and will be removed in " + "a future major release. Consider using JSX " + "or use React.createElement() directly instead.");
          }
          Object.defineProperty(validatedFactory, "type", {
            enumerable: false,
            get: function() {
              warn("Factory.type is deprecated. Access the class directly " + "before passing it to createFactory.");
              Object.defineProperty(this, "type", {
                value: type
              });
              return type;
            }
          });
        }
        return validatedFactory;
      }
      function cloneElementWithValidation(element, props, children) {
        var newElement = cloneElement$1.apply(this, arguments);
        for (var i = 2;i < arguments.length; i++) {
          validateChildKeys(arguments[i], newElement.type);
        }
        validatePropTypes(newElement);
        return newElement;
      }
      var ContextRegistry = ReactSharedInternals.ContextRegistry;
      function createServerContext(globalName, defaultValue) {
        var wasDefined = true;
        if (!ContextRegistry[globalName]) {
          wasDefined = false;
          var _context = {
            $$typeof: REACT_SERVER_CONTEXT_TYPE,
            _currentValue: defaultValue,
            _currentValue2: defaultValue,
            _defaultValue: defaultValue,
            _threadCount: 0,
            Provider: null,
            Consumer: null,
            _globalName: globalName
          };
          _context.Provider = {
            $$typeof: REACT_PROVIDER_TYPE,
            _context
          };
          {
            var hasWarnedAboutUsingConsumer;
            _context._currentRenderer = null;
            _context._currentRenderer2 = null;
            Object.defineProperties(_context, {
              Consumer: {
                get: function() {
                  if (!hasWarnedAboutUsingConsumer) {
                    error("Consumer pattern is not supported by ReactServerContext");
                    hasWarnedAboutUsingConsumer = true;
                  }
                  return null;
                }
              }
            });
          }
          ContextRegistry[globalName] = _context;
        }
        var context = ContextRegistry[globalName];
        if (context._defaultValue === REACT_SERVER_CONTEXT_DEFAULT_VALUE_NOT_LOADED) {
          context._defaultValue = defaultValue;
          if (context._currentValue === REACT_SERVER_CONTEXT_DEFAULT_VALUE_NOT_LOADED) {
            context._currentValue = defaultValue;
          }
          if (context._currentValue2 === REACT_SERVER_CONTEXT_DEFAULT_VALUE_NOT_LOADED) {
            context._currentValue2 = defaultValue;
          }
        } else if (wasDefined) {
          throw new Error("ServerContext: " + globalName + " already defined");
        }
        return context;
      }
      function startTransition(scope, options) {
        var prevTransition = ReactCurrentBatchConfig.transition;
        ReactCurrentBatchConfig.transition = {};
        var currentTransition = ReactCurrentBatchConfig.transition;
        {
          ReactCurrentBatchConfig.transition._updatedFibers = new Set;
        }
        try {
          scope();
        } finally {
          ReactCurrentBatchConfig.transition = prevTransition;
          {
            if (prevTransition === null && currentTransition._updatedFibers) {
              var updatedFibersCount = currentTransition._updatedFibers.size;
              currentTransition._updatedFibers.clear();
              if (updatedFibersCount > 10) {
                warn("Detected a large number of updates inside startTransition. " + "If this is due to a subscription please re-write it to use React provided hooks. " + "Otherwise concurrent mode guarantees are off the table.");
              }
            }
          }
        }
      }
      var didWarnAboutMessageChannel = false;
      var enqueueTaskImpl = null;
      function enqueueTask(task) {
        if (enqueueTaskImpl === null) {
          try {
            var requireString = ("require" + Math.random()).slice(0, 7);
            var nodeRequire = module && module[requireString];
            enqueueTaskImpl = nodeRequire.call(module, "timers").setImmediate;
          } catch (_err) {
            enqueueTaskImpl = function(callback) {
              {
                if (didWarnAboutMessageChannel === false) {
                  didWarnAboutMessageChannel = true;
                  if (typeof MessageChannel === "undefined") {
                    error("This browser does not have a MessageChannel implementation, " + "so enqueuing tasks via await act(async () => ...) will fail. " + "Please file an issue at https://github.com/facebook/react/issues " + "if you encounter this warning.");
                  }
                }
              }
              var channel = new MessageChannel;
              channel.port1.onmessage = callback;
              channel.port2.postMessage(undefined);
            };
          }
        }
        return enqueueTaskImpl(task);
      }
      var actScopeDepth = 0;
      var didWarnNoAwaitAct = false;
      function act(callback) {
        {
          var prevIsBatchingLegacy = ReactCurrentActQueue.isBatchingLegacy;
          var prevActQueue = ReactCurrentActQueue.current;
          var prevActScopeDepth = actScopeDepth;
          actScopeDepth++;
          var queue = ReactCurrentActQueue.current = prevActQueue !== null ? prevActQueue : [];
          ReactCurrentActQueue.isBatchingLegacy = true;
          var result;
          var didAwaitActCall = false;
          try {
            ReactCurrentActQueue.didScheduleLegacyUpdate = false;
            result = callback();
            var didScheduleLegacyUpdate = ReactCurrentActQueue.didScheduleLegacyUpdate;
            if (!prevIsBatchingLegacy && didScheduleLegacyUpdate) {
              flushActQueue(queue);
            }
            ReactCurrentActQueue.isBatchingLegacy = prevIsBatchingLegacy;
          } catch (error2) {
            ReactCurrentActQueue.isBatchingLegacy = prevIsBatchingLegacy;
            popActScope(prevActQueue, prevActScopeDepth);
            throw error2;
          }
          if (result !== null && typeof result === "object" && typeof result.then === "function") {
            var thenable = result;
            queueSeveralMicrotasks(function() {
              if (!didAwaitActCall && !didWarnNoAwaitAct) {
                didWarnNoAwaitAct = true;
                error("You called act(async () => ...) without await. " + "This could lead to unexpected testing behaviour, " + "interleaving multiple act calls and mixing their " + "scopes. " + "You should - await act(async () => ...);");
              }
            });
            return {
              then: function(resolve, reject) {
                didAwaitActCall = true;
                thenable.then(function(returnValue2) {
                  popActScope(prevActQueue, prevActScopeDepth);
                  if (prevActScopeDepth === 0) {
                    try {
                      flushActQueue(queue);
                      enqueueTask(function() {
                        return recursivelyFlushAsyncActWork(returnValue2, resolve, reject);
                      });
                    } catch (error2) {
                      reject(error2);
                    }
                  } else {
                    resolve(returnValue2);
                  }
                }, function(error2) {
                  popActScope(prevActQueue, prevActScopeDepth);
                  reject(error2);
                });
              }
            };
          } else {
            var returnValue = result;
            popActScope(prevActQueue, prevActScopeDepth);
            if (prevActScopeDepth === 0) {
              flushActQueue(queue);
              if (queue.length !== 0) {
                queueSeveralMicrotasks(function() {
                  if (!didAwaitActCall && !didWarnNoAwaitAct) {
                    didWarnNoAwaitAct = true;
                    error("A component suspended inside an `act` scope, but the " + "`act` call was not awaited. When testing React " + "components that depend on asynchronous data, you must " + `await the result:

` + "await act(() => ...)");
                  }
                });
              }
              ReactCurrentActQueue.current = null;
            }
            return {
              then: function(resolve, reject) {
                didAwaitActCall = true;
                if (prevActScopeDepth === 0) {
                  ReactCurrentActQueue.current = queue;
                  enqueueTask(function() {
                    return recursivelyFlushAsyncActWork(returnValue, resolve, reject);
                  });
                } else {
                  resolve(returnValue);
                }
              }
            };
          }
        }
      }
      function popActScope(prevActQueue, prevActScopeDepth) {
        {
          if (prevActScopeDepth !== actScopeDepth - 1) {
            error("You seem to have overlapping act() calls, this is not supported. " + "Be sure to await previous act() calls before making a new one. ");
          }
          actScopeDepth = prevActScopeDepth;
        }
      }
      function recursivelyFlushAsyncActWork(returnValue, resolve, reject) {
        {
          var queue = ReactCurrentActQueue.current;
          if (queue !== null) {
            if (queue.length !== 0) {
              try {
                flushActQueue(queue);
                enqueueTask(function() {
                  return recursivelyFlushAsyncActWork(returnValue, resolve, reject);
                });
              } catch (error2) {
                reject(error2);
              }
            } else {
              ReactCurrentActQueue.current = null;
              resolve(returnValue);
            }
          } else {
            resolve(returnValue);
          }
        }
      }
      var isFlushing = false;
      function flushActQueue(queue) {
        {
          if (!isFlushing) {
            isFlushing = true;
            var i = 0;
            try {
              for (;i < queue.length; i++) {
                var callback = queue[i];
                do {
                  ReactCurrentActQueue.didUsePromise = false;
                  var continuation = callback(false);
                  if (continuation !== null) {
                    if (ReactCurrentActQueue.didUsePromise) {
                      queue[i] = callback;
                      queue.splice(0, i);
                      return;
                    }
                    callback = continuation;
                  } else {
                    break;
                  }
                } while (true);
              }
              queue.length = 0;
            } catch (error2) {
              queue.splice(0, i + 1);
              throw error2;
            } finally {
              isFlushing = false;
            }
          }
        }
      }
      var queueSeveralMicrotasks = typeof queueMicrotask === "function" ? function(callback) {
        queueMicrotask(function() {
          return queueMicrotask(callback);
        });
      } : enqueueTask;
      var createElement = createElementWithValidation;
      var cloneElement = cloneElementWithValidation;
      var createFactory = createFactoryWithValidation;
      var Children = {
        map: mapChildren,
        forEach: forEachChildren,
        count: countChildren,
        toArray,
        only: onlyChild
      };
      exports.Children = Children;
      exports.Component = Component;
      exports.Fragment = REACT_FRAGMENT_TYPE;
      exports.Profiler = REACT_PROFILER_TYPE;
      exports.PureComponent = PureComponent;
      exports.StrictMode = REACT_STRICT_MODE_TYPE;
      exports.Suspense = REACT_SUSPENSE_TYPE;
      exports.SuspenseList = REACT_SUSPENSE_LIST_TYPE;
      exports.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = ReactSharedInternals;
      exports.cache = cache;
      exports.cloneElement = cloneElement;
      exports.createContext = createContext;
      exports.createElement = createElement;
      exports.createFactory = createFactory;
      exports.createRef = createRef;
      exports.createServerContext = createServerContext;
      exports.experimental_useEffectEvent = useEffectEvent;
      exports.experimental_useOptimistic = useOptimistic;
      exports.forwardRef = forwardRef;
      exports.isValidElement = isValidElement;
      exports.lazy = lazy;
      exports.memo = memo;
      exports.startTransition = startTransition;
      exports.unstable_Cache = REACT_CACHE_TYPE;
      exports.unstable_DebugTracingMode = REACT_DEBUG_TRACING_MODE_TYPE;
      exports.unstable_Offscreen = REACT_OFFSCREEN_TYPE;
      exports.unstable_act = act;
      exports.unstable_getCacheForType = getCacheForType;
      exports.unstable_getCacheSignal = getCacheSignal;
      exports.unstable_useCacheRefresh = useCacheRefresh;
      exports.unstable_useMemoCache = useMemoCache;
      exports.use = use;
      exports.useCallback = useCallback;
      exports.useContext = useContext;
      exports.useDebugValue = useDebugValue;
      exports.useDeferredValue = useDeferredValue;
      exports.useEffect = useEffect;
      exports.useId = useId;
      exports.useImperativeHandle = useImperativeHandle;
      exports.useInsertionEffect = useInsertionEffect;
      exports.useLayoutEffect = useLayoutEffect;
      exports.useMemo = useMemo;
      exports.useReducer = useReducer;
      exports.useRef = useRef;
      exports.useState = useState;
      exports.useSyncExternalStore = useSyncExternalStore;
      exports.useTransition = useTransition;
      exports.version = ReactVersion;
      if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop === "function") {
        __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop(new Error);
      }
    })();
  }
});

// node_modules/react/index.js
var require_react = __commonJS((exports, module) => {
  if (false) {} else {
    module.exports = require_react_development();
  }
});

// node_modules/react/cjs/react-jsx-runtime.development.js
var require_react_jsx_runtime_development = __commonJS((exports) => {
  var React = __toESM(require_react(), 1);
  if (true) {
    (function() {
      var REACT_ELEMENT_TYPE2 = Symbol.for("react.element");
      var REACT_PORTAL_TYPE = Symbol.for("react.portal");
      var REACT_FRAGMENT_TYPE = Symbol.for("react.fragment");
      var REACT_STRICT_MODE_TYPE = Symbol.for("react.strict_mode");
      var REACT_PROFILER_TYPE = Symbol.for("react.profiler");
      var REACT_PROVIDER_TYPE = Symbol.for("react.provider");
      var REACT_CONTEXT_TYPE = Symbol.for("react.context");
      var REACT_SERVER_CONTEXT_TYPE = Symbol.for("react.server_context");
      var REACT_FORWARD_REF_TYPE2 = Symbol.for("react.forward_ref");
      var REACT_SUSPENSE_TYPE = Symbol.for("react.suspense");
      var REACT_SUSPENSE_LIST_TYPE = Symbol.for("react.suspense_list");
      var REACT_MEMO_TYPE = Symbol.for("react.memo");
      var REACT_LAZY_TYPE = Symbol.for("react.lazy");
      var REACT_OFFSCREEN_TYPE = Symbol.for("react.offscreen");
      var REACT_CACHE_TYPE = Symbol.for("react.cache");
      var MAYBE_ITERATOR_SYMBOL = Symbol.iterator;
      var FAUX_ITERATOR_SYMBOL = "@@iterator";
      function getIteratorFn(maybeIterable) {
        if (maybeIterable === null || typeof maybeIterable !== "object") {
          return null;
        }
        var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];
        if (typeof maybeIterator === "function") {
          return maybeIterator;
        }
        return null;
      }
      var ReactSharedInternals = React.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;
      function error(format) {
        {
          {
            for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1;_key2 < _len2; _key2++) {
              args[_key2 - 1] = arguments[_key2];
            }
            printWarning("error", format, args);
          }
        }
      }
      function printWarning(level, format, args) {
        {
          var ReactDebugCurrentFrame2 = ReactSharedInternals.ReactDebugCurrentFrame;
          var stack = ReactDebugCurrentFrame2.getStackAddendum();
          if (stack !== "") {
            format += "%s";
            args = args.concat([stack]);
          }
          var argsWithFormat = args.map(function(item) {
            return String(item);
          });
          argsWithFormat.unshift("Warning: " + format);
          Function.prototype.apply.call(console[level], console, argsWithFormat);
        }
      }
      var enableScopeAPI = false;
      var enableTransitionTracing = false;
      var enableLegacyHidden = false;
      var enableDebugTracing = false;
      var REACT_CLIENT_REFERENCE$1 = Symbol.for("react.client.reference");
      function isValidElementType(type) {
        if (typeof type === "string" || typeof type === "function") {
          return true;
        }
        if (type === REACT_FRAGMENT_TYPE || type === REACT_PROFILER_TYPE || enableDebugTracing || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || enableLegacyHidden || type === REACT_OFFSCREEN_TYPE || enableScopeAPI || type === REACT_CACHE_TYPE || enableTransitionTracing) {
          return true;
        }
        if (typeof type === "object" && type !== null) {
          if (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE2 || type.$$typeof === REACT_CLIENT_REFERENCE$1 || type.getModuleId !== undefined) {
            return true;
          }
        }
        return false;
      }
      function getWrappedName(outerType, innerType, wrapperName) {
        var displayName = outerType.displayName;
        if (displayName) {
          return displayName;
        }
        var functionName = innerType.displayName || innerType.name || "";
        return functionName !== "" ? wrapperName + "(" + functionName + ")" : wrapperName;
      }
      function getContextName(type) {
        return type.displayName || "Context";
      }
      function getComponentNameFromType(type) {
        if (type == null) {
          return null;
        }
        {
          if (typeof type.tag === "number") {
            error("Received an unexpected object in getComponentNameFromType(). " + "This is likely a bug in React. Please file an issue.");
          }
        }
        if (typeof type === "function") {
          return type.displayName || type.name || null;
        }
        if (typeof type === "string") {
          return type;
        }
        switch (type) {
          case REACT_FRAGMENT_TYPE:
            return "Fragment";
          case REACT_PORTAL_TYPE:
            return "Portal";
          case REACT_PROFILER_TYPE:
            return "Profiler";
          case REACT_STRICT_MODE_TYPE:
            return "StrictMode";
          case REACT_SUSPENSE_TYPE:
            return "Suspense";
          case REACT_SUSPENSE_LIST_TYPE:
            return "SuspenseList";
          case REACT_CACHE_TYPE: {
            return "Cache";
          }
        }
        if (typeof type === "object") {
          switch (type.$$typeof) {
            case REACT_CONTEXT_TYPE:
              var context = type;
              return getContextName(context) + ".Consumer";
            case REACT_PROVIDER_TYPE:
              var provider = type;
              return getContextName(provider._context) + ".Provider";
            case REACT_FORWARD_REF_TYPE2:
              return getWrappedName(type, type.render, "ForwardRef");
            case REACT_MEMO_TYPE:
              var outerName = type.displayName || null;
              if (outerName !== null) {
                return outerName;
              }
              return getComponentNameFromType(type.type) || "Memo";
            case REACT_LAZY_TYPE: {
              var lazyComponent = type;
              var payload = lazyComponent._payload;
              var init = lazyComponent._init;
              try {
                return getComponentNameFromType(init(payload));
              } catch (x) {
                return null;
              }
            }
            case REACT_SERVER_CONTEXT_TYPE: {
              var context2 = type;
              return (context2.displayName || context2._globalName) + ".Provider";
            }
          }
        }
        return null;
      }
      var assign = Object.assign;
      var disabledDepth = 0;
      var prevLog;
      var prevInfo;
      var prevWarn;
      var prevError;
      var prevGroup;
      var prevGroupCollapsed;
      var prevGroupEnd;
      function disabledLog() {}
      disabledLog.__reactDisabledLog = true;
      function disableLogs() {
        {
          if (disabledDepth === 0) {
            prevLog = console.log;
            prevInfo = console.info;
            prevWarn = console.warn;
            prevError = console.error;
            prevGroup = console.group;
            prevGroupCollapsed = console.groupCollapsed;
            prevGroupEnd = console.groupEnd;
            var props = {
              configurable: true,
              enumerable: true,
              value: disabledLog,
              writable: true
            };
            Object.defineProperties(console, {
              info: props,
              log: props,
              warn: props,
              error: props,
              group: props,
              groupCollapsed: props,
              groupEnd: props
            });
          }
          disabledDepth++;
        }
      }
      function reenableLogs() {
        {
          disabledDepth--;
          if (disabledDepth === 0) {
            var props = {
              configurable: true,
              enumerable: true,
              writable: true
            };
            Object.defineProperties(console, {
              log: assign({}, props, {
                value: prevLog
              }),
              info: assign({}, props, {
                value: prevInfo
              }),
              warn: assign({}, props, {
                value: prevWarn
              }),
              error: assign({}, props, {
                value: prevError
              }),
              group: assign({}, props, {
                value: prevGroup
              }),
              groupCollapsed: assign({}, props, {
                value: prevGroupCollapsed
              }),
              groupEnd: assign({}, props, {
                value: prevGroupEnd
              })
            });
          }
          if (disabledDepth < 0) {
            error("disabledDepth fell below zero. " + "This is a bug in React. Please file an issue.");
          }
        }
      }
      var ReactCurrentDispatcher = ReactSharedInternals.ReactCurrentDispatcher;
      var prefix;
      function describeBuiltInComponentFrame(name, source, ownerFn) {
        {
          if (prefix === undefined) {
            try {
              throw Error();
            } catch (x) {
              var match = x.stack.trim().match(/\n( *(at )?)/);
              prefix = match && match[1] || "";
            }
          }
          return `
` + prefix + name;
        }
      }
      var reentry = false;
      var componentFrameCache;
      {
        var PossiblyWeakMap = typeof WeakMap === "function" ? WeakMap : Map;
        componentFrameCache = new PossiblyWeakMap;
      }
      function describeNativeComponentFrame(fn, construct) {
        if (!fn || reentry) {
          return "";
        }
        {
          var frame = componentFrameCache.get(fn);
          if (frame !== undefined) {
            return frame;
          }
        }
        var control;
        reentry = true;
        var previousPrepareStackTrace = Error.prepareStackTrace;
        Error.prepareStackTrace = undefined;
        var previousDispatcher;
        {
          previousDispatcher = ReactCurrentDispatcher.current;
          ReactCurrentDispatcher.current = null;
          disableLogs();
        }
        try {
          if (construct) {
            var Fake = function() {
              throw Error();
            };
            Object.defineProperty(Fake.prototype, "props", {
              set: function() {
                throw Error();
              }
            });
            if (typeof Reflect === "object" && Reflect.construct) {
              try {
                Reflect.construct(Fake, []);
              } catch (x) {
                control = x;
              }
              Reflect.construct(fn, [], Fake);
            } else {
              try {
                Fake.call();
              } catch (x) {
                control = x;
              }
              fn.call(Fake.prototype);
            }
          } else {
            try {
              throw Error();
            } catch (x) {
              control = x;
            }
            fn();
          }
        } catch (sample) {
          if (sample && control && typeof sample.stack === "string") {
            var sampleLines = sample.stack.split(`
`);
            var controlLines = control.stack.split(`
`);
            var s = sampleLines.length - 1;
            var c = controlLines.length - 1;
            while (s >= 1 && c >= 0 && sampleLines[s] !== controlLines[c]) {
              c--;
            }
            for (;s >= 1 && c >= 0; s--, c--) {
              if (sampleLines[s] !== controlLines[c]) {
                if (s !== 1 || c !== 1) {
                  do {
                    s--;
                    c--;
                    if (c < 0 || sampleLines[s] !== controlLines[c]) {
                      var _frame = `
` + sampleLines[s].replace(" at new ", " at ");
                      if (fn.displayName && _frame.includes("<anonymous>")) {
                        _frame = _frame.replace("<anonymous>", fn.displayName);
                      }
                      {
                        if (typeof fn === "function") {
                          componentFrameCache.set(fn, _frame);
                        }
                      }
                      return _frame;
                    }
                  } while (s >= 1 && c >= 0);
                }
                break;
              }
            }
          }
        } finally {
          reentry = false;
          {
            ReactCurrentDispatcher.current = previousDispatcher;
            reenableLogs();
          }
          Error.prepareStackTrace = previousPrepareStackTrace;
        }
        var name = fn ? fn.displayName || fn.name : "";
        var syntheticFrame = name ? describeBuiltInComponentFrame(name) : "";
        {
          if (typeof fn === "function") {
            componentFrameCache.set(fn, syntheticFrame);
          }
        }
        return syntheticFrame;
      }
      function describeFunctionComponentFrame(fn, source, ownerFn) {
        {
          return describeNativeComponentFrame(fn, false);
        }
      }
      function shouldConstruct(Component) {
        var prototype = Component.prototype;
        return !!(prototype && prototype.isReactComponent);
      }
      function describeUnknownElementTypeFrameInDEV(type, source, ownerFn) {
        if (type == null) {
          return "";
        }
        if (typeof type === "function") {
          {
            return describeNativeComponentFrame(type, shouldConstruct(type));
          }
        }
        if (typeof type === "string") {
          return describeBuiltInComponentFrame(type);
        }
        switch (type) {
          case REACT_SUSPENSE_TYPE:
            return describeBuiltInComponentFrame("Suspense");
          case REACT_SUSPENSE_LIST_TYPE:
            return describeBuiltInComponentFrame("SuspenseList");
        }
        if (typeof type === "object") {
          switch (type.$$typeof) {
            case REACT_FORWARD_REF_TYPE2:
              return describeFunctionComponentFrame(type.render);
            case REACT_MEMO_TYPE:
              return describeUnknownElementTypeFrameInDEV(type.type, source, ownerFn);
            case REACT_LAZY_TYPE: {
              var lazyComponent = type;
              var payload = lazyComponent._payload;
              var init = lazyComponent._init;
              try {
                return describeUnknownElementTypeFrameInDEV(init(payload), source, ownerFn);
              } catch (x) {}
            }
          }
        }
        return "";
      }
      var hasOwnProperty = Object.prototype.hasOwnProperty;
      var loggedTypeFailures = {};
      var ReactDebugCurrentFrame$1 = ReactSharedInternals.ReactDebugCurrentFrame;
      function setCurrentlyValidatingElement$1(element) {
        {
          if (element) {
            var owner = element._owner;
            var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
            ReactDebugCurrentFrame$1.setExtraStackFrame(stack);
          } else {
            ReactDebugCurrentFrame$1.setExtraStackFrame(null);
          }
        }
      }
      function checkPropTypes(typeSpecs, values, location2, componentName, element) {
        {
          var has = Function.call.bind(hasOwnProperty);
          for (var typeSpecName in typeSpecs) {
            if (has(typeSpecs, typeSpecName)) {
              var error$1 = undefined;
              try {
                if (typeof typeSpecs[typeSpecName] !== "function") {
                  var err = Error((componentName || "React class") + ": " + location2 + " type `" + typeSpecName + "` is invalid; " + "it must be a function, usually from the `prop-types` package, but received `" + typeof typeSpecs[typeSpecName] + "`." + "This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.");
                  err.name = "Invariant Violation";
                  throw err;
                }
                error$1 = typeSpecs[typeSpecName](values, typeSpecName, componentName, location2, null, "SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED");
              } catch (ex) {
                error$1 = ex;
              }
              if (error$1 && !(error$1 instanceof Error)) {
                setCurrentlyValidatingElement$1(element);
                error("%s: type specification of %s" + " `%s` is invalid; the type checker " + "function must return `null` or an `Error` but returned a %s. " + "You may have forgotten to pass an argument to the type checker " + "creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and " + "shape all require an argument).", componentName || "React class", location2, typeSpecName, typeof error$1);
                setCurrentlyValidatingElement$1(null);
              }
              if (error$1 instanceof Error && !(error$1.message in loggedTypeFailures)) {
                loggedTypeFailures[error$1.message] = true;
                setCurrentlyValidatingElement$1(element);
                error("Failed %s type: %s", location2, error$1.message);
                setCurrentlyValidatingElement$1(null);
              }
            }
          }
        }
      }
      var isArrayImpl = Array.isArray;
      function isArray(a) {
        return isArrayImpl(a);
      }
      function typeName(value) {
        {
          var hasToStringTag = typeof Symbol === "function" && Symbol.toStringTag;
          var type = hasToStringTag && value[Symbol.toStringTag] || value.constructor.name || "Object";
          return type;
        }
      }
      function willCoercionThrow(value) {
        {
          try {
            testStringCoercion(value);
            return false;
          } catch (e) {
            return true;
          }
        }
      }
      function testStringCoercion(value) {
        return "" + value;
      }
      function checkKeyStringCoercion(value) {
        {
          if (willCoercionThrow(value)) {
            error("The provided key is an unsupported type %s." + " This value must be coerced to a string before before using it here.", typeName(value));
            return testStringCoercion(value);
          }
        }
      }
      var ReactCurrentOwner$1 = ReactSharedInternals.ReactCurrentOwner;
      var RESERVED_PROPS = {
        key: true,
        ref: true,
        __self: true,
        __source: true
      };
      var specialPropKeyWarningShown;
      var specialPropRefWarningShown;
      var didWarnAboutStringRefs;
      {
        didWarnAboutStringRefs = {};
      }
      function hasValidRef(config) {
        {
          if (hasOwnProperty.call(config, "ref")) {
            var getter = Object.getOwnPropertyDescriptor(config, "ref").get;
            if (getter && getter.isReactWarning) {
              return false;
            }
          }
        }
        return config.ref !== undefined;
      }
      function hasValidKey(config) {
        {
          if (hasOwnProperty.call(config, "key")) {
            var getter = Object.getOwnPropertyDescriptor(config, "key").get;
            if (getter && getter.isReactWarning) {
              return false;
            }
          }
        }
        return config.key !== undefined;
      }
      function warnIfStringRefCannotBeAutoConverted(config, self) {
        {
          if (typeof config.ref === "string" && ReactCurrentOwner$1.current && self && ReactCurrentOwner$1.current.stateNode !== self) {
            var componentName = getComponentNameFromType(ReactCurrentOwner$1.current.type);
            if (!didWarnAboutStringRefs[componentName]) {
              error('Component "%s" contains the string ref "%s". ' + "Support for string refs will be removed in a future major release. " + "This case cannot be automatically converted to an arrow function. " + "We ask you to manually fix this case by using useRef() or createRef() instead. " + "Learn more about using refs safely here: " + "https://reactjs.org/link/strict-mode-string-ref", getComponentNameFromType(ReactCurrentOwner$1.current.type), config.ref);
              didWarnAboutStringRefs[componentName] = true;
            }
          }
        }
      }
      function defineKeyPropWarningGetter(props, displayName) {
        {
          var warnAboutAccessingKey = function() {
            if (!specialPropKeyWarningShown) {
              specialPropKeyWarningShown = true;
              error("%s: `key` is not a prop. Trying to access it will result " + "in `undefined` being returned. If you need to access the same " + "value within the child component, you should pass it as a different " + "prop. (https://reactjs.org/link/special-props)", displayName);
            }
          };
          warnAboutAccessingKey.isReactWarning = true;
          Object.defineProperty(props, "key", {
            get: warnAboutAccessingKey,
            configurable: true
          });
        }
      }
      function defineRefPropWarningGetter(props, displayName) {
        {
          var warnAboutAccessingRef = function() {
            if (!specialPropRefWarningShown) {
              specialPropRefWarningShown = true;
              error("%s: `ref` is not a prop. Trying to access it will result " + "in `undefined` being returned. If you need to access the same " + "value within the child component, you should pass it as a different " + "prop. (https://reactjs.org/link/special-props)", displayName);
            }
          };
          warnAboutAccessingRef.isReactWarning = true;
          Object.defineProperty(props, "ref", {
            get: warnAboutAccessingRef,
            configurable: true
          });
        }
      }
      function ReactElement(type, key, ref, self, source, owner, props) {
        var element = {
          $$typeof: REACT_ELEMENT_TYPE2,
          type,
          key,
          ref,
          props,
          _owner: owner
        };
        {
          element._store = {};
          Object.defineProperty(element._store, "validated", {
            configurable: false,
            enumerable: false,
            writable: true,
            value: false
          });
          Object.defineProperty(element, "_self", {
            configurable: false,
            enumerable: false,
            writable: false,
            value: self
          });
          Object.defineProperty(element, "_source", {
            configurable: false,
            enumerable: false,
            writable: false,
            value: source
          });
          if (Object.freeze) {
            Object.freeze(element.props);
            Object.freeze(element);
          }
        }
        return element;
      }
      function jsxDEV(type, config, maybeKey, source, self) {
        {
          var propName;
          var props = {};
          var key = null;
          var ref = null;
          if (maybeKey !== undefined) {
            {
              checkKeyStringCoercion(maybeKey);
            }
            key = "" + maybeKey;
          }
          if (hasValidKey(config)) {
            {
              checkKeyStringCoercion(config.key);
            }
            key = "" + config.key;
          }
          if (hasValidRef(config)) {
            ref = config.ref;
            warnIfStringRefCannotBeAutoConverted(config, self);
          }
          for (propName in config) {
            if (hasOwnProperty.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
              props[propName] = config[propName];
            }
          }
          if (type && type.defaultProps) {
            var defaultProps = type.defaultProps;
            for (propName in defaultProps) {
              if (props[propName] === undefined) {
                props[propName] = defaultProps[propName];
              }
            }
          }
          if (key || ref) {
            var displayName = typeof type === "function" ? type.displayName || type.name || "Unknown" : type;
            if (key) {
              defineKeyPropWarningGetter(props, displayName);
            }
            if (ref) {
              defineRefPropWarningGetter(props, displayName);
            }
          }
          return ReactElement(type, key, ref, self, source, ReactCurrentOwner$1.current, props);
        }
      }
      var ReactCurrentOwner = ReactSharedInternals.ReactCurrentOwner;
      var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;
      var REACT_CLIENT_REFERENCE = Symbol.for("react.client.reference");
      function setCurrentlyValidatingElement(element) {
        {
          if (element) {
            var owner = element._owner;
            var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
            ReactDebugCurrentFrame.setExtraStackFrame(stack);
          } else {
            ReactDebugCurrentFrame.setExtraStackFrame(null);
          }
        }
      }
      var propTypesMisspellWarningShown;
      {
        propTypesMisspellWarningShown = false;
      }
      function isValidElement(object) {
        {
          return typeof object === "object" && object !== null && object.$$typeof === REACT_ELEMENT_TYPE2;
        }
      }
      function getDeclarationErrorAddendum() {
        {
          if (ReactCurrentOwner.current) {
            var name = getComponentNameFromType(ReactCurrentOwner.current.type);
            if (name) {
              return `

Check the render method of \`` + name + "`.";
            }
          }
          return "";
        }
      }
      function getSourceInfoErrorAddendum(source) {
        {
          if (source !== undefined) {
            var fileName = source.fileName.replace(/^.*[\\\/]/, "");
            var lineNumber = source.lineNumber;
            return `

Check your code at ` + fileName + ":" + lineNumber + ".";
          }
          return "";
        }
      }
      var ownerHasKeyUseWarning = {};
      function getCurrentComponentErrorInfo(parentType) {
        {
          var info2 = getDeclarationErrorAddendum();
          if (!info2) {
            var parentName = typeof parentType === "string" ? parentType : parentType.displayName || parentType.name;
            if (parentName) {
              info2 = `

Check the top-level render call using <` + parentName + ">.";
            }
          }
          return info2;
        }
      }
      function validateExplicitKey(element, parentType) {
        {
          if (!element._store || element._store.validated || element.key != null) {
            return;
          }
          element._store.validated = true;
          var currentComponentErrorInfo = getCurrentComponentErrorInfo(parentType);
          if (ownerHasKeyUseWarning[currentComponentErrorInfo]) {
            return;
          }
          ownerHasKeyUseWarning[currentComponentErrorInfo] = true;
          var childOwner = "";
          if (element && element._owner && element._owner !== ReactCurrentOwner.current) {
            childOwner = " It was passed a child from " + getComponentNameFromType(element._owner.type) + ".";
          }
          setCurrentlyValidatingElement(element);
          error('Each child in a list should have a unique "key" prop.' + "%s%s See https://reactjs.org/link/warning-keys for more information.", currentComponentErrorInfo, childOwner);
          setCurrentlyValidatingElement(null);
        }
      }
      function validateChildKeys(node, parentType) {
        {
          if (typeof node !== "object" || !node) {
            return;
          }
          if (node.$$typeof === REACT_CLIENT_REFERENCE)
            ;
          else if (isArray(node)) {
            for (var i = 0;i < node.length; i++) {
              var child = node[i];
              if (isValidElement(child)) {
                validateExplicitKey(child, parentType);
              }
            }
          } else if (isValidElement(node)) {
            if (node._store) {
              node._store.validated = true;
            }
          } else {
            var iteratorFn = getIteratorFn(node);
            if (typeof iteratorFn === "function") {
              if (iteratorFn !== node.entries) {
                var iterator = iteratorFn.call(node);
                var step;
                while (!(step = iterator.next()).done) {
                  if (isValidElement(step.value)) {
                    validateExplicitKey(step.value, parentType);
                  }
                }
              }
            }
          }
        }
      }
      function validatePropTypes(element) {
        {
          var type = element.type;
          if (type === null || type === undefined || typeof type === "string") {
            return;
          }
          if (type.$$typeof === REACT_CLIENT_REFERENCE) {
            return;
          }
          var propTypes;
          if (typeof type === "function") {
            propTypes = type.propTypes;
          } else if (typeof type === "object" && (type.$$typeof === REACT_FORWARD_REF_TYPE2 || type.$$typeof === REACT_MEMO_TYPE)) {
            propTypes = type.propTypes;
          } else {
            return;
          }
          if (propTypes) {
            var name = getComponentNameFromType(type);
            checkPropTypes(propTypes, element.props, "prop", name, element);
          } else if (type.PropTypes !== undefined && !propTypesMisspellWarningShown) {
            propTypesMisspellWarningShown = true;
            var _name = getComponentNameFromType(type);
            error("Component %s declared `PropTypes` instead of `propTypes`. Did you misspell the property assignment?", _name || "Unknown");
          }
          if (typeof type.getDefaultProps === "function" && !type.getDefaultProps.isReactClassApproved) {
            error("getDefaultProps is only used on classic React.createClass " + "definitions. Use a static property named `defaultProps` instead.");
          }
        }
      }
      function validateFragmentProps(fragment) {
        {
          var keys = Object.keys(fragment.props);
          for (var i = 0;i < keys.length; i++) {
            var key = keys[i];
            if (key !== "children" && key !== "key") {
              setCurrentlyValidatingElement(fragment);
              error("Invalid prop `%s` supplied to `React.Fragment`. " + "React.Fragment can only have `key` and `children` props.", key);
              setCurrentlyValidatingElement(null);
              break;
            }
          }
          if (fragment.ref !== null) {
            setCurrentlyValidatingElement(fragment);
            error("Invalid attribute `ref` supplied to `React.Fragment`.");
            setCurrentlyValidatingElement(null);
          }
        }
      }
      var didWarnAboutKeySpread = {};
      function jsxWithValidation(type, props, key, isStaticChildren, source, self) {
        {
          var validType = isValidElementType(type);
          if (!validType) {
            var info2 = "";
            if (type === undefined || typeof type === "object" && type !== null && Object.keys(type).length === 0) {
              info2 += " You likely forgot to export your component from the file " + "it's defined in, or you might have mixed up default and named imports.";
            }
            var sourceInfo = getSourceInfoErrorAddendum(source);
            if (sourceInfo) {
              info2 += sourceInfo;
            } else {
              info2 += getDeclarationErrorAddendum();
            }
            var typeString;
            if (type === null) {
              typeString = "null";
            } else if (isArray(type)) {
              typeString = "array";
            } else if (type !== undefined && type.$$typeof === REACT_ELEMENT_TYPE2) {
              typeString = "<" + (getComponentNameFromType(type.type) || "Unknown") + " />";
              info2 = " Did you accidentally export a JSX literal instead of a component?";
            } else {
              typeString = typeof type;
            }
            error("React.jsx: type is invalid -- expected a string (for " + "built-in components) or a class/function (for composite " + "components) but got: %s.%s", typeString, info2);
          }
          var element = jsxDEV(type, props, key, source, self);
          if (element == null) {
            return element;
          }
          if (validType) {
            var children = props.children;
            if (children !== undefined) {
              if (isStaticChildren) {
                if (isArray(children)) {
                  for (var i = 0;i < children.length; i++) {
                    validateChildKeys(children[i], type);
                  }
                  if (Object.freeze) {
                    Object.freeze(children);
                  }
                } else {
                  error("React.jsx: Static children should always be an array. " + "You are likely explicitly calling React.jsxs or React.jsxDEV. " + "Use the Babel transform instead.");
                }
              } else {
                validateChildKeys(children, type);
              }
            }
          }
          if (hasOwnProperty.call(props, "key")) {
            var componentName = getComponentNameFromType(type);
            var keys = Object.keys(props).filter(function(k) {
              return k !== "key";
            });
            var beforeExample = keys.length > 0 ? "{key: someKey, " + keys.join(": ..., ") + ": ...}" : "{key: someKey}";
            if (!didWarnAboutKeySpread[componentName + beforeExample]) {
              var afterExample = keys.length > 0 ? "{" + keys.join(": ..., ") + ": ...}" : "{}";
              error(`A props object containing a "key" prop is being spread into JSX:
` + `  let props = %s;
` + `  <%s {...props} />
` + `React keys must be passed directly to JSX without using spread:
` + `  let props = %s;
` + "  <%s key={someKey} {...props} />", beforeExample, componentName, afterExample, componentName);
              didWarnAboutKeySpread[componentName + beforeExample] = true;
            }
          }
          if (type === REACT_FRAGMENT_TYPE) {
            validateFragmentProps(element);
          } else {
            validatePropTypes(element);
          }
          return element;
        }
      }
      function jsxWithValidationStatic(type, props, key) {
        {
          return jsxWithValidation(type, props, key, true);
        }
      }
      function jsxWithValidationDynamic(type, props, key) {
        {
          return jsxWithValidation(type, props, key, false);
        }
      }
      var jsx = jsxWithValidationDynamic;
      var jsxs = jsxWithValidationStatic;
      exports.Fragment = REACT_FRAGMENT_TYPE;
      exports.jsx = jsx;
      exports.jsxs = jsxs;
    })();
  }
});

// node_modules/react/jsx-runtime.js
var require_jsx_runtime = __commonJS((exports, module) => {
  if (false) {} else {
    module.exports = require_react_jsx_runtime_development();
  }
});

// node_modules/scheduler/cjs/scheduler.development.js
var require_scheduler_development = __commonJS((exports) => {
  if (true) {
    (function() {
      if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart === "function") {
        __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart(new Error);
      }
      var enableSchedulerDebugging = false;
      var enableProfiling = false;
      var frameYieldMs = 5;
      function push(heap, node) {
        var index = heap.length;
        heap.push(node);
        siftUp(heap, node, index);
      }
      function peek(heap) {
        return heap.length === 0 ? null : heap[0];
      }
      function pop(heap) {
        if (heap.length === 0) {
          return null;
        }
        var first = heap[0];
        var last = heap.pop();
        if (last !== first) {
          heap[0] = last;
          siftDown(heap, last, 0);
        }
        return first;
      }
      function siftUp(heap, node, i) {
        var index = i;
        while (index > 0) {
          var parentIndex = index - 1 >>> 1;
          var parent = heap[parentIndex];
          if (compare(parent, node) > 0) {
            heap[parentIndex] = node;
            heap[index] = parent;
            index = parentIndex;
          } else {
            return;
          }
        }
      }
      function siftDown(heap, node, i) {
        var index = i;
        var length = heap.length;
        var halfLength = length >>> 1;
        while (index < halfLength) {
          var leftIndex = (index + 1) * 2 - 1;
          var left = heap[leftIndex];
          var rightIndex = leftIndex + 1;
          var right = heap[rightIndex];
          if (compare(left, node) < 0) {
            if (rightIndex < length && compare(right, left) < 0) {
              heap[index] = right;
              heap[rightIndex] = node;
              index = rightIndex;
            } else {
              heap[index] = left;
              heap[leftIndex] = node;
              index = leftIndex;
            }
          } else if (rightIndex < length && compare(right, node) < 0) {
            heap[index] = right;
            heap[rightIndex] = node;
            index = rightIndex;
          } else {
            return;
          }
        }
      }
      function compare(a, b) {
        var diff = a.sortIndex - b.sortIndex;
        return diff !== 0 ? diff : a.id - b.id;
      }
      var ImmediatePriority = 1;
      var UserBlockingPriority = 2;
      var NormalPriority = 3;
      var LowPriority = 4;
      var IdlePriority = 5;
      function markTaskErrored(task, ms) {}
      exports.unstable_now = undefined;
      var hasPerformanceNow = typeof performance === "object" && typeof performance.now === "function";
      if (hasPerformanceNow) {
        var localPerformance = performance;
        exports.unstable_now = function() {
          return localPerformance.now();
        };
      } else {
        var localDate = Date;
        var initialTime = localDate.now();
        exports.unstable_now = function() {
          return localDate.now() - initialTime;
        };
      }
      var maxSigned31BitInt = 1073741823;
      var IMMEDIATE_PRIORITY_TIMEOUT = -1;
      var USER_BLOCKING_PRIORITY_TIMEOUT = 250;
      var NORMAL_PRIORITY_TIMEOUT = 5000;
      var LOW_PRIORITY_TIMEOUT = 1e4;
      var IDLE_PRIORITY_TIMEOUT = maxSigned31BitInt;
      var taskQueue = [];
      var timerQueue = [];
      var taskIdCounter = 1;
      var currentTask = null;
      var currentPriorityLevel = NormalPriority;
      var isPerformingWork = false;
      var isHostCallbackScheduled = false;
      var isHostTimeoutScheduled = false;
      var localSetTimeout = typeof setTimeout === "function" ? setTimeout : null;
      var localClearTimeout = typeof clearTimeout === "function" ? clearTimeout : null;
      var localSetImmediate = typeof setImmediate !== "undefined" ? setImmediate : null;
      typeof navigator !== "undefined" && navigator.scheduling !== undefined && navigator.scheduling.isInputPending !== undefined && navigator.scheduling.isInputPending.bind(navigator.scheduling);
      function advanceTimers(currentTime) {
        var timer = peek(timerQueue);
        while (timer !== null) {
          if (timer.callback === null) {
            pop(timerQueue);
          } else if (timer.startTime <= currentTime) {
            pop(timerQueue);
            timer.sortIndex = timer.expirationTime;
            push(taskQueue, timer);
          } else {
            return;
          }
          timer = peek(timerQueue);
        }
      }
      function handleTimeout(currentTime) {
        isHostTimeoutScheduled = false;
        advanceTimers(currentTime);
        if (!isHostCallbackScheduled) {
          if (peek(taskQueue) !== null) {
            isHostCallbackScheduled = true;
            requestHostCallback(flushWork);
          } else {
            var firstTimer = peek(timerQueue);
            if (firstTimer !== null) {
              requestHostTimeout(handleTimeout, firstTimer.startTime - currentTime);
            }
          }
        }
      }
      function flushWork(hasTimeRemaining, initialTime2) {
        isHostCallbackScheduled = false;
        if (isHostTimeoutScheduled) {
          isHostTimeoutScheduled = false;
          cancelHostTimeout();
        }
        isPerformingWork = true;
        var previousPriorityLevel = currentPriorityLevel;
        try {
          var currentTime;
          if (enableProfiling)
            ;
          else {
            return workLoop(hasTimeRemaining, initialTime2);
          }
        } finally {
          currentTask = null;
          currentPriorityLevel = previousPriorityLevel;
          isPerformingWork = false;
        }
      }
      function workLoop(hasTimeRemaining, initialTime2) {
        var currentTime = initialTime2;
        advanceTimers(currentTime);
        currentTask = peek(taskQueue);
        while (currentTask !== null && !enableSchedulerDebugging) {
          if (currentTask.expirationTime > currentTime && (!hasTimeRemaining || shouldYieldToHost())) {
            break;
          }
          var callback = currentTask.callback;
          if (typeof callback === "function") {
            currentTask.callback = null;
            currentPriorityLevel = currentTask.priorityLevel;
            var didUserCallbackTimeout = currentTask.expirationTime <= currentTime;
            var continuationCallback = callback(didUserCallbackTimeout);
            currentTime = exports.unstable_now();
            if (typeof continuationCallback === "function") {
              currentTask.callback = continuationCallback;
              advanceTimers(currentTime);
              return true;
            } else {
              if (currentTask === peek(taskQueue)) {
                pop(taskQueue);
              }
              advanceTimers(currentTime);
            }
          } else {
            pop(taskQueue);
          }
          currentTask = peek(taskQueue);
        }
        if (currentTask !== null) {
          return true;
        } else {
          var firstTimer = peek(timerQueue);
          if (firstTimer !== null) {
            requestHostTimeout(handleTimeout, firstTimer.startTime - currentTime);
          }
          return false;
        }
      }
      function unstable_runWithPriority(priorityLevel, eventHandler) {
        switch (priorityLevel) {
          case ImmediatePriority:
          case UserBlockingPriority:
          case NormalPriority:
          case LowPriority:
          case IdlePriority:
            break;
          default:
            priorityLevel = NormalPriority;
        }
        var previousPriorityLevel = currentPriorityLevel;
        currentPriorityLevel = priorityLevel;
        try {
          return eventHandler();
        } finally {
          currentPriorityLevel = previousPriorityLevel;
        }
      }
      function unstable_next(eventHandler) {
        var priorityLevel;
        switch (currentPriorityLevel) {
          case ImmediatePriority:
          case UserBlockingPriority:
          case NormalPriority:
            priorityLevel = NormalPriority;
            break;
          default:
            priorityLevel = currentPriorityLevel;
            break;
        }
        var previousPriorityLevel = currentPriorityLevel;
        currentPriorityLevel = priorityLevel;
        try {
          return eventHandler();
        } finally {
          currentPriorityLevel = previousPriorityLevel;
        }
      }
      function unstable_wrapCallback(callback) {
        var parentPriorityLevel = currentPriorityLevel;
        return function() {
          var previousPriorityLevel = currentPriorityLevel;
          currentPriorityLevel = parentPriorityLevel;
          try {
            return callback.apply(this, arguments);
          } finally {
            currentPriorityLevel = previousPriorityLevel;
          }
        };
      }
      function unstable_scheduleCallback(priorityLevel, callback, options) {
        var currentTime = exports.unstable_now();
        var startTime2;
        if (typeof options === "object" && options !== null) {
          var delay = options.delay;
          if (typeof delay === "number" && delay > 0) {
            startTime2 = currentTime + delay;
          } else {
            startTime2 = currentTime;
          }
        } else {
          startTime2 = currentTime;
        }
        var timeout;
        switch (priorityLevel) {
          case ImmediatePriority:
            timeout = IMMEDIATE_PRIORITY_TIMEOUT;
            break;
          case UserBlockingPriority:
            timeout = USER_BLOCKING_PRIORITY_TIMEOUT;
            break;
          case IdlePriority:
            timeout = IDLE_PRIORITY_TIMEOUT;
            break;
          case LowPriority:
            timeout = LOW_PRIORITY_TIMEOUT;
            break;
          case NormalPriority:
          default:
            timeout = NORMAL_PRIORITY_TIMEOUT;
            break;
        }
        var expirationTime = startTime2 + timeout;
        var newTask = {
          id: taskIdCounter++,
          callback,
          priorityLevel,
          startTime: startTime2,
          expirationTime,
          sortIndex: -1
        };
        if (startTime2 > currentTime) {
          newTask.sortIndex = startTime2;
          push(timerQueue, newTask);
          if (peek(taskQueue) === null && newTask === peek(timerQueue)) {
            if (isHostTimeoutScheduled) {
              cancelHostTimeout();
            } else {
              isHostTimeoutScheduled = true;
            }
            requestHostTimeout(handleTimeout, startTime2 - currentTime);
          }
        } else {
          newTask.sortIndex = expirationTime;
          push(taskQueue, newTask);
          if (!isHostCallbackScheduled && !isPerformingWork) {
            isHostCallbackScheduled = true;
            requestHostCallback(flushWork);
          }
        }
        return newTask;
      }
      function unstable_pauseExecution() {}
      function unstable_continueExecution() {
        if (!isHostCallbackScheduled && !isPerformingWork) {
          isHostCallbackScheduled = true;
          requestHostCallback(flushWork);
        }
      }
      function unstable_getFirstCallbackNode() {
        return peek(taskQueue);
      }
      function unstable_cancelCallback(task) {
        task.callback = null;
      }
      function unstable_getCurrentPriorityLevel() {
        return currentPriorityLevel;
      }
      var isMessageLoopRunning = false;
      var scheduledHostCallback = null;
      var taskTimeoutID = -1;
      var frameInterval = frameYieldMs;
      var startTime = -1;
      function shouldYieldToHost() {
        var timeElapsed = exports.unstable_now() - startTime;
        if (timeElapsed < frameInterval) {
          return false;
        }
        return true;
      }
      function requestPaint() {}
      function forceFrameRate(fps) {
        if (fps < 0 || fps > 125) {
          console["error"]("forceFrameRate takes a positive int between 0 and 125, " + "forcing frame rates higher than 125 fps is not supported");
          return;
        }
        if (fps > 0) {
          frameInterval = Math.floor(1000 / fps);
        } else {
          frameInterval = frameYieldMs;
        }
      }
      var performWorkUntilDeadline = function() {
        if (scheduledHostCallback !== null) {
          var currentTime = exports.unstable_now();
          startTime = currentTime;
          var hasTimeRemaining = true;
          var hasMoreWork = true;
          try {
            hasMoreWork = scheduledHostCallback(hasTimeRemaining, currentTime);
          } finally {
            if (hasMoreWork) {
              schedulePerformWorkUntilDeadline();
            } else {
              isMessageLoopRunning = false;
              scheduledHostCallback = null;
            }
          }
        } else {
          isMessageLoopRunning = false;
        }
      };
      var schedulePerformWorkUntilDeadline;
      if (typeof localSetImmediate === "function") {
        schedulePerformWorkUntilDeadline = function() {
          localSetImmediate(performWorkUntilDeadline);
        };
      } else if (typeof MessageChannel !== "undefined") {
        var channel = new MessageChannel;
        var port = channel.port2;
        channel.port1.onmessage = performWorkUntilDeadline;
        schedulePerformWorkUntilDeadline = function() {
          port.postMessage(null);
        };
      } else {
        schedulePerformWorkUntilDeadline = function() {
          localSetTimeout(performWorkUntilDeadline, 0);
        };
      }
      function requestHostCallback(callback) {
        scheduledHostCallback = callback;
        if (!isMessageLoopRunning) {
          isMessageLoopRunning = true;
          schedulePerformWorkUntilDeadline();
        }
      }
      function requestHostTimeout(callback, ms) {
        taskTimeoutID = localSetTimeout(function() {
          callback(exports.unstable_now());
        }, ms);
      }
      function cancelHostTimeout() {
        localClearTimeout(taskTimeoutID);
        taskTimeoutID = -1;
      }
      var unstable_Profiling = null;
      exports.unstable_IdlePriority = IdlePriority;
      exports.unstable_ImmediatePriority = ImmediatePriority;
      exports.unstable_LowPriority = LowPriority;
      exports.unstable_NormalPriority = NormalPriority;
      exports.unstable_Profiling = unstable_Profiling;
      exports.unstable_UserBlockingPriority = UserBlockingPriority;
      exports.unstable_cancelCallback = unstable_cancelCallback;
      exports.unstable_continueExecution = unstable_continueExecution;
      exports.unstable_forceFrameRate = forceFrameRate;
      exports.unstable_getCurrentPriorityLevel = unstable_getCurrentPriorityLevel;
      exports.unstable_getFirstCallbackNode = unstable_getFirstCallbackNode;
      exports.unstable_next = unstable_next;
      exports.unstable_pauseExecution = unstable_pauseExecution;
      exports.unstable_requestPaint = requestPaint;
      exports.unstable_runWithPriority = unstable_runWithPriority;
      exports.unstable_scheduleCallback = unstable_scheduleCallback;
      exports.unstable_shouldYield = shouldYieldToHost;
      exports.unstable_wrapCallback = unstable_wrapCallback;
      if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop === "function") {
        __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop(new Error);
      }
    })();
  }
});

// node_modules/scheduler/index.js
var require_scheduler = __commonJS((exports, module) => {
  var scheduler_development = __toESM(require_scheduler_development(), 1);
  if (false) {} else {
    module.exports = scheduler_development;
  }
});

// node_modules/react-dom/cjs/react-dom.development.js
var require_react_dom_development = __commonJS((exports) => {
  var React = __toESM(require_react(), 1);
  var Scheduler = __toESM(require_scheduler(), 1);
  if (true) {
    (function() {
      if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart === "function") {
        __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart(new Error);
      }
      var Internals = {
        usingClientEntryPoint: false,
        Events: null,
        Dispatcher: {
          current: null
        }
      };
      var ReactSharedInternals = React.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;
      var suppressWarning = false;
      function setSuppressWarning(newSuppressWarning) {
        {
          suppressWarning = newSuppressWarning;
        }
      }
      function warn(format) {
        {
          if (!suppressWarning) {
            for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1;_key < _len; _key++) {
              args[_key - 1] = arguments[_key];
            }
            printWarning("warn", format, args);
          }
        }
      }
      function error(format) {
        {
          if (!suppressWarning) {
            for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1;_key2 < _len2; _key2++) {
              args[_key2 - 1] = arguments[_key2];
            }
            printWarning("error", format, args);
          }
        }
      }
      function printWarning(level, format, args) {
        {
          var ReactDebugCurrentFrame2 = ReactSharedInternals.ReactDebugCurrentFrame;
          var stack = ReactDebugCurrentFrame2.getStackAddendum();
          if (stack !== "") {
            format += "%s";
            args = args.concat([stack]);
          }
          var argsWithFormat = args.map(function(item) {
            return String(item);
          });
          argsWithFormat.unshift("Warning: " + format);
          Function.prototype.apply.call(console[level], console, argsWithFormat);
        }
      }
      var assign = Object.assign;
      var enableClientRenderFallbackOnTextMismatch = true;
      var enableSuspenseCallback = false;
      var enableFormActions = true;
      var enableLazyContextPropagation = false;
      var enableLegacyHidden = false;
      var enableHostSingletons = true;
      var diffInCommitPhase = true;
      var enableAsyncActions = true;
      var alwaysThrottleRetries = true;
      var createRootStrictEffectsByDefault = false;
      var disableCommentsAsDOMContainers = true;
      var disableIEWorkarounds = true;
      var enableSchedulingProfiler = true;
      var enableProfilerTimer = true;
      var enableProfilerCommitHooks = true;
      var enableProfilerNestedUpdatePhase = true;
      var ReactCurrentDispatcher$3 = ReactSharedInternals.ReactCurrentDispatcher;
      var sharedNotPendingObject = {
        pending: false,
        data: null,
        method: null,
        action: null
      };
      var NotPending = Object.freeze(sharedNotPendingObject);
      function resolveDispatcher() {
        var dispatcher = ReactCurrentDispatcher$3.current;
        {
          if (dispatcher === null) {
            error("Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for" + ` one of the following reasons:
` + `1. You might have mismatching versions of React and the renderer (such as React DOM)
` + `2. You might be breaking the Rules of Hooks
` + `3. You might have more than one copy of React in the same app
` + "See https://reactjs.org/link/invalid-hook-call for tips about how to debug and fix this problem.");
          }
        }
        return dispatcher;
      }
      function useFormStatus() {
        {
          var dispatcher = resolveDispatcher();
          return dispatcher.useHostTransitionStatus();
        }
      }
      var valueStack = [];
      var fiberStack;
      {
        fiberStack = [];
      }
      var index = -1;
      function createCursor(defaultValue) {
        return {
          current: defaultValue
        };
      }
      function pop(cursor, fiber) {
        if (index < 0) {
          {
            error("Unexpected pop.");
          }
          return;
        }
        {
          if (fiber !== fiberStack[index]) {
            error("Unexpected Fiber popped.");
          }
        }
        cursor.current = valueStack[index];
        valueStack[index] = null;
        {
          fiberStack[index] = null;
        }
        index--;
      }
      function push(cursor, value, fiber) {
        index++;
        valueStack[index] = cursor.current;
        {
          fiberStack[index] = fiber;
        }
        cursor.current = value;
      }
      var REACT_ELEMENT_TYPE2 = Symbol.for("react.element");
      var REACT_PORTAL_TYPE = Symbol.for("react.portal");
      var REACT_FRAGMENT_TYPE = Symbol.for("react.fragment");
      var REACT_STRICT_MODE_TYPE = Symbol.for("react.strict_mode");
      var REACT_PROFILER_TYPE = Symbol.for("react.profiler");
      var REACT_PROVIDER_TYPE = Symbol.for("react.provider");
      var REACT_CONTEXT_TYPE = Symbol.for("react.context");
      var REACT_SERVER_CONTEXT_TYPE = Symbol.for("react.server_context");
      var REACT_FORWARD_REF_TYPE2 = Symbol.for("react.forward_ref");
      var REACT_SUSPENSE_TYPE = Symbol.for("react.suspense");
      var REACT_SUSPENSE_LIST_TYPE = Symbol.for("react.suspense_list");
      var REACT_MEMO_TYPE = Symbol.for("react.memo");
      var REACT_LAZY_TYPE = Symbol.for("react.lazy");
      var REACT_SCOPE_TYPE = Symbol.for("react.scope");
      var REACT_DEBUG_TRACING_MODE_TYPE = Symbol.for("react.debug_trace_mode");
      var REACT_OFFSCREEN_TYPE = Symbol.for("react.offscreen");
      var REACT_LEGACY_HIDDEN_TYPE = Symbol.for("react.legacy_hidden");
      var REACT_CACHE_TYPE = Symbol.for("react.cache");
      var REACT_TRACING_MARKER_TYPE = Symbol.for("react.tracing_marker");
      var REACT_SERVER_CONTEXT_DEFAULT_VALUE_NOT_LOADED = Symbol.for("react.default_value");
      var REACT_MEMO_CACHE_SENTINEL = Symbol.for("react.memo_cache_sentinel");
      var MAYBE_ITERATOR_SYMBOL = Symbol.iterator;
      var FAUX_ITERATOR_SYMBOL = "@@iterator";
      function getIteratorFn(maybeIterable) {
        if (maybeIterable === null || typeof maybeIterable !== "object") {
          return null;
        }
        var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];
        if (typeof maybeIterator === "function") {
          return maybeIterator;
        }
        return null;
      }
      var contextStackCursor$1 = createCursor(null);
      var contextFiberStackCursor = createCursor(null);
      var rootInstanceStackCursor = createCursor(null);
      var hostTransitionProviderCursor = createCursor(null);
      var HostTransitionContext = {
        $$typeof: REACT_CONTEXT_TYPE,
        _currentValue: null,
        _currentValue2: null,
        _threadCount: 0,
        Provider: null,
        Consumer: null,
        _defaultValue: null,
        _globalName: null
      };
      function requiredContext(c) {
        {
          if (c === null) {
            error("Expected host context to exist. This error is likely caused by a bug " + "in React. Please file an issue.");
          }
        }
        return c;
      }
      function getCurrentRootHostContainer() {
        return rootInstanceStackCursor.current;
      }
      function getRootHostContainer() {
        var rootInstance = requiredContext(rootInstanceStackCursor.current);
        return rootInstance;
      }
      function pushHostContainer(fiber, nextRootInstance) {
        push(rootInstanceStackCursor, nextRootInstance, fiber);
        push(contextFiberStackCursor, fiber, fiber);
        push(contextStackCursor$1, null, fiber);
        var nextRootContext = getRootHostContext(nextRootInstance);
        pop(contextStackCursor$1, fiber);
        push(contextStackCursor$1, nextRootContext, fiber);
      }
      function popHostContainer(fiber) {
        pop(contextStackCursor$1, fiber);
        pop(contextFiberStackCursor, fiber);
        pop(rootInstanceStackCursor, fiber);
      }
      function getHostContext() {
        var context = requiredContext(contextStackCursor$1.current);
        return context;
      }
      function pushHostContext(fiber) {
        {
          var stateHook = fiber.memoizedState;
          if (stateHook !== null) {
            push(hostTransitionProviderCursor, fiber, fiber);
          }
        }
        var context = requiredContext(contextStackCursor$1.current);
        var nextContext = getChildHostContext(context, fiber.type);
        if (context !== nextContext) {
          push(contextFiberStackCursor, fiber, fiber);
          push(contextStackCursor$1, nextContext, fiber);
        }
      }
      function popHostContext(fiber) {
        if (contextFiberStackCursor.current === fiber) {
          pop(contextStackCursor$1, fiber);
          pop(contextFiberStackCursor, fiber);
        }
        {
          if (hostTransitionProviderCursor.current === fiber) {
            pop(hostTransitionProviderCursor, fiber);
            {
              HostTransitionContext._currentValue = null;
            }
          }
        }
      }
      var NoFlags$1 = 0;
      var PerformedWork = 1;
      var Placement = 2;
      var DidCapture = 128;
      var Hydrating = 4096;
      var Update = 4;
      var ChildDeletion = 16;
      var ContentReset = 32;
      var Callback = 64;
      var ForceClientRender = 256;
      var Ref = 512;
      var Snapshot = 1024;
      var Passive$1 = 2048;
      var Visibility = 8192;
      var StoreConsistency = 16384;
      var ScheduleRetry = StoreConsistency;
      var ShouldSuspendCommit = Visibility;
      var LifecycleEffectMask = Passive$1 | Update | Callback | Ref | Snapshot | StoreConsistency;
      var HostEffectMask = 32767;
      var Incomplete = 32768;
      var ShouldCapture = 65536;
      var ForceUpdateForLegacySuspense = 131072;
      var Forked = 1048576;
      var RefStatic = 2097152;
      var LayoutStatic = 4194304;
      var PassiveStatic = 8388608;
      var MaySuspendCommit = 16777216;
      var PlacementDEV = 33554432;
      var MountLayoutDev = 67108864;
      var MountPassiveDev = 134217728;
      var BeforeMutationMask = Update | Snapshot | 0;
      var MutationMask = Placement | Update | ChildDeletion | ContentReset | Ref | Hydrating | Visibility;
      var LayoutMask = Update | Callback | Ref | Visibility;
      var PassiveMask = Passive$1 | Visibility | ChildDeletion;
      var StaticMask = LayoutStatic | PassiveStatic | RefStatic | MaySuspendCommit;
      var scheduleCallback$3 = Scheduler.unstable_scheduleCallback;
      var cancelCallback$1 = Scheduler.unstable_cancelCallback;
      var shouldYield = Scheduler.unstable_shouldYield;
      var requestPaint = Scheduler.unstable_requestPaint;
      var now$1 = Scheduler.unstable_now;
      var getCurrentPriorityLevel = Scheduler.unstable_getCurrentPriorityLevel;
      var ImmediatePriority = Scheduler.unstable_ImmediatePriority;
      var UserBlockingPriority = Scheduler.unstable_UserBlockingPriority;
      var NormalPriority$1 = Scheduler.unstable_NormalPriority;
      var LowPriority = Scheduler.unstable_LowPriority;
      var IdlePriority = Scheduler.unstable_IdlePriority;
      var log$1 = Scheduler.log;
      var unstable_setDisableYieldValue2 = Scheduler.unstable_setDisableYieldValue;
      var disabledDepth = 0;
      var prevLog;
      var prevInfo;
      var prevWarn;
      var prevError;
      var prevGroup;
      var prevGroupCollapsed;
      var prevGroupEnd;
      function disabledLog() {}
      disabledLog.__reactDisabledLog = true;
      function disableLogs() {
        {
          if (disabledDepth === 0) {
            prevLog = console.log;
            prevInfo = console.info;
            prevWarn = console.warn;
            prevError = console.error;
            prevGroup = console.group;
            prevGroupCollapsed = console.groupCollapsed;
            prevGroupEnd = console.groupEnd;
            var props = {
              configurable: true,
              enumerable: true,
              value: disabledLog,
              writable: true
            };
            Object.defineProperties(console, {
              info: props,
              log: props,
              warn: props,
              error: props,
              group: props,
              groupCollapsed: props,
              groupEnd: props
            });
          }
          disabledDepth++;
        }
      }
      function reenableLogs() {
        {
          disabledDepth--;
          if (disabledDepth === 0) {
            var props = {
              configurable: true,
              enumerable: true,
              writable: true
            };
            Object.defineProperties(console, {
              log: assign({}, props, {
                value: prevLog
              }),
              info: assign({}, props, {
                value: prevInfo
              }),
              warn: assign({}, props, {
                value: prevWarn
              }),
              error: assign({}, props, {
                value: prevError
              }),
              group: assign({}, props, {
                value: prevGroup
              }),
              groupCollapsed: assign({}, props, {
                value: prevGroupCollapsed
              }),
              groupEnd: assign({}, props, {
                value: prevGroupEnd
              })
            });
          }
          if (disabledDepth < 0) {
            error("disabledDepth fell below zero. " + "This is a bug in React. Please file an issue.");
          }
        }
      }
      var rendererID = null;
      var injectedHook = null;
      var injectedProfilingHooks = null;
      var hasLoggedError = false;
      var isDevToolsPresent = typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined";
      function injectInternals(internals) {
        if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ === "undefined") {
          return false;
        }
        var hook = __REACT_DEVTOOLS_GLOBAL_HOOK__;
        if (hook.isDisabled) {
          return true;
        }
        if (!hook.supportsFiber) {
          {
            error("The installed version of React DevTools is too old and will not work " + "with the current version of React. Please update React DevTools. " + "https://reactjs.org/link/react-devtools");
          }
          return true;
        }
        try {
          if (enableSchedulingProfiler) {
            internals = assign({}, internals, {
              getLaneLabelMap,
              injectProfilingHooks
            });
          }
          rendererID = hook.inject(internals);
          injectedHook = hook;
        } catch (err) {
          {
            error("React instrumentation encountered an error: %s.", err);
          }
        }
        if (hook.checkDCE) {
          return true;
        } else {
          return false;
        }
      }
      function onScheduleRoot(root2, children) {
        {
          if (injectedHook && typeof injectedHook.onScheduleFiberRoot === "function") {
            try {
              injectedHook.onScheduleFiberRoot(rendererID, root2, children);
            } catch (err) {
              if (!hasLoggedError) {
                hasLoggedError = true;
                error("React instrumentation encountered an error: %s", err);
              }
            }
          }
        }
      }
      function onCommitRoot$1(root2, eventPriority) {
        if (injectedHook && typeof injectedHook.onCommitFiberRoot === "function") {
          try {
            var didError = (root2.current.flags & DidCapture) === DidCapture;
            if (enableProfilerTimer) {
              var schedulerPriority;
              switch (eventPriority) {
                case DiscreteEventPriority:
                  schedulerPriority = ImmediatePriority;
                  break;
                case ContinuousEventPriority:
                  schedulerPriority = UserBlockingPriority;
                  break;
                case DefaultEventPriority:
                  schedulerPriority = NormalPriority$1;
                  break;
                case IdleEventPriority:
                  schedulerPriority = IdlePriority;
                  break;
                default:
                  schedulerPriority = NormalPriority$1;
                  break;
              }
              injectedHook.onCommitFiberRoot(rendererID, root2, schedulerPriority, didError);
            }
          } catch (err) {
            {
              if (!hasLoggedError) {
                hasLoggedError = true;
                error("React instrumentation encountered an error: %s", err);
              }
            }
          }
        }
      }
      function onPostCommitRoot(root2) {
        if (injectedHook && typeof injectedHook.onPostCommitFiberRoot === "function") {
          try {
            injectedHook.onPostCommitFiberRoot(rendererID, root2);
          } catch (err) {
            {
              if (!hasLoggedError) {
                hasLoggedError = true;
                error("React instrumentation encountered an error: %s", err);
              }
            }
          }
        }
      }
      function onCommitUnmount(fiber) {
        if (injectedHook && typeof injectedHook.onCommitFiberUnmount === "function") {
          try {
            injectedHook.onCommitFiberUnmount(rendererID, fiber);
          } catch (err) {
            {
              if (!hasLoggedError) {
                hasLoggedError = true;
                error("React instrumentation encountered an error: %s", err);
              }
            }
          }
        }
      }
      function setIsStrictModeForDevtools(newIsStrictMode) {
        {
          if (typeof log$1 === "function") {
            unstable_setDisableYieldValue2(newIsStrictMode);
            setSuppressWarning(newIsStrictMode);
          }
          if (injectedHook && typeof injectedHook.setStrictMode === "function") {
            try {
              injectedHook.setStrictMode(rendererID, newIsStrictMode);
            } catch (err) {
              {
                if (!hasLoggedError) {
                  hasLoggedError = true;
                  error("React instrumentation encountered an error: %s", err);
                }
              }
            }
          }
        }
      }
      function injectProfilingHooks(profilingHooks) {
        injectedProfilingHooks = profilingHooks;
      }
      function getLaneLabelMap() {
        {
          var map = new Map;
          var lane = 1;
          for (var index2 = 0;index2 < TotalLanes; index2++) {
            var label = getLabelForLane(lane);
            map.set(lane, label);
            lane *= 2;
          }
          return map;
        }
      }
      function markCommitStarted(lanes) {
        {
          if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markCommitStarted === "function") {
            injectedProfilingHooks.markCommitStarted(lanes);
          }
        }
      }
      function markCommitStopped() {
        {
          if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markCommitStopped === "function") {
            injectedProfilingHooks.markCommitStopped();
          }
        }
      }
      function markComponentRenderStarted(fiber) {
        {
          if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentRenderStarted === "function") {
            injectedProfilingHooks.markComponentRenderStarted(fiber);
          }
        }
      }
      function markComponentRenderStopped() {
        {
          if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentRenderStopped === "function") {
            injectedProfilingHooks.markComponentRenderStopped();
          }
        }
      }
      function markComponentPassiveEffectMountStarted(fiber) {
        {
          if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentPassiveEffectMountStarted === "function") {
            injectedProfilingHooks.markComponentPassiveEffectMountStarted(fiber);
          }
        }
      }
      function markComponentPassiveEffectMountStopped() {
        {
          if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentPassiveEffectMountStopped === "function") {
            injectedProfilingHooks.markComponentPassiveEffectMountStopped();
          }
        }
      }
      function markComponentPassiveEffectUnmountStarted(fiber) {
        {
          if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentPassiveEffectUnmountStarted === "function") {
            injectedProfilingHooks.markComponentPassiveEffectUnmountStarted(fiber);
          }
        }
      }
      function markComponentPassiveEffectUnmountStopped() {
        {
          if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentPassiveEffectUnmountStopped === "function") {
            injectedProfilingHooks.markComponentPassiveEffectUnmountStopped();
          }
        }
      }
      function markComponentLayoutEffectMountStarted(fiber) {
        {
          if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentLayoutEffectMountStarted === "function") {
            injectedProfilingHooks.markComponentLayoutEffectMountStarted(fiber);
          }
        }
      }
      function markComponentLayoutEffectMountStopped() {
        {
          if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentLayoutEffectMountStopped === "function") {
            injectedProfilingHooks.markComponentLayoutEffectMountStopped();
          }
        }
      }
      function markComponentLayoutEffectUnmountStarted(fiber) {
        {
          if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentLayoutEffectUnmountStarted === "function") {
            injectedProfilingHooks.markComponentLayoutEffectUnmountStarted(fiber);
          }
        }
      }
      function markComponentLayoutEffectUnmountStopped() {
        {
          if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentLayoutEffectUnmountStopped === "function") {
            injectedProfilingHooks.markComponentLayoutEffectUnmountStopped();
          }
        }
      }
      function markComponentErrored(fiber, thrownValue, lanes) {
        {
          if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentErrored === "function") {
            injectedProfilingHooks.markComponentErrored(fiber, thrownValue, lanes);
          }
        }
      }
      function markComponentSuspended(fiber, wakeable, lanes) {
        {
          if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentSuspended === "function") {
            injectedProfilingHooks.markComponentSuspended(fiber, wakeable, lanes);
          }
        }
      }
      function markLayoutEffectsStarted(lanes) {
        {
          if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markLayoutEffectsStarted === "function") {
            injectedProfilingHooks.markLayoutEffectsStarted(lanes);
          }
        }
      }
      function markLayoutEffectsStopped() {
        {
          if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markLayoutEffectsStopped === "function") {
            injectedProfilingHooks.markLayoutEffectsStopped();
          }
        }
      }
      function markPassiveEffectsStarted(lanes) {
        {
          if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markPassiveEffectsStarted === "function") {
            injectedProfilingHooks.markPassiveEffectsStarted(lanes);
          }
        }
      }
      function markPassiveEffectsStopped() {
        {
          if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markPassiveEffectsStopped === "function") {
            injectedProfilingHooks.markPassiveEffectsStopped();
          }
        }
      }
      function markRenderStarted(lanes) {
        {
          if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markRenderStarted === "function") {
            injectedProfilingHooks.markRenderStarted(lanes);
          }
        }
      }
      function markRenderYielded() {
        {
          if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markRenderYielded === "function") {
            injectedProfilingHooks.markRenderYielded();
          }
        }
      }
      function markRenderStopped() {
        {
          if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markRenderStopped === "function") {
            injectedProfilingHooks.markRenderStopped();
          }
        }
      }
      function markRenderScheduled(lane) {
        {
          if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markRenderScheduled === "function") {
            injectedProfilingHooks.markRenderScheduled(lane);
          }
        }
      }
      function markForceUpdateScheduled(fiber, lane) {
        {
          if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markForceUpdateScheduled === "function") {
            injectedProfilingHooks.markForceUpdateScheduled(fiber, lane);
          }
        }
      }
      function markStateUpdateScheduled(fiber, lane) {
        {
          if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markStateUpdateScheduled === "function") {
            injectedProfilingHooks.markStateUpdateScheduled(fiber, lane);
          }
        }
      }
      var NoMode = 0;
      var ConcurrentMode = 1;
      var ProfileMode = 2;
      var StrictLegacyMode = 8;
      var StrictEffectsMode = 16;
      var clz32 = Math.clz32 ? Math.clz32 : clz32Fallback;
      var log2 = Math.log;
      var LN2 = Math.LN2;
      function clz32Fallback(x) {
        var asUint = x >>> 0;
        if (asUint === 0) {
          return 32;
        }
        return 31 - (log2(asUint) / LN2 | 0) | 0;
      }
      var TotalLanes = 31;
      var NoLanes = 0;
      var NoLane = 0;
      var SyncHydrationLane = 1;
      var SyncLane = 2;
      var InputContinuousHydrationLane = 4;
      var InputContinuousLane = 8;
      var DefaultHydrationLane = 16;
      var DefaultLane = 32;
      var SyncUpdateLanes = 42;
      var TransitionHydrationLane = 64;
      var TransitionLanes = 8388480;
      var TransitionLane1 = 128;
      var TransitionLane2 = 256;
      var TransitionLane3 = 512;
      var TransitionLane4 = 1024;
      var TransitionLane5 = 2048;
      var TransitionLane6 = 4096;
      var TransitionLane7 = 8192;
      var TransitionLane8 = 16384;
      var TransitionLane9 = 32768;
      var TransitionLane10 = 65536;
      var TransitionLane11 = 131072;
      var TransitionLane12 = 262144;
      var TransitionLane13 = 524288;
      var TransitionLane14 = 1048576;
      var TransitionLane15 = 2097152;
      var TransitionLane16 = 4194304;
      var RetryLanes = 125829120;
      var RetryLane1 = 8388608;
      var RetryLane2 = 16777216;
      var RetryLane3 = 33554432;
      var RetryLane4 = 67108864;
      var SomeRetryLane = RetryLane1;
      var SelectiveHydrationLane = 134217728;
      var NonIdleLanes = 268435455;
      var IdleHydrationLane = 268435456;
      var IdleLane = 536870912;
      var OffscreenLane = 1073741824;
      function getLabelForLane(lane) {
        {
          if (lane & SyncHydrationLane) {
            return "SyncHydrationLane";
          }
          if (lane & SyncLane) {
            return "Sync";
          }
          if (lane & InputContinuousHydrationLane) {
            return "InputContinuousHydration";
          }
          if (lane & InputContinuousLane) {
            return "InputContinuous";
          }
          if (lane & DefaultHydrationLane) {
            return "DefaultHydration";
          }
          if (lane & DefaultLane) {
            return "Default";
          }
          if (lane & TransitionHydrationLane) {
            return "TransitionHydration";
          }
          if (lane & TransitionLanes) {
            return "Transition";
          }
          if (lane & RetryLanes) {
            return "Retry";
          }
          if (lane & SelectiveHydrationLane) {
            return "SelectiveHydration";
          }
          if (lane & IdleHydrationLane) {
            return "IdleHydration";
          }
          if (lane & IdleLane) {
            return "Idle";
          }
          if (lane & OffscreenLane) {
            return "Offscreen";
          }
        }
      }
      var NoTimestamp = -1;
      var nextTransitionLane = TransitionLane1;
      var nextRetryLane = RetryLane1;
      function getHighestPriorityLanes(lanes) {
        {
          var pendingSyncLanes = lanes & SyncUpdateLanes;
          if (pendingSyncLanes !== 0) {
            return pendingSyncLanes;
          }
        }
        switch (getHighestPriorityLane(lanes)) {
          case SyncHydrationLane:
            return SyncHydrationLane;
          case SyncLane:
            return SyncLane;
          case InputContinuousHydrationLane:
            return InputContinuousHydrationLane;
          case InputContinuousLane:
            return InputContinuousLane;
          case DefaultHydrationLane:
            return DefaultHydrationLane;
          case DefaultLane:
            return DefaultLane;
          case TransitionHydrationLane:
            return TransitionHydrationLane;
          case TransitionLane1:
          case TransitionLane2:
          case TransitionLane3:
          case TransitionLane4:
          case TransitionLane5:
          case TransitionLane6:
          case TransitionLane7:
          case TransitionLane8:
          case TransitionLane9:
          case TransitionLane10:
          case TransitionLane11:
          case TransitionLane12:
          case TransitionLane13:
          case TransitionLane14:
          case TransitionLane15:
          case TransitionLane16:
            return lanes & TransitionLanes;
          case RetryLane1:
          case RetryLane2:
          case RetryLane3:
          case RetryLane4:
            return lanes & RetryLanes;
          case SelectiveHydrationLane:
            return SelectiveHydrationLane;
          case IdleHydrationLane:
            return IdleHydrationLane;
          case IdleLane:
            return IdleLane;
          case OffscreenLane:
            return OffscreenLane;
          default:
            {
              error("Should have found matching lanes. This is a bug in React.");
            }
            return lanes;
        }
      }
      function getNextLanes(root2, wipLanes) {
        var pendingLanes = root2.pendingLanes;
        if (pendingLanes === NoLanes) {
          return NoLanes;
        }
        var nextLanes = NoLanes;
        var suspendedLanes = root2.suspendedLanes;
        var pingedLanes = root2.pingedLanes;
        var nonIdlePendingLanes = pendingLanes & NonIdleLanes;
        if (nonIdlePendingLanes !== NoLanes) {
          var nonIdleUnblockedLanes = nonIdlePendingLanes & ~suspendedLanes;
          if (nonIdleUnblockedLanes !== NoLanes) {
            nextLanes = getHighestPriorityLanes(nonIdleUnblockedLanes);
          } else {
            var nonIdlePingedLanes = nonIdlePendingLanes & pingedLanes;
            if (nonIdlePingedLanes !== NoLanes) {
              nextLanes = getHighestPriorityLanes(nonIdlePingedLanes);
            }
          }
        } else {
          var unblockedLanes = pendingLanes & ~suspendedLanes;
          if (unblockedLanes !== NoLanes) {
            nextLanes = getHighestPriorityLanes(unblockedLanes);
          } else {
            if (pingedLanes !== NoLanes) {
              nextLanes = getHighestPriorityLanes(pingedLanes);
            }
          }
        }
        if (nextLanes === NoLanes) {
          return NoLanes;
        }
        if (wipLanes !== NoLanes && wipLanes !== nextLanes && (wipLanes & suspendedLanes) === NoLanes) {
          var nextLane = getHighestPriorityLane(nextLanes);
          var wipLane = getHighestPriorityLane(wipLanes);
          if (nextLane >= wipLane || nextLane === DefaultLane && (wipLane & TransitionLanes) !== NoLanes) {
            return wipLanes;
          }
        }
        if ((nextLanes & InputContinuousLane) !== NoLanes) {
          nextLanes |= pendingLanes & DefaultLane;
        }
        var entangledLanes = root2.entangledLanes;
        if (entangledLanes !== NoLanes) {
          var entanglements = root2.entanglements;
          var lanes = nextLanes & entangledLanes;
          while (lanes > 0) {
            var index2 = pickArbitraryLaneIndex(lanes);
            var lane = 1 << index2;
            nextLanes |= entanglements[index2];
            lanes &= ~lane;
          }
        }
        return nextLanes;
      }
      function computeExpirationTime(lane, currentTime) {
        switch (lane) {
          case SyncHydrationLane:
          case SyncLane:
          case InputContinuousHydrationLane:
          case InputContinuousLane:
            return currentTime + 250;
          case DefaultHydrationLane:
          case DefaultLane:
          case TransitionHydrationLane:
          case TransitionLane1:
          case TransitionLane2:
          case TransitionLane3:
          case TransitionLane4:
          case TransitionLane5:
          case TransitionLane6:
          case TransitionLane7:
          case TransitionLane8:
          case TransitionLane9:
          case TransitionLane10:
          case TransitionLane11:
          case TransitionLane12:
          case TransitionLane13:
          case TransitionLane14:
          case TransitionLane15:
          case TransitionLane16:
            return currentTime + 5000;
          case RetryLane1:
          case RetryLane2:
          case RetryLane3:
          case RetryLane4:
            return NoTimestamp;
          case SelectiveHydrationLane:
          case IdleHydrationLane:
          case IdleLane:
          case OffscreenLane:
            return NoTimestamp;
          default:
            {
              error("Should have found matching lanes. This is a bug in React.");
            }
            return NoTimestamp;
        }
      }
      function markStarvedLanesAsExpired(root2, currentTime) {
        var pendingLanes = root2.pendingLanes;
        var suspendedLanes = root2.suspendedLanes;
        var pingedLanes = root2.pingedLanes;
        var expirationTimes = root2.expirationTimes;
        var lanes = pendingLanes & ~RetryLanes;
        while (lanes > 0) {
          var index2 = pickArbitraryLaneIndex(lanes);
          var lane = 1 << index2;
          var expirationTime = expirationTimes[index2];
          if (expirationTime === NoTimestamp) {
            if ((lane & suspendedLanes) === NoLanes || (lane & pingedLanes) !== NoLanes) {
              expirationTimes[index2] = computeExpirationTime(lane, currentTime);
            }
          } else if (expirationTime <= currentTime) {
            root2.expiredLanes |= lane;
          }
          lanes &= ~lane;
        }
      }
      function getHighestPriorityPendingLanes(root2) {
        return getHighestPriorityLanes(root2.pendingLanes);
      }
      function getLanesToRetrySynchronouslyOnError(root2, originallyAttemptedLanes) {
        if (root2.errorRecoveryDisabledLanes & originallyAttemptedLanes) {
          return NoLanes;
        }
        var everythingButOffscreen = root2.pendingLanes & ~OffscreenLane;
        if (everythingButOffscreen !== NoLanes) {
          return everythingButOffscreen;
        }
        if (everythingButOffscreen & OffscreenLane) {
          return OffscreenLane;
        }
        return NoLanes;
      }
      function includesSyncLane(lanes) {
        return (lanes & (SyncLane | SyncHydrationLane)) !== NoLanes;
      }
      function includesNonIdleWork(lanes) {
        return (lanes & NonIdleLanes) !== NoLanes;
      }
      function includesOnlyRetries(lanes) {
        return (lanes & RetryLanes) === lanes;
      }
      function includesOnlyNonUrgentLanes(lanes) {
        var UrgentLanes = SyncLane | InputContinuousLane | DefaultLane;
        return (lanes & UrgentLanes) === NoLanes;
      }
      function includesOnlyTransitions(lanes) {
        return (lanes & TransitionLanes) === lanes;
      }
      function includesBlockingLane(root2, lanes) {
        var SyncDefaultLanes = InputContinuousHydrationLane | InputContinuousLane | DefaultHydrationLane | DefaultLane;
        return (lanes & SyncDefaultLanes) !== NoLanes;
      }
      function includesExpiredLane(root2, lanes) {
        return (lanes & root2.expiredLanes) !== NoLanes;
      }
      function isTransitionLane(lane) {
        return (lane & TransitionLanes) !== NoLanes;
      }
      function claimNextTransitionLane() {
        var lane = nextTransitionLane;
        nextTransitionLane <<= 1;
        if ((nextTransitionLane & TransitionLanes) === NoLanes) {
          nextTransitionLane = TransitionLane1;
        }
        return lane;
      }
      function claimNextRetryLane() {
        var lane = nextRetryLane;
        nextRetryLane <<= 1;
        if ((nextRetryLane & RetryLanes) === NoLanes) {
          nextRetryLane = RetryLane1;
        }
        return lane;
      }
      function getHighestPriorityLane(lanes) {
        return lanes & -lanes;
      }
      function pickArbitraryLane(lanes) {
        return getHighestPriorityLane(lanes);
      }
      function pickArbitraryLaneIndex(lanes) {
        return 31 - clz32(lanes);
      }
      function laneToIndex(lane) {
        return pickArbitraryLaneIndex(lane);
      }
      function includesSomeLane(a, b) {
        return (a & b) !== NoLanes;
      }
      function isSubsetOfLanes(set3, subset) {
        return (set3 & subset) === subset;
      }
      function mergeLanes(a, b) {
        return a | b;
      }
      function removeLanes(set3, subset) {
        return set3 & ~subset;
      }
      function intersectLanes(a, b) {
        return a & b;
      }
      function laneToLanes(lane) {
        return lane;
      }
      function higherPriorityLane(a, b) {
        return a !== NoLane && a < b ? a : b;
      }
      function createLaneMap(initial) {
        var laneMap = [];
        for (var i = 0;i < TotalLanes; i++) {
          laneMap.push(initial);
        }
        return laneMap;
      }
      function markRootUpdated(root2, updateLane) {
        root2.pendingLanes |= updateLane;
        if (updateLane !== IdleLane) {
          root2.suspendedLanes = NoLanes;
          root2.pingedLanes = NoLanes;
        }
      }
      function markRootSuspended$1(root2, suspendedLanes) {
        root2.suspendedLanes |= suspendedLanes;
        root2.pingedLanes &= ~suspendedLanes;
        var expirationTimes = root2.expirationTimes;
        var lanes = suspendedLanes;
        while (lanes > 0) {
          var index2 = pickArbitraryLaneIndex(lanes);
          var lane = 1 << index2;
          expirationTimes[index2] = NoTimestamp;
          lanes &= ~lane;
        }
      }
      function markRootPinged(root2, pingedLanes) {
        root2.pingedLanes |= root2.suspendedLanes & pingedLanes;
      }
      function markRootFinished(root2, remainingLanes) {
        var noLongerPendingLanes = root2.pendingLanes & ~remainingLanes;
        root2.pendingLanes = remainingLanes;
        root2.suspendedLanes = NoLanes;
        root2.pingedLanes = NoLanes;
        root2.expiredLanes &= remainingLanes;
        root2.mutableReadLanes &= remainingLanes;
        root2.entangledLanes &= remainingLanes;
        root2.errorRecoveryDisabledLanes &= remainingLanes;
        var entanglements = root2.entanglements;
        var expirationTimes = root2.expirationTimes;
        var hiddenUpdates = root2.hiddenUpdates;
        var lanes = noLongerPendingLanes;
        while (lanes > 0) {
          var index2 = pickArbitraryLaneIndex(lanes);
          var lane = 1 << index2;
          entanglements[index2] = NoLanes;
          expirationTimes[index2] = NoTimestamp;
          var hiddenUpdatesForLane = hiddenUpdates[index2];
          if (hiddenUpdatesForLane !== null) {
            hiddenUpdates[index2] = null;
            for (var i = 0;i < hiddenUpdatesForLane.length; i++) {
              var update = hiddenUpdatesForLane[i];
              if (update !== null) {
                update.lane &= ~OffscreenLane;
              }
            }
          }
          lanes &= ~lane;
        }
      }
      function markRootEntangled(root2, entangledLanes) {
        var rootEntangledLanes = root2.entangledLanes |= entangledLanes;
        var entanglements = root2.entanglements;
        var lanes = rootEntangledLanes;
        while (lanes) {
          var index2 = pickArbitraryLaneIndex(lanes);
          var lane = 1 << index2;
          if (lane & entangledLanes | entanglements[index2] & entangledLanes) {
            entanglements[index2] |= entangledLanes;
          }
          lanes &= ~lane;
        }
      }
      function markHiddenUpdate(root2, update, lane) {
        var index2 = laneToIndex(lane);
        var hiddenUpdates = root2.hiddenUpdates;
        var hiddenUpdatesForLane = hiddenUpdates[index2];
        if (hiddenUpdatesForLane === null) {
          hiddenUpdates[index2] = [update];
        } else {
          hiddenUpdatesForLane.push(update);
        }
        update.lane = lane | OffscreenLane;
      }
      function getBumpedLaneForHydration(root2, renderLanes2) {
        var renderLane = getHighestPriorityLane(renderLanes2);
        var lane;
        if ((renderLane & SyncUpdateLanes) !== NoLane) {
          lane = SyncHydrationLane;
        } else {
          switch (renderLane) {
            case SyncLane:
              lane = SyncHydrationLane;
              break;
            case InputContinuousLane:
              lane = InputContinuousHydrationLane;
              break;
            case DefaultLane:
              lane = DefaultHydrationLane;
              break;
            case TransitionLane1:
            case TransitionLane2:
            case TransitionLane3:
            case TransitionLane4:
            case TransitionLane5:
            case TransitionLane6:
            case TransitionLane7:
            case TransitionLane8:
            case TransitionLane9:
            case TransitionLane10:
            case TransitionLane11:
            case TransitionLane12:
            case TransitionLane13:
            case TransitionLane14:
            case TransitionLane15:
            case TransitionLane16:
            case RetryLane1:
            case RetryLane2:
            case RetryLane3:
            case RetryLane4:
              lane = TransitionHydrationLane;
              break;
            case IdleLane:
              lane = IdleHydrationLane;
              break;
            default:
              lane = NoLane;
              break;
          }
        }
        if ((lane & (root2.suspendedLanes | renderLanes2)) !== NoLane) {
          return NoLane;
        }
        return lane;
      }
      function addFiberToLanesMap(root2, fiber, lanes) {
        if (!isDevToolsPresent) {
          return;
        }
        var pendingUpdatersLaneMap = root2.pendingUpdatersLaneMap;
        while (lanes > 0) {
          var index2 = laneToIndex(lanes);
          var lane = 1 << index2;
          var updaters = pendingUpdatersLaneMap[index2];
          updaters.add(fiber);
          lanes &= ~lane;
        }
      }
      function movePendingFibersToMemoized(root2, lanes) {
        if (!isDevToolsPresent) {
          return;
        }
        var pendingUpdatersLaneMap = root2.pendingUpdatersLaneMap;
        var memoizedUpdaters = root2.memoizedUpdaters;
        while (lanes > 0) {
          var index2 = laneToIndex(lanes);
          var lane = 1 << index2;
          var updaters = pendingUpdatersLaneMap[index2];
          if (updaters.size > 0) {
            updaters.forEach(function(fiber) {
              var alternate = fiber.alternate;
              if (alternate === null || !memoizedUpdaters.has(alternate)) {
                memoizedUpdaters.add(fiber);
              }
            });
            updaters.clear();
          }
          lanes &= ~lane;
        }
      }
      function getTransitionsForLanes(root2, lanes) {
        {
          return null;
        }
      }
      var DiscreteEventPriority = SyncLane;
      var ContinuousEventPriority = InputContinuousLane;
      var DefaultEventPriority = DefaultLane;
      var IdleEventPriority = IdleLane;
      var currentUpdatePriority = NoLane;
      function getCurrentUpdatePriority() {
        return currentUpdatePriority;
      }
      function setCurrentUpdatePriority(newPriority) {
        currentUpdatePriority = newPriority;
      }
      function runWithPriority(priority, fn) {
        var previousPriority = currentUpdatePriority;
        try {
          currentUpdatePriority = priority;
          return fn();
        } finally {
          currentUpdatePriority = previousPriority;
        }
      }
      function higherEventPriority(a, b) {
        return a !== 0 && a < b ? a : b;
      }
      function lowerEventPriority(a, b) {
        return a === 0 || a > b ? a : b;
      }
      function isHigherEventPriority(a, b) {
        return a !== 0 && a < b;
      }
      function lanesToEventPriority(lanes) {
        var lane = getHighestPriorityLane(lanes);
        if (!isHigherEventPriority(DiscreteEventPriority, lane)) {
          return DiscreteEventPriority;
        }
        if (!isHigherEventPriority(ContinuousEventPriority, lane)) {
          return ContinuousEventPriority;
        }
        if (includesNonIdleWork(lane)) {
          return DefaultEventPriority;
        }
        return IdleEventPriority;
      }
      var hasOwnProperty = Object.prototype.hasOwnProperty;
      function typeName(value) {
        {
          var hasToStringTag = typeof Symbol === "function" && Symbol.toStringTag;
          var type = hasToStringTag && value[Symbol.toStringTag] || value.constructor.name || "Object";
          return type;
        }
      }
      function willCoercionThrow(value) {
        {
          try {
            testStringCoercion(value);
            return false;
          } catch (e) {
            return true;
          }
        }
      }
      function testStringCoercion(value) {
        return "" + value;
      }
      function checkAttributeStringCoercion(value, attributeName) {
        {
          if (willCoercionThrow(value)) {
            error("The provided `%s` attribute is an unsupported type %s." + " This value must be coerced to a string before before using it here.", attributeName, typeName(value));
            return testStringCoercion(value);
          }
        }
      }
      function checkKeyStringCoercion(value) {
        {
          if (willCoercionThrow(value)) {
            error("The provided key is an unsupported type %s." + " This value must be coerced to a string before before using it here.", typeName(value));
            return testStringCoercion(value);
          }
        }
      }
      function checkPropStringCoercion(value, propName) {
        {
          if (willCoercionThrow(value)) {
            error("The provided `%s` prop is an unsupported type %s." + " This value must be coerced to a string before before using it here.", propName, typeName(value));
            return testStringCoercion(value);
          }
        }
      }
      function checkCSSPropertyStringCoercion(value, propName) {
        {
          if (willCoercionThrow(value)) {
            error("The provided `%s` CSS property is an unsupported type %s." + " This value must be coerced to a string before before using it here.", propName, typeName(value));
            return testStringCoercion(value);
          }
        }
      }
      function checkHtmlStringCoercion(value) {
        {
          if (willCoercionThrow(value)) {
            error("The provided HTML markup uses a value of unsupported type %s." + " This value must be coerced to a string before before using it here.", typeName(value));
            return testStringCoercion(value);
          }
        }
      }
      function checkFormFieldValueStringCoercion(value) {
        {
          if (willCoercionThrow(value)) {
            error("Form field values (value, checked, defaultValue, or defaultChecked props)" + " must be strings, not %s." + " This value must be coerced to a string before before using it here.", typeName(value));
            return testStringCoercion(value);
          }
        }
      }
      var FunctionComponent = 0;
      var ClassComponent = 1;
      var IndeterminateComponent = 2;
      var HostRoot = 3;
      var HostPortal = 4;
      var HostComponent = 5;
      var HostText = 6;
      var Fragment2 = 7;
      var Mode = 8;
      var ContextConsumer = 9;
      var ContextProvider = 10;
      var ForwardRef = 11;
      var Profiler = 12;
      var SuspenseComponent = 13;
      var MemoComponent = 14;
      var SimpleMemoComponent = 15;
      var LazyComponent = 16;
      var IncompleteClassComponent = 17;
      var DehydratedFragment = 18;
      var SuspenseListComponent = 19;
      var ScopeComponent = 21;
      var OffscreenComponent = 22;
      var LegacyHiddenComponent = 23;
      var CacheComponent = 24;
      var TracingMarkerComponent = 25;
      var HostHoistable = 26;
      var HostSingleton = 27;
      var randomKey = Math.random().toString(36).slice(2);
      var internalInstanceKey = "__reactFiber$" + randomKey;
      var internalPropsKey = "__reactProps$" + randomKey;
      var internalContainerInstanceKey = "__reactContainer$" + randomKey;
      var internalEventHandlersKey = "__reactEvents$" + randomKey;
      var internalEventHandlerListenersKey = "__reactListeners$" + randomKey;
      var internalEventHandlesSetKey = "__reactHandles$" + randomKey;
      var internalRootNodeResourcesKey = "__reactResources$" + randomKey;
      var internalHoistableMarker = "__reactMarker$" + randomKey;
      function detachDeletedInstance(node) {
        delete node[internalInstanceKey];
        delete node[internalPropsKey];
        delete node[internalEventHandlersKey];
        delete node[internalEventHandlerListenersKey];
        delete node[internalEventHandlesSetKey];
      }
      function precacheFiberNode(hostInst, node) {
        node[internalInstanceKey] = hostInst;
      }
      function markContainerAsRoot(hostRoot, node) {
        node[internalContainerInstanceKey] = hostRoot;
      }
      function unmarkContainerAsRoot(node) {
        node[internalContainerInstanceKey] = null;
      }
      function isContainerMarkedAsRoot(node) {
        return !!node[internalContainerInstanceKey];
      }
      function getClosestInstanceFromNode(targetNode) {
        var targetInst = targetNode[internalInstanceKey];
        if (targetInst) {
          return targetInst;
        }
        var parentNode = targetNode.parentNode;
        while (parentNode) {
          targetInst = parentNode[internalContainerInstanceKey] || parentNode[internalInstanceKey];
          if (targetInst) {
            var alternate = targetInst.alternate;
            if (targetInst.child !== null || alternate !== null && alternate.child !== null) {
              var suspenseInstance = getParentSuspenseInstance(targetNode);
              while (suspenseInstance !== null) {
                var targetSuspenseInst = suspenseInstance[internalInstanceKey];
                if (targetSuspenseInst) {
                  return targetSuspenseInst;
                }
                suspenseInstance = getParentSuspenseInstance(suspenseInstance);
              }
            }
            return targetInst;
          }
          targetNode = parentNode;
          parentNode = targetNode.parentNode;
        }
        return null;
      }
      function getInstanceFromNode(node) {
        var inst = node[internalInstanceKey] || node[internalContainerInstanceKey];
        if (inst) {
          var tag = inst.tag;
          if (tag === HostComponent || tag === HostText || tag === SuspenseComponent || tag === HostHoistable || tag === HostSingleton || tag === HostRoot) {
            return inst;
          } else {
            return null;
          }
        }
        return null;
      }
      function getNodeFromInstance(inst) {
        var tag = inst.tag;
        if (tag === HostComponent || tag === HostHoistable || tag === HostSingleton || tag === HostText) {
          return inst.stateNode;
        }
        throw new Error("getNodeFromInstance: Invalid argument.");
      }
      function getFiberCurrentPropsFromNode(node) {
        return node[internalPropsKey] || null;
      }
      function updateFiberProps(node, props) {
        node[internalPropsKey] = props;
      }
      function getEventListenerSet(node) {
        var elementListenerSet = node[internalEventHandlersKey];
        if (elementListenerSet === undefined) {
          elementListenerSet = node[internalEventHandlersKey] = new Set;
        }
        return elementListenerSet;
      }
      function getResourcesFromRoot(root2) {
        var resources = root2[internalRootNodeResourcesKey];
        if (!resources) {
          resources = root2[internalRootNodeResourcesKey] = {
            hoistableStyles: new Map,
            hoistableScripts: new Map
          };
        }
        return resources;
      }
      function isMarkedHoistable(node) {
        return !!node[internalHoistableMarker];
      }
      function markNodeAsHoistable(node) {
        node[internalHoistableMarker] = true;
      }
      function isOwnedInstance(node) {
        return !!(node[internalHoistableMarker] || node[internalInstanceKey]);
      }
      var allNativeEvents = new Set;
      var registrationNameDependencies = {};
      var possibleRegistrationNames = {};
      function registerTwoPhaseEvent(registrationName, dependencies) {
        registerDirectEvent(registrationName, dependencies);
        registerDirectEvent(registrationName + "Capture", dependencies);
      }
      function registerDirectEvent(registrationName, dependencies) {
        {
          if (registrationNameDependencies[registrationName]) {
            error("EventRegistry: More than one plugin attempted to publish the same " + "registration name, `%s`.", registrationName);
          }
        }
        registrationNameDependencies[registrationName] = dependencies;
        {
          var lowerCasedName = registrationName.toLowerCase();
          possibleRegistrationNames[lowerCasedName] = registrationName;
          if (registrationName === "onDoubleClick") {
            possibleRegistrationNames.ondblclick = registrationName;
          }
        }
        for (var i = 0;i < dependencies.length; i++) {
          allNativeEvents.add(dependencies[i]);
        }
      }
      var canUseDOM = !!(typeof window !== "undefined" && typeof window.document !== "undefined" && typeof window.document.createElement !== "undefined");
      var hasReadOnlyValue = {
        button: true,
        checkbox: true,
        image: true,
        hidden: true,
        radio: true,
        reset: true,
        submit: true
      };
      function checkControlledValueProps(tagName, props) {
        {
          if (!(hasReadOnlyValue[props.type] || props.onChange || props.onInput || props.readOnly || props.disabled || props.value == null)) {
            error("You provided a `value` prop to a form field without an " + "`onChange` handler. This will render a read-only field. If " + "the field should be mutable use `defaultValue`. Otherwise, " + "set either `onChange` or `readOnly`.");
          }
          if (!(props.onChange || props.readOnly || props.disabled || props.checked == null)) {
            error("You provided a `checked` prop to a form field without an " + "`onChange` handler. This will render a read-only field. If " + "the field should be mutable use `defaultChecked`. Otherwise, " + "set either `onChange` or `readOnly`.");
          }
        }
      }
      var ATTRIBUTE_NAME_START_CHAR = ":A-Z_a-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD";
      var ATTRIBUTE_NAME_CHAR = ATTRIBUTE_NAME_START_CHAR + "\\-.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040";
      var VALID_ATTRIBUTE_NAME_REGEX = new RegExp("^[" + ATTRIBUTE_NAME_START_CHAR + "][" + ATTRIBUTE_NAME_CHAR + "]*$");
      var illegalAttributeNameCache = {};
      var validatedAttributeNameCache = {};
      function isAttributeNameSafe(attributeName) {
        if (hasOwnProperty.call(validatedAttributeNameCache, attributeName)) {
          return true;
        }
        if (hasOwnProperty.call(illegalAttributeNameCache, attributeName)) {
          return false;
        }
        if (VALID_ATTRIBUTE_NAME_REGEX.test(attributeName)) {
          validatedAttributeNameCache[attributeName] = true;
          return true;
        }
        illegalAttributeNameCache[attributeName] = true;
        {
          error("Invalid attribute name: `%s`", attributeName);
        }
        return false;
      }
      function getValueForAttribute(node, name, expected) {
        {
          if (!isAttributeNameSafe(name)) {
            return;
          }
          if (!node.hasAttribute(name)) {
            switch (typeof expected) {
              case "function":
              case "symbol":
                return expected;
              case "boolean": {
                var prefix2 = name.toLowerCase().slice(0, 5);
                if (prefix2 !== "data-" && prefix2 !== "aria-") {
                  return expected;
                }
              }
            }
            return expected === undefined ? undefined : null;
          }
          var value = node.getAttribute(name);
          {
            checkAttributeStringCoercion(expected, name);
          }
          if (value === "" + expected) {
            return expected;
          }
          return value;
        }
      }
      function getValueForAttributeOnCustomComponent(node, name, expected) {
        {
          if (!isAttributeNameSafe(name)) {
            return;
          }
          if (!node.hasAttribute(name)) {
            switch (typeof expected) {
              case "symbol":
              case "object":
                return expected;
              case "function": {
                return expected;
              }
              case "boolean": {
                if (expected === false) {
                  return expected;
                }
              }
            }
            return expected === undefined ? undefined : null;
          }
          var value = node.getAttribute(name);
          {
            if (value === "" && expected === true) {
              return true;
            }
          }
          {
            checkAttributeStringCoercion(expected, name);
          }
          if (value === "" + expected) {
            return expected;
          }
          return value;
        }
      }
      function setValueForAttribute(node, name, value) {
        if (isAttributeNameSafe(name)) {
          if (value === null) {
            node.removeAttribute(name);
            return;
          }
          switch (typeof value) {
            case "undefined":
            case "function":
            case "symbol":
              node.removeAttribute(name);
              return;
            case "boolean": {
              var prefix2 = name.toLowerCase().slice(0, 5);
              if (prefix2 !== "data-" && prefix2 !== "aria-") {
                node.removeAttribute(name);
                return;
              }
            }
          }
          {
            checkAttributeStringCoercion(value, name);
          }
          node.setAttribute(name, "" + value);
        }
      }
      function setValueForKnownAttribute(node, name, value) {
        if (value === null) {
          node.removeAttribute(name);
          return;
        }
        switch (typeof value) {
          case "undefined":
          case "function":
          case "symbol":
          case "boolean": {
            node.removeAttribute(name);
            return;
          }
        }
        {
          checkAttributeStringCoercion(value, name);
        }
        node.setAttribute(name, "" + value);
      }
      function setValueForNamespacedAttribute(node, namespace, name, value) {
        if (value === null) {
          node.removeAttribute(name);
          return;
        }
        switch (typeof value) {
          case "undefined":
          case "function":
          case "symbol":
          case "boolean": {
            node.removeAttribute(name);
            return;
          }
        }
        {
          checkAttributeStringCoercion(value, name);
        }
        node.setAttributeNS(namespace, name, "" + value);
      }
      function setValueForPropertyOnCustomComponent(node, name, value) {
        if (name[0] === "o" && name[1] === "n") {
          var useCapture = name.endsWith("Capture");
          var eventName = name.slice(2, useCapture ? name.length - 7 : undefined);
          var prevProps = getFiberCurrentPropsFromNode(node);
          var prevValue = prevProps != null ? prevProps[name] : null;
          if (typeof prevValue === "function") {
            node.removeEventListener(eventName, prevValue, useCapture);
          }
          if (typeof value === "function") {
            if (typeof prevValue !== "function" && prevValue !== null) {
              if (name in node) {
                node[name] = null;
              } else if (node.hasAttribute(name)) {
                node.removeAttribute(name);
              }
            }
            node.addEventListener(eventName, value, useCapture);
            return;
          }
        }
        if (name in node) {
          node[name] = value;
          return;
        }
        if (value === true) {
          node.setAttribute(name, "");
          return;
        }
        setValueForAttribute(node, name, value);
      }
      var ReactCurrentDispatcher$2 = ReactSharedInternals.ReactCurrentDispatcher;
      var prefix;
      function describeBuiltInComponentFrame(name, source, ownerFn) {
        {
          if (prefix === undefined) {
            try {
              throw Error();
            } catch (x) {
              var match = x.stack.trim().match(/\n( *(at )?)/);
              prefix = match && match[1] || "";
            }
          }
          return `
` + prefix + name;
        }
      }
      var reentry = false;
      var componentFrameCache;
      {
        var PossiblyWeakMap$1 = typeof WeakMap === "function" ? WeakMap : Map;
        componentFrameCache = new PossiblyWeakMap$1;
      }
      function describeNativeComponentFrame(fn, construct) {
        if (!fn || reentry) {
          return "";
        }
        {
          var frame = componentFrameCache.get(fn);
          if (frame !== undefined) {
            return frame;
          }
        }
        var control;
        reentry = true;
        var previousPrepareStackTrace = Error.prepareStackTrace;
        Error.prepareStackTrace = undefined;
        var previousDispatcher;
        {
          previousDispatcher = ReactCurrentDispatcher$2.current;
          ReactCurrentDispatcher$2.current = null;
          disableLogs();
        }
        try {
          if (construct) {
            var Fake = function() {
              throw Error();
            };
            Object.defineProperty(Fake.prototype, "props", {
              set: function() {
                throw Error();
              }
            });
            if (typeof Reflect === "object" && Reflect.construct) {
              try {
                Reflect.construct(Fake, []);
              } catch (x) {
                control = x;
              }
              Reflect.construct(fn, [], Fake);
            } else {
              try {
                Fake.call();
              } catch (x) {
                control = x;
              }
              fn.call(Fake.prototype);
            }
          } else {
            try {
              throw Error();
            } catch (x) {
              control = x;
            }
            fn();
          }
        } catch (sample) {
          if (sample && control && typeof sample.stack === "string") {
            var sampleLines = sample.stack.split(`
`);
            var controlLines = control.stack.split(`
`);
            var s = sampleLines.length - 1;
            var c = controlLines.length - 1;
            while (s >= 1 && c >= 0 && sampleLines[s] !== controlLines[c]) {
              c--;
            }
            for (;s >= 1 && c >= 0; s--, c--) {
              if (sampleLines[s] !== controlLines[c]) {
                if (s !== 1 || c !== 1) {
                  do {
                    s--;
                    c--;
                    if (c < 0 || sampleLines[s] !== controlLines[c]) {
                      var _frame = `
` + sampleLines[s].replace(" at new ", " at ");
                      if (fn.displayName && _frame.includes("<anonymous>")) {
                        _frame = _frame.replace("<anonymous>", fn.displayName);
                      }
                      {
                        if (typeof fn === "function") {
                          componentFrameCache.set(fn, _frame);
                        }
                      }
                      return _frame;
                    }
                  } while (s >= 1 && c >= 0);
                }
                break;
              }
            }
          }
        } finally {
          reentry = false;
          {
            ReactCurrentDispatcher$2.current = previousDispatcher;
            reenableLogs();
          }
          Error.prepareStackTrace = previousPrepareStackTrace;
        }
        var name = fn ? fn.displayName || fn.name : "";
        var syntheticFrame = name ? describeBuiltInComponentFrame(name) : "";
        {
          if (typeof fn === "function") {
            componentFrameCache.set(fn, syntheticFrame);
          }
        }
        return syntheticFrame;
      }
      function describeClassComponentFrame(ctor, source, ownerFn) {
        {
          return describeNativeComponentFrame(ctor, true);
        }
      }
      function describeFunctionComponentFrame(fn, source, ownerFn) {
        {
          return describeNativeComponentFrame(fn, false);
        }
      }
      function shouldConstruct$1(Component) {
        var prototype = Component.prototype;
        return !!(prototype && prototype.isReactComponent);
      }
      function describeUnknownElementTypeFrameInDEV(type, source, ownerFn) {
        if (type == null) {
          return "";
        }
        if (typeof type === "function") {
          {
            return describeNativeComponentFrame(type, shouldConstruct$1(type));
          }
        }
        if (typeof type === "string") {
          return describeBuiltInComponentFrame(type);
        }
        switch (type) {
          case REACT_SUSPENSE_TYPE:
            return describeBuiltInComponentFrame("Suspense");
          case REACT_SUSPENSE_LIST_TYPE:
            return describeBuiltInComponentFrame("SuspenseList");
        }
        if (typeof type === "object") {
          switch (type.$$typeof) {
            case REACT_FORWARD_REF_TYPE2:
              return describeFunctionComponentFrame(type.render);
            case REACT_MEMO_TYPE:
              return describeUnknownElementTypeFrameInDEV(type.type, source, ownerFn);
            case REACT_LAZY_TYPE: {
              var lazyComponent = type;
              var payload = lazyComponent._payload;
              var init = lazyComponent._init;
              try {
                return describeUnknownElementTypeFrameInDEV(init(payload), source, ownerFn);
              } catch (x) {}
            }
          }
        }
        return "";
      }
      function describeFiber(fiber) {
        switch (fiber.tag) {
          case HostHoistable:
          case HostSingleton:
          case HostComponent:
            return describeBuiltInComponentFrame(fiber.type);
          case LazyComponent:
            return describeBuiltInComponentFrame("Lazy");
          case SuspenseComponent:
            return describeBuiltInComponentFrame("Suspense");
          case SuspenseListComponent:
            return describeBuiltInComponentFrame("SuspenseList");
          case FunctionComponent:
          case IndeterminateComponent:
          case SimpleMemoComponent:
            return describeFunctionComponentFrame(fiber.type);
          case ForwardRef:
            return describeFunctionComponentFrame(fiber.type.render);
          case ClassComponent:
            return describeClassComponentFrame(fiber.type);
          default:
            return "";
        }
      }
      function getStackByFiberInDevAndProd(workInProgress2) {
        try {
          var info2 = "";
          var node = workInProgress2;
          do {
            info2 += describeFiber(node);
            node = node.return;
          } while (node);
          return info2;
        } catch (x) {
          return `
Error generating stack: ` + x.message + `
` + x.stack;
        }
      }
      function getWrappedName$1(outerType, innerType, wrapperName) {
        var displayName = outerType.displayName;
        if (displayName) {
          return displayName;
        }
        var functionName = innerType.displayName || innerType.name || "";
        return functionName !== "" ? wrapperName + "(" + functionName + ")" : wrapperName;
      }
      function getContextName$1(type) {
        return type.displayName || "Context";
      }
      function getComponentNameFromType(type) {
        if (type == null) {
          return null;
        }
        {
          if (typeof type.tag === "number") {
            error("Received an unexpected object in getComponentNameFromType(). " + "This is likely a bug in React. Please file an issue.");
          }
        }
        if (typeof type === "function") {
          return type.displayName || type.name || null;
        }
        if (typeof type === "string") {
          return type;
        }
        switch (type) {
          case REACT_FRAGMENT_TYPE:
            return "Fragment";
          case REACT_PORTAL_TYPE:
            return "Portal";
          case REACT_PROFILER_TYPE:
            return "Profiler";
          case REACT_STRICT_MODE_TYPE:
            return "StrictMode";
          case REACT_SUSPENSE_TYPE:
            return "Suspense";
          case REACT_SUSPENSE_LIST_TYPE:
            return "SuspenseList";
          case REACT_CACHE_TYPE: {
            return "Cache";
          }
        }
        if (typeof type === "object") {
          switch (type.$$typeof) {
            case REACT_CONTEXT_TYPE:
              var context = type;
              return getContextName$1(context) + ".Consumer";
            case REACT_PROVIDER_TYPE:
              var provider = type;
              return getContextName$1(provider._context) + ".Provider";
            case REACT_FORWARD_REF_TYPE2:
              return getWrappedName$1(type, type.render, "ForwardRef");
            case REACT_MEMO_TYPE:
              var outerName = type.displayName || null;
              if (outerName !== null) {
                return outerName;
              }
              return getComponentNameFromType(type.type) || "Memo";
            case REACT_LAZY_TYPE: {
              var lazyComponent = type;
              var payload = lazyComponent._payload;
              var init = lazyComponent._init;
              try {
                return getComponentNameFromType(init(payload));
              } catch (x) {
                return null;
              }
            }
            case REACT_SERVER_CONTEXT_TYPE: {
              var context2 = type;
              return (context2.displayName || context2._globalName) + ".Provider";
            }
          }
        }
        return null;
      }
      function getWrappedName(outerType, innerType, wrapperName) {
        var functionName = innerType.displayName || innerType.name || "";
        return outerType.displayName || (functionName !== "" ? wrapperName + "(" + functionName + ")" : wrapperName);
      }
      function getContextName(type) {
        return type.displayName || "Context";
      }
      function getComponentNameFromFiber(fiber) {
        var { tag, type } = fiber;
        switch (tag) {
          case CacheComponent:
            return "Cache";
          case ContextConsumer:
            var context = type;
            return getContextName(context) + ".Consumer";
          case ContextProvider:
            var provider = type;
            return getContextName(provider._context) + ".Provider";
          case DehydratedFragment:
            return "DehydratedFragment";
          case ForwardRef:
            return getWrappedName(type, type.render, "ForwardRef");
          case Fragment2:
            return "Fragment";
          case HostHoistable:
          case HostSingleton:
          case HostComponent:
            return type;
          case HostPortal:
            return "Portal";
          case HostRoot:
            return "Root";
          case HostText:
            return "Text";
          case LazyComponent:
            return getComponentNameFromType(type);
          case Mode:
            if (type === REACT_STRICT_MODE_TYPE) {
              return "StrictMode";
            }
            return "Mode";
          case OffscreenComponent:
            return "Offscreen";
          case Profiler:
            return "Profiler";
          case ScopeComponent:
            return "Scope";
          case SuspenseComponent:
            return "Suspense";
          case SuspenseListComponent:
            return "SuspenseList";
          case TracingMarkerComponent:
            return "TracingMarker";
          case ClassComponent:
          case FunctionComponent:
          case IncompleteClassComponent:
          case IndeterminateComponent:
          case MemoComponent:
          case SimpleMemoComponent:
            if (typeof type === "function") {
              return type.displayName || type.name || null;
            }
            if (typeof type === "string") {
              return type;
            }
            break;
        }
        return null;
      }
      var ReactDebugCurrentFrame$1 = ReactSharedInternals.ReactDebugCurrentFrame;
      var current = null;
      var isRendering = false;
      function getCurrentFiberOwnerNameInDevOrNull() {
        {
          if (current === null) {
            return null;
          }
          var owner = current._debugOwner;
          if (owner !== null && typeof owner !== "undefined") {
            return getComponentNameFromFiber(owner);
          }
        }
        return null;
      }
      function getCurrentFiberStackInDev() {
        {
          if (current === null) {
            return "";
          }
          return getStackByFiberInDevAndProd(current);
        }
      }
      function resetCurrentFiber() {
        {
          ReactDebugCurrentFrame$1.getCurrentStack = null;
          current = null;
          isRendering = false;
        }
      }
      function setCurrentFiber(fiber) {
        {
          ReactDebugCurrentFrame$1.getCurrentStack = fiber === null ? null : getCurrentFiberStackInDev;
          current = fiber;
          isRendering = false;
        }
      }
      function getCurrentFiber() {
        {
          return current;
        }
      }
      function setIsRendering(rendering) {
        {
          isRendering = rendering;
        }
      }
      function toString(value) {
        return "" + value;
      }
      function getToStringValue(value) {
        switch (typeof value) {
          case "boolean":
          case "number":
          case "string":
          case "undefined":
            return value;
          case "object":
            {
              checkFormFieldValueStringCoercion(value);
            }
            return value;
          default:
            return "";
        }
      }
      function isCheckable(elem) {
        var type = elem.type;
        var nodeName = elem.nodeName;
        return nodeName && nodeName.toLowerCase() === "input" && (type === "checkbox" || type === "radio");
      }
      function getTracker(node) {
        return node._valueTracker;
      }
      function detachTracker(node) {
        node._valueTracker = null;
      }
      function getValueFromNode(node) {
        var value = "";
        if (!node) {
          return value;
        }
        if (isCheckable(node)) {
          value = node.checked ? "true" : "false";
        } else {
          value = node.value;
        }
        return value;
      }
      function trackValueOnNode(node) {
        var valueField = isCheckable(node) ? "checked" : "value";
        var descriptor = Object.getOwnPropertyDescriptor(node.constructor.prototype, valueField);
        {
          checkFormFieldValueStringCoercion(node[valueField]);
        }
        var currentValue = "" + node[valueField];
        if (node.hasOwnProperty(valueField) || typeof descriptor === "undefined" || typeof descriptor.get !== "function" || typeof descriptor.set !== "function") {
          return;
        }
        var { get: get3, set: set3 } = descriptor;
        Object.defineProperty(node, valueField, {
          configurable: true,
          get: function() {
            return get3.call(this);
          },
          set: function(value) {
            {
              checkFormFieldValueStringCoercion(value);
            }
            currentValue = "" + value;
            set3.call(this, value);
          }
        });
        Object.defineProperty(node, valueField, {
          enumerable: descriptor.enumerable
        });
        var tracker = {
          getValue: function() {
            return currentValue;
          },
          setValue: function(value) {
            {
              checkFormFieldValueStringCoercion(value);
            }
            currentValue = "" + value;
          },
          stopTracking: function() {
            detachTracker(node);
            delete node[valueField];
          }
        };
        return tracker;
      }
      function track(node) {
        if (getTracker(node)) {
          return;
        }
        node._valueTracker = trackValueOnNode(node);
      }
      function updateValueIfChanged(node) {
        if (!node) {
          return false;
        }
        var tracker = getTracker(node);
        if (!tracker) {
          return true;
        }
        var lastValue = tracker.getValue();
        var nextValue = getValueFromNode(node);
        if (nextValue !== lastValue) {
          tracker.setValue(nextValue);
          return true;
        }
        return false;
      }
      function getActiveElement(doc) {
        doc = doc || (typeof document !== "undefined" ? document : undefined);
        if (typeof doc === "undefined") {
          return null;
        }
        try {
          return doc.activeElement || doc.body;
        } catch (e) {
          return doc.body;
        }
      }
      var escapeSelectorAttributeValueInsideDoubleQuotesRegex = /[\n\"\\]/g;
      function escapeSelectorAttributeValueInsideDoubleQuotes(value) {
        return value.replace(escapeSelectorAttributeValueInsideDoubleQuotesRegex, function(ch) {
          return "\\" + ch.charCodeAt(0).toString(16) + " ";
        });
      }
      var didWarnValueDefaultValue$1 = false;
      var didWarnCheckedDefaultChecked = false;
      function validateInputProps(element, props) {
        {
          if (props.checked !== undefined && props.defaultChecked !== undefined && !didWarnCheckedDefaultChecked) {
            error("%s contains an input of type %s with both checked and defaultChecked props. " + "Input elements must be either controlled or uncontrolled " + "(specify either the checked prop, or the defaultChecked prop, but not " + "both). Decide between using a controlled or uncontrolled input " + "element and remove one of these props. More info: " + "https://reactjs.org/link/controlled-components", getCurrentFiberOwnerNameInDevOrNull() || "A component", props.type);
            didWarnCheckedDefaultChecked = true;
          }
          if (props.value !== undefined && props.defaultValue !== undefined && !didWarnValueDefaultValue$1) {
            error("%s contains an input of type %s with both value and defaultValue props. " + "Input elements must be either controlled or uncontrolled " + "(specify either the value prop, or the defaultValue prop, but not " + "both). Decide between using a controlled or uncontrolled input " + "element and remove one of these props. More info: " + "https://reactjs.org/link/controlled-components", getCurrentFiberOwnerNameInDevOrNull() || "A component", props.type);
            didWarnValueDefaultValue$1 = true;
          }
        }
      }
      function updateInput(element, value, defaultValue, lastDefaultValue, checked, defaultChecked, type, name) {
        var node = element;
        node.name = "";
        if (type != null && typeof type !== "function" && typeof type !== "symbol" && typeof type !== "boolean") {
          {
            checkAttributeStringCoercion(type, "type");
          }
          node.type = type;
        } else {
          node.removeAttribute("type");
        }
        if (value != null) {
          if (type === "number") {
            if (value === 0 && node.value === "" || node.value != value) {
              node.value = toString(getToStringValue(value));
            }
          } else if (node.value !== toString(getToStringValue(value))) {
            node.value = toString(getToStringValue(value));
          }
        } else if (type === "submit" || type === "reset") {
          node.removeAttribute("value");
        }
        {
          if (value != null) {
            setDefaultValue(node, type, getToStringValue(value));
          } else if (defaultValue != null) {
            setDefaultValue(node, type, getToStringValue(defaultValue));
          } else if (lastDefaultValue != null) {
            node.removeAttribute("value");
          }
        }
        {
          if (checked == null && defaultChecked != null) {
            node.defaultChecked = !!defaultChecked;
          }
        }
        if (checked != null && node.checked !== !!checked) {
          node.checked = checked;
        }
        if (name != null && typeof name !== "function" && typeof name !== "symbol" && typeof name !== "boolean") {
          {
            checkAttributeStringCoercion(name, "name");
          }
          node.name = toString(getToStringValue(name));
        } else {
          node.removeAttribute("name");
        }
      }
      function initInput(element, value, defaultValue, checked, defaultChecked, type, name, isHydrating2) {
        var node = element;
        if (type != null && typeof type !== "function" && typeof type !== "symbol" && typeof type !== "boolean") {
          {
            checkAttributeStringCoercion(type, "type");
          }
          node.type = type;
        }
        if (value != null || defaultValue != null) {
          var isButton = type === "submit" || type === "reset";
          if (isButton && (value === undefined || value === null)) {
            return;
          }
          var defaultValueStr = defaultValue != null ? toString(getToStringValue(defaultValue)) : "";
          var initialValue = value != null ? toString(getToStringValue(value)) : defaultValueStr;
          if (!isHydrating2) {
            {
              if (initialValue !== node.value) {
                node.value = initialValue;
              }
            }
          }
          {
            node.defaultValue = initialValue;
          }
        }
        var checkedOrDefault = checked != null ? checked : defaultChecked;
        var initialChecked = typeof checkedOrDefault !== "function" && typeof checkedOrDefault !== "symbol" && !!checkedOrDefault;
        if (!isHydrating2) {
          node.checked = !!initialChecked;
        }
        {
          node.defaultChecked = !node.defaultChecked;
          node.defaultChecked = !!initialChecked;
        }
        if (name != null && typeof name !== "function" && typeof name !== "symbol" && typeof name !== "boolean") {
          {
            checkAttributeStringCoercion(name, "name");
          }
          node.name = name;
        }
      }
      function restoreControlledInputState(element, props) {
        var rootNode = element;
        updateInput(rootNode, props.value, props.defaultValue, props.defaultValue, props.checked, props.defaultChecked, props.type, props.name);
        var name = props.name;
        if (props.type === "radio" && name != null) {
          var queryRoot = rootNode;
          while (queryRoot.parentNode) {
            queryRoot = queryRoot.parentNode;
          }
          {
            checkAttributeStringCoercion(name, "name");
          }
          var group = queryRoot.querySelectorAll('input[name="' + escapeSelectorAttributeValueInsideDoubleQuotes("" + name) + '"][type="radio"]');
          for (var i = 0;i < group.length; i++) {
            var otherNode = group[i];
            if (otherNode === rootNode || otherNode.form !== rootNode.form) {
              continue;
            }
            var otherProps = getFiberCurrentPropsFromNode(otherNode);
            if (!otherProps) {
              throw new Error("ReactDOMInput: Mixing React and non-React radio inputs with the " + "same `name` is not supported.");
            }
            updateValueIfChanged(otherNode);
            updateInput(otherNode, otherProps.value, otherProps.defaultValue, otherProps.defaultValue, otherProps.checked, otherProps.defaultChecked, otherProps.type, otherProps.name);
          }
        }
      }
      function setDefaultValue(node, type, value) {
        if (type !== "number" || getActiveElement(node.ownerDocument) !== node) {
          if (node.defaultValue !== toString(value)) {
            node.defaultValue = toString(value);
          }
        }
      }
      var didWarnSelectedSetOnOption = false;
      var didWarnInvalidChild = false;
      var didWarnInvalidInnerHTML = false;
      function validateOptionProps(element, props) {
        {
          if (props.value == null) {
            if (typeof props.children === "object" && props.children !== null) {
              React.Children.forEach(props.children, function(child) {
                if (child == null) {
                  return;
                }
                if (typeof child === "string" || typeof child === "number") {
                  return;
                }
                if (!didWarnInvalidChild) {
                  didWarnInvalidChild = true;
                  error("Cannot infer the option value of complex children. " + "Pass a `value` prop or use a plain string as children to <option>.");
                }
              });
            } else if (props.dangerouslySetInnerHTML != null) {
              if (!didWarnInvalidInnerHTML) {
                didWarnInvalidInnerHTML = true;
                error("Pass a `value` prop if you set dangerouslyInnerHTML so React knows " + "which value should be selected.");
              }
            }
          }
          if (props.selected != null && !didWarnSelectedSetOnOption) {
            error("Use the `defaultValue` or `value` props on <select> instead of " + "setting `selected` on <option>.");
            didWarnSelectedSetOnOption = true;
          }
        }
      }
      var isArrayImpl = Array.isArray;
      function isArray(a) {
        return isArrayImpl(a);
      }
      var didWarnValueDefaultValue;
      {
        didWarnValueDefaultValue = false;
      }
      function getDeclarationErrorAddendum() {
        var ownerName = getCurrentFiberOwnerNameInDevOrNull();
        if (ownerName) {
          return `

Check the render method of \`` + ownerName + "`.";
        }
        return "";
      }
      var valuePropNames = ["value", "defaultValue"];
      function checkSelectPropTypes(props) {
        {
          for (var i = 0;i < valuePropNames.length; i++) {
            var propName = valuePropNames[i];
            if (props[propName] == null) {
              continue;
            }
            var propNameIsArray = isArray(props[propName]);
            if (props.multiple && !propNameIsArray) {
              error("The `%s` prop supplied to <select> must be an array if " + "`multiple` is true.%s", propName, getDeclarationErrorAddendum());
            } else if (!props.multiple && propNameIsArray) {
              error("The `%s` prop supplied to <select> must be a scalar " + "value if `multiple` is false.%s", propName, getDeclarationErrorAddendum());
            }
          }
        }
      }
      function updateOptions(node, multiple, propValue, setDefaultSelected) {
        var options2 = node.options;
        if (multiple) {
          var selectedValues = propValue;
          var selectedValue = {};
          for (var i = 0;i < selectedValues.length; i++) {
            selectedValue["$" + selectedValues[i]] = true;
          }
          for (var _i = 0;_i < options2.length; _i++) {
            var selected = selectedValue.hasOwnProperty("$" + options2[_i].value);
            if (options2[_i].selected !== selected) {
              options2[_i].selected = selected;
            }
            if (selected && setDefaultSelected) {
              options2[_i].defaultSelected = true;
            }
          }
        } else {
          var _selectedValue = toString(getToStringValue(propValue));
          var defaultSelected = null;
          for (var _i2 = 0;_i2 < options2.length; _i2++) {
            if (options2[_i2].value === _selectedValue) {
              options2[_i2].selected = true;
              if (setDefaultSelected) {
                options2[_i2].defaultSelected = true;
              }
              return;
            }
            if (defaultSelected === null && !options2[_i2].disabled) {
              defaultSelected = options2[_i2];
            }
          }
          if (defaultSelected !== null) {
            defaultSelected.selected = true;
          }
        }
      }
      function validateSelectProps(element, props) {
        {
          checkSelectPropTypes(props);
          if (props.value !== undefined && props.defaultValue !== undefined && !didWarnValueDefaultValue) {
            error("Select elements must be either controlled or uncontrolled " + "(specify either the value prop, or the defaultValue prop, but not " + "both). Decide between using a controlled or uncontrolled select " + "element and remove one of these props. More info: " + "https://reactjs.org/link/controlled-components");
            didWarnValueDefaultValue = true;
          }
        }
      }
      function initSelect(element, value, defaultValue, multiple) {
        var node = element;
        node.multiple = !!multiple;
        if (value != null) {
          updateOptions(node, !!multiple, value, false);
        } else if (defaultValue != null) {
          updateOptions(node, !!multiple, defaultValue, true);
        }
      }
      function updateSelect(element, value, defaultValue, multiple, wasMultiple) {
        var node = element;
        if (value != null) {
          updateOptions(node, !!multiple, value, false);
        } else if (!!wasMultiple !== !!multiple) {
          if (defaultValue != null) {
            updateOptions(node, !!multiple, defaultValue, true);
          } else {
            updateOptions(node, !!multiple, multiple ? [] : "", false);
          }
        }
      }
      function restoreControlledSelectState(element, props) {
        var node = element;
        var value = props.value;
        if (value != null) {
          updateOptions(node, !!props.multiple, value, false);
        }
      }
      var didWarnValDefaultVal = false;
      function validateTextareaProps(element, props) {
        {
          if (props.value !== undefined && props.defaultValue !== undefined && !didWarnValDefaultVal) {
            error("%s contains a textarea with both value and defaultValue props. " + "Textarea elements must be either controlled or uncontrolled " + "(specify either the value prop, or the defaultValue prop, but not " + "both). Decide between using a controlled or uncontrolled textarea " + "and remove one of these props. More info: " + "https://reactjs.org/link/controlled-components", getCurrentFiberOwnerNameInDevOrNull() || "A component");
            didWarnValDefaultVal = true;
          }
          if (props.children != null && props.value == null) {
            error("Use the `defaultValue` or `value` props instead of setting " + "children on <textarea>.");
          }
        }
      }
      function updateTextarea(element, value, defaultValue) {
        var node = element;
        if (value != null) {
          var newValue = toString(getToStringValue(value));
          if (newValue !== node.value) {
            node.value = newValue;
          }
          if (defaultValue == null) {
            if (node.defaultValue !== newValue) {
              node.defaultValue = newValue;
            }
            return;
          }
        }
        if (defaultValue != null) {
          node.defaultValue = toString(getToStringValue(defaultValue));
        } else {
          node.defaultValue = "";
        }
      }
      function initTextarea(element, value, defaultValue, children) {
        var node = element;
        var initialValue = value;
        if (initialValue == null) {
          if (children != null) {
            {
              if (defaultValue != null) {
                throw new Error("If you supply `defaultValue` on a <textarea>, do not pass children.");
              }
              if (isArray(children)) {
                if (children.length > 1) {
                  throw new Error("<textarea> can only have at most one child.");
                }
                children = children[0];
              }
              defaultValue = children;
            }
          }
          if (defaultValue == null) {
            defaultValue = "";
          }
          initialValue = defaultValue;
        }
        var stringValue = getToStringValue(initialValue);
        node.defaultValue = stringValue;
        var textContent = node.textContent;
        if (textContent === stringValue) {
          if (textContent !== "" && textContent !== null) {
            node.value = textContent;
          }
        }
      }
      function restoreControlledTextareaState(element, props) {
        updateTextarea(element, props.value, props.defaultValue);
      }
      var specialTags = ["address", "applet", "area", "article", "aside", "base", "basefont", "bgsound", "blockquote", "body", "br", "button", "caption", "center", "col", "colgroup", "dd", "details", "dir", "div", "dl", "dt", "embed", "fieldset", "figcaption", "figure", "footer", "form", "frame", "frameset", "h1", "h2", "h3", "h4", "h5", "h6", "head", "header", "hgroup", "hr", "html", "iframe", "img", "input", "isindex", "li", "link", "listing", "main", "marquee", "menu", "menuitem", "meta", "nav", "noembed", "noframes", "noscript", "object", "ol", "p", "param", "plaintext", "pre", "script", "section", "select", "source", "style", "summary", "table", "tbody", "td", "template", "textarea", "tfoot", "th", "thead", "title", "tr", "track", "ul", "wbr", "xmp"];
      var inScopeTags = [
        "applet",
        "caption",
        "html",
        "table",
        "td",
        "th",
        "marquee",
        "object",
        "template",
        "foreignObject",
        "desc",
        "title"
      ];
      var buttonScopeTags = inScopeTags.concat(["button"]);
      var impliedEndTags = ["dd", "dt", "li", "option", "optgroup", "p", "rp", "rt"];
      var emptyAncestorInfoDev = {
        current: null,
        formTag: null,
        aTagInScope: null,
        buttonTagInScope: null,
        nobrTagInScope: null,
        pTagInButtonScope: null,
        listItemTagAutoclosing: null,
        dlItemTagAutoclosing: null,
        containerTagInScope: null
      };
      function updatedAncestorInfoDev(oldInfo, tag) {
        {
          var ancestorInfo = assign({}, oldInfo || emptyAncestorInfoDev);
          var info2 = {
            tag
          };
          if (inScopeTags.indexOf(tag) !== -1) {
            ancestorInfo.aTagInScope = null;
            ancestorInfo.buttonTagInScope = null;
            ancestorInfo.nobrTagInScope = null;
          }
          if (buttonScopeTags.indexOf(tag) !== -1) {
            ancestorInfo.pTagInButtonScope = null;
          }
          if (specialTags.indexOf(tag) !== -1 && tag !== "address" && tag !== "div" && tag !== "p") {
            ancestorInfo.listItemTagAutoclosing = null;
            ancestorInfo.dlItemTagAutoclosing = null;
          }
          ancestorInfo.current = info2;
          if (tag === "form") {
            ancestorInfo.formTag = info2;
          }
          if (tag === "a") {
            ancestorInfo.aTagInScope = info2;
          }
          if (tag === "button") {
            ancestorInfo.buttonTagInScope = info2;
          }
          if (tag === "nobr") {
            ancestorInfo.nobrTagInScope = info2;
          }
          if (tag === "p") {
            ancestorInfo.pTagInButtonScope = info2;
          }
          if (tag === "li") {
            ancestorInfo.listItemTagAutoclosing = info2;
          }
          if (tag === "dd" || tag === "dt") {
            ancestorInfo.dlItemTagAutoclosing = info2;
          }
          if (tag === "#document" || tag === "html") {
            ancestorInfo.containerTagInScope = null;
          } else if (!ancestorInfo.containerTagInScope) {
            ancestorInfo.containerTagInScope = info2;
          }
          return ancestorInfo;
        }
      }
      function isTagValidWithParent(tag, parentTag) {
        switch (parentTag) {
          case "select":
            return tag === "option" || tag === "optgroup" || tag === "#text";
          case "optgroup":
            return tag === "option" || tag === "#text";
          case "option":
            return tag === "#text";
          case "tr":
            return tag === "th" || tag === "td" || tag === "style" || tag === "script" || tag === "template";
          case "tbody":
          case "thead":
          case "tfoot":
            return tag === "tr" || tag === "style" || tag === "script" || tag === "template";
          case "colgroup":
            return tag === "col" || tag === "template";
          case "table":
            return tag === "caption" || tag === "colgroup" || tag === "tbody" || tag === "tfoot" || tag === "thead" || tag === "style" || tag === "script" || tag === "template";
          case "head":
            return tag === "base" || tag === "basefont" || tag === "bgsound" || tag === "link" || tag === "meta" || tag === "title" || tag === "noscript" || tag === "noframes" || tag === "style" || tag === "script" || tag === "template";
          case "html":
            return tag === "head" || tag === "body" || tag === "frameset";
          case "frameset":
            return tag === "frame";
          case "#document":
            return tag === "html";
        }
        switch (tag) {
          case "h1":
          case "h2":
          case "h3":
          case "h4":
          case "h5":
          case "h6":
            return parentTag !== "h1" && parentTag !== "h2" && parentTag !== "h3" && parentTag !== "h4" && parentTag !== "h5" && parentTag !== "h6";
          case "rp":
          case "rt":
            return impliedEndTags.indexOf(parentTag) === -1;
          case "body":
          case "caption":
          case "col":
          case "colgroup":
          case "frameset":
          case "frame":
          case "head":
          case "html":
          case "tbody":
          case "td":
          case "tfoot":
          case "th":
          case "thead":
          case "tr":
            return parentTag == null;
        }
        return true;
      }
      function findInvalidAncestorForTag(tag, ancestorInfo) {
        switch (tag) {
          case "address":
          case "article":
          case "aside":
          case "blockquote":
          case "center":
          case "details":
          case "dialog":
          case "dir":
          case "div":
          case "dl":
          case "fieldset":
          case "figcaption":
          case "figure":
          case "footer":
          case "header":
          case "hgroup":
          case "main":
          case "menu":
          case "nav":
          case "ol":
          case "p":
          case "section":
          case "summary":
          case "ul":
          case "pre":
          case "listing":
          case "table":
          case "hr":
          case "xmp":
          case "h1":
          case "h2":
          case "h3":
          case "h4":
          case "h5":
          case "h6":
            return ancestorInfo.pTagInButtonScope;
          case "form":
            return ancestorInfo.formTag || ancestorInfo.pTagInButtonScope;
          case "li":
            return ancestorInfo.listItemTagAutoclosing;
          case "dd":
          case "dt":
            return ancestorInfo.dlItemTagAutoclosing;
          case "button":
            return ancestorInfo.buttonTagInScope;
          case "a":
            return ancestorInfo.aTagInScope;
          case "nobr":
            return ancestorInfo.nobrTagInScope;
        }
        return null;
      }
      var didWarn$1 = {};
      function validateDOMNesting(childTag, ancestorInfo) {
        {
          ancestorInfo = ancestorInfo || emptyAncestorInfoDev;
          var parentInfo = ancestorInfo.current;
          var parentTag = parentInfo && parentInfo.tag;
          var invalidParent = isTagValidWithParent(childTag, parentTag) ? null : parentInfo;
          var invalidAncestor = invalidParent ? null : findInvalidAncestorForTag(childTag, ancestorInfo);
          var invalidParentOrAncestor = invalidParent || invalidAncestor;
          if (!invalidParentOrAncestor) {
            return;
          }
          var ancestorTag = invalidParentOrAncestor.tag;
          var warnKey = String(!!invalidParent) + "|" + childTag + "|" + ancestorTag;
          if (didWarn$1[warnKey]) {
            return;
          }
          didWarn$1[warnKey] = true;
          var tagDisplayName = "<" + childTag + ">";
          if (invalidParent) {
            var info2 = "";
            if (ancestorTag === "table" && childTag === "tr") {
              info2 += " Add a <tbody>, <thead> or <tfoot> to your code to match the DOM tree generated by " + "the browser.";
            }
            error("validateDOMNesting(...): %s cannot appear as a child of <%s>.%s", tagDisplayName, ancestorTag, info2);
          } else {
            error("validateDOMNesting(...): %s cannot appear as a descendant of " + "<%s>.", tagDisplayName, ancestorTag);
          }
        }
      }
      function validateTextNesting(childText, parentTag) {
        {
          if (isTagValidWithParent("#text", parentTag)) {
            return;
          }
          var warnKey = "#text|" + parentTag;
          if (didWarn$1[warnKey]) {
            return;
          }
          didWarn$1[warnKey] = true;
          if (/\S/.test(childText)) {
            error("validateDOMNesting(...): Text nodes cannot appear as a child of <%s>.", parentTag);
          } else {
            error("validateDOMNesting(...): Whitespace text nodes cannot appear as a child of <%s>. " + "Make sure you don't have any extra whitespace between tags on " + "each line of your source code.", parentTag);
          }
        }
      }
      var MATH_NAMESPACE = "http://www.w3.org/1998/Math/MathML";
      var SVG_NAMESPACE = "http://www.w3.org/2000/svg";
      if (typeof MSApp !== "undefined" && MSApp.execUnsafeLocalFunction)
        ;
      var ELEMENT_NODE = 1;
      var TEXT_NODE = 3;
      var COMMENT_NODE = 8;
      var DOCUMENT_NODE = 9;
      var DOCUMENT_TYPE_NODE = 10;
      var DOCUMENT_FRAGMENT_NODE = 11;
      function setTextContent(node, text) {
        if (text) {
          var firstChild = node.firstChild;
          if (firstChild && firstChild === node.lastChild && firstChild.nodeType === TEXT_NODE) {
            firstChild.nodeValue = text;
            return;
          }
        }
        node.textContent = text;
      }
      var shorthandToLonghand = {
        animation: ["animationDelay", "animationDirection", "animationDuration", "animationFillMode", "animationIterationCount", "animationName", "animationPlayState", "animationTimingFunction"],
        background: ["backgroundAttachment", "backgroundClip", "backgroundColor", "backgroundImage", "backgroundOrigin", "backgroundPositionX", "backgroundPositionY", "backgroundRepeat", "backgroundSize"],
        backgroundPosition: ["backgroundPositionX", "backgroundPositionY"],
        border: ["borderBottomColor", "borderBottomStyle", "borderBottomWidth", "borderImageOutset", "borderImageRepeat", "borderImageSlice", "borderImageSource", "borderImageWidth", "borderLeftColor", "borderLeftStyle", "borderLeftWidth", "borderRightColor", "borderRightStyle", "borderRightWidth", "borderTopColor", "borderTopStyle", "borderTopWidth"],
        borderBlockEnd: ["borderBlockEndColor", "borderBlockEndStyle", "borderBlockEndWidth"],
        borderBlockStart: ["borderBlockStartColor", "borderBlockStartStyle", "borderBlockStartWidth"],
        borderBottom: ["borderBottomColor", "borderBottomStyle", "borderBottomWidth"],
        borderColor: ["borderBottomColor", "borderLeftColor", "borderRightColor", "borderTopColor"],
        borderImage: ["borderImageOutset", "borderImageRepeat", "borderImageSlice", "borderImageSource", "borderImageWidth"],
        borderInlineEnd: ["borderInlineEndColor", "borderInlineEndStyle", "borderInlineEndWidth"],
        borderInlineStart: ["borderInlineStartColor", "borderInlineStartStyle", "borderInlineStartWidth"],
        borderLeft: ["borderLeftColor", "borderLeftStyle", "borderLeftWidth"],
        borderRadius: ["borderBottomLeftRadius", "borderBottomRightRadius", "borderTopLeftRadius", "borderTopRightRadius"],
        borderRight: ["borderRightColor", "borderRightStyle", "borderRightWidth"],
        borderStyle: ["borderBottomStyle", "borderLeftStyle", "borderRightStyle", "borderTopStyle"],
        borderTop: ["borderTopColor", "borderTopStyle", "borderTopWidth"],
        borderWidth: ["borderBottomWidth", "borderLeftWidth", "borderRightWidth", "borderTopWidth"],
        columnRule: ["columnRuleColor", "columnRuleStyle", "columnRuleWidth"],
        columns: ["columnCount", "columnWidth"],
        flex: ["flexBasis", "flexGrow", "flexShrink"],
        flexFlow: ["flexDirection", "flexWrap"],
        font: ["fontFamily", "fontFeatureSettings", "fontKerning", "fontLanguageOverride", "fontSize", "fontSizeAdjust", "fontStretch", "fontStyle", "fontVariant", "fontVariantAlternates", "fontVariantCaps", "fontVariantEastAsian", "fontVariantLigatures", "fontVariantNumeric", "fontVariantPosition", "fontWeight", "lineHeight"],
        fontVariant: ["fontVariantAlternates", "fontVariantCaps", "fontVariantEastAsian", "fontVariantLigatures", "fontVariantNumeric", "fontVariantPosition"],
        gap: ["columnGap", "rowGap"],
        grid: ["gridAutoColumns", "gridAutoFlow", "gridAutoRows", "gridTemplateAreas", "gridTemplateColumns", "gridTemplateRows"],
        gridArea: ["gridColumnEnd", "gridColumnStart", "gridRowEnd", "gridRowStart"],
        gridColumn: ["gridColumnEnd", "gridColumnStart"],
        gridColumnGap: ["columnGap"],
        gridGap: ["columnGap", "rowGap"],
        gridRow: ["gridRowEnd", "gridRowStart"],
        gridRowGap: ["rowGap"],
        gridTemplate: ["gridTemplateAreas", "gridTemplateColumns", "gridTemplateRows"],
        listStyle: ["listStyleImage", "listStylePosition", "listStyleType"],
        margin: ["marginBottom", "marginLeft", "marginRight", "marginTop"],
        marker: ["markerEnd", "markerMid", "markerStart"],
        mask: ["maskClip", "maskComposite", "maskImage", "maskMode", "maskOrigin", "maskPositionX", "maskPositionY", "maskRepeat", "maskSize"],
        maskPosition: ["maskPositionX", "maskPositionY"],
        outline: ["outlineColor", "outlineStyle", "outlineWidth"],
        overflow: ["overflowX", "overflowY"],
        padding: ["paddingBottom", "paddingLeft", "paddingRight", "paddingTop"],
        placeContent: ["alignContent", "justifyContent"],
        placeItems: ["alignItems", "justifyItems"],
        placeSelf: ["alignSelf", "justifySelf"],
        textDecoration: ["textDecorationColor", "textDecorationLine", "textDecorationStyle"],
        textEmphasis: ["textEmphasisColor", "textEmphasisStyle"],
        transition: ["transitionDelay", "transitionDuration", "transitionProperty", "transitionTimingFunction"],
        wordWrap: ["overflowWrap"]
      };
      var uppercasePattern = /([A-Z])/g;
      var msPattern$1 = /^ms-/;
      function hyphenateStyleName(name) {
        return name.replace(uppercasePattern, "-$1").toLowerCase().replace(msPattern$1, "-ms-");
      }
      var badVendoredStyleNamePattern = /^(?:webkit|moz|o)[A-Z]/;
      var msPattern = /^-ms-/;
      var hyphenPattern = /-(.)/g;
      var badStyleValueWithSemicolonPattern = /;\s*$/;
      var warnedStyleNames = {};
      var warnedStyleValues = {};
      var warnedForNaNValue = false;
      var warnedForInfinityValue = false;
      function camelize(string) {
        return string.replace(hyphenPattern, function(_, character) {
          return character.toUpperCase();
        });
      }
      function warnHyphenatedStyleName(name) {
        {
          if (warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name]) {
            return;
          }
          warnedStyleNames[name] = true;
          error("Unsupported style property %s. Did you mean %s?", name, camelize(name.replace(msPattern, "ms-")));
        }
      }
      function warnBadVendoredStyleName(name) {
        {
          if (warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name]) {
            return;
          }
          warnedStyleNames[name] = true;
          error("Unsupported vendor-prefixed style property %s. Did you mean %s?", name, name.charAt(0).toUpperCase() + name.slice(1));
        }
      }
      function warnStyleValueWithSemicolon(name, value) {
        {
          if (warnedStyleValues.hasOwnProperty(value) && warnedStyleValues[value]) {
            return;
          }
          warnedStyleValues[value] = true;
          error("Style property values shouldn't contain a semicolon. " + 'Try "%s: %s" instead.', name, value.replace(badStyleValueWithSemicolonPattern, ""));
        }
      }
      function warnStyleValueIsNaN(name, value) {
        {
          if (warnedForNaNValue) {
            return;
          }
          warnedForNaNValue = true;
          error("`NaN` is an invalid value for the `%s` css style property.", name);
        }
      }
      function warnStyleValueIsInfinity(name, value) {
        {
          if (warnedForInfinityValue) {
            return;
          }
          warnedForInfinityValue = true;
          error("`Infinity` is an invalid value for the `%s` css style property.", name);
        }
      }
      function warnValidStyle(name, value) {
        {
          if (name.indexOf("-") > -1) {
            warnHyphenatedStyleName(name);
          } else if (badVendoredStyleNamePattern.test(name)) {
            warnBadVendoredStyleName(name);
          } else if (badStyleValueWithSemicolonPattern.test(value)) {
            warnStyleValueWithSemicolon(name, value);
          }
          if (typeof value === "number") {
            if (isNaN(value)) {
              warnStyleValueIsNaN(name);
            } else if (!isFinite(value)) {
              warnStyleValueIsInfinity(name);
            }
          }
        }
      }
      var unitlessNumbers = new Set([
        "animationIterationCount",
        "aspectRatio",
        "borderImageOutset",
        "borderImageSlice",
        "borderImageWidth",
        "boxFlex",
        "boxFlexGroup",
        "boxOrdinalGroup",
        "columnCount",
        "columns",
        "flex",
        "flexGrow",
        "flexPositive",
        "flexShrink",
        "flexNegative",
        "flexOrder",
        "gridArea",
        "gridRow",
        "gridRowEnd",
        "gridRowSpan",
        "gridRowStart",
        "gridColumn",
        "gridColumnEnd",
        "gridColumnSpan",
        "gridColumnStart",
        "fontWeight",
        "lineClamp",
        "lineHeight",
        "opacity",
        "order",
        "orphans",
        "scale",
        "tabSize",
        "widows",
        "zIndex",
        "zoom",
        "fillOpacity",
        "floodOpacity",
        "stopOpacity",
        "strokeDasharray",
        "strokeDashoffset",
        "strokeMiterlimit",
        "strokeOpacity",
        "strokeWidth",
        "MozAnimationIterationCount",
        "MozBoxFlex",
        "MozBoxFlexGroup",
        "MozLineClamp",
        "msAnimationIterationCount",
        "msFlex",
        "msZoom",
        "msFlexGrow",
        "msFlexNegative",
        "msFlexOrder",
        "msFlexPositive",
        "msFlexShrink",
        "msGridColumn",
        "msGridColumnSpan",
        "msGridRow",
        "msGridRowSpan",
        "WebkitAnimationIterationCount",
        "WebkitBoxFlex",
        "WebKitBoxFlexGroup",
        "WebkitBoxOrdinalGroup",
        "WebkitColumnCount",
        "WebkitColumns",
        "WebkitFlex",
        "WebkitFlexGrow",
        "WebkitFlexPositive",
        "WebkitFlexShrink",
        "WebkitLineClamp"
      ]);
      function isUnitlessNumber(name) {
        return unitlessNumbers.has(name);
      }
      function createDangerousStringForStyles(styles) {
        {
          var serialized = "";
          var delimiter = "";
          for (var styleName in styles) {
            if (!styles.hasOwnProperty(styleName)) {
              continue;
            }
            var value = styles[styleName];
            if (value != null && typeof value !== "boolean" && value !== "") {
              var isCustomProperty = styleName.indexOf("--") === 0;
              if (isCustomProperty) {
                {
                  checkCSSPropertyStringCoercion(value, styleName);
                }
                serialized += delimiter + styleName + ":" + ("" + value).trim();
              } else {
                if (typeof value === "number" && value !== 0 && !isUnitlessNumber(styleName)) {
                  serialized += delimiter + hyphenateStyleName(styleName) + ":" + value + "px";
                } else {
                  {
                    checkCSSPropertyStringCoercion(value, styleName);
                  }
                  serialized += delimiter + hyphenateStyleName(styleName) + ":" + ("" + value).trim();
                }
              }
              delimiter = ";";
            }
          }
          return serialized || null;
        }
      }
      function setValueForStyle(style2, styleName, value) {
        var isCustomProperty = styleName.indexOf("--") === 0;
        {
          if (!isCustomProperty) {
            warnValidStyle(styleName, value);
          }
        }
        if (value == null || typeof value === "boolean" || value === "") {
          if (isCustomProperty) {
            style2.setProperty(styleName, "");
          } else if (styleName === "float") {
            style2.cssFloat = "";
          } else {
            style2[styleName] = "";
          }
        } else if (isCustomProperty) {
          style2.setProperty(styleName, value);
        } else if (typeof value === "number" && value !== 0 && !isUnitlessNumber(styleName)) {
          style2[styleName] = value + "px";
        } else {
          if (styleName === "float") {
            style2.cssFloat = value;
          } else {
            {
              checkCSSPropertyStringCoercion(value, styleName);
            }
            style2[styleName] = ("" + value).trim();
          }
        }
      }
      function setValueForStyles(node, styles, prevStyles) {
        if (styles != null && typeof styles !== "object") {
          throw new Error("The `style` prop expects a mapping from style properties to values, " + "not a string. For example, style={{marginRight: spacing + 'em'}} when " + "using JSX.");
        }
        {
          if (styles) {
            Object.freeze(styles);
          }
        }
        var style2 = node.style;
        if (prevStyles != null) {
          {
            validateShorthandPropertyCollisionInDev(prevStyles, styles);
          }
          for (var styleName in prevStyles) {
            if (prevStyles.hasOwnProperty(styleName) && (styles == null || !styles.hasOwnProperty(styleName))) {
              var isCustomProperty = styleName.indexOf("--") === 0;
              if (isCustomProperty) {
                style2.setProperty(styleName, "");
              } else if (styleName === "float") {
                style2.cssFloat = "";
              } else {
                style2[styleName] = "";
              }
            }
          }
          for (var _styleName in styles) {
            var value = styles[_styleName];
            if (styles.hasOwnProperty(_styleName) && prevStyles[_styleName] !== value) {
              setValueForStyle(style2, _styleName, value);
            }
          }
        } else {
          for (var _styleName2 in styles) {
            if (styles.hasOwnProperty(_styleName2)) {
              var _value = styles[_styleName2];
              setValueForStyle(style2, _styleName2, _value);
            }
          }
        }
      }
      function isValueEmpty(value) {
        return value == null || typeof value === "boolean" || value === "";
      }
      function expandShorthandMap(styles) {
        var expanded = {};
        for (var key in styles) {
          var longhands = shorthandToLonghand[key] || [key];
          for (var i = 0;i < longhands.length; i++) {
            expanded[longhands[i]] = key;
          }
        }
        return expanded;
      }
      function validateShorthandPropertyCollisionInDev(prevStyles, nextStyles) {
        {
          if (!nextStyles) {
            return;
          }
          var expandedUpdates = {};
          if (prevStyles) {
            for (var key in prevStyles) {
              if (prevStyles.hasOwnProperty(key) && !nextStyles.hasOwnProperty(key)) {
                var longhands = shorthandToLonghand[key] || [key];
                for (var i = 0;i < longhands.length; i++) {
                  expandedUpdates[longhands[i]] = key;
                }
              }
            }
          }
          for (var _key in nextStyles) {
            if (nextStyles.hasOwnProperty(_key) && (!prevStyles || prevStyles[_key] !== nextStyles[_key])) {
              var _longhands = shorthandToLonghand[_key] || [_key];
              for (var _i = 0;_i < _longhands.length; _i++) {
                expandedUpdates[_longhands[_i]] = _key;
              }
            }
          }
          var expandedStyles = expandShorthandMap(nextStyles);
          var warnedAbout = {};
          for (var _key2 in expandedUpdates) {
            var originalKey = expandedUpdates[_key2];
            var correctOriginalKey = expandedStyles[_key2];
            if (correctOriginalKey && originalKey !== correctOriginalKey) {
              var warningKey = originalKey + "," + correctOriginalKey;
              if (warnedAbout[warningKey]) {
                continue;
              }
              warnedAbout[warningKey] = true;
              error("%s a style property during rerender (%s) when a " + "conflicting property is set (%s) can lead to styling bugs. To " + "avoid this, don't mix shorthand and non-shorthand properties " + "for the same value; instead, replace the shorthand with " + "separate values.", isValueEmpty(nextStyles[originalKey]) ? "Removing" : "Updating", originalKey, correctOriginalKey);
            }
          }
        }
      }
      function isCustomElement(tagName, props) {
        if (tagName.indexOf("-") === -1) {
          return false;
        }
        switch (tagName) {
          case "annotation-xml":
          case "color-profile":
          case "font-face":
          case "font-face-src":
          case "font-face-uri":
          case "font-face-format":
          case "font-face-name":
          case "missing-glyph":
            return false;
          default:
            return true;
        }
      }
      var aliases = new Map([
        ["acceptCharset", "accept-charset"],
        ["htmlFor", "for"],
        ["httpEquiv", "http-equiv"],
        ["crossOrigin", "crossorigin"],
        ["accentHeight", "accent-height"],
        ["alignmentBaseline", "alignment-baseline"],
        ["arabicForm", "arabic-form"],
        ["baselineShift", "baseline-shift"],
        ["capHeight", "cap-height"],
        ["clipPath", "clip-path"],
        ["clipRule", "clip-rule"],
        ["colorInterpolation", "color-interpolation"],
        ["colorInterpolationFilters", "color-interpolation-filters"],
        ["colorProfile", "color-profile"],
        ["colorRendering", "color-rendering"],
        ["dominantBaseline", "dominant-baseline"],
        ["enableBackground", "enable-background"],
        ["fillOpacity", "fill-opacity"],
        ["fillRule", "fill-rule"],
        ["floodColor", "flood-color"],
        ["floodOpacity", "flood-opacity"],
        ["fontFamily", "font-family"],
        ["fontSize", "font-size"],
        ["fontSizeAdjust", "font-size-adjust"],
        ["fontStretch", "font-stretch"],
        ["fontStyle", "font-style"],
        ["fontVariant", "font-variant"],
        ["fontWeight", "font-weight"],
        ["glyphName", "glyph-name"],
        ["glyphOrientationHorizontal", "glyph-orientation-horizontal"],
        ["glyphOrientationVertical", "glyph-orientation-vertical"],
        ["horizAdvX", "horiz-adv-x"],
        ["horizOriginX", "horiz-origin-x"],
        ["imageRendering", "image-rendering"],
        ["letterSpacing", "letter-spacing"],
        ["lightingColor", "lighting-color"],
        ["markerEnd", "marker-end"],
        ["markerMid", "marker-mid"],
        ["markerStart", "marker-start"],
        ["overlinePosition", "overline-position"],
        ["overlineThickness", "overline-thickness"],
        ["paintOrder", "paint-order"],
        ["panose-1", "panose-1"],
        ["pointerEvents", "pointer-events"],
        ["renderingIntent", "rendering-intent"],
        ["shapeRendering", "shape-rendering"],
        ["stopColor", "stop-color"],
        ["stopOpacity", "stop-opacity"],
        ["strikethroughPosition", "strikethrough-position"],
        ["strikethroughThickness", "strikethrough-thickness"],
        ["strokeDasharray", "stroke-dasharray"],
        ["strokeDashoffset", "stroke-dashoffset"],
        ["strokeLinecap", "stroke-linecap"],
        ["strokeLinejoin", "stroke-linejoin"],
        ["strokeMiterlimit", "stroke-miterlimit"],
        ["strokeOpacity", "stroke-opacity"],
        ["strokeWidth", "stroke-width"],
        ["textAnchor", "text-anchor"],
        ["textDecoration", "text-decoration"],
        ["textRendering", "text-rendering"],
        ["transformOrigin", "transform-origin"],
        ["underlinePosition", "underline-position"],
        ["underlineThickness", "underline-thickness"],
        ["unicodeBidi", "unicode-bidi"],
        ["unicodeRange", "unicode-range"],
        ["unitsPerEm", "units-per-em"],
        ["vAlphabetic", "v-alphabetic"],
        ["vHanging", "v-hanging"],
        ["vIdeographic", "v-ideographic"],
        ["vMathematical", "v-mathematical"],
        ["vectorEffect", "vector-effect"],
        ["vertAdvY", "vert-adv-y"],
        ["vertOriginX", "vert-origin-x"],
        ["vertOriginY", "vert-origin-y"],
        ["wordSpacing", "word-spacing"],
        ["writingMode", "writing-mode"],
        ["xmlnsXlink", "xmlns:xlink"],
        ["xHeight", "x-height"]
      ]);
      function getAttributeAlias(name) {
        return aliases.get(name) || name;
      }
      var possibleStandardNames = {
        accept: "accept",
        acceptcharset: "acceptCharset",
        "accept-charset": "acceptCharset",
        accesskey: "accessKey",
        action: "action",
        allowfullscreen: "allowFullScreen",
        alt: "alt",
        as: "as",
        async: "async",
        autocapitalize: "autoCapitalize",
        autocomplete: "autoComplete",
        autocorrect: "autoCorrect",
        autofocus: "autoFocus",
        autoplay: "autoPlay",
        autosave: "autoSave",
        capture: "capture",
        cellpadding: "cellPadding",
        cellspacing: "cellSpacing",
        challenge: "challenge",
        charset: "charSet",
        checked: "checked",
        children: "children",
        cite: "cite",
        class: "className",
        classid: "classID",
        classname: "className",
        cols: "cols",
        colspan: "colSpan",
        content: "content",
        contenteditable: "contentEditable",
        contextmenu: "contextMenu",
        controls: "controls",
        controlslist: "controlsList",
        coords: "coords",
        crossorigin: "crossOrigin",
        dangerouslysetinnerhtml: "dangerouslySetInnerHTML",
        data: "data",
        datetime: "dateTime",
        default: "default",
        defaultchecked: "defaultChecked",
        defaultvalue: "defaultValue",
        defer: "defer",
        dir: "dir",
        disabled: "disabled",
        disablepictureinpicture: "disablePictureInPicture",
        disableremoteplayback: "disableRemotePlayback",
        download: "download",
        draggable: "draggable",
        enctype: "encType",
        enterkeyhint: "enterKeyHint",
        fetchpriority: "fetchPriority",
        for: "htmlFor",
        form: "form",
        formmethod: "formMethod",
        formaction: "formAction",
        formenctype: "formEncType",
        formnovalidate: "formNoValidate",
        formtarget: "formTarget",
        frameborder: "frameBorder",
        headers: "headers",
        height: "height",
        hidden: "hidden",
        high: "high",
        href: "href",
        hreflang: "hrefLang",
        htmlfor: "htmlFor",
        httpequiv: "httpEquiv",
        "http-equiv": "httpEquiv",
        icon: "icon",
        id: "id",
        imagesizes: "imageSizes",
        imagesrcset: "imageSrcSet",
        innerhtml: "innerHTML",
        inputmode: "inputMode",
        integrity: "integrity",
        is: "is",
        itemid: "itemID",
        itemprop: "itemProp",
        itemref: "itemRef",
        itemscope: "itemScope",
        itemtype: "itemType",
        keyparams: "keyParams",
        keytype: "keyType",
        kind: "kind",
        label: "label",
        lang: "lang",
        list: "list",
        loop: "loop",
        low: "low",
        manifest: "manifest",
        marginwidth: "marginWidth",
        marginheight: "marginHeight",
        max: "max",
        maxlength: "maxLength",
        media: "media",
        mediagroup: "mediaGroup",
        method: "method",
        min: "min",
        minlength: "minLength",
        multiple: "multiple",
        muted: "muted",
        name: "name",
        nomodule: "noModule",
        nonce: "nonce",
        novalidate: "noValidate",
        open: "open",
        optimum: "optimum",
        pattern: "pattern",
        placeholder: "placeholder",
        playsinline: "playsInline",
        poster: "poster",
        preload: "preload",
        profile: "profile",
        radiogroup: "radioGroup",
        readonly: "readOnly",
        referrerpolicy: "referrerPolicy",
        rel: "rel",
        required: "required",
        reversed: "reversed",
        role: "role",
        rows: "rows",
        rowspan: "rowSpan",
        sandbox: "sandbox",
        scope: "scope",
        scoped: "scoped",
        scrolling: "scrolling",
        seamless: "seamless",
        selected: "selected",
        shape: "shape",
        size: "size",
        sizes: "sizes",
        span: "span",
        spellcheck: "spellCheck",
        src: "src",
        srcdoc: "srcDoc",
        srclang: "srcLang",
        srcset: "srcSet",
        start: "start",
        step: "step",
        style: "style",
        summary: "summary",
        tabindex: "tabIndex",
        target: "target",
        title: "title",
        type: "type",
        usemap: "useMap",
        value: "value",
        width: "width",
        wmode: "wmode",
        wrap: "wrap",
        about: "about",
        accentheight: "accentHeight",
        "accent-height": "accentHeight",
        accumulate: "accumulate",
        additive: "additive",
        alignmentbaseline: "alignmentBaseline",
        "alignment-baseline": "alignmentBaseline",
        allowreorder: "allowReorder",
        alphabetic: "alphabetic",
        amplitude: "amplitude",
        arabicform: "arabicForm",
        "arabic-form": "arabicForm",
        ascent: "ascent",
        attributename: "attributeName",
        attributetype: "attributeType",
        autoreverse: "autoReverse",
        azimuth: "azimuth",
        basefrequency: "baseFrequency",
        baselineshift: "baselineShift",
        "baseline-shift": "baselineShift",
        baseprofile: "baseProfile",
        bbox: "bbox",
        begin: "begin",
        bias: "bias",
        by: "by",
        calcmode: "calcMode",
        capheight: "capHeight",
        "cap-height": "capHeight",
        clip: "clip",
        clippath: "clipPath",
        "clip-path": "clipPath",
        clippathunits: "clipPathUnits",
        cliprule: "clipRule",
        "clip-rule": "clipRule",
        color: "color",
        colorinterpolation: "colorInterpolation",
        "color-interpolation": "colorInterpolation",
        colorinterpolationfilters: "colorInterpolationFilters",
        "color-interpolation-filters": "colorInterpolationFilters",
        colorprofile: "colorProfile",
        "color-profile": "colorProfile",
        colorrendering: "colorRendering",
        "color-rendering": "colorRendering",
        contentscripttype: "contentScriptType",
        contentstyletype: "contentStyleType",
        cursor: "cursor",
        cx: "cx",
        cy: "cy",
        d: "d",
        datatype: "datatype",
        decelerate: "decelerate",
        descent: "descent",
        diffuseconstant: "diffuseConstant",
        direction: "direction",
        display: "display",
        divisor: "divisor",
        dominantbaseline: "dominantBaseline",
        "dominant-baseline": "dominantBaseline",
        dur: "dur",
        dx: "dx",
        dy: "dy",
        edgemode: "edgeMode",
        elevation: "elevation",
        enablebackground: "enableBackground",
        "enable-background": "enableBackground",
        end: "end",
        exponent: "exponent",
        externalresourcesrequired: "externalResourcesRequired",
        fill: "fill",
        fillopacity: "fillOpacity",
        "fill-opacity": "fillOpacity",
        fillrule: "fillRule",
        "fill-rule": "fillRule",
        filter: "filter",
        filterres: "filterRes",
        filterunits: "filterUnits",
        floodopacity: "floodOpacity",
        "flood-opacity": "floodOpacity",
        floodcolor: "floodColor",
        "flood-color": "floodColor",
        focusable: "focusable",
        fontfamily: "fontFamily",
        "font-family": "fontFamily",
        fontsize: "fontSize",
        "font-size": "fontSize",
        fontsizeadjust: "fontSizeAdjust",
        "font-size-adjust": "fontSizeAdjust",
        fontstretch: "fontStretch",
        "font-stretch": "fontStretch",
        fontstyle: "fontStyle",
        "font-style": "fontStyle",
        fontvariant: "fontVariant",
        "font-variant": "fontVariant",
        fontweight: "fontWeight",
        "font-weight": "fontWeight",
        format: "format",
        from: "from",
        fx: "fx",
        fy: "fy",
        g1: "g1",
        g2: "g2",
        glyphname: "glyphName",
        "glyph-name": "glyphName",
        glyphorientationhorizontal: "glyphOrientationHorizontal",
        "glyph-orientation-horizontal": "glyphOrientationHorizontal",
        glyphorientationvertical: "glyphOrientationVertical",
        "glyph-orientation-vertical": "glyphOrientationVertical",
        glyphref: "glyphRef",
        gradienttransform: "gradientTransform",
        gradientunits: "gradientUnits",
        hanging: "hanging",
        horizadvx: "horizAdvX",
        "horiz-adv-x": "horizAdvX",
        horizoriginx: "horizOriginX",
        "horiz-origin-x": "horizOriginX",
        ideographic: "ideographic",
        imagerendering: "imageRendering",
        "image-rendering": "imageRendering",
        in2: "in2",
        in: "in",
        inlist: "inlist",
        intercept: "intercept",
        k1: "k1",
        k2: "k2",
        k3: "k3",
        k4: "k4",
        k: "k",
        kernelmatrix: "kernelMatrix",
        kernelunitlength: "kernelUnitLength",
        kerning: "kerning",
        keypoints: "keyPoints",
        keysplines: "keySplines",
        keytimes: "keyTimes",
        lengthadjust: "lengthAdjust",
        letterspacing: "letterSpacing",
        "letter-spacing": "letterSpacing",
        lightingcolor: "lightingColor",
        "lighting-color": "lightingColor",
        limitingconeangle: "limitingConeAngle",
        local: "local",
        markerend: "markerEnd",
        "marker-end": "markerEnd",
        markerheight: "markerHeight",
        markermid: "markerMid",
        "marker-mid": "markerMid",
        markerstart: "markerStart",
        "marker-start": "markerStart",
        markerunits: "markerUnits",
        markerwidth: "markerWidth",
        mask: "mask",
        maskcontentunits: "maskContentUnits",
        maskunits: "maskUnits",
        mathematical: "mathematical",
        mode: "mode",
        numoctaves: "numOctaves",
        offset: "offset",
        opacity: "opacity",
        operator: "operator",
        order: "order",
        orient: "orient",
        orientation: "orientation",
        origin: "origin",
        overflow: "overflow",
        overlineposition: "overlinePosition",
        "overline-position": "overlinePosition",
        overlinethickness: "overlineThickness",
        "overline-thickness": "overlineThickness",
        paintorder: "paintOrder",
        "paint-order": "paintOrder",
        panose1: "panose1",
        "panose-1": "panose1",
        pathlength: "pathLength",
        patterncontentunits: "patternContentUnits",
        patterntransform: "patternTransform",
        patternunits: "patternUnits",
        pointerevents: "pointerEvents",
        "pointer-events": "pointerEvents",
        points: "points",
        pointsatx: "pointsAtX",
        pointsaty: "pointsAtY",
        pointsatz: "pointsAtZ",
        prefix: "prefix",
        preservealpha: "preserveAlpha",
        preserveaspectratio: "preserveAspectRatio",
        primitiveunits: "primitiveUnits",
        property: "property",
        r: "r",
        radius: "radius",
        refx: "refX",
        refy: "refY",
        renderingintent: "renderingIntent",
        "rendering-intent": "renderingIntent",
        repeatcount: "repeatCount",
        repeatdur: "repeatDur",
        requiredextensions: "requiredExtensions",
        requiredfeatures: "requiredFeatures",
        resource: "resource",
        restart: "restart",
        result: "result",
        results: "results",
        rotate: "rotate",
        rx: "rx",
        ry: "ry",
        scale: "scale",
        security: "security",
        seed: "seed",
        shaperendering: "shapeRendering",
        "shape-rendering": "shapeRendering",
        slope: "slope",
        spacing: "spacing",
        specularconstant: "specularConstant",
        specularexponent: "specularExponent",
        speed: "speed",
        spreadmethod: "spreadMethod",
        startoffset: "startOffset",
        stddeviation: "stdDeviation",
        stemh: "stemh",
        stemv: "stemv",
        stitchtiles: "stitchTiles",
        stopcolor: "stopColor",
        "stop-color": "stopColor",
        stopopacity: "stopOpacity",
        "stop-opacity": "stopOpacity",
        strikethroughposition: "strikethroughPosition",
        "strikethrough-position": "strikethroughPosition",
        strikethroughthickness: "strikethroughThickness",
        "strikethrough-thickness": "strikethroughThickness",
        string: "string",
        stroke: "stroke",
        strokedasharray: "strokeDasharray",
        "stroke-dasharray": "strokeDasharray",
        strokedashoffset: "strokeDashoffset",
        "stroke-dashoffset": "strokeDashoffset",
        strokelinecap: "strokeLinecap",
        "stroke-linecap": "strokeLinecap",
        strokelinejoin: "strokeLinejoin",
        "stroke-linejoin": "strokeLinejoin",
        strokemiterlimit: "strokeMiterlimit",
        "stroke-miterlimit": "strokeMiterlimit",
        strokewidth: "strokeWidth",
        "stroke-width": "strokeWidth",
        strokeopacity: "strokeOpacity",
        "stroke-opacity": "strokeOpacity",
        suppresscontenteditablewarning: "suppressContentEditableWarning",
        suppresshydrationwarning: "suppressHydrationWarning",
        surfacescale: "surfaceScale",
        systemlanguage: "systemLanguage",
        tablevalues: "tableValues",
        targetx: "targetX",
        targety: "targetY",
        textanchor: "textAnchor",
        "text-anchor": "textAnchor",
        textdecoration: "textDecoration",
        "text-decoration": "textDecoration",
        textlength: "textLength",
        textrendering: "textRendering",
        "text-rendering": "textRendering",
        to: "to",
        transform: "transform",
        transformorigin: "transformOrigin",
        "transform-origin": "transformOrigin",
        typeof: "typeof",
        u1: "u1",
        u2: "u2",
        underlineposition: "underlinePosition",
        "underline-position": "underlinePosition",
        underlinethickness: "underlineThickness",
        "underline-thickness": "underlineThickness",
        unicode: "unicode",
        unicodebidi: "unicodeBidi",
        "unicode-bidi": "unicodeBidi",
        unicoderange: "unicodeRange",
        "unicode-range": "unicodeRange",
        unitsperem: "unitsPerEm",
        "units-per-em": "unitsPerEm",
        unselectable: "unselectable",
        valphabetic: "vAlphabetic",
        "v-alphabetic": "vAlphabetic",
        values: "values",
        vectoreffect: "vectorEffect",
        "vector-effect": "vectorEffect",
        version: "version",
        vertadvy: "vertAdvY",
        "vert-adv-y": "vertAdvY",
        vertoriginx: "vertOriginX",
        "vert-origin-x": "vertOriginX",
        vertoriginy: "vertOriginY",
        "vert-origin-y": "vertOriginY",
        vhanging: "vHanging",
        "v-hanging": "vHanging",
        videographic: "vIdeographic",
        "v-ideographic": "vIdeographic",
        viewbox: "viewBox",
        viewtarget: "viewTarget",
        visibility: "visibility",
        vmathematical: "vMathematical",
        "v-mathematical": "vMathematical",
        vocab: "vocab",
        widths: "widths",
        wordspacing: "wordSpacing",
        "word-spacing": "wordSpacing",
        writingmode: "writingMode",
        "writing-mode": "writingMode",
        x1: "x1",
        x2: "x2",
        x: "x",
        xchannelselector: "xChannelSelector",
        xheight: "xHeight",
        "x-height": "xHeight",
        xlinkactuate: "xlinkActuate",
        "xlink:actuate": "xlinkActuate",
        xlinkarcrole: "xlinkArcrole",
        "xlink:arcrole": "xlinkArcrole",
        xlinkhref: "xlinkHref",
        "xlink:href": "xlinkHref",
        xlinkrole: "xlinkRole",
        "xlink:role": "xlinkRole",
        xlinkshow: "xlinkShow",
        "xlink:show": "xlinkShow",
        xlinktitle: "xlinkTitle",
        "xlink:title": "xlinkTitle",
        xlinktype: "xlinkType",
        "xlink:type": "xlinkType",
        xmlbase: "xmlBase",
        "xml:base": "xmlBase",
        xmllang: "xmlLang",
        "xml:lang": "xmlLang",
        xmlns: "xmlns",
        "xml:space": "xmlSpace",
        xmlnsxlink: "xmlnsXlink",
        "xmlns:xlink": "xmlnsXlink",
        xmlspace: "xmlSpace",
        y1: "y1",
        y2: "y2",
        y: "y",
        ychannelselector: "yChannelSelector",
        z: "z",
        zoomandpan: "zoomAndPan"
      };
      var ariaProperties = {
        "aria-current": 0,
        "aria-description": 0,
        "aria-details": 0,
        "aria-disabled": 0,
        "aria-hidden": 0,
        "aria-invalid": 0,
        "aria-keyshortcuts": 0,
        "aria-label": 0,
        "aria-roledescription": 0,
        "aria-autocomplete": 0,
        "aria-checked": 0,
        "aria-expanded": 0,
        "aria-haspopup": 0,
        "aria-level": 0,
        "aria-modal": 0,
        "aria-multiline": 0,
        "aria-multiselectable": 0,
        "aria-orientation": 0,
        "aria-placeholder": 0,
        "aria-pressed": 0,
        "aria-readonly": 0,
        "aria-required": 0,
        "aria-selected": 0,
        "aria-sort": 0,
        "aria-valuemax": 0,
        "aria-valuemin": 0,
        "aria-valuenow": 0,
        "aria-valuetext": 0,
        "aria-atomic": 0,
        "aria-busy": 0,
        "aria-live": 0,
        "aria-relevant": 0,
        "aria-dropeffect": 0,
        "aria-grabbed": 0,
        "aria-activedescendant": 0,
        "aria-colcount": 0,
        "aria-colindex": 0,
        "aria-colspan": 0,
        "aria-controls": 0,
        "aria-describedby": 0,
        "aria-errormessage": 0,
        "aria-flowto": 0,
        "aria-labelledby": 0,
        "aria-owns": 0,
        "aria-posinset": 0,
        "aria-rowcount": 0,
        "aria-rowindex": 0,
        "aria-rowspan": 0,
        "aria-setsize": 0
      };
      var warnedProperties$1 = {};
      var rARIA$1 = new RegExp("^(aria)-[" + ATTRIBUTE_NAME_CHAR + "]*$");
      var rARIACamel$1 = new RegExp("^(aria)[A-Z][" + ATTRIBUTE_NAME_CHAR + "]*$");
      function validateProperty$1(tagName, name) {
        {
          if (hasOwnProperty.call(warnedProperties$1, name) && warnedProperties$1[name]) {
            return true;
          }
          if (rARIACamel$1.test(name)) {
            var ariaName = "aria-" + name.slice(4).toLowerCase();
            var correctName = ariaProperties.hasOwnProperty(ariaName) ? ariaName : null;
            if (correctName == null) {
              error("Invalid ARIA attribute `%s`. ARIA attributes follow the pattern aria-* and must be lowercase.", name);
              warnedProperties$1[name] = true;
              return true;
            }
            if (name !== correctName) {
              error("Invalid ARIA attribute `%s`. Did you mean `%s`?", name, correctName);
              warnedProperties$1[name] = true;
              return true;
            }
          }
          if (rARIA$1.test(name)) {
            var lowerCasedName = name.toLowerCase();
            var standardName = ariaProperties.hasOwnProperty(lowerCasedName) ? lowerCasedName : null;
            if (standardName == null) {
              warnedProperties$1[name] = true;
              return false;
            }
            if (name !== standardName) {
              error("Unknown ARIA attribute `%s`. Did you mean `%s`?", name, standardName);
              warnedProperties$1[name] = true;
              return true;
            }
          }
        }
        return true;
      }
      function validateProperties$2(type, props) {
        {
          var invalidProps = [];
          for (var key in props) {
            var isValid = validateProperty$1(type, key);
            if (!isValid) {
              invalidProps.push(key);
            }
          }
          var unknownPropString = invalidProps.map(function(prop) {
            return "`" + prop + "`";
          }).join(", ");
          if (invalidProps.length === 1) {
            error("Invalid aria prop %s on <%s> tag. " + "For details, see https://reactjs.org/link/invalid-aria-props", unknownPropString, type);
          } else if (invalidProps.length > 1) {
            error("Invalid aria props %s on <%s> tag. " + "For details, see https://reactjs.org/link/invalid-aria-props", unknownPropString, type);
          }
        }
      }
      var didWarnValueNull = false;
      function validateProperties$1(type, props) {
        {
          if (type !== "input" && type !== "textarea" && type !== "select") {
            return;
          }
          if (props != null && props.value === null && !didWarnValueNull) {
            didWarnValueNull = true;
            if (type === "select" && props.multiple) {
              error("`value` prop on `%s` should not be null. " + "Consider using an empty array when `multiple` is set to `true` " + "to clear the component or `undefined` for uncontrolled components.", type);
            } else {
              error("`value` prop on `%s` should not be null. " + "Consider using an empty string to clear the component or `undefined` " + "for uncontrolled components.", type);
            }
          }
        }
      }
      var warnedProperties = {};
      var EVENT_NAME_REGEX = /^on./;
      var INVALID_EVENT_NAME_REGEX = /^on[^A-Z]/;
      var rARIA = new RegExp("^(aria)-[" + ATTRIBUTE_NAME_CHAR + "]*$");
      var rARIACamel = new RegExp("^(aria)[A-Z][" + ATTRIBUTE_NAME_CHAR + "]*$");
      function validateProperty(tagName, name, value, eventRegistry) {
        {
          if (hasOwnProperty.call(warnedProperties, name) && warnedProperties[name]) {
            return true;
          }
          var lowerCasedName = name.toLowerCase();
          if (lowerCasedName === "onfocusin" || lowerCasedName === "onfocusout") {
            error("React uses onFocus and onBlur instead of onFocusIn and onFocusOut. " + "All React events are normalized to bubble, so onFocusIn and onFocusOut " + "are not needed/supported by React.");
            warnedProperties[name] = true;
            return true;
          }
          {
            if (typeof value === "function") {
              if (tagName === "form" && name === "action") {
                return true;
              }
              if (tagName === "input" && name === "formAction") {
                return true;
              }
              if (tagName === "button" && name === "formAction") {
                return true;
              }
            }
          }
          if (eventRegistry != null) {
            var { registrationNameDependencies: registrationNameDependencies2, possibleRegistrationNames: possibleRegistrationNames2 } = eventRegistry;
            if (registrationNameDependencies2.hasOwnProperty(name)) {
              return true;
            }
            var registrationName = possibleRegistrationNames2.hasOwnProperty(lowerCasedName) ? possibleRegistrationNames2[lowerCasedName] : null;
            if (registrationName != null) {
              error("Invalid event handler property `%s`. Did you mean `%s`?", name, registrationName);
              warnedProperties[name] = true;
              return true;
            }
            if (EVENT_NAME_REGEX.test(name)) {
              error("Unknown event handler property `%s`. It will be ignored.", name);
              warnedProperties[name] = true;
              return true;
            }
          } else if (EVENT_NAME_REGEX.test(name)) {
            if (INVALID_EVENT_NAME_REGEX.test(name)) {
              error("Invalid event handler property `%s`. " + "React events use the camelCase naming convention, for example `onClick`.", name);
            }
            warnedProperties[name] = true;
            return true;
          }
          if (rARIA.test(name) || rARIACamel.test(name)) {
            return true;
          }
          if (lowerCasedName === "innerhtml") {
            error("Directly setting property `innerHTML` is not permitted. " + "For more information, lookup documentation on `dangerouslySetInnerHTML`.");
            warnedProperties[name] = true;
            return true;
          }
          if (lowerCasedName === "aria") {
            error("The `aria` attribute is reserved for future use in React. " + "Pass individual `aria-` attributes instead.");
            warnedProperties[name] = true;
            return true;
          }
          if (lowerCasedName === "is" && value !== null && value !== undefined && typeof value !== "string") {
            error("Received a `%s` for a string attribute `is`. If this is expected, cast " + "the value to a string.", typeof value);
            warnedProperties[name] = true;
            return true;
          }
          if (typeof value === "number" && isNaN(value)) {
            error("Received NaN for the `%s` attribute. If this is expected, cast " + "the value to a string.", name);
            warnedProperties[name] = true;
            return true;
          }
          if (possibleStandardNames.hasOwnProperty(lowerCasedName)) {
            var standardName = possibleStandardNames[lowerCasedName];
            if (standardName !== name) {
              error("Invalid DOM property `%s`. Did you mean `%s`?", name, standardName);
              warnedProperties[name] = true;
              return true;
            }
          } else if (name !== lowerCasedName) {
            error("React does not recognize the `%s` prop on a DOM element. If you " + "intentionally want it to appear in the DOM as a custom " + "attribute, spell it as lowercase `%s` instead. " + "If you accidentally passed it from a parent component, remove " + "it from the DOM element.", name, lowerCasedName);
            warnedProperties[name] = true;
            return true;
          }
          switch (name) {
            case "dangerouslySetInnerHTML":
            case "children":
            case "style":
            case "suppressContentEditableWarning":
            case "suppressHydrationWarning":
            case "defaultValue":
            case "defaultChecked":
            case "innerHTML": {
              return true;
            }
            case "innerText":
            case "textContent": {
              return true;
            }
          }
          switch (typeof value) {
            case "boolean": {
              switch (name) {
                case "autoFocus":
                case "checked":
                case "multiple":
                case "muted":
                case "selected":
                case "contentEditable":
                case "spellCheck":
                case "draggable":
                case "value":
                case "autoReverse":
                case "externalResourcesRequired":
                case "focusable":
                case "preserveAlpha":
                case "allowFullScreen":
                case "async":
                case "autoPlay":
                case "controls":
                case "default":
                case "defer":
                case "disabled":
                case "disablePictureInPicture":
                case "disableRemotePlayback":
                case "formNoValidate":
                case "hidden":
                case "loop":
                case "noModule":
                case "noValidate":
                case "open":
                case "playsInline":
                case "readOnly":
                case "required":
                case "reversed":
                case "scoped":
                case "seamless":
                case "itemScope":
                case "capture":
                case "download": {
                  return true;
                }
                default: {
                  var prefix2 = name.toLowerCase().slice(0, 5);
                  if (prefix2 === "data-" || prefix2 === "aria-") {
                    return true;
                  }
                  if (value) {
                    error("Received `%s` for a non-boolean attribute `%s`.\n\n" + "If you want to write it to the DOM, pass a string instead: " + '%s="%s" or %s={value.toString()}.', value, name, name, value, name);
                  } else {
                    error("Received `%s` for a non-boolean attribute `%s`.\n\n" + "If you want to write it to the DOM, pass a string instead: " + `%s="%s" or %s={value.toString()}.

` + "If you used to conditionally omit it with %s={condition && value}, " + "pass %s={condition ? value : undefined} instead.", value, name, name, value, name, name, name);
                  }
                  warnedProperties[name] = true;
                  return true;
                }
              }
            }
            case "function":
            case "symbol":
              warnedProperties[name] = true;
              return false;
            case "string": {
              if (value === "false" || value === "true") {
                switch (name) {
                  case "checked":
                  case "selected":
                  case "multiple":
                  case "muted":
                  case "allowFullScreen":
                  case "async":
                  case "autoPlay":
                  case "controls":
                  case "default":
                  case "defer":
                  case "disabled":
                  case "disablePictureInPicture":
                  case "disableRemotePlayback":
                  case "formNoValidate":
                  case "hidden":
                  case "loop":
                  case "noModule":
                  case "noValidate":
                  case "open":
                  case "playsInline":
                  case "readOnly":
                  case "required":
                  case "reversed":
                  case "scoped":
                  case "seamless":
                  case "itemScope": {
                    break;
                  }
                  default: {
                    return true;
                  }
                }
                error("Received the string `%s` for the boolean attribute `%s`. " + "%s " + "Did you mean %s={%s}?", value, name, value === "false" ? "The browser will interpret it as a truthy value." : 'Although this works, it will not work as expected if you pass the string "false".', name, value);
                warnedProperties[name] = true;
                return true;
              }
            }
          }
          return true;
        }
      }
      function warnUnknownProperties(type, props, eventRegistry) {
        {
          var unknownProps = [];
          for (var key in props) {
            var isValid = validateProperty(type, key, props[key], eventRegistry);
            if (!isValid) {
              unknownProps.push(key);
            }
          }
          var unknownPropString = unknownProps.map(function(prop) {
            return "`" + prop + "`";
          }).join(", ");
          if (unknownProps.length === 1) {
            error("Invalid value for prop %s on <%s> tag. Either remove it from the element, " + "or pass a string or number value to keep it in the DOM. " + "For details, see https://reactjs.org/link/attribute-behavior ", unknownPropString, type);
          } else if (unknownProps.length > 1) {
            error("Invalid values for props %s on <%s> tag. Either remove them from the element, " + "or pass a string or number value to keep them in the DOM. " + "For details, see https://reactjs.org/link/attribute-behavior ", unknownPropString, type);
          }
        }
      }
      function validateProperties(type, props, eventRegistry) {
        if (isCustomElement(type) || typeof props.is === "string") {
          return;
        }
        warnUnknownProperties(type, props, eventRegistry);
      }
      var isJavaScriptProtocol = /^[\u0000-\u001F ]*j[\r\n\t]*a[\r\n\t]*v[\r\n\t]*a[\r\n\t]*s[\r\n\t]*c[\r\n\t]*r[\r\n\t]*i[\r\n\t]*p[\r\n\t]*t[\r\n\t]*\:/i;
      var didWarn = false;
      function sanitizeURL(url) {
        var stringifiedURL = "" + url;
        {
          if (!didWarn && isJavaScriptProtocol.test(stringifiedURL)) {
            didWarn = true;
            error("A future version of React will block javascript: URLs as a security precaution. " + "Use event handlers instead if you can. If you need to generate unsafe HTML try " + "using dangerouslySetInnerHTML instead. React was passed %s.", JSON.stringify(stringifiedURL));
          }
        }
        return url;
      }
      var IS_EVENT_HANDLE_NON_MANAGED_NODE = 1;
      var IS_NON_DELEGATED = 1 << 1;
      var IS_CAPTURE_PHASE = 1 << 2;
      var SHOULD_NOT_PROCESS_POLYFILL_EVENT_PLUGINS = IS_EVENT_HANDLE_NON_MANAGED_NODE | IS_NON_DELEGATED | IS_CAPTURE_PHASE;
      var currentReplayingEvent = null;
      function setReplayingEvent(event) {
        {
          if (currentReplayingEvent !== null) {
            error("Expected currently replaying event to be null. This error " + "is likely caused by a bug in React. Please file an issue.");
          }
        }
        currentReplayingEvent = event;
      }
      function resetReplayingEvent() {
        {
          if (currentReplayingEvent === null) {
            error("Expected currently replaying event to not be null. This error " + "is likely caused by a bug in React. Please file an issue.");
          }
        }
        currentReplayingEvent = null;
      }
      function isReplayingEvent(event) {
        return event === currentReplayingEvent;
      }
      function getEventTarget(nativeEvent) {
        var target = nativeEvent.target || nativeEvent.srcElement || window;
        if (target.correspondingUseElement) {
          target = target.correspondingUseElement;
        }
        return target.nodeType === TEXT_NODE ? target.parentNode : target;
      }
      var restoreTarget = null;
      var restoreQueue = null;
      function restoreStateOfTarget(target) {
        var internalInstance = getInstanceFromNode(target);
        if (!internalInstance) {
          return;
        }
        var stateNode = internalInstance.stateNode;
        if (stateNode) {
          var props = getFiberCurrentPropsFromNode(stateNode);
          restoreControlledState(internalInstance.stateNode, internalInstance.type, props);
        }
      }
      function enqueueStateRestore(target) {
        if (restoreTarget) {
          if (restoreQueue) {
            restoreQueue.push(target);
          } else {
            restoreQueue = [target];
          }
        } else {
          restoreTarget = target;
        }
      }
      function needsStateRestore() {
        return restoreTarget !== null || restoreQueue !== null;
      }
      function restoreStateIfNeeded() {
        if (!restoreTarget) {
          return;
        }
        var target = restoreTarget;
        var queuedTargets = restoreQueue;
        restoreTarget = null;
        restoreQueue = null;
        restoreStateOfTarget(target);
        if (queuedTargets) {
          for (var i = 0;i < queuedTargets.length; i++) {
            restoreStateOfTarget(queuedTargets[i]);
          }
        }
      }
      function get2(key) {
        return key._reactInternals;
      }
      function has(key) {
        return key._reactInternals !== undefined;
      }
      function set2(key, value) {
        key._reactInternals = value;
      }
      var ReactCurrentOwner$3 = ReactSharedInternals.ReactCurrentOwner;
      function getNearestMountedFiber(fiber) {
        var node = fiber;
        var nearestMounted = fiber;
        if (!fiber.alternate) {
          var nextNode = node;
          do {
            node = nextNode;
            if ((node.flags & (Placement | Hydrating)) !== NoFlags$1) {
              nearestMounted = node.return;
            }
            nextNode = node.return;
          } while (nextNode);
        } else {
          while (node.return) {
            node = node.return;
          }
        }
        if (node.tag === HostRoot) {
          return nearestMounted;
        }
        return null;
      }
      function getSuspenseInstanceFromFiber(fiber) {
        if (fiber.tag === SuspenseComponent) {
          var suspenseState = fiber.memoizedState;
          if (suspenseState === null) {
            var current2 = fiber.alternate;
            if (current2 !== null) {
              suspenseState = current2.memoizedState;
            }
          }
          if (suspenseState !== null) {
            return suspenseState.dehydrated;
          }
        }
        return null;
      }
      function getContainerFromFiber(fiber) {
        return fiber.tag === HostRoot ? fiber.stateNode.containerInfo : null;
      }
      function isFiberMounted(fiber) {
        return getNearestMountedFiber(fiber) === fiber;
      }
      function isMounted(component) {
        {
          var owner = ReactCurrentOwner$3.current;
          if (owner !== null && owner.tag === ClassComponent) {
            var ownerFiber = owner;
            var instance = ownerFiber.stateNode;
            if (!instance._warnedAboutRefsInRender) {
              error("%s is accessing isMounted inside its render() function. " + "render() should be a pure function of props and state. It should " + "never access something that requires stale data from the previous " + "render, such as refs. Move this logic to componentDidMount and " + "componentDidUpdate instead.", getComponentNameFromFiber(ownerFiber) || "A component");
            }
            instance._warnedAboutRefsInRender = true;
          }
        }
        var fiber = get2(component);
        if (!fiber) {
          return false;
        }
        return getNearestMountedFiber(fiber) === fiber;
      }
      function assertIsMounted(fiber) {
        if (getNearestMountedFiber(fiber) !== fiber) {
          throw new Error("Unable to find node on an unmounted component.");
        }
      }
      function findCurrentFiberUsingSlowPath(fiber) {
        var alternate = fiber.alternate;
        if (!alternate) {
          var nearestMounted = getNearestMountedFiber(fiber);
          if (nearestMounted === null) {
            throw new Error("Unable to find node on an unmounted component.");
          }
          if (nearestMounted !== fiber) {
            return null;
          }
          return fiber;
        }
        var a = fiber;
        var b = alternate;
        while (true) {
          var parentA = a.return;
          if (parentA === null) {
            break;
          }
          var parentB = parentA.alternate;
          if (parentB === null) {
            var nextParent = parentA.return;
            if (nextParent !== null) {
              a = b = nextParent;
              continue;
            }
            break;
          }
          if (parentA.child === parentB.child) {
            var child = parentA.child;
            while (child) {
              if (child === a) {
                assertIsMounted(parentA);
                return fiber;
              }
              if (child === b) {
                assertIsMounted(parentA);
                return alternate;
              }
              child = child.sibling;
            }
            throw new Error("Unable to find node on an unmounted component.");
          }
          if (a.return !== b.return) {
            a = parentA;
            b = parentB;
          } else {
            var didFindChild = false;
            var _child = parentA.child;
            while (_child) {
              if (_child === a) {
                didFindChild = true;
                a = parentA;
                b = parentB;
                break;
              }
              if (_child === b) {
                didFindChild = true;
                b = parentA;
                a = parentB;
                break;
              }
              _child = _child.sibling;
            }
            if (!didFindChild) {
              _child = parentB.child;
              while (_child) {
                if (_child === a) {
                  didFindChild = true;
                  a = parentB;
                  b = parentA;
                  break;
                }
                if (_child === b) {
                  didFindChild = true;
                  b = parentB;
                  a = parentA;
                  break;
                }
                _child = _child.sibling;
              }
              if (!didFindChild) {
                throw new Error("Child was not found in either parent set. This indicates a bug " + "in React related to the return pointer. Please file an issue.");
              }
            }
          }
          if (a.alternate !== b) {
            throw new Error("Return fibers should always be each others' alternates. " + "This error is likely caused by a bug in React. Please file an issue.");
          }
        }
        if (a.tag !== HostRoot) {
          throw new Error("Unable to find node on an unmounted component.");
        }
        if (a.stateNode.current === a) {
          return fiber;
        }
        return alternate;
      }
      function findCurrentHostFiber(parent) {
        var currentParent = findCurrentFiberUsingSlowPath(parent);
        return currentParent !== null ? findCurrentHostFiberImpl(currentParent) : null;
      }
      function findCurrentHostFiberImpl(node) {
        var tag = node.tag;
        if (tag === HostComponent || tag === HostHoistable || tag === HostSingleton || tag === HostText) {
          return node;
        }
        var child = node.child;
        while (child !== null) {
          var match = findCurrentHostFiberImpl(child);
          if (match !== null) {
            return match;
          }
          child = child.sibling;
        }
        return null;
      }
      function findCurrentHostFiberWithNoPortals(parent) {
        var currentParent = findCurrentFiberUsingSlowPath(parent);
        return currentParent !== null ? findCurrentHostFiberWithNoPortalsImpl(currentParent) : null;
      }
      function findCurrentHostFiberWithNoPortalsImpl(node) {
        var tag = node.tag;
        if (tag === HostComponent || tag === HostHoistable || tag === HostSingleton || tag === HostText) {
          return node;
        }
        var child = node.child;
        while (child !== null) {
          if (child.tag !== HostPortal) {
            var match = findCurrentHostFiberWithNoPortalsImpl(child);
            if (match !== null) {
              return match;
            }
          }
          child = child.sibling;
        }
        return null;
      }
      var loggedTypeFailures = {};
      var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;
      function setCurrentlyValidatingElement(element) {
        {
          if (element) {
            var owner = element._owner;
            var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
            ReactDebugCurrentFrame.setExtraStackFrame(stack);
          } else {
            ReactDebugCurrentFrame.setExtraStackFrame(null);
          }
        }
      }
      function checkPropTypes(typeSpecs, values, location2, componentName, element) {
        {
          var has2 = Function.call.bind(hasOwnProperty);
          for (var typeSpecName in typeSpecs) {
            if (has2(typeSpecs, typeSpecName)) {
              var error$1 = undefined;
              try {
                if (typeof typeSpecs[typeSpecName] !== "function") {
                  var err = Error((componentName || "React class") + ": " + location2 + " type `" + typeSpecName + "` is invalid; " + "it must be a function, usually from the `prop-types` package, but received `" + typeof typeSpecs[typeSpecName] + "`." + "This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.");
                  err.name = "Invariant Violation";
                  throw err;
                }
                error$1 = typeSpecs[typeSpecName](values, typeSpecName, componentName, location2, null, "SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED");
              } catch (ex) {
                error$1 = ex;
              }
              if (error$1 && !(error$1 instanceof Error)) {
                setCurrentlyValidatingElement(element);
                error("%s: type specification of %s" + " `%s` is invalid; the type checker " + "function must return `null` or an `Error` but returned a %s. " + "You may have forgotten to pass an argument to the type checker " + "creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and " + "shape all require an argument).", componentName || "React class", location2, typeSpecName, typeof error$1);
                setCurrentlyValidatingElement(null);
              }
              if (error$1 instanceof Error && !(error$1.message in loggedTypeFailures)) {
                loggedTypeFailures[error$1.message] = true;
                setCurrentlyValidatingElement(element);
                error("Failed %s type: %s", location2, error$1.message);
                setCurrentlyValidatingElement(null);
              }
            }
          }
        }
      }
      var warnedAboutMissingGetChildContext;
      {
        warnedAboutMissingGetChildContext = {};
      }
      var emptyContextObject = {};
      {
        Object.freeze(emptyContextObject);
      }
      var contextStackCursor = createCursor(emptyContextObject);
      var didPerformWorkStackCursor = createCursor(false);
      var previousContext = emptyContextObject;
      function getUnmaskedContext(workInProgress2, Component, didPushOwnContextIfProvider) {
        {
          if (didPushOwnContextIfProvider && isContextProvider(Component)) {
            return previousContext;
          }
          return contextStackCursor.current;
        }
      }
      function cacheContext(workInProgress2, unmaskedContext, maskedContext) {
        {
          var instance = workInProgress2.stateNode;
          instance.__reactInternalMemoizedUnmaskedChildContext = unmaskedContext;
          instance.__reactInternalMemoizedMaskedChildContext = maskedContext;
        }
      }
      function getMaskedContext(workInProgress2, unmaskedContext) {
        {
          var type = workInProgress2.type;
          var contextTypes = type.contextTypes;
          if (!contextTypes) {
            return emptyContextObject;
          }
          var instance = workInProgress2.stateNode;
          if (instance && instance.__reactInternalMemoizedUnmaskedChildContext === unmaskedContext) {
            return instance.__reactInternalMemoizedMaskedChildContext;
          }
          var context = {};
          for (var key in contextTypes) {
            context[key] = unmaskedContext[key];
          }
          {
            var name = getComponentNameFromFiber(workInProgress2) || "Unknown";
            checkPropTypes(contextTypes, context, "context", name);
          }
          if (instance) {
            cacheContext(workInProgress2, unmaskedContext, context);
          }
          return context;
        }
      }
      function hasContextChanged() {
        {
          return didPerformWorkStackCursor.current;
        }
      }
      function isContextProvider(type) {
        {
          var childContextTypes = type.childContextTypes;
          return childContextTypes !== null && childContextTypes !== undefined;
        }
      }
      function popContext(fiber) {
        {
          pop(didPerformWorkStackCursor, fiber);
          pop(contextStackCursor, fiber);
        }
      }
      function popTopLevelContextObject(fiber) {
        {
          pop(didPerformWorkStackCursor, fiber);
          pop(contextStackCursor, fiber);
        }
      }
      function pushTopLevelContextObject(fiber, context, didChange) {
        {
          if (contextStackCursor.current !== emptyContextObject) {
            throw new Error("Unexpected context found on stack. " + "This error is likely caused by a bug in React. Please file an issue.");
          }
          push(contextStackCursor, context, fiber);
          push(didPerformWorkStackCursor, didChange, fiber);
        }
      }
      function processChildContext(fiber, type, parentContext) {
        {
          var instance = fiber.stateNode;
          var childContextTypes = type.childContextTypes;
          if (typeof instance.getChildContext !== "function") {
            {
              var componentName = getComponentNameFromFiber(fiber) || "Unknown";
              if (!warnedAboutMissingGetChildContext[componentName]) {
                warnedAboutMissingGetChildContext[componentName] = true;
                error("%s.childContextTypes is specified but there is no getChildContext() method " + "on the instance. You can either define getChildContext() on %s or remove " + "childContextTypes from it.", componentName, componentName);
              }
            }
            return parentContext;
          }
          var childContext = instance.getChildContext();
          for (var contextKey in childContext) {
            if (!(contextKey in childContextTypes)) {
              throw new Error((getComponentNameFromFiber(fiber) || "Unknown") + '.getChildContext(): key "' + contextKey + '" is not defined in childContextTypes.');
            }
          }
          {
            var name = getComponentNameFromFiber(fiber) || "Unknown";
            checkPropTypes(childContextTypes, childContext, "child context", name);
          }
          return assign({}, parentContext, childContext);
        }
      }
      function pushContextProvider(workInProgress2) {
        {
          var instance = workInProgress2.stateNode;
          var memoizedMergedChildContext = instance && instance.__reactInternalMemoizedMergedChildContext || emptyContextObject;
          previousContext = contextStackCursor.current;
          push(contextStackCursor, memoizedMergedChildContext, workInProgress2);
          push(didPerformWorkStackCursor, didPerformWorkStackCursor.current, workInProgress2);
          return true;
        }
      }
      function invalidateContextProvider(workInProgress2, type, didChange) {
        {
          var instance = workInProgress2.stateNode;
          if (!instance) {
            throw new Error("Expected to have an instance by this point. " + "This error is likely caused by a bug in React. Please file an issue.");
          }
          if (didChange) {
            var mergedContext = processChildContext(workInProgress2, type, previousContext);
            instance.__reactInternalMemoizedMergedChildContext = mergedContext;
            pop(didPerformWorkStackCursor, workInProgress2);
            pop(contextStackCursor, workInProgress2);
            push(contextStackCursor, mergedContext, workInProgress2);
            push(didPerformWorkStackCursor, didChange, workInProgress2);
          } else {
            pop(didPerformWorkStackCursor, workInProgress2);
            push(didPerformWorkStackCursor, didChange, workInProgress2);
          }
        }
      }
      function findCurrentUnmaskedContext(fiber) {
        {
          if (!isFiberMounted(fiber) || fiber.tag !== ClassComponent) {
            throw new Error("Expected subtree parent to be a mounted class component. " + "This error is likely caused by a bug in React. Please file an issue.");
          }
          var node = fiber;
          do {
            switch (node.tag) {
              case HostRoot:
                return node.stateNode.context;
              case ClassComponent: {
                var Component = node.type;
                if (isContextProvider(Component)) {
                  return node.stateNode.__reactInternalMemoizedMergedChildContext;
                }
                break;
              }
            }
            node = node.return;
          } while (node !== null);
          throw new Error("Found unexpected detached subtree parent. " + "This error is likely caused by a bug in React. Please file an issue.");
        }
      }
      var LegacyRoot = 0;
      var ConcurrentRoot = 1;
      var OffscreenVisible = 1;
      var OffscreenDetached = 2;
      var OffscreenPassiveEffectsConnected = 4;
      function isOffscreenManual(offscreenFiber) {
        return offscreenFiber.memoizedProps !== null && offscreenFiber.memoizedProps.mode === "manual";
      }
      function is(x, y) {
        return x === y && (x !== 0 || 1 / x === 1 / y) || x !== x && y !== y;
      }
      var objectIs = typeof Object.is === "function" ? Object.is : is;
      function isRootDehydrated(root2) {
        var currentState = root2.current.memoizedState;
        return currentState.isDehydrated;
      }
      var forkStack = [];
      var forkStackIndex = 0;
      var treeForkProvider = null;
      var treeForkCount = 0;
      var idStack = [];
      var idStackIndex = 0;
      var treeContextProvider = null;
      var treeContextId = 1;
      var treeContextOverflow = "";
      function isForkedChild(workInProgress2) {
        warnIfNotHydrating();
        return (workInProgress2.flags & Forked) !== NoFlags$1;
      }
      function getForksAtLevel(workInProgress2) {
        warnIfNotHydrating();
        return treeForkCount;
      }
      function getTreeId() {
        var overflow = treeContextOverflow;
        var idWithLeadingBit = treeContextId;
        var id = idWithLeadingBit & ~getLeadingBit(idWithLeadingBit);
        return id.toString(32) + overflow;
      }
      function pushTreeFork(workInProgress2, totalChildren) {
        warnIfNotHydrating();
        forkStack[forkStackIndex++] = treeForkCount;
        forkStack[forkStackIndex++] = treeForkProvider;
        treeForkProvider = workInProgress2;
        treeForkCount = totalChildren;
      }
      function pushTreeId(workInProgress2, totalChildren, index2) {
        warnIfNotHydrating();
        idStack[idStackIndex++] = treeContextId;
        idStack[idStackIndex++] = treeContextOverflow;
        idStack[idStackIndex++] = treeContextProvider;
        treeContextProvider = workInProgress2;
        var baseIdWithLeadingBit = treeContextId;
        var baseOverflow = treeContextOverflow;
        var baseLength = getBitLength(baseIdWithLeadingBit) - 1;
        var baseId = baseIdWithLeadingBit & ~(1 << baseLength);
        var slot = index2 + 1;
        var length = getBitLength(totalChildren) + baseLength;
        if (length > 30) {
          var numberOfOverflowBits = baseLength - baseLength % 5;
          var newOverflowBits = (1 << numberOfOverflowBits) - 1;
          var newOverflow = (baseId & newOverflowBits).toString(32);
          var restOfBaseId = baseId >> numberOfOverflowBits;
          var restOfBaseLength = baseLength - numberOfOverflowBits;
          var restOfLength = getBitLength(totalChildren) + restOfBaseLength;
          var restOfNewBits = slot << restOfBaseLength;
          var id = restOfNewBits | restOfBaseId;
          var overflow = newOverflow + baseOverflow;
          treeContextId = 1 << restOfLength | id;
          treeContextOverflow = overflow;
        } else {
          var newBits = slot << baseLength;
          var _id = newBits | baseId;
          var _overflow = baseOverflow;
          treeContextId = 1 << length | _id;
          treeContextOverflow = _overflow;
        }
      }
      function pushMaterializedTreeId(workInProgress2) {
        warnIfNotHydrating();
        var returnFiber = workInProgress2.return;
        if (returnFiber !== null) {
          var numberOfForks = 1;
          var slotIndex = 0;
          pushTreeFork(workInProgress2, numberOfForks);
          pushTreeId(workInProgress2, numberOfForks, slotIndex);
        }
      }
      function getBitLength(number) {
        return 32 - clz32(number);
      }
      function getLeadingBit(id) {
        return 1 << getBitLength(id) - 1;
      }
      function popTreeContext(workInProgress2) {
        while (workInProgress2 === treeForkProvider) {
          treeForkProvider = forkStack[--forkStackIndex];
          forkStack[forkStackIndex] = null;
          treeForkCount = forkStack[--forkStackIndex];
          forkStack[forkStackIndex] = null;
        }
        while (workInProgress2 === treeContextProvider) {
          treeContextProvider = idStack[--idStackIndex];
          idStack[idStackIndex] = null;
          treeContextOverflow = idStack[--idStackIndex];
          idStack[idStackIndex] = null;
          treeContextId = idStack[--idStackIndex];
          idStack[idStackIndex] = null;
        }
      }
      function getSuspendedTreeContext() {
        warnIfNotHydrating();
        if (treeContextProvider !== null) {
          return {
            id: treeContextId,
            overflow: treeContextOverflow
          };
        } else {
          return null;
        }
      }
      function restoreSuspendedTreeContext(workInProgress2, suspendedContext) {
        warnIfNotHydrating();
        idStack[idStackIndex++] = treeContextId;
        idStack[idStackIndex++] = treeContextOverflow;
        idStack[idStackIndex++] = treeContextProvider;
        treeContextId = suspendedContext.id;
        treeContextOverflow = suspendedContext.overflow;
        treeContextProvider = workInProgress2;
      }
      function warnIfNotHydrating() {
        {
          if (!getIsHydrating()) {
            error("Expected to be hydrating. This is a bug in React. Please file " + "an issue.");
          }
        }
      }
      var hydrationParentFiber = null;
      var nextHydratableInstance = null;
      var isHydrating = false;
      var didSuspendOrErrorDEV = false;
      var hydrationErrors = null;
      var rootOrSingletonContext = false;
      function warnIfHydrating() {
        {
          if (isHydrating) {
            error("We should not be hydrating here. This is a bug in React. Please file a bug.");
          }
        }
      }
      function markDidThrowWhileHydratingDEV() {
        {
          didSuspendOrErrorDEV = true;
        }
      }
      function didSuspendOrErrorWhileHydratingDEV() {
        {
          return didSuspendOrErrorDEV;
        }
      }
      function enterHydrationState(fiber) {
        var parentInstance = fiber.stateNode.containerInfo;
        nextHydratableInstance = getFirstHydratableChildWithinContainer(parentInstance);
        hydrationParentFiber = fiber;
        isHydrating = true;
        hydrationErrors = null;
        didSuspendOrErrorDEV = false;
        rootOrSingletonContext = true;
        return true;
      }
      function reenterHydrationStateFromDehydratedSuspenseInstance(fiber, suspenseInstance, treeContext) {
        nextHydratableInstance = getFirstHydratableChildWithinSuspenseInstance(suspenseInstance);
        hydrationParentFiber = fiber;
        isHydrating = true;
        hydrationErrors = null;
        didSuspendOrErrorDEV = false;
        rootOrSingletonContext = false;
        if (treeContext !== null) {
          restoreSuspendedTreeContext(fiber, treeContext);
        }
        return true;
      }
      function warnUnhydratedInstance(returnFiber, instance) {
        {
          switch (returnFiber.tag) {
            case HostRoot: {
              didNotHydrateInstanceWithinContainer(returnFiber.stateNode.containerInfo, instance);
              break;
            }
            case HostSingleton:
            case HostComponent: {
              var isConcurrentMode = (returnFiber.mode & ConcurrentMode) !== NoMode;
              didNotHydrateInstance(returnFiber.type, returnFiber.memoizedProps, returnFiber.stateNode, instance, isConcurrentMode);
              break;
            }
            case SuspenseComponent: {
              var suspenseState = returnFiber.memoizedState;
              if (suspenseState.dehydrated !== null)
                didNotHydrateInstanceWithinSuspenseInstance(suspenseState.dehydrated, instance);
              break;
            }
          }
        }
      }
      function deleteHydratableInstance(returnFiber, instance) {
        warnUnhydratedInstance(returnFiber, instance);
        var childToDelete = createFiberFromHostInstanceForDeletion();
        childToDelete.stateNode = instance;
        childToDelete.return = returnFiber;
        var deletions = returnFiber.deletions;
        if (deletions === null) {
          returnFiber.deletions = [childToDelete];
          returnFiber.flags |= ChildDeletion;
        } else {
          deletions.push(childToDelete);
        }
      }
      function warnNonhydratedInstance(returnFiber, fiber) {
        {
          if (didSuspendOrErrorDEV) {
            return;
          }
          switch (returnFiber.tag) {
            case HostRoot: {
              var parentContainer = returnFiber.stateNode.containerInfo;
              switch (fiber.tag) {
                case HostSingleton:
                case HostComponent:
                  var type = fiber.type;
                  didNotFindHydratableInstanceWithinContainer(parentContainer, type);
                  break;
                case HostText:
                  var text = fiber.pendingProps;
                  didNotFindHydratableTextInstanceWithinContainer(parentContainer, text);
                  break;
              }
              break;
            }
            case HostSingleton:
            case HostComponent: {
              var parentType = returnFiber.type;
              var parentProps = returnFiber.memoizedProps;
              var parentInstance = returnFiber.stateNode;
              switch (fiber.tag) {
                case HostSingleton:
                case HostComponent: {
                  var _type = fiber.type;
                  var _props = fiber.pendingProps;
                  var isConcurrentMode = (returnFiber.mode & ConcurrentMode) !== NoMode;
                  didNotFindHydratableInstance(parentType, parentProps, parentInstance, _type, _props, isConcurrentMode);
                  break;
                }
                case HostText: {
                  var _text = fiber.pendingProps;
                  var _isConcurrentMode = (returnFiber.mode & ConcurrentMode) !== NoMode;
                  didNotFindHydratableTextInstance(parentType, parentProps, parentInstance, _text, _isConcurrentMode);
                  break;
                }
              }
              break;
            }
            case SuspenseComponent: {
              var suspenseState = returnFiber.memoizedState;
              var _parentInstance = suspenseState.dehydrated;
              if (_parentInstance !== null)
                switch (fiber.tag) {
                  case HostSingleton:
                  case HostComponent:
                    var _type2 = fiber.type;
                    didNotFindHydratableInstanceWithinSuspenseInstance(_parentInstance, _type2);
                    break;
                  case HostText:
                    var _text2 = fiber.pendingProps;
                    didNotFindHydratableTextInstanceWithinSuspenseInstance(_parentInstance, _text2);
                    break;
                }
              break;
            }
            default:
              return;
          }
        }
      }
      function insertNonHydratedInstance(returnFiber, fiber) {
        fiber.flags = fiber.flags & ~Hydrating | Placement;
        warnNonhydratedInstance(returnFiber, fiber);
      }
      function tryHydrateInstance(fiber, nextInstance) {
        var instance = canHydrateInstance(nextInstance, fiber.type, fiber.pendingProps, rootOrSingletonContext);
        if (instance !== null) {
          fiber.stateNode = instance;
          hydrationParentFiber = fiber;
          nextHydratableInstance = getFirstHydratableChild(instance);
          rootOrSingletonContext = false;
          return true;
        }
        return false;
      }
      function tryHydrateText(fiber, nextInstance) {
        var text = fiber.pendingProps;
        var textInstance = canHydrateTextInstance(nextInstance, text, rootOrSingletonContext);
        if (textInstance !== null) {
          fiber.stateNode = textInstance;
          hydrationParentFiber = fiber;
          nextHydratableInstance = null;
          return true;
        }
        return false;
      }
      function tryHydrateSuspense(fiber, nextInstance) {
        var suspenseInstance = canHydrateSuspenseInstance(nextInstance, rootOrSingletonContext);
        if (suspenseInstance !== null) {
          var suspenseState = {
            dehydrated: suspenseInstance,
            treeContext: getSuspendedTreeContext(),
            retryLane: OffscreenLane
          };
          fiber.memoizedState = suspenseState;
          var dehydratedFragment = createFiberFromDehydratedFragment(suspenseInstance);
          dehydratedFragment.return = fiber;
          fiber.child = dehydratedFragment;
          hydrationParentFiber = fiber;
          nextHydratableInstance = null;
          return true;
        }
        return false;
      }
      function shouldClientRenderOnMismatch(fiber) {
        return (fiber.mode & ConcurrentMode) !== NoMode && (fiber.flags & DidCapture) === NoFlags$1;
      }
      function throwOnHydrationMismatch(fiber) {
        throw new Error("Hydration failed because the initial UI does not match what was " + "rendered on the server.");
      }
      function claimHydratableSingleton(fiber) {
        {
          if (!isHydrating) {
            return;
          }
          var currentRootContainer = getRootHostContainer();
          var currentHostContext = getHostContext();
          var instance = fiber.stateNode = resolveSingletonInstance(fiber.type, fiber.pendingProps, currentRootContainer, currentHostContext, false);
          hydrationParentFiber = fiber;
          rootOrSingletonContext = true;
          nextHydratableInstance = getFirstHydratableChild(instance);
        }
      }
      function tryToClaimNextHydratableInstance(fiber) {
        if (!isHydrating) {
          return;
        }
        {
          if (!isHydratableType(fiber.type, fiber.pendingProps)) {
            fiber.flags = fiber.flags & ~Hydrating | Placement;
            isHydrating = false;
            hydrationParentFiber = fiber;
            return;
          }
        }
        var initialInstance = nextHydratableInstance;
        var nextInstance = nextHydratableInstance;
        if (!nextInstance) {
          if (shouldClientRenderOnMismatch(fiber)) {
            warnNonhydratedInstance(hydrationParentFiber, fiber);
            throwOnHydrationMismatch();
          }
          insertNonHydratedInstance(hydrationParentFiber, fiber);
          isHydrating = false;
          hydrationParentFiber = fiber;
          nextHydratableInstance = initialInstance;
          return;
        }
        var firstAttemptedInstance = nextInstance;
        if (!tryHydrateInstance(fiber, nextInstance)) {
          if (shouldClientRenderOnMismatch(fiber)) {
            warnNonhydratedInstance(hydrationParentFiber, fiber);
            throwOnHydrationMismatch();
          }
          nextHydratableInstance = getNextHydratableSibling(nextInstance);
          var prevHydrationParentFiber = hydrationParentFiber;
          if (!nextHydratableInstance || !tryHydrateInstance(fiber, nextHydratableInstance)) {
            insertNonHydratedInstance(hydrationParentFiber, fiber);
            isHydrating = false;
            hydrationParentFiber = fiber;
            nextHydratableInstance = initialInstance;
            return;
          }
          deleteHydratableInstance(prevHydrationParentFiber, firstAttemptedInstance);
        }
      }
      function tryToClaimNextHydratableTextInstance(fiber) {
        if (!isHydrating) {
          return;
        }
        var text = fiber.pendingProps;
        var isHydratable = isHydratableText(text);
        var initialInstance = nextHydratableInstance;
        var nextInstance = nextHydratableInstance;
        if (!nextInstance || !isHydratable) {
          if (shouldClientRenderOnMismatch(fiber)) {
            warnNonhydratedInstance(hydrationParentFiber, fiber);
            throwOnHydrationMismatch();
          }
          insertNonHydratedInstance(hydrationParentFiber, fiber);
          isHydrating = false;
          hydrationParentFiber = fiber;
          nextHydratableInstance = initialInstance;
          return;
        }
        var firstAttemptedInstance = nextInstance;
        if (!tryHydrateText(fiber, nextInstance)) {
          if (shouldClientRenderOnMismatch(fiber)) {
            warnNonhydratedInstance(hydrationParentFiber, fiber);
            throwOnHydrationMismatch();
          }
          nextHydratableInstance = getNextHydratableSibling(nextInstance);
          var prevHydrationParentFiber = hydrationParentFiber;
          if (!nextHydratableInstance || !tryHydrateText(fiber, nextHydratableInstance)) {
            insertNonHydratedInstance(hydrationParentFiber, fiber);
            isHydrating = false;
            hydrationParentFiber = fiber;
            nextHydratableInstance = initialInstance;
            return;
          }
          deleteHydratableInstance(prevHydrationParentFiber, firstAttemptedInstance);
        }
      }
      function tryToClaimNextHydratableSuspenseInstance(fiber) {
        if (!isHydrating) {
          return;
        }
        var initialInstance = nextHydratableInstance;
        var nextInstance = nextHydratableInstance;
        if (!nextInstance) {
          if (shouldClientRenderOnMismatch(fiber)) {
            warnNonhydratedInstance(hydrationParentFiber, fiber);
            throwOnHydrationMismatch();
          }
          insertNonHydratedInstance(hydrationParentFiber, fiber);
          isHydrating = false;
          hydrationParentFiber = fiber;
          nextHydratableInstance = initialInstance;
          return;
        }
        var firstAttemptedInstance = nextInstance;
        if (!tryHydrateSuspense(fiber, nextInstance)) {
          if (shouldClientRenderOnMismatch(fiber)) {
            warnNonhydratedInstance(hydrationParentFiber, fiber);
            throwOnHydrationMismatch();
          }
          nextHydratableInstance = getNextHydratableSibling(nextInstance);
          var prevHydrationParentFiber = hydrationParentFiber;
          if (!nextHydratableInstance || !tryHydrateSuspense(fiber, nextHydratableInstance)) {
            insertNonHydratedInstance(hydrationParentFiber, fiber);
            isHydrating = false;
            hydrationParentFiber = fiber;
            nextHydratableInstance = initialInstance;
            return;
          }
          deleteHydratableInstance(prevHydrationParentFiber, firstAttemptedInstance);
        }
      }
      function prepareToHydrateHostInstance(fiber, hostContext) {
        var instance = fiber.stateNode;
        var shouldWarnIfMismatchDev = !didSuspendOrErrorDEV;
        hydrateInstance(instance, fiber.type, fiber.memoizedProps, hostContext, fiber, shouldWarnIfMismatchDev);
        return false;
      }
      function prepareToHydrateHostTextInstance(fiber) {
        var textInstance = fiber.stateNode;
        var textContent = fiber.memoizedProps;
        var shouldWarnIfMismatchDev = !didSuspendOrErrorDEV;
        var shouldUpdate = hydrateTextInstance(textInstance, textContent, fiber);
        if (shouldUpdate) {
          var returnFiber = hydrationParentFiber;
          if (returnFiber !== null) {
            switch (returnFiber.tag) {
              case HostRoot: {
                var parentContainer = returnFiber.stateNode.containerInfo;
                var isConcurrentMode = (returnFiber.mode & ConcurrentMode) !== NoMode;
                didNotMatchHydratedContainerTextInstance(parentContainer, textInstance, textContent, isConcurrentMode, shouldWarnIfMismatchDev);
                if (isConcurrentMode && enableClientRenderFallbackOnTextMismatch) {
                  return false;
                }
                break;
              }
              case HostSingleton:
              case HostComponent: {
                var parentType = returnFiber.type;
                var parentProps = returnFiber.memoizedProps;
                var parentInstance = returnFiber.stateNode;
                var _isConcurrentMode2 = (returnFiber.mode & ConcurrentMode) !== NoMode;
                didNotMatchHydratedTextInstance(parentType, parentProps, parentInstance, textInstance, textContent, _isConcurrentMode2, shouldWarnIfMismatchDev);
                if (_isConcurrentMode2 && enableClientRenderFallbackOnTextMismatch) {
                  return false;
                }
                break;
              }
            }
          }
        }
        return shouldUpdate;
      }
      function prepareToHydrateHostSuspenseInstance(fiber) {
        var suspenseState = fiber.memoizedState;
        var suspenseInstance = suspenseState !== null ? suspenseState.dehydrated : null;
        if (!suspenseInstance) {
          throw new Error("Expected to have a hydrated suspense instance. " + "This error is likely caused by a bug in React. Please file an issue.");
        }
        hydrateSuspenseInstance(suspenseInstance, fiber);
      }
      function skipPastDehydratedSuspenseInstance(fiber) {
        var suspenseState = fiber.memoizedState;
        var suspenseInstance = suspenseState !== null ? suspenseState.dehydrated : null;
        if (!suspenseInstance) {
          throw new Error("Expected to have a hydrated suspense instance. " + "This error is likely caused by a bug in React. Please file an issue.");
        }
        return getNextHydratableInstanceAfterSuspenseInstance(suspenseInstance);
      }
      function popToNextHostParent(fiber) {
        hydrationParentFiber = fiber.return;
        while (hydrationParentFiber) {
          switch (hydrationParentFiber.tag) {
            case HostRoot:
            case HostSingleton:
              rootOrSingletonContext = true;
              return;
            case HostComponent:
            case SuspenseComponent:
              rootOrSingletonContext = false;
              return;
            default:
              hydrationParentFiber = hydrationParentFiber.return;
          }
        }
      }
      function popHydrationState(fiber) {
        if (fiber !== hydrationParentFiber) {
          return false;
        }
        if (!isHydrating) {
          popToNextHostParent(fiber);
          isHydrating = true;
          return false;
        }
        var shouldClear = false;
        {
          if (fiber.tag !== HostRoot && fiber.tag !== HostSingleton && !(fiber.tag === HostComponent && (!shouldDeleteUnhydratedTailInstances(fiber.type) || shouldSetTextContent(fiber.type, fiber.memoizedProps)))) {
            shouldClear = true;
          }
        }
        if (shouldClear) {
          var nextInstance = nextHydratableInstance;
          if (nextInstance) {
            if (shouldClientRenderOnMismatch(fiber)) {
              warnIfUnhydratedTailNodes(fiber);
              throwOnHydrationMismatch();
            } else {
              while (nextInstance) {
                deleteHydratableInstance(fiber, nextInstance);
                nextInstance = getNextHydratableSibling(nextInstance);
              }
            }
          }
        }
        popToNextHostParent(fiber);
        if (fiber.tag === SuspenseComponent) {
          nextHydratableInstance = skipPastDehydratedSuspenseInstance(fiber);
        } else {
          nextHydratableInstance = hydrationParentFiber ? getNextHydratableSibling(fiber.stateNode) : null;
        }
        return true;
      }
      function hasUnhydratedTailNodes() {
        return isHydrating && nextHydratableInstance !== null;
      }
      function warnIfUnhydratedTailNodes(fiber) {
        var nextInstance = nextHydratableInstance;
        while (nextInstance) {
          warnUnhydratedInstance(fiber, nextInstance);
          nextInstance = getNextHydratableSibling(nextInstance);
        }
      }
      function resetHydrationState() {
        hydrationParentFiber = null;
        nextHydratableInstance = null;
        isHydrating = false;
        didSuspendOrErrorDEV = false;
      }
      function upgradeHydrationErrorsToRecoverable() {
        if (hydrationErrors !== null) {
          queueRecoverableErrors(hydrationErrors);
          hydrationErrors = null;
        }
      }
      function getIsHydrating() {
        return isHydrating;
      }
      function queueHydrationError(error2) {
        if (hydrationErrors === null) {
          hydrationErrors = [error2];
        } else {
          hydrationErrors.push(error2);
        }
      }
      var concurrentQueues = [];
      var concurrentQueuesIndex = 0;
      var concurrentlyUpdatedLanes = NoLanes;
      function finishQueueingConcurrentUpdates() {
        var endIndex = concurrentQueuesIndex;
        concurrentQueuesIndex = 0;
        concurrentlyUpdatedLanes = NoLanes;
        var i = 0;
        while (i < endIndex) {
          var fiber = concurrentQueues[i];
          concurrentQueues[i++] = null;
          var queue = concurrentQueues[i];
          concurrentQueues[i++] = null;
          var update = concurrentQueues[i];
          concurrentQueues[i++] = null;
          var lane = concurrentQueues[i];
          concurrentQueues[i++] = null;
          if (queue !== null && update !== null) {
            var pending = queue.pending;
            if (pending === null) {
              update.next = update;
            } else {
              update.next = pending.next;
              pending.next = update;
            }
            queue.pending = update;
          }
          if (lane !== NoLane) {
            markUpdateLaneFromFiberToRoot(fiber, update, lane);
          }
        }
      }
      function getConcurrentlyUpdatedLanes() {
        return concurrentlyUpdatedLanes;
      }
      function enqueueUpdate$1(fiber, queue, update, lane) {
        concurrentQueues[concurrentQueuesIndex++] = fiber;
        concurrentQueues[concurrentQueuesIndex++] = queue;
        concurrentQueues[concurrentQueuesIndex++] = update;
        concurrentQueues[concurrentQueuesIndex++] = lane;
        concurrentlyUpdatedLanes = mergeLanes(concurrentlyUpdatedLanes, lane);
        fiber.lanes = mergeLanes(fiber.lanes, lane);
        var alternate = fiber.alternate;
        if (alternate !== null) {
          alternate.lanes = mergeLanes(alternate.lanes, lane);
        }
      }
      function enqueueConcurrentHookUpdate(fiber, queue, update, lane) {
        var concurrentQueue = queue;
        var concurrentUpdate = update;
        enqueueUpdate$1(fiber, concurrentQueue, concurrentUpdate, lane);
        return getRootForUpdatedFiber(fiber);
      }
      function enqueueConcurrentHookUpdateAndEagerlyBailout(fiber, queue, update) {
        var lane = NoLane;
        var concurrentQueue = queue;
        var concurrentUpdate = update;
        enqueueUpdate$1(fiber, concurrentQueue, concurrentUpdate, lane);
        var isConcurrentlyRendering = getWorkInProgressRoot() !== null;
        if (!isConcurrentlyRendering) {
          finishQueueingConcurrentUpdates();
        }
      }
      function enqueueConcurrentClassUpdate(fiber, queue, update, lane) {
        var concurrentQueue = queue;
        var concurrentUpdate = update;
        enqueueUpdate$1(fiber, concurrentQueue, concurrentUpdate, lane);
        return getRootForUpdatedFiber(fiber);
      }
      function enqueueConcurrentRenderForLane(fiber, lane) {
        enqueueUpdate$1(fiber, null, null, lane);
        return getRootForUpdatedFiber(fiber);
      }
      function unsafe_markUpdateLaneFromFiberToRoot(sourceFiber, lane) {
        var root2 = getRootForUpdatedFiber(sourceFiber);
        markUpdateLaneFromFiberToRoot(sourceFiber, null, lane);
        return root2;
      }
      function markUpdateLaneFromFiberToRoot(sourceFiber, update, lane) {
        sourceFiber.lanes = mergeLanes(sourceFiber.lanes, lane);
        var alternate = sourceFiber.alternate;
        if (alternate !== null) {
          alternate.lanes = mergeLanes(alternate.lanes, lane);
        }
        var isHidden = false;
        var parent = sourceFiber.return;
        var node = sourceFiber;
        while (parent !== null) {
          parent.childLanes = mergeLanes(parent.childLanes, lane);
          alternate = parent.alternate;
          if (alternate !== null) {
            alternate.childLanes = mergeLanes(alternate.childLanes, lane);
          }
          if (parent.tag === OffscreenComponent) {
            var offscreenInstance = parent.stateNode;
            if (offscreenInstance !== null && !(offscreenInstance._visibility & OffscreenVisible)) {
              isHidden = true;
            }
          }
          node = parent;
          parent = parent.return;
        }
        if (isHidden && update !== null && node.tag === HostRoot) {
          var root2 = node.stateNode;
          markHiddenUpdate(root2, update, lane);
        }
      }
      function getRootForUpdatedFiber(sourceFiber) {
        throwIfInfiniteUpdateLoopDetected();
        detectUpdateOnUnmountedFiber(sourceFiber, sourceFiber);
        var node = sourceFiber;
        var parent = node.return;
        while (parent !== null) {
          detectUpdateOnUnmountedFiber(sourceFiber, node);
          node = parent;
          parent = node.return;
        }
        return node.tag === HostRoot ? node.stateNode : null;
      }
      function detectUpdateOnUnmountedFiber(sourceFiber, parent) {
        {
          var alternate = parent.alternate;
          if (alternate === null && (parent.flags & (Placement | Hydrating)) !== NoFlags$1) {
            warnAboutUpdateOnNotYetMountedFiberInDEV(sourceFiber);
          }
        }
      }
      var UpdateState = 0;
      var ReplaceState = 1;
      var ForceUpdate = 2;
      var CaptureUpdate = 3;
      var hasForceUpdate = false;
      var didWarnUpdateInsideUpdate;
      var currentlyProcessingQueue;
      {
        didWarnUpdateInsideUpdate = false;
        currentlyProcessingQueue = null;
      }
      function initializeUpdateQueue(fiber) {
        var queue = {
          baseState: fiber.memoizedState,
          firstBaseUpdate: null,
          lastBaseUpdate: null,
          shared: {
            pending: null,
            lanes: NoLanes,
            hiddenCallbacks: null
          },
          callbacks: null
        };
        fiber.updateQueue = queue;
      }
      function cloneUpdateQueue(current2, workInProgress2) {
        var queue = workInProgress2.updateQueue;
        var currentQueue = current2.updateQueue;
        if (queue === currentQueue) {
          var clone = {
            baseState: currentQueue.baseState,
            firstBaseUpdate: currentQueue.firstBaseUpdate,
            lastBaseUpdate: currentQueue.lastBaseUpdate,
            shared: currentQueue.shared,
            callbacks: null
          };
          workInProgress2.updateQueue = clone;
        }
      }
      function createUpdate(lane) {
        var update = {
          lane,
          tag: UpdateState,
          payload: null,
          callback: null,
          next: null
        };
        return update;
      }
      function enqueueUpdate(fiber, update, lane) {
        var updateQueue = fiber.updateQueue;
        if (updateQueue === null) {
          return null;
        }
        var sharedQueue = updateQueue.shared;
        {
          if (currentlyProcessingQueue === sharedQueue && !didWarnUpdateInsideUpdate) {
            var componentName = getComponentNameFromFiber(fiber);
            error("An update (setState, replaceState, or forceUpdate) was scheduled " + "from inside an update function. Update functions should be pure, " + "with zero side-effects. Consider using componentDidUpdate or a " + `callback.

Please update the following component: %s`, componentName);
            didWarnUpdateInsideUpdate = true;
          }
        }
        if (isUnsafeClassRenderPhaseUpdate()) {
          var pending = sharedQueue.pending;
          if (pending === null) {
            update.next = update;
          } else {
            update.next = pending.next;
            pending.next = update;
          }
          sharedQueue.pending = update;
          return unsafe_markUpdateLaneFromFiberToRoot(fiber, lane);
        } else {
          return enqueueConcurrentClassUpdate(fiber, sharedQueue, update, lane);
        }
      }
      function entangleTransitions(root2, fiber, lane) {
        var updateQueue = fiber.updateQueue;
        if (updateQueue === null) {
          return;
        }
        var sharedQueue = updateQueue.shared;
        if (isTransitionLane(lane)) {
          var queueLanes = sharedQueue.lanes;
          queueLanes = intersectLanes(queueLanes, root2.pendingLanes);
          var newQueueLanes = mergeLanes(queueLanes, lane);
          sharedQueue.lanes = newQueueLanes;
          markRootEntangled(root2, newQueueLanes);
        }
      }
      function enqueueCapturedUpdate(workInProgress2, capturedUpdate) {
        var queue = workInProgress2.updateQueue;
        var current2 = workInProgress2.alternate;
        if (current2 !== null) {
          var currentQueue = current2.updateQueue;
          if (queue === currentQueue) {
            var newFirst = null;
            var newLast = null;
            var firstBaseUpdate = queue.firstBaseUpdate;
            if (firstBaseUpdate !== null) {
              var update = firstBaseUpdate;
              do {
                var clone = {
                  lane: update.lane,
                  tag: update.tag,
                  payload: update.payload,
                  callback: null,
                  next: null
                };
                if (newLast === null) {
                  newFirst = newLast = clone;
                } else {
                  newLast.next = clone;
                  newLast = clone;
                }
                update = update.next;
              } while (update !== null);
              if (newLast === null) {
                newFirst = newLast = capturedUpdate;
              } else {
                newLast.next = capturedUpdate;
                newLast = capturedUpdate;
              }
            } else {
              newFirst = newLast = capturedUpdate;
            }
            queue = {
              baseState: currentQueue.baseState,
              firstBaseUpdate: newFirst,
              lastBaseUpdate: newLast,
              shared: currentQueue.shared,
              callbacks: currentQueue.callbacks
            };
            workInProgress2.updateQueue = queue;
            return;
          }
        }
        var lastBaseUpdate = queue.lastBaseUpdate;
        if (lastBaseUpdate === null) {
          queue.firstBaseUpdate = capturedUpdate;
        } else {
          lastBaseUpdate.next = capturedUpdate;
        }
        queue.lastBaseUpdate = capturedUpdate;
      }
      function getStateFromUpdate(workInProgress2, queue, update, prevState, nextProps, instance) {
        switch (update.tag) {
          case ReplaceState: {
            var payload = update.payload;
            if (typeof payload === "function") {
              {
                enterDisallowedContextReadInDEV();
              }
              var nextState = payload.call(instance, prevState, nextProps);
              {
                if (workInProgress2.mode & StrictLegacyMode) {
                  setIsStrictModeForDevtools(true);
                  try {
                    payload.call(instance, prevState, nextProps);
                  } finally {
                    setIsStrictModeForDevtools(false);
                  }
                }
                exitDisallowedContextReadInDEV();
              }
              return nextState;
            }
            return payload;
          }
          case CaptureUpdate: {
            workInProgress2.flags = workInProgress2.flags & ~ShouldCapture | DidCapture;
          }
          case UpdateState: {
            var _payload = update.payload;
            var partialState;
            if (typeof _payload === "function") {
              {
                enterDisallowedContextReadInDEV();
              }
              partialState = _payload.call(instance, prevState, nextProps);
              {
                if (workInProgress2.mode & StrictLegacyMode) {
                  setIsStrictModeForDevtools(true);
                  try {
                    _payload.call(instance, prevState, nextProps);
                  } finally {
                    setIsStrictModeForDevtools(false);
                  }
                }
                exitDisallowedContextReadInDEV();
              }
            } else {
              partialState = _payload;
            }
            if (partialState === null || partialState === undefined) {
              return prevState;
            }
            return assign({}, prevState, partialState);
          }
          case ForceUpdate: {
            hasForceUpdate = true;
            return prevState;
          }
        }
        return prevState;
      }
      function processUpdateQueue(workInProgress2, props, instance, renderLanes2) {
        var queue = workInProgress2.updateQueue;
        hasForceUpdate = false;
        {
          currentlyProcessingQueue = queue.shared;
        }
        var firstBaseUpdate = queue.firstBaseUpdate;
        var lastBaseUpdate = queue.lastBaseUpdate;
        var pendingQueue = queue.shared.pending;
        if (pendingQueue !== null) {
          queue.shared.pending = null;
          var lastPendingUpdate = pendingQueue;
          var firstPendingUpdate = lastPendingUpdate.next;
          lastPendingUpdate.next = null;
          if (lastBaseUpdate === null) {
            firstBaseUpdate = firstPendingUpdate;
          } else {
            lastBaseUpdate.next = firstPendingUpdate;
          }
          lastBaseUpdate = lastPendingUpdate;
          var current2 = workInProgress2.alternate;
          if (current2 !== null) {
            var currentQueue = current2.updateQueue;
            var currentLastBaseUpdate = currentQueue.lastBaseUpdate;
            if (currentLastBaseUpdate !== lastBaseUpdate) {
              if (currentLastBaseUpdate === null) {
                currentQueue.firstBaseUpdate = firstPendingUpdate;
              } else {
                currentLastBaseUpdate.next = firstPendingUpdate;
              }
              currentQueue.lastBaseUpdate = lastPendingUpdate;
            }
          }
        }
        if (firstBaseUpdate !== null) {
          var newState = queue.baseState;
          var newLanes = NoLanes;
          var newBaseState = null;
          var newFirstBaseUpdate = null;
          var newLastBaseUpdate = null;
          var update = firstBaseUpdate;
          do {
            var updateLane = removeLanes(update.lane, OffscreenLane);
            var isHiddenUpdate = updateLane !== update.lane;
            var shouldSkipUpdate = isHiddenUpdate ? !isSubsetOfLanes(getWorkInProgressRootRenderLanes(), updateLane) : !isSubsetOfLanes(renderLanes2, updateLane);
            if (shouldSkipUpdate) {
              var clone = {
                lane: updateLane,
                tag: update.tag,
                payload: update.payload,
                callback: update.callback,
                next: null
              };
              if (newLastBaseUpdate === null) {
                newFirstBaseUpdate = newLastBaseUpdate = clone;
                newBaseState = newState;
              } else {
                newLastBaseUpdate = newLastBaseUpdate.next = clone;
              }
              newLanes = mergeLanes(newLanes, updateLane);
            } else {
              if (newLastBaseUpdate !== null) {
                var _clone = {
                  lane: NoLane,
                  tag: update.tag,
                  payload: update.payload,
                  callback: null,
                  next: null
                };
                newLastBaseUpdate = newLastBaseUpdate.next = _clone;
              }
              newState = getStateFromUpdate(workInProgress2, queue, update, newState, props, instance);
              var callback = update.callback;
              if (callback !== null) {
                workInProgress2.flags |= Callback;
                if (isHiddenUpdate) {
                  workInProgress2.flags |= Visibility;
                }
                var callbacks = queue.callbacks;
                if (callbacks === null) {
                  queue.callbacks = [callback];
                } else {
                  callbacks.push(callback);
                }
              }
            }
            update = update.next;
            if (update === null) {
              pendingQueue = queue.shared.pending;
              if (pendingQueue === null) {
                break;
              } else {
                var _lastPendingUpdate = pendingQueue;
                var _firstPendingUpdate = _lastPendingUpdate.next;
                _lastPendingUpdate.next = null;
                update = _firstPendingUpdate;
                queue.lastBaseUpdate = _lastPendingUpdate;
                queue.shared.pending = null;
              }
            }
          } while (true);
          if (newLastBaseUpdate === null) {
            newBaseState = newState;
          }
          queue.baseState = newBaseState;
          queue.firstBaseUpdate = newFirstBaseUpdate;
          queue.lastBaseUpdate = newLastBaseUpdate;
          if (firstBaseUpdate === null) {
            queue.shared.lanes = NoLanes;
          }
          markSkippedUpdateLanes(newLanes);
          workInProgress2.lanes = newLanes;
          workInProgress2.memoizedState = newState;
        }
        {
          currentlyProcessingQueue = null;
        }
      }
      function callCallback(callback, context) {
        if (typeof callback !== "function") {
          throw new Error("Invalid argument passed as callback. Expected a function. Instead " + ("received: " + callback));
        }
        callback.call(context);
      }
      function resetHasForceUpdateBeforeProcessing() {
        hasForceUpdate = false;
      }
      function checkHasForceUpdateAfterProcessing() {
        return hasForceUpdate;
      }
      function deferHiddenCallbacks(updateQueue) {
        var newHiddenCallbacks = updateQueue.callbacks;
        if (newHiddenCallbacks !== null) {
          var existingHiddenCallbacks = updateQueue.shared.hiddenCallbacks;
          if (existingHiddenCallbacks === null) {
            updateQueue.shared.hiddenCallbacks = newHiddenCallbacks;
          } else {
            updateQueue.shared.hiddenCallbacks = existingHiddenCallbacks.concat(newHiddenCallbacks);
          }
        }
      }
      function commitHiddenCallbacks(updateQueue, context) {
        var hiddenCallbacks = updateQueue.shared.hiddenCallbacks;
        if (hiddenCallbacks !== null) {
          updateQueue.shared.hiddenCallbacks = null;
          for (var i = 0;i < hiddenCallbacks.length; i++) {
            var callback = hiddenCallbacks[i];
            callCallback(callback, context);
          }
        }
      }
      function commitCallbacks(updateQueue, context) {
        var callbacks = updateQueue.callbacks;
        if (callbacks !== null) {
          updateQueue.callbacks = null;
          for (var i = 0;i < callbacks.length; i++) {
            var callback = callbacks[i];
            callCallback(callback, context);
          }
        }
      }
      function shallowEqual(objA, objB) {
        if (objectIs(objA, objB)) {
          return true;
        }
        if (typeof objA !== "object" || objA === null || typeof objB !== "object" || objB === null) {
          return false;
        }
        var keysA = Object.keys(objA);
        var keysB = Object.keys(objB);
        if (keysA.length !== keysB.length) {
          return false;
        }
        for (var i = 0;i < keysA.length; i++) {
          var currentKey = keysA[i];
          if (!hasOwnProperty.call(objB, currentKey) || !objectIs(objA[currentKey], objB[currentKey])) {
            return false;
          }
        }
        return true;
      }
      var ReactStrictModeWarnings = {
        recordUnsafeLifecycleWarnings: function(fiber, instance) {},
        flushPendingUnsafeLifecycleWarnings: function() {},
        recordLegacyContextWarning: function(fiber, instance) {},
        flushLegacyContextWarning: function() {},
        discardPendingWarnings: function() {}
      };
      {
        var findStrictRoot = function(fiber) {
          var maybeStrictRoot = null;
          var node = fiber;
          while (node !== null) {
            if (node.mode & StrictLegacyMode) {
              maybeStrictRoot = node;
            }
            node = node.return;
          }
          return maybeStrictRoot;
        };
        var setToSortedString = function(set3) {
          var array = [];
          set3.forEach(function(value) {
            array.push(value);
          });
          return array.sort().join(", ");
        };
        var pendingComponentWillMountWarnings = [];
        var pendingUNSAFE_ComponentWillMountWarnings = [];
        var pendingComponentWillReceivePropsWarnings = [];
        var pendingUNSAFE_ComponentWillReceivePropsWarnings = [];
        var pendingComponentWillUpdateWarnings = [];
        var pendingUNSAFE_ComponentWillUpdateWarnings = [];
        var didWarnAboutUnsafeLifecycles = new Set;
        ReactStrictModeWarnings.recordUnsafeLifecycleWarnings = function(fiber, instance) {
          if (didWarnAboutUnsafeLifecycles.has(fiber.type)) {
            return;
          }
          if (typeof instance.componentWillMount === "function" && instance.componentWillMount.__suppressDeprecationWarning !== true) {
            pendingComponentWillMountWarnings.push(fiber);
          }
          if (fiber.mode & StrictLegacyMode && typeof instance.UNSAFE_componentWillMount === "function") {
            pendingUNSAFE_ComponentWillMountWarnings.push(fiber);
          }
          if (typeof instance.componentWillReceiveProps === "function" && instance.componentWillReceiveProps.__suppressDeprecationWarning !== true) {
            pendingComponentWillReceivePropsWarnings.push(fiber);
          }
          if (fiber.mode & StrictLegacyMode && typeof instance.UNSAFE_componentWillReceiveProps === "function") {
            pendingUNSAFE_ComponentWillReceivePropsWarnings.push(fiber);
          }
          if (typeof instance.componentWillUpdate === "function" && instance.componentWillUpdate.__suppressDeprecationWarning !== true) {
            pendingComponentWillUpdateWarnings.push(fiber);
          }
          if (fiber.mode & StrictLegacyMode && typeof instance.UNSAFE_componentWillUpdate === "function") {
            pendingUNSAFE_ComponentWillUpdateWarnings.push(fiber);
          }
        };
        ReactStrictModeWarnings.flushPendingUnsafeLifecycleWarnings = function() {
          var componentWillMountUniqueNames = new Set;
          if (pendingComponentWillMountWarnings.length > 0) {
            pendingComponentWillMountWarnings.forEach(function(fiber) {
              componentWillMountUniqueNames.add(getComponentNameFromFiber(fiber) || "Component");
              didWarnAboutUnsafeLifecycles.add(fiber.type);
            });
            pendingComponentWillMountWarnings = [];
          }
          var UNSAFE_componentWillMountUniqueNames = new Set;
          if (pendingUNSAFE_ComponentWillMountWarnings.length > 0) {
            pendingUNSAFE_ComponentWillMountWarnings.forEach(function(fiber) {
              UNSAFE_componentWillMountUniqueNames.add(getComponentNameFromFiber(fiber) || "Component");
              didWarnAboutUnsafeLifecycles.add(fiber.type);
            });
            pendingUNSAFE_ComponentWillMountWarnings = [];
          }
          var componentWillReceivePropsUniqueNames = new Set;
          if (pendingComponentWillReceivePropsWarnings.length > 0) {
            pendingComponentWillReceivePropsWarnings.forEach(function(fiber) {
              componentWillReceivePropsUniqueNames.add(getComponentNameFromFiber(fiber) || "Component");
              didWarnAboutUnsafeLifecycles.add(fiber.type);
            });
            pendingComponentWillReceivePropsWarnings = [];
          }
          var UNSAFE_componentWillReceivePropsUniqueNames = new Set;
          if (pendingUNSAFE_ComponentWillReceivePropsWarnings.length > 0) {
            pendingUNSAFE_ComponentWillReceivePropsWarnings.forEach(function(fiber) {
              UNSAFE_componentWillReceivePropsUniqueNames.add(getComponentNameFromFiber(fiber) || "Component");
              didWarnAboutUnsafeLifecycles.add(fiber.type);
            });
            pendingUNSAFE_ComponentWillReceivePropsWarnings = [];
          }
          var componentWillUpdateUniqueNames = new Set;
          if (pendingComponentWillUpdateWarnings.length > 0) {
            pendingComponentWillUpdateWarnings.forEach(function(fiber) {
              componentWillUpdateUniqueNames.add(getComponentNameFromFiber(fiber) || "Component");
              didWarnAboutUnsafeLifecycles.add(fiber.type);
            });
            pendingComponentWillUpdateWarnings = [];
          }
          var UNSAFE_componentWillUpdateUniqueNames = new Set;
          if (pendingUNSAFE_ComponentWillUpdateWarnings.length > 0) {
            pendingUNSAFE_ComponentWillUpdateWarnings.forEach(function(fiber) {
              UNSAFE_componentWillUpdateUniqueNames.add(getComponentNameFromFiber(fiber) || "Component");
              didWarnAboutUnsafeLifecycles.add(fiber.type);
            });
            pendingUNSAFE_ComponentWillUpdateWarnings = [];
          }
          if (UNSAFE_componentWillMountUniqueNames.size > 0) {
            var sortedNames = setToSortedString(UNSAFE_componentWillMountUniqueNames);
            error("Using UNSAFE_componentWillMount in strict mode is not recommended and may indicate bugs in your code. " + `See https://reactjs.org/link/unsafe-component-lifecycles for details.

` + `* Move code with side effects to componentDidMount, and set initial state in the constructor.
` + `
Please update the following components: %s`, sortedNames);
          }
          if (UNSAFE_componentWillReceivePropsUniqueNames.size > 0) {
            var _sortedNames = setToSortedString(UNSAFE_componentWillReceivePropsUniqueNames);
            error("Using UNSAFE_componentWillReceiveProps in strict mode is not recommended " + "and may indicate bugs in your code. " + `See https://reactjs.org/link/unsafe-component-lifecycles for details.

` + `* Move data fetching code or side effects to componentDidUpdate.
` + "* If you're updating state whenever props change, " + "refactor your code to use memoization techniques or move it to " + `static getDerivedStateFromProps. Learn more at: https://reactjs.org/link/derived-state
` + `
Please update the following components: %s`, _sortedNames);
          }
          if (UNSAFE_componentWillUpdateUniqueNames.size > 0) {
            var _sortedNames2 = setToSortedString(UNSAFE_componentWillUpdateUniqueNames);
            error("Using UNSAFE_componentWillUpdate in strict mode is not recommended " + "and may indicate bugs in your code. " + `See https://reactjs.org/link/unsafe-component-lifecycles for details.

` + `* Move data fetching code or side effects to componentDidUpdate.
` + `
Please update the following components: %s`, _sortedNames2);
          }
          if (componentWillMountUniqueNames.size > 0) {
            var _sortedNames3 = setToSortedString(componentWillMountUniqueNames);
            warn("componentWillMount has been renamed, and is not recommended for use. " + `See https://reactjs.org/link/unsafe-component-lifecycles for details.

` + `* Move code with side effects to componentDidMount, and set initial state in the constructor.
` + "* Rename componentWillMount to UNSAFE_componentWillMount to suppress " + "this warning in non-strict mode. In React 18.x, only the UNSAFE_ name will work. " + "To rename all deprecated lifecycles to their new names, you can run " + "`npx react-codemod rename-unsafe-lifecycles` in your project source folder.\n" + `
Please update the following components: %s`, _sortedNames3);
          }
          if (componentWillReceivePropsUniqueNames.size > 0) {
            var _sortedNames4 = setToSortedString(componentWillReceivePropsUniqueNames);
            warn("componentWillReceiveProps has been renamed, and is not recommended for use. " + `See https://reactjs.org/link/unsafe-component-lifecycles for details.

` + `* Move data fetching code or side effects to componentDidUpdate.
` + "* If you're updating state whenever props change, refactor your " + "code to use memoization techniques or move it to " + `static getDerivedStateFromProps. Learn more at: https://reactjs.org/link/derived-state
` + "* Rename componentWillReceiveProps to UNSAFE_componentWillReceiveProps to suppress " + "this warning in non-strict mode. In React 18.x, only the UNSAFE_ name will work. " + "To rename all deprecated lifecycles to their new names, you can run " + "`npx react-codemod rename-unsafe-lifecycles` in your project source folder.\n" + `
Please update the following components: %s`, _sortedNames4);
          }
          if (componentWillUpdateUniqueNames.size > 0) {
            var _sortedNames5 = setToSortedString(componentWillUpdateUniqueNames);
            warn("componentWillUpdate has been renamed, and is not recommended for use. " + `See https://reactjs.org/link/unsafe-component-lifecycles for details.

` + `* Move data fetching code or side effects to componentDidUpdate.
` + "* Rename componentWillUpdate to UNSAFE_componentWillUpdate to suppress " + "this warning in non-strict mode. In React 18.x, only the UNSAFE_ name will work. " + "To rename all deprecated lifecycles to their new names, you can run " + "`npx react-codemod rename-unsafe-lifecycles` in your project source folder.\n" + `
Please update the following components: %s`, _sortedNames5);
          }
        };
        var pendingLegacyContextWarning = new Map;
        var didWarnAboutLegacyContext = new Set;
        ReactStrictModeWarnings.recordLegacyContextWarning = function(fiber, instance) {
          var strictRoot = findStrictRoot(fiber);
          if (strictRoot === null) {
            error("Expected to find a StrictMode component in a strict mode tree. " + "This error is likely caused by a bug in React. Please file an issue.");
            return;
          }
          if (didWarnAboutLegacyContext.has(fiber.type)) {
            return;
          }
          var warningsForRoot = pendingLegacyContextWarning.get(strictRoot);
          if (fiber.type.contextTypes != null || fiber.type.childContextTypes != null || instance !== null && typeof instance.getChildContext === "function") {
            if (warningsForRoot === undefined) {
              warningsForRoot = [];
              pendingLegacyContextWarning.set(strictRoot, warningsForRoot);
            }
            warningsForRoot.push(fiber);
          }
        };
        ReactStrictModeWarnings.flushLegacyContextWarning = function() {
          pendingLegacyContextWarning.forEach(function(fiberArray, strictRoot) {
            if (fiberArray.length === 0) {
              return;
            }
            var firstFiber = fiberArray[0];
            var uniqueNames = new Set;
            fiberArray.forEach(function(fiber) {
              uniqueNames.add(getComponentNameFromFiber(fiber) || "Component");
              didWarnAboutLegacyContext.add(fiber.type);
            });
            var sortedNames = setToSortedString(uniqueNames);
            try {
              setCurrentFiber(firstFiber);
              error("Legacy context API has been detected within a strict-mode tree." + `

The old API will be supported in all 16.x releases, but applications ` + "using it should migrate to the new version." + `

Please update the following components: %s` + `

Learn more about this warning here: https://reactjs.org/link/legacy-context`, sortedNames);
            } finally {
              resetCurrentFiber();
            }
          });
        };
        ReactStrictModeWarnings.discardPendingWarnings = function() {
          pendingComponentWillMountWarnings = [];
          pendingUNSAFE_ComponentWillMountWarnings = [];
          pendingComponentWillReceivePropsWarnings = [];
          pendingUNSAFE_ComponentWillReceivePropsWarnings = [];
          pendingComponentWillUpdateWarnings = [];
          pendingUNSAFE_ComponentWillUpdateWarnings = [];
          pendingLegacyContextWarning = new Map;
        };
      }
      var ReactCurrentActQueue$3 = ReactSharedInternals.ReactCurrentActQueue;
      var SuspenseException = new Error("Suspense Exception: This is not a real error! It's an implementation " + "detail of `use` to interrupt the current render. You must either " + "rethrow it immediately, or move the `use` call outside of the " + "`try/catch` block. Capturing without rethrowing will lead to " + `unexpected behavior.

` + "To handle async errors, wrap your component in an error boundary, or " + "call the promise's `.catch` method and pass the result to `use`");
      var SuspenseyCommitException = new Error("Suspense Exception: This is not a real error, and should not leak into " + "userspace. If you're seeing this, it's likely a bug in React.");
      var noopSuspenseyCommitThenable = {
        then: function() {}
      };
      function createThenableState() {
        return [];
      }
      function isThenableResolved(thenable) {
        var status = thenable.status;
        return status === "fulfilled" || status === "rejected";
      }
      function noop$2() {}
      function trackUsedThenable(thenableState2, thenable, index2) {
        if (ReactCurrentActQueue$3.current !== null) {
          ReactCurrentActQueue$3.didUsePromise = true;
        }
        var previous = thenableState2[index2];
        if (previous === undefined) {
          thenableState2.push(thenable);
        } else {
          if (previous !== thenable) {
            thenable.then(noop$2, noop$2);
            thenable = previous;
          }
        }
        switch (thenable.status) {
          case "fulfilled": {
            var fulfilledValue = thenable.value;
            return fulfilledValue;
          }
          case "rejected": {
            var rejectedError = thenable.reason;
            throw rejectedError;
          }
          default: {
            if (typeof thenable.status === "string") {
              thenable.then(noop$2, noop$2);
            } else {
              var pendingThenable = thenable;
              pendingThenable.status = "pending";
              pendingThenable.then(function(fulfilledValue2) {
                if (thenable.status === "pending") {
                  var fulfilledThenable2 = thenable;
                  fulfilledThenable2.status = "fulfilled";
                  fulfilledThenable2.value = fulfilledValue2;
                }
              }, function(error2) {
                if (thenable.status === "pending") {
                  var rejectedThenable2 = thenable;
                  rejectedThenable2.status = "rejected";
                  rejectedThenable2.reason = error2;
                }
              });
            }
            switch (thenable.status) {
              case "fulfilled": {
                var fulfilledThenable = thenable;
                return fulfilledThenable.value;
              }
              case "rejected": {
                var rejectedThenable = thenable;
                throw rejectedThenable.reason;
              }
            }
            suspendedThenable = thenable;
            {
              needsToResetSuspendedThenableDEV = true;
            }
            throw SuspenseException;
          }
        }
      }
      function suspendCommit() {
        suspendedThenable = noopSuspenseyCommitThenable;
        throw SuspenseyCommitException;
      }
      var suspendedThenable = null;
      var needsToResetSuspendedThenableDEV = false;
      function getSuspendedThenable() {
        if (suspendedThenable === null) {
          throw new Error("Expected a suspended thenable. This is a bug in React. Please file " + "an issue.");
        }
        var thenable = suspendedThenable;
        suspendedThenable = null;
        {
          needsToResetSuspendedThenableDEV = false;
        }
        return thenable;
      }
      function checkIfUseWrappedInTryCatch() {
        {
          if (needsToResetSuspendedThenableDEV) {
            needsToResetSuspendedThenableDEV = false;
            return true;
          }
        }
        return false;
      }
      var thenableState$1 = null;
      var thenableIndexCounter$1 = 0;
      var didWarnAboutMaps;
      var didWarnAboutGenerators;
      var didWarnAboutStringRefs;
      var ownerHasKeyUseWarning;
      var ownerHasFunctionTypeWarning;
      var warnForMissingKey = function(child, returnFiber) {};
      {
        didWarnAboutMaps = false;
        didWarnAboutGenerators = false;
        didWarnAboutStringRefs = {};
        ownerHasKeyUseWarning = {};
        ownerHasFunctionTypeWarning = {};
        warnForMissingKey = function(child, returnFiber) {
          if (child === null || typeof child !== "object") {
            return;
          }
          if (!child._store || child._store.validated || child.key != null) {
            return;
          }
          if (typeof child._store !== "object") {
            throw new Error("React Component in warnForMissingKey should have a _store. " + "This error is likely caused by a bug in React. Please file an issue.");
          }
          child._store.validated = true;
          var componentName = getComponentNameFromFiber(returnFiber) || "Component";
          if (ownerHasKeyUseWarning[componentName]) {
            return;
          }
          ownerHasKeyUseWarning[componentName] = true;
          error("Each child in a list should have a unique " + '"key" prop. See https://reactjs.org/link/warning-keys for ' + "more information.");
        };
      }
      function isReactClass(type) {
        return type.prototype && type.prototype.isReactComponent;
      }
      function unwrapThenable(thenable) {
        var index2 = thenableIndexCounter$1;
        thenableIndexCounter$1 += 1;
        if (thenableState$1 === null) {
          thenableState$1 = createThenableState();
        }
        return trackUsedThenable(thenableState$1, thenable, index2);
      }
      function coerceRef(returnFiber, current2, element) {
        var mixedRef = element.ref;
        if (mixedRef !== null && typeof mixedRef !== "function" && typeof mixedRef !== "object") {
          {
            if (!(element._owner && element._self && element._owner.stateNode !== element._self) && !(element._owner && element._owner.tag !== ClassComponent) && !(typeof element.type === "function" && !isReactClass(element.type)) && element._owner) {
              var componentName = getComponentNameFromFiber(returnFiber) || "Component";
              if (!didWarnAboutStringRefs[componentName]) {
                error('Component "%s" contains the string ref "%s". Support for string refs ' + "will be removed in a future major release. We recommend using " + "useRef() or createRef() instead. " + "Learn more about using refs safely here: " + "https://reactjs.org/link/strict-mode-string-ref", componentName, mixedRef);
                didWarnAboutStringRefs[componentName] = true;
              }
            }
          }
          if (element._owner) {
            var owner = element._owner;
            var inst;
            if (owner) {
              var ownerFiber = owner;
              if (ownerFiber.tag !== ClassComponent) {
                throw new Error("Function components cannot have string refs. " + "We recommend using useRef() instead. " + "Learn more about using refs safely here: " + "https://reactjs.org/link/strict-mode-string-ref");
              }
              inst = ownerFiber.stateNode;
            }
            if (!inst) {
              throw new Error("Missing owner for string ref " + mixedRef + ". This error is likely caused by a " + "bug in React. Please file an issue.");
            }
            var resolvedInst = inst;
            {
              checkPropStringCoercion(mixedRef, "ref");
            }
            var stringRef = "" + mixedRef;
            if (current2 !== null && current2.ref !== null && typeof current2.ref === "function" && current2.ref._stringRef === stringRef) {
              return current2.ref;
            }
            var ref = function(value) {
              var refs = resolvedInst.refs;
              if (value === null) {
                delete refs[stringRef];
              } else {
                refs[stringRef] = value;
              }
            };
            ref._stringRef = stringRef;
            return ref;
          } else {
            if (typeof mixedRef !== "string") {
              throw new Error("Expected ref to be a function, a string, an object returned by React.createRef(), or null.");
            }
            if (!element._owner) {
              throw new Error("Element ref was specified as a string (" + mixedRef + ") but no owner was set. This could happen for one of" + ` the following reasons:
` + `1. You may be adding a ref to a function component
` + `2. You may be adding a ref to a component that was not created inside a component's render method
` + `3. You have multiple copies of React loaded
` + "See https://reactjs.org/link/refs-must-have-owner for more information.");
            }
          }
        }
        return mixedRef;
      }
      function throwOnInvalidObjectType(returnFiber, newChild) {
        var childString = Object.prototype.toString.call(newChild);
        throw new Error("Objects are not valid as a React child (found: " + (childString === "[object Object]" ? "object with keys {" + Object.keys(newChild).join(", ") + "}" : childString) + "). " + "If you meant to render a collection of children, use an array " + "instead.");
      }
      function warnOnFunctionType(returnFiber) {
        {
          var componentName = getComponentNameFromFiber(returnFiber) || "Component";
          if (ownerHasFunctionTypeWarning[componentName]) {
            return;
          }
          ownerHasFunctionTypeWarning[componentName] = true;
          error("Functions are not valid as a React child. This may happen if " + "you return a Component instead of <Component /> from render. " + "Or maybe you meant to call this function rather than return it.");
        }
      }
      function resolveLazy(lazyType) {
        var payload = lazyType._payload;
        var init = lazyType._init;
        return init(payload);
      }
      function createChildReconciler(shouldTrackSideEffects) {
        function deleteChild(returnFiber, childToDelete) {
          if (!shouldTrackSideEffects) {
            return;
          }
          var deletions = returnFiber.deletions;
          if (deletions === null) {
            returnFiber.deletions = [childToDelete];
            returnFiber.flags |= ChildDeletion;
          } else {
            deletions.push(childToDelete);
          }
        }
        function deleteRemainingChildren(returnFiber, currentFirstChild) {
          if (!shouldTrackSideEffects) {
            return null;
          }
          var childToDelete = currentFirstChild;
          while (childToDelete !== null) {
            deleteChild(returnFiber, childToDelete);
            childToDelete = childToDelete.sibling;
          }
          return null;
        }
        function mapRemainingChildren(returnFiber, currentFirstChild) {
          var existingChildren = new Map;
          var existingChild = currentFirstChild;
          while (existingChild !== null) {
            if (existingChild.key !== null) {
              existingChildren.set(existingChild.key, existingChild);
            } else {
              existingChildren.set(existingChild.index, existingChild);
            }
            existingChild = existingChild.sibling;
          }
          return existingChildren;
        }
        function useFiber(fiber, pendingProps) {
          var clone = createWorkInProgress(fiber, pendingProps);
          clone.index = 0;
          clone.sibling = null;
          return clone;
        }
        function placeChild(newFiber, lastPlacedIndex, newIndex) {
          newFiber.index = newIndex;
          if (!shouldTrackSideEffects) {
            newFiber.flags |= Forked;
            return lastPlacedIndex;
          }
          var current2 = newFiber.alternate;
          if (current2 !== null) {
            var oldIndex = current2.index;
            if (oldIndex < lastPlacedIndex) {
              newFiber.flags |= Placement | PlacementDEV;
              return lastPlacedIndex;
            } else {
              return oldIndex;
            }
          } else {
            newFiber.flags |= Placement | PlacementDEV;
            return lastPlacedIndex;
          }
        }
        function placeSingleChild(newFiber) {
          if (shouldTrackSideEffects && newFiber.alternate === null) {
            newFiber.flags |= Placement | PlacementDEV;
          }
          return newFiber;
        }
        function updateTextNode(returnFiber, current2, textContent, lanes) {
          if (current2 === null || current2.tag !== HostText) {
            var created = createFiberFromText(textContent, returnFiber.mode, lanes);
            created.return = returnFiber;
            return created;
          } else {
            var existing = useFiber(current2, textContent);
            existing.return = returnFiber;
            return existing;
          }
        }
        function updateElement(returnFiber, current2, element, lanes) {
          var elementType = element.type;
          if (elementType === REACT_FRAGMENT_TYPE) {
            return updateFragment2(returnFiber, current2, element.props.children, lanes, element.key);
          }
          if (current2 !== null) {
            if (current2.elementType === elementType || isCompatibleFamilyForHotReloading(current2, element) || typeof elementType === "object" && elementType !== null && elementType.$$typeof === REACT_LAZY_TYPE && resolveLazy(elementType) === current2.type) {
              var existing = useFiber(current2, element.props);
              existing.ref = coerceRef(returnFiber, current2, element);
              existing.return = returnFiber;
              {
                existing._debugSource = element._source;
                existing._debugOwner = element._owner;
              }
              return existing;
            }
          }
          var created = createFiberFromElement(element, returnFiber.mode, lanes);
          created.ref = coerceRef(returnFiber, current2, element);
          created.return = returnFiber;
          return created;
        }
        function updatePortal(returnFiber, current2, portal, lanes) {
          if (current2 === null || current2.tag !== HostPortal || current2.stateNode.containerInfo !== portal.containerInfo || current2.stateNode.implementation !== portal.implementation) {
            var created = createFiberFromPortal(portal, returnFiber.mode, lanes);
            created.return = returnFiber;
            return created;
          } else {
            var existing = useFiber(current2, portal.children || []);
            existing.return = returnFiber;
            return existing;
          }
        }
        function updateFragment2(returnFiber, current2, fragment, lanes, key) {
          if (current2 === null || current2.tag !== Fragment2) {
            var created = createFiberFromFragment(fragment, returnFiber.mode, lanes, key);
            created.return = returnFiber;
            return created;
          } else {
            var existing = useFiber(current2, fragment);
            existing.return = returnFiber;
            return existing;
          }
        }
        function createChild(returnFiber, newChild, lanes) {
          if (typeof newChild === "string" && newChild !== "" || typeof newChild === "number") {
            var created = createFiberFromText("" + newChild, returnFiber.mode, lanes);
            created.return = returnFiber;
            return created;
          }
          if (typeof newChild === "object" && newChild !== null) {
            switch (newChild.$$typeof) {
              case REACT_ELEMENT_TYPE2: {
                var _created = createFiberFromElement(newChild, returnFiber.mode, lanes);
                _created.ref = coerceRef(returnFiber, null, newChild);
                _created.return = returnFiber;
                return _created;
              }
              case REACT_PORTAL_TYPE: {
                var _created2 = createFiberFromPortal(newChild, returnFiber.mode, lanes);
                _created2.return = returnFiber;
                return _created2;
              }
              case REACT_LAZY_TYPE: {
                var payload = newChild._payload;
                var init = newChild._init;
                return createChild(returnFiber, init(payload), lanes);
              }
            }
            if (isArray(newChild) || getIteratorFn(newChild)) {
              var _created3 = createFiberFromFragment(newChild, returnFiber.mode, lanes, null);
              _created3.return = returnFiber;
              return _created3;
            }
            if (typeof newChild.then === "function") {
              var thenable = newChild;
              return createChild(returnFiber, unwrapThenable(thenable), lanes);
            }
            if (newChild.$$typeof === REACT_CONTEXT_TYPE || newChild.$$typeof === REACT_SERVER_CONTEXT_TYPE) {
              var context = newChild;
              return createChild(returnFiber, readContextDuringReconcilation(returnFiber, context, lanes), lanes);
            }
            throwOnInvalidObjectType(returnFiber, newChild);
          }
          {
            if (typeof newChild === "function") {
              warnOnFunctionType(returnFiber);
            }
          }
          return null;
        }
        function updateSlot(returnFiber, oldFiber, newChild, lanes) {
          var key = oldFiber !== null ? oldFiber.key : null;
          if (typeof newChild === "string" && newChild !== "" || typeof newChild === "number") {
            if (key !== null) {
              return null;
            }
            return updateTextNode(returnFiber, oldFiber, "" + newChild, lanes);
          }
          if (typeof newChild === "object" && newChild !== null) {
            switch (newChild.$$typeof) {
              case REACT_ELEMENT_TYPE2: {
                if (newChild.key === key) {
                  return updateElement(returnFiber, oldFiber, newChild, lanes);
                } else {
                  return null;
                }
              }
              case REACT_PORTAL_TYPE: {
                if (newChild.key === key) {
                  return updatePortal(returnFiber, oldFiber, newChild, lanes);
                } else {
                  return null;
                }
              }
              case REACT_LAZY_TYPE: {
                var payload = newChild._payload;
                var init = newChild._init;
                return updateSlot(returnFiber, oldFiber, init(payload), lanes);
              }
            }
            if (isArray(newChild) || getIteratorFn(newChild)) {
              if (key !== null) {
                return null;
              }
              return updateFragment2(returnFiber, oldFiber, newChild, lanes, null);
            }
            if (typeof newChild.then === "function") {
              var thenable = newChild;
              return updateSlot(returnFiber, oldFiber, unwrapThenable(thenable), lanes);
            }
            if (newChild.$$typeof === REACT_CONTEXT_TYPE || newChild.$$typeof === REACT_SERVER_CONTEXT_TYPE) {
              var context = newChild;
              return updateSlot(returnFiber, oldFiber, readContextDuringReconcilation(returnFiber, context, lanes), lanes);
            }
            throwOnInvalidObjectType(returnFiber, newChild);
          }
          {
            if (typeof newChild === "function") {
              warnOnFunctionType(returnFiber);
            }
          }
          return null;
        }
        function updateFromMap(existingChildren, returnFiber, newIdx, newChild, lanes) {
          if (typeof newChild === "string" && newChild !== "" || typeof newChild === "number") {
            var matchedFiber = existingChildren.get(newIdx) || null;
            return updateTextNode(returnFiber, matchedFiber, "" + newChild, lanes);
          }
          if (typeof newChild === "object" && newChild !== null) {
            switch (newChild.$$typeof) {
              case REACT_ELEMENT_TYPE2: {
                var _matchedFiber = existingChildren.get(newChild.key === null ? newIdx : newChild.key) || null;
                return updateElement(returnFiber, _matchedFiber, newChild, lanes);
              }
              case REACT_PORTAL_TYPE: {
                var _matchedFiber2 = existingChildren.get(newChild.key === null ? newIdx : newChild.key) || null;
                return updatePortal(returnFiber, _matchedFiber2, newChild, lanes);
              }
              case REACT_LAZY_TYPE:
                var payload = newChild._payload;
                var init = newChild._init;
                return updateFromMap(existingChildren, returnFiber, newIdx, init(payload), lanes);
            }
            if (isArray(newChild) || getIteratorFn(newChild)) {
              var _matchedFiber3 = existingChildren.get(newIdx) || null;
              return updateFragment2(returnFiber, _matchedFiber3, newChild, lanes, null);
            }
            if (typeof newChild.then === "function") {
              var thenable = newChild;
              return updateFromMap(existingChildren, returnFiber, newIdx, unwrapThenable(thenable), lanes);
            }
            if (newChild.$$typeof === REACT_CONTEXT_TYPE || newChild.$$typeof === REACT_SERVER_CONTEXT_TYPE) {
              var context = newChild;
              return updateFromMap(existingChildren, returnFiber, newIdx, readContextDuringReconcilation(returnFiber, context, lanes), lanes);
            }
            throwOnInvalidObjectType(returnFiber, newChild);
          }
          {
            if (typeof newChild === "function") {
              warnOnFunctionType(returnFiber);
            }
          }
          return null;
        }
        function warnOnInvalidKey(child, knownKeys, returnFiber) {
          {
            if (typeof child !== "object" || child === null) {
              return knownKeys;
            }
            switch (child.$$typeof) {
              case REACT_ELEMENT_TYPE2:
              case REACT_PORTAL_TYPE:
                warnForMissingKey(child, returnFiber);
                var key = child.key;
                if (typeof key !== "string") {
                  break;
                }
                if (knownKeys === null) {
                  knownKeys = new Set;
                  knownKeys.add(key);
                  break;
                }
                if (!knownKeys.has(key)) {
                  knownKeys.add(key);
                  break;
                }
                error("Encountered two children with the same key, `%s`. " + "Keys should be unique so that components maintain their identity " + "across updates. Non-unique keys may cause children to be " + "duplicated and/or omitted — the behavior is unsupported and " + "could change in a future version.", key);
                break;
              case REACT_LAZY_TYPE:
                var payload = child._payload;
                var init = child._init;
                warnOnInvalidKey(init(payload), knownKeys, returnFiber);
                break;
            }
          }
          return knownKeys;
        }
        function reconcileChildrenArray(returnFiber, currentFirstChild, newChildren, lanes) {
          {
            var knownKeys = null;
            for (var i = 0;i < newChildren.length; i++) {
              var child = newChildren[i];
              knownKeys = warnOnInvalidKey(child, knownKeys, returnFiber);
            }
          }
          var resultingFirstChild = null;
          var previousNewFiber = null;
          var oldFiber = currentFirstChild;
          var lastPlacedIndex = 0;
          var newIdx = 0;
          var nextOldFiber = null;
          for (;oldFiber !== null && newIdx < newChildren.length; newIdx++) {
            if (oldFiber.index > newIdx) {
              nextOldFiber = oldFiber;
              oldFiber = null;
            } else {
              nextOldFiber = oldFiber.sibling;
            }
            var newFiber = updateSlot(returnFiber, oldFiber, newChildren[newIdx], lanes);
            if (newFiber === null) {
              if (oldFiber === null) {
                oldFiber = nextOldFiber;
              }
              break;
            }
            if (shouldTrackSideEffects) {
              if (oldFiber && newFiber.alternate === null) {
                deleteChild(returnFiber, oldFiber);
              }
            }
            lastPlacedIndex = placeChild(newFiber, lastPlacedIndex, newIdx);
            if (previousNewFiber === null) {
              resultingFirstChild = newFiber;
            } else {
              previousNewFiber.sibling = newFiber;
            }
            previousNewFiber = newFiber;
            oldFiber = nextOldFiber;
          }
          if (newIdx === newChildren.length) {
            deleteRemainingChildren(returnFiber, oldFiber);
            if (getIsHydrating()) {
              var numberOfForks = newIdx;
              pushTreeFork(returnFiber, numberOfForks);
            }
            return resultingFirstChild;
          }
          if (oldFiber === null) {
            for (;newIdx < newChildren.length; newIdx++) {
              var _newFiber = createChild(returnFiber, newChildren[newIdx], lanes);
              if (_newFiber === null) {
                continue;
              }
              lastPlacedIndex = placeChild(_newFiber, lastPlacedIndex, newIdx);
              if (previousNewFiber === null) {
                resultingFirstChild = _newFiber;
              } else {
                previousNewFiber.sibling = _newFiber;
              }
              previousNewFiber = _newFiber;
            }
            if (getIsHydrating()) {
              var _numberOfForks = newIdx;
              pushTreeFork(returnFiber, _numberOfForks);
            }
            return resultingFirstChild;
          }
          var existingChildren = mapRemainingChildren(returnFiber, oldFiber);
          for (;newIdx < newChildren.length; newIdx++) {
            var _newFiber2 = updateFromMap(existingChildren, returnFiber, newIdx, newChildren[newIdx], lanes);
            if (_newFiber2 !== null) {
              if (shouldTrackSideEffects) {
                if (_newFiber2.alternate !== null) {
                  existingChildren.delete(_newFiber2.key === null ? newIdx : _newFiber2.key);
                }
              }
              lastPlacedIndex = placeChild(_newFiber2, lastPlacedIndex, newIdx);
              if (previousNewFiber === null) {
                resultingFirstChild = _newFiber2;
              } else {
                previousNewFiber.sibling = _newFiber2;
              }
              previousNewFiber = _newFiber2;
            }
          }
          if (shouldTrackSideEffects) {
            existingChildren.forEach(function(child2) {
              return deleteChild(returnFiber, child2);
            });
          }
          if (getIsHydrating()) {
            var _numberOfForks2 = newIdx;
            pushTreeFork(returnFiber, _numberOfForks2);
          }
          return resultingFirstChild;
        }
        function reconcileChildrenIterator(returnFiber, currentFirstChild, newChildrenIterable, lanes) {
          var iteratorFn = getIteratorFn(newChildrenIterable);
          if (typeof iteratorFn !== "function") {
            throw new Error("An object is not an iterable. This error is likely caused by a bug in " + "React. Please file an issue.");
          }
          {
            if (typeof Symbol === "function" && newChildrenIterable[Symbol.toStringTag] === "Generator") {
              if (!didWarnAboutGenerators) {
                error("Using Generators as children is unsupported and will likely yield " + "unexpected results because enumerating a generator mutates it. " + "You may convert it to an array with `Array.from()` or the " + "`[...spread]` operator before rendering. Keep in mind " + "you might need to polyfill these features for older browsers.");
              }
              didWarnAboutGenerators = true;
            }
            if (newChildrenIterable.entries === iteratorFn) {
              if (!didWarnAboutMaps) {
                error("Using Maps as children is not supported. " + "Use an array of keyed ReactElements instead.");
              }
              didWarnAboutMaps = true;
            }
            var _newChildren = iteratorFn.call(newChildrenIterable);
            if (_newChildren) {
              var knownKeys = null;
              var _step = _newChildren.next();
              for (;!_step.done; _step = _newChildren.next()) {
                var child = _step.value;
                knownKeys = warnOnInvalidKey(child, knownKeys, returnFiber);
              }
            }
          }
          var newChildren = iteratorFn.call(newChildrenIterable);
          if (newChildren == null) {
            throw new Error("An iterable object provided no iterator.");
          }
          var resultingFirstChild = null;
          var previousNewFiber = null;
          var oldFiber = currentFirstChild;
          var lastPlacedIndex = 0;
          var newIdx = 0;
          var nextOldFiber = null;
          var step = newChildren.next();
          for (;oldFiber !== null && !step.done; newIdx++, step = newChildren.next()) {
            if (oldFiber.index > newIdx) {
              nextOldFiber = oldFiber;
              oldFiber = null;
            } else {
              nextOldFiber = oldFiber.sibling;
            }
            var newFiber = updateSlot(returnFiber, oldFiber, step.value, lanes);
            if (newFiber === null) {
              if (oldFiber === null) {
                oldFiber = nextOldFiber;
              }
              break;
            }
            if (shouldTrackSideEffects) {
              if (oldFiber && newFiber.alternate === null) {
                deleteChild(returnFiber, oldFiber);
              }
            }
            lastPlacedIndex = placeChild(newFiber, lastPlacedIndex, newIdx);
            if (previousNewFiber === null) {
              resultingFirstChild = newFiber;
            } else {
              previousNewFiber.sibling = newFiber;
            }
            previousNewFiber = newFiber;
            oldFiber = nextOldFiber;
          }
          if (step.done) {
            deleteRemainingChildren(returnFiber, oldFiber);
            if (getIsHydrating()) {
              var numberOfForks = newIdx;
              pushTreeFork(returnFiber, numberOfForks);
            }
            return resultingFirstChild;
          }
          if (oldFiber === null) {
            for (;!step.done; newIdx++, step = newChildren.next()) {
              var _newFiber3 = createChild(returnFiber, step.value, lanes);
              if (_newFiber3 === null) {
                continue;
              }
              lastPlacedIndex = placeChild(_newFiber3, lastPlacedIndex, newIdx);
              if (previousNewFiber === null) {
                resultingFirstChild = _newFiber3;
              } else {
                previousNewFiber.sibling = _newFiber3;
              }
              previousNewFiber = _newFiber3;
            }
            if (getIsHydrating()) {
              var _numberOfForks3 = newIdx;
              pushTreeFork(returnFiber, _numberOfForks3);
            }
            return resultingFirstChild;
          }
          var existingChildren = mapRemainingChildren(returnFiber, oldFiber);
          for (;!step.done; newIdx++, step = newChildren.next()) {
            var _newFiber4 = updateFromMap(existingChildren, returnFiber, newIdx, step.value, lanes);
            if (_newFiber4 !== null) {
              if (shouldTrackSideEffects) {
                if (_newFiber4.alternate !== null) {
                  existingChildren.delete(_newFiber4.key === null ? newIdx : _newFiber4.key);
                }
              }
              lastPlacedIndex = placeChild(_newFiber4, lastPlacedIndex, newIdx);
              if (previousNewFiber === null) {
                resultingFirstChild = _newFiber4;
              } else {
                previousNewFiber.sibling = _newFiber4;
              }
              previousNewFiber = _newFiber4;
            }
          }
          if (shouldTrackSideEffects) {
            existingChildren.forEach(function(child2) {
              return deleteChild(returnFiber, child2);
            });
          }
          if (getIsHydrating()) {
            var _numberOfForks4 = newIdx;
            pushTreeFork(returnFiber, _numberOfForks4);
          }
          return resultingFirstChild;
        }
        function reconcileSingleTextNode(returnFiber, currentFirstChild, textContent, lanes) {
          if (currentFirstChild !== null && currentFirstChild.tag === HostText) {
            deleteRemainingChildren(returnFiber, currentFirstChild.sibling);
            var existing = useFiber(currentFirstChild, textContent);
            existing.return = returnFiber;
            return existing;
          }
          deleteRemainingChildren(returnFiber, currentFirstChild);
          var created = createFiberFromText(textContent, returnFiber.mode, lanes);
          created.return = returnFiber;
          return created;
        }
        function reconcileSingleElement(returnFiber, currentFirstChild, element, lanes) {
          var key = element.key;
          var child = currentFirstChild;
          while (child !== null) {
            if (child.key === key) {
              var elementType = element.type;
              if (elementType === REACT_FRAGMENT_TYPE) {
                if (child.tag === Fragment2) {
                  deleteRemainingChildren(returnFiber, child.sibling);
                  var existing = useFiber(child, element.props.children);
                  existing.return = returnFiber;
                  {
                    existing._debugSource = element._source;
                    existing._debugOwner = element._owner;
                  }
                  return existing;
                }
              } else {
                if (child.elementType === elementType || isCompatibleFamilyForHotReloading(child, element) || typeof elementType === "object" && elementType !== null && elementType.$$typeof === REACT_LAZY_TYPE && resolveLazy(elementType) === child.type) {
                  deleteRemainingChildren(returnFiber, child.sibling);
                  var _existing = useFiber(child, element.props);
                  _existing.ref = coerceRef(returnFiber, child, element);
                  _existing.return = returnFiber;
                  {
                    _existing._debugSource = element._source;
                    _existing._debugOwner = element._owner;
                  }
                  return _existing;
                }
              }
              deleteRemainingChildren(returnFiber, child);
              break;
            } else {
              deleteChild(returnFiber, child);
            }
            child = child.sibling;
          }
          if (element.type === REACT_FRAGMENT_TYPE) {
            var created = createFiberFromFragment(element.props.children, returnFiber.mode, lanes, element.key);
            created.return = returnFiber;
            return created;
          } else {
            var _created4 = createFiberFromElement(element, returnFiber.mode, lanes);
            _created4.ref = coerceRef(returnFiber, currentFirstChild, element);
            _created4.return = returnFiber;
            return _created4;
          }
        }
        function reconcileSinglePortal(returnFiber, currentFirstChild, portal, lanes) {
          var key = portal.key;
          var child = currentFirstChild;
          while (child !== null) {
            if (child.key === key) {
              if (child.tag === HostPortal && child.stateNode.containerInfo === portal.containerInfo && child.stateNode.implementation === portal.implementation) {
                deleteRemainingChildren(returnFiber, child.sibling);
                var existing = useFiber(child, portal.children || []);
                existing.return = returnFiber;
                return existing;
              } else {
                deleteRemainingChildren(returnFiber, child);
                break;
              }
            } else {
              deleteChild(returnFiber, child);
            }
            child = child.sibling;
          }
          var created = createFiberFromPortal(portal, returnFiber.mode, lanes);
          created.return = returnFiber;
          return created;
        }
        function reconcileChildFibersImpl(returnFiber, currentFirstChild, newChild, lanes) {
          var isUnkeyedTopLevelFragment = typeof newChild === "object" && newChild !== null && newChild.type === REACT_FRAGMENT_TYPE && newChild.key === null;
          if (isUnkeyedTopLevelFragment) {
            newChild = newChild.props.children;
          }
          if (typeof newChild === "object" && newChild !== null) {
            switch (newChild.$$typeof) {
              case REACT_ELEMENT_TYPE2:
                return placeSingleChild(reconcileSingleElement(returnFiber, currentFirstChild, newChild, lanes));
              case REACT_PORTAL_TYPE:
                return placeSingleChild(reconcileSinglePortal(returnFiber, currentFirstChild, newChild, lanes));
              case REACT_LAZY_TYPE:
                var payload = newChild._payload;
                var init = newChild._init;
                return reconcileChildFibers2(returnFiber, currentFirstChild, init(payload), lanes);
            }
            if (isArray(newChild)) {
              return reconcileChildrenArray(returnFiber, currentFirstChild, newChild, lanes);
            }
            if (getIteratorFn(newChild)) {
              return reconcileChildrenIterator(returnFiber, currentFirstChild, newChild, lanes);
            }
            if (typeof newChild.then === "function") {
              var thenable = newChild;
              return reconcileChildFibersImpl(returnFiber, currentFirstChild, unwrapThenable(thenable), lanes);
            }
            if (newChild.$$typeof === REACT_CONTEXT_TYPE || newChild.$$typeof === REACT_SERVER_CONTEXT_TYPE) {
              var context = newChild;
              return reconcileChildFibersImpl(returnFiber, currentFirstChild, readContextDuringReconcilation(returnFiber, context, lanes), lanes);
            }
            throwOnInvalidObjectType(returnFiber, newChild);
          }
          if (typeof newChild === "string" && newChild !== "" || typeof newChild === "number") {
            return placeSingleChild(reconcileSingleTextNode(returnFiber, currentFirstChild, "" + newChild, lanes));
          }
          {
            if (typeof newChild === "function") {
              warnOnFunctionType(returnFiber);
            }
          }
          return deleteRemainingChildren(returnFiber, currentFirstChild);
        }
        function reconcileChildFibers2(returnFiber, currentFirstChild, newChild, lanes) {
          thenableIndexCounter$1 = 0;
          var firstChildFiber = reconcileChildFibersImpl(returnFiber, currentFirstChild, newChild, lanes);
          thenableState$1 = null;
          return firstChildFiber;
        }
        return reconcileChildFibers2;
      }
      var reconcileChildFibers = createChildReconciler(true);
      var mountChildFibers = createChildReconciler(false);
      function resetChildReconcilerOnUnwind() {
        thenableState$1 = null;
        thenableIndexCounter$1 = 0;
      }
      function cloneChildFibers(current2, workInProgress2) {
        if (current2 !== null && workInProgress2.child !== current2.child) {
          throw new Error("Resuming work not yet implemented.");
        }
        if (workInProgress2.child === null) {
          return;
        }
        var currentChild = workInProgress2.child;
        var newChild = createWorkInProgress(currentChild, currentChild.pendingProps);
        workInProgress2.child = newChild;
        newChild.return = workInProgress2;
        while (currentChild.sibling !== null) {
          currentChild = currentChild.sibling;
          newChild = newChild.sibling = createWorkInProgress(currentChild, currentChild.pendingProps);
          newChild.return = workInProgress2;
        }
        newChild.sibling = null;
      }
      function resetChildFibers(workInProgress2, lanes) {
        var child = workInProgress2.child;
        while (child !== null) {
          resetWorkInProgress(child, lanes);
          child = child.sibling;
        }
      }
      var currentTreeHiddenStackCursor = createCursor(null);
      var prevRenderLanesStackCursor = createCursor(NoLanes);
      function pushHiddenContext(fiber, context) {
        var prevRenderLanes = getRenderLanes();
        push(prevRenderLanesStackCursor, prevRenderLanes, fiber);
        push(currentTreeHiddenStackCursor, context, fiber);
        setRenderLanes(mergeLanes(prevRenderLanes, context.baseLanes));
      }
      function reuseHiddenContextOnStack(fiber) {
        push(prevRenderLanesStackCursor, getRenderLanes(), fiber);
        push(currentTreeHiddenStackCursor, currentTreeHiddenStackCursor.current, fiber);
      }
      function popHiddenContext(fiber) {
        setRenderLanes(prevRenderLanesStackCursor.current);
        pop(currentTreeHiddenStackCursor, fiber);
        pop(prevRenderLanesStackCursor, fiber);
      }
      function isCurrentTreeHidden() {
        return currentTreeHiddenStackCursor.current !== null;
      }
      var suspenseHandlerStackCursor = createCursor(null);
      var shellBoundary = null;
      function getShellBoundary() {
        return shellBoundary;
      }
      function pushPrimaryTreeSuspenseHandler(handler) {
        var current2 = handler.alternate;
        pushSuspenseListContext(handler, setDefaultShallowSuspenseListContext(suspenseStackCursor.current));
        push(suspenseHandlerStackCursor, handler, handler);
        if (shellBoundary === null) {
          if (current2 === null || isCurrentTreeHidden()) {
            shellBoundary = handler;
          } else {
            var prevState = current2.memoizedState;
            if (prevState !== null) {
              shellBoundary = handler;
            }
          }
        }
      }
      function pushFallbackTreeSuspenseHandler(fiber) {
        reuseSuspenseHandlerOnStack(fiber);
      }
      function pushOffscreenSuspenseHandler(fiber) {
        if (fiber.tag === OffscreenComponent) {
          pushSuspenseListContext(fiber, suspenseStackCursor.current);
          push(suspenseHandlerStackCursor, fiber, fiber);
          if (shellBoundary !== null)
            ;
          else {
            var current2 = fiber.alternate;
            if (current2 !== null) {
              var prevState = current2.memoizedState;
              if (prevState !== null) {
                shellBoundary = fiber;
              }
            }
          }
        } else {
          reuseSuspenseHandlerOnStack(fiber);
        }
      }
      function reuseSuspenseHandlerOnStack(fiber) {
        pushSuspenseListContext(fiber, suspenseStackCursor.current);
        push(suspenseHandlerStackCursor, getSuspenseHandler(), fiber);
      }
      function getSuspenseHandler() {
        return suspenseHandlerStackCursor.current;
      }
      function popSuspenseHandler(fiber) {
        pop(suspenseHandlerStackCursor, fiber);
        if (shellBoundary === fiber) {
          shellBoundary = null;
        }
        popSuspenseListContext(fiber);
      }
      var DefaultSuspenseContext = 0;
      var SubtreeSuspenseContextMask = 1;
      var ForceSuspenseFallback = 2;
      var suspenseStackCursor = createCursor(DefaultSuspenseContext);
      function hasSuspenseListContext(parentContext, flag) {
        return (parentContext & flag) !== 0;
      }
      function setDefaultShallowSuspenseListContext(parentContext) {
        return parentContext & SubtreeSuspenseContextMask;
      }
      function setShallowSuspenseListContext(parentContext, shallowContext) {
        return parentContext & SubtreeSuspenseContextMask | shallowContext;
      }
      function pushSuspenseListContext(fiber, newContext) {
        push(suspenseStackCursor, newContext, fiber);
      }
      function popSuspenseListContext(fiber) {
        pop(suspenseStackCursor, fiber);
      }
      function findFirstSuspended(row) {
        var node = row;
        while (node !== null) {
          if (node.tag === SuspenseComponent) {
            var state = node.memoizedState;
            if (state !== null) {
              var dehydrated = state.dehydrated;
              if (dehydrated === null || isSuspenseInstancePending(dehydrated) || isSuspenseInstanceFallback(dehydrated)) {
                return node;
              }
            }
          } else if (node.tag === SuspenseListComponent && node.memoizedProps.revealOrder !== undefined) {
            var didSuspend = (node.flags & DidCapture) !== NoFlags$1;
            if (didSuspend) {
              return node;
            }
          } else if (node.child !== null) {
            node.child.return = node;
            node = node.child;
            continue;
          }
          if (node === row) {
            return null;
          }
          while (node.sibling === null) {
            if (node.return === null || node.return === row) {
              return null;
            }
            node = node.return;
          }
          node.sibling.return = node.return;
          node = node.sibling;
        }
        return null;
      }
      var NoFlags = 0;
      var HasEffect = 1;
      var Insertion = 2;
      var Layout = 4;
      var Passive = 8;
      var workInProgressSources = [];
      function resetWorkInProgressVersions() {
        for (var i = 0;i < workInProgressSources.length; i++) {
          var mutableSource = workInProgressSources[i];
          {
            mutableSource._workInProgressVersionPrimary = null;
          }
        }
        workInProgressSources.length = 0;
      }
      function registerMutableSourceForHydration(root2, mutableSource) {
        var getVersion = mutableSource._getVersion;
        var version = getVersion(mutableSource._source);
        if (root2.mutableSourceEagerHydrationData == null) {
          root2.mutableSourceEagerHydrationData = [mutableSource, version];
        } else {
          root2.mutableSourceEagerHydrationData.push(mutableSource, version);
        }
      }
      var ReactCurrentActQueue$2 = ReactSharedInternals.ReactCurrentActQueue;
      var firstScheduledRoot = null;
      var lastScheduledRoot = null;
      var didScheduleMicrotask = false;
      var didScheduleMicrotask_act = false;
      var mightHavePendingSyncWork = false;
      var isFlushingWork = false;
      var currentEventTransitionLane = NoLane;
      function ensureRootIsScheduled(root2) {
        if (root2 === lastScheduledRoot || root2.next !== null)
          ;
        else {
          if (lastScheduledRoot === null) {
            firstScheduledRoot = lastScheduledRoot = root2;
          } else {
            lastScheduledRoot.next = root2;
            lastScheduledRoot = root2;
          }
        }
        mightHavePendingSyncWork = true;
        if (ReactCurrentActQueue$2.current !== null) {
          if (!didScheduleMicrotask_act) {
            didScheduleMicrotask_act = true;
            scheduleImmediateTask(processRootScheduleInMicrotask);
          }
        } else {
          if (!didScheduleMicrotask) {
            didScheduleMicrotask = true;
            scheduleImmediateTask(processRootScheduleInMicrotask);
          }
        }
        if (ReactCurrentActQueue$2.isBatchingLegacy && root2.tag === LegacyRoot) {
          ReactCurrentActQueue$2.didScheduleLegacyUpdate = true;
        }
      }
      function flushSyncWorkOnAllRoots() {
        flushSyncWorkAcrossRoots_impl(false);
      }
      function flushSyncWorkOnLegacyRootsOnly() {
        flushSyncWorkAcrossRoots_impl(true);
      }
      function flushSyncWorkAcrossRoots_impl(onlyLegacy) {
        if (isFlushingWork) {
          return;
        }
        if (!mightHavePendingSyncWork) {
          return;
        }
        var workInProgressRoot2 = getWorkInProgressRoot();
        var workInProgressRootRenderLanes2 = getWorkInProgressRootRenderLanes();
        var didPerformSomeWork;
        var errors = null;
        isFlushingWork = true;
        do {
          didPerformSomeWork = false;
          var root2 = firstScheduledRoot;
          while (root2 !== null) {
            if (onlyLegacy && root2.tag !== LegacyRoot)
              ;
            else {
              var nextLanes = getNextLanes(root2, root2 === workInProgressRoot2 ? workInProgressRootRenderLanes2 : NoLanes);
              if (includesSyncLane(nextLanes)) {
                try {
                  didPerformSomeWork = true;
                  performSyncWorkOnRoot(root2);
                } catch (error3) {
                  if (errors === null) {
                    errors = [error3];
                  } else {
                    errors.push(error3);
                  }
                }
              }
            }
            root2 = root2.next;
          }
        } while (didPerformSomeWork);
        isFlushingWork = false;
        if (errors !== null) {
          if (errors.length > 1) {
            if (typeof AggregateError === "function") {
              throw new AggregateError(errors);
            } else {
              for (var i = 1;i < errors.length; i++) {
                scheduleImmediateTask(throwError.bind(null, errors[i]));
              }
              var firstError = errors[0];
              throw firstError;
            }
          } else {
            var error2 = errors[0];
            throw error2;
          }
        }
      }
      function throwError(error2) {
        throw error2;
      }
      function processRootScheduleInMicrotask() {
        didScheduleMicrotask = false;
        {
          didScheduleMicrotask_act = false;
        }
        mightHavePendingSyncWork = false;
        var currentTime = now$1();
        var prev = null;
        var root2 = firstScheduledRoot;
        while (root2 !== null) {
          var next = root2.next;
          if (currentEventTransitionLane !== NoLane && shouldAttemptEagerTransition()) {
            markRootEntangled(root2, mergeLanes(currentEventTransitionLane, SyncLane));
          }
          var nextLanes = scheduleTaskForRootDuringMicrotask(root2, currentTime);
          if (nextLanes === NoLane) {
            root2.next = null;
            if (prev === null) {
              firstScheduledRoot = next;
            } else {
              prev.next = next;
            }
            if (next === null) {
              lastScheduledRoot = prev;
            }
          } else {
            prev = root2;
            if (includesSyncLane(nextLanes)) {
              mightHavePendingSyncWork = true;
            }
          }
          root2 = next;
        }
        currentEventTransitionLane = NoLane;
        flushSyncWorkOnAllRoots();
      }
      function scheduleTaskForRootDuringMicrotask(root2, currentTime) {
        markStarvedLanesAsExpired(root2, currentTime);
        var workInProgressRoot2 = getWorkInProgressRoot();
        var workInProgressRootRenderLanes2 = getWorkInProgressRootRenderLanes();
        var nextLanes = getNextLanes(root2, root2 === workInProgressRoot2 ? workInProgressRootRenderLanes2 : NoLanes);
        var existingCallbackNode = root2.callbackNode;
        if (nextLanes === NoLanes || root2 === workInProgressRoot2 && isWorkLoopSuspendedOnData() || root2.cancelPendingCommit !== null) {
          if (existingCallbackNode !== null) {
            cancelCallback(existingCallbackNode);
          }
          root2.callbackNode = null;
          root2.callbackPriority = NoLane;
          return NoLane;
        }
        if (includesSyncLane(nextLanes)) {
          if (existingCallbackNode !== null) {
            cancelCallback(existingCallbackNode);
          }
          root2.callbackPriority = SyncLane;
          root2.callbackNode = null;
          return SyncLane;
        } else {
          var existingCallbackPriority = root2.callbackPriority;
          var newCallbackPriority = getHighestPriorityLane(nextLanes);
          if (newCallbackPriority === existingCallbackPriority && !(ReactCurrentActQueue$2.current !== null && existingCallbackNode !== fakeActCallbackNode$1)) {
            return newCallbackPriority;
          } else {
            cancelCallback(existingCallbackNode);
          }
          var schedulerPriorityLevel;
          switch (lanesToEventPriority(nextLanes)) {
            case DiscreteEventPriority:
              schedulerPriorityLevel = ImmediatePriority;
              break;
            case ContinuousEventPriority:
              schedulerPriorityLevel = UserBlockingPriority;
              break;
            case DefaultEventPriority:
              schedulerPriorityLevel = NormalPriority$1;
              break;
            case IdleEventPriority:
              schedulerPriorityLevel = IdlePriority;
              break;
            default:
              schedulerPriorityLevel = NormalPriority$1;
              break;
          }
          var newCallbackNode = scheduleCallback$2(schedulerPriorityLevel, performConcurrentWorkOnRoot.bind(null, root2));
          root2.callbackPriority = newCallbackPriority;
          root2.callbackNode = newCallbackNode;
          return newCallbackPriority;
        }
      }
      function getContinuationForRoot(root2, originalCallbackNode) {
        scheduleTaskForRootDuringMicrotask(root2, now$1());
        if (root2.callbackNode === originalCallbackNode) {
          return performConcurrentWorkOnRoot.bind(null, root2);
        }
        return null;
      }
      var fakeActCallbackNode$1 = {};
      function scheduleCallback$2(priorityLevel, callback) {
        if (ReactCurrentActQueue$2.current !== null) {
          ReactCurrentActQueue$2.current.push(callback);
          return fakeActCallbackNode$1;
        } else {
          return scheduleCallback$3(priorityLevel, callback);
        }
      }
      function cancelCallback(callbackNode) {
        if (callbackNode === fakeActCallbackNode$1)
          ;
        else if (callbackNode !== null) {
          cancelCallback$1(callbackNode);
        }
      }
      function scheduleImmediateTask(cb) {
        if (ReactCurrentActQueue$2.current !== null) {
          ReactCurrentActQueue$2.current.push(function() {
            cb();
            return null;
          });
        }
        {
          scheduleMicrotask(function() {
            var executionContext2 = getExecutionContext();
            if ((executionContext2 & (RenderContext | CommitContext)) !== NoContext) {
              scheduleCallback$3(ImmediatePriority, cb);
              return;
            }
            cb();
          });
        }
      }
      function requestTransitionLane() {
        if (currentEventTransitionLane === NoLane) {
          currentEventTransitionLane = claimNextTransitionLane();
        }
        return currentEventTransitionLane;
      }
      var currentEntangledListeners = null;
      var currentEntangledPendingCount = 0;
      var currentEntangledLane = NoLane;
      function requestAsyncActionContext(actionReturnValue, finishedState) {
        if (actionReturnValue !== null && typeof actionReturnValue === "object" && typeof actionReturnValue.then === "function") {
          var thenable = actionReturnValue;
          var entangledListeners;
          if (currentEntangledListeners === null) {
            entangledListeners = currentEntangledListeners = [];
            currentEntangledPendingCount = 0;
            currentEntangledLane = requestTransitionLane();
          } else {
            entangledListeners = currentEntangledListeners;
          }
          currentEntangledPendingCount++;
          var resultStatus = "pending";
          var rejectedReason;
          thenable.then(function() {
            resultStatus = "fulfilled";
            pingEngtangledActionScope();
          }, function(error2) {
            resultStatus = "rejected";
            rejectedReason = error2;
            pingEngtangledActionScope();
          });
          var resultThenable = createResultThenable(entangledListeners);
          entangledListeners.push(function() {
            switch (resultStatus) {
              case "fulfilled": {
                var fulfilledThenable = resultThenable;
                fulfilledThenable.status = "fulfilled";
                fulfilledThenable.value = finishedState;
                break;
              }
              case "rejected": {
                var rejectedThenable = resultThenable;
                rejectedThenable.status = "rejected";
                rejectedThenable.reason = rejectedReason;
                break;
              }
              case "pending":
              default: {
                throw new Error("Thenable should have already resolved. This " + "is a bug in React.");
              }
            }
          });
          return resultThenable;
        } else {
          if (currentEntangledListeners === null) {
            return finishedState;
          } else {
            var _entangledListeners = currentEntangledListeners;
            var _resultThenable = createResultThenable(_entangledListeners);
            _entangledListeners.push(function() {
              var fulfilledThenable = _resultThenable;
              fulfilledThenable.status = "fulfilled";
              fulfilledThenable.value = finishedState;
            });
            return _resultThenable;
          }
        }
      }
      function pingEngtangledActionScope() {
        if (currentEntangledListeners !== null && --currentEntangledPendingCount === 0) {
          var listeners = currentEntangledListeners;
          currentEntangledListeners = null;
          currentEntangledLane = NoLane;
          for (var i = 0;i < listeners.length; i++) {
            var listener = listeners[i];
            listener();
          }
        }
      }
      function createResultThenable(entangledListeners) {
        var resultThenable = {
          status: "pending",
          value: null,
          reason: null,
          then: function(resolve) {
            var ping = resolve;
            entangledListeners.push(ping);
          }
        };
        return resultThenable;
      }
      function peekEntangledActionLane() {
        return currentEntangledLane;
      }
      var { ReactCurrentDispatcher: ReactCurrentDispatcher$1, ReactCurrentBatchConfig: ReactCurrentBatchConfig$3 } = ReactSharedInternals;
      var didWarnAboutMismatchedHooksForComponent;
      var didWarnUncachedGetSnapshot;
      var didWarnAboutUseWrappedInTryCatch;
      {
        didWarnAboutMismatchedHooksForComponent = new Set;
        didWarnAboutUseWrappedInTryCatch = new Set;
      }
      var renderLanes$1 = NoLanes;
      var currentlyRenderingFiber$1 = null;
      var currentHook = null;
      var workInProgressHook = null;
      var didScheduleRenderPhaseUpdate = false;
      var didScheduleRenderPhaseUpdateDuringThisPass = false;
      var shouldDoubleInvokeUserFnsInHooksDEV = false;
      var localIdCounter = 0;
      var thenableIndexCounter = 0;
      var thenableState = null;
      var globalClientIdCounter = 0;
      var RE_RENDER_LIMIT = 25;
      var currentHookNameInDev = null;
      var hookTypesDev = null;
      var hookTypesUpdateIndexDev = -1;
      var ignorePreviousDependencies = false;
      function mountHookTypesDev() {
        {
          var hookName = currentHookNameInDev;
          if (hookTypesDev === null) {
            hookTypesDev = [hookName];
          } else {
            hookTypesDev.push(hookName);
          }
        }
      }
      function updateHookTypesDev() {
        {
          var hookName = currentHookNameInDev;
          if (hookTypesDev !== null) {
            hookTypesUpdateIndexDev++;
            if (hookTypesDev[hookTypesUpdateIndexDev] !== hookName) {
              warnOnHookMismatchInDev(hookName);
            }
          }
        }
      }
      function checkDepsAreArrayDev(deps) {
        {
          if (deps !== undefined && deps !== null && !isArray(deps)) {
            error("%s received a final argument that is not an array (instead, received `%s`). When " + "specified, the final argument must be an array.", currentHookNameInDev, typeof deps);
          }
        }
      }
      function warnOnHookMismatchInDev(currentHookName) {
        {
          var componentName = getComponentNameFromFiber(currentlyRenderingFiber$1);
          if (!didWarnAboutMismatchedHooksForComponent.has(componentName)) {
            didWarnAboutMismatchedHooksForComponent.add(componentName);
            if (hookTypesDev !== null) {
              var table = "";
              var secondColumnStart = 30;
              for (var i = 0;i <= hookTypesUpdateIndexDev; i++) {
                var oldHookName = hookTypesDev[i];
                var newHookName = i === hookTypesUpdateIndexDev ? currentHookName : oldHookName;
                var row = i + 1 + ". " + oldHookName;
                while (row.length < secondColumnStart) {
                  row += " ";
                }
                row += newHookName + `
`;
                table += row;
              }
              error("React has detected a change in the order of Hooks called by %s. " + "This will lead to bugs and errors if not fixed. " + `For more information, read the Rules of Hooks: https://reactjs.org/link/rules-of-hooks

` + `   Previous render            Next render
` + `   ------------------------------------------------------
` + "%s" + `   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
`, componentName, table);
            }
          }
        }
      }
      function throwInvalidHookError() {
        throw new Error("Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for" + ` one of the following reasons:
` + `1. You might have mismatching versions of React and the renderer (such as React DOM)
` + `2. You might be breaking the Rules of Hooks
` + `3. You might have more than one copy of React in the same app
` + "See https://reactjs.org/link/invalid-hook-call for tips about how to debug and fix this problem.");
      }
      function areHookInputsEqual(nextDeps, prevDeps) {
        {
          if (ignorePreviousDependencies) {
            return false;
          }
        }
        if (prevDeps === null) {
          {
            error("%s received a final argument during this render, but not during " + "the previous render. Even though the final argument is optional, " + "its type cannot change between renders.", currentHookNameInDev);
          }
          return false;
        }
        {
          if (nextDeps.length !== prevDeps.length) {
            error("The final argument passed to %s changed size between renders. The " + `order and size of this array must remain constant.

` + `Previous: %s
` + "Incoming: %s", currentHookNameInDev, "[" + prevDeps.join(", ") + "]", "[" + nextDeps.join(", ") + "]");
          }
        }
        for (var i = 0;i < prevDeps.length && i < nextDeps.length; i++) {
          if (objectIs(nextDeps[i], prevDeps[i])) {
            continue;
          }
          return false;
        }
        return true;
      }
      function renderWithHooks(current2, workInProgress2, Component, props, secondArg, nextRenderLanes) {
        renderLanes$1 = nextRenderLanes;
        currentlyRenderingFiber$1 = workInProgress2;
        {
          hookTypesDev = current2 !== null ? current2._debugHookTypes : null;
          hookTypesUpdateIndexDev = -1;
          ignorePreviousDependencies = current2 !== null && current2.type !== workInProgress2.type;
        }
        workInProgress2.memoizedState = null;
        workInProgress2.updateQueue = null;
        workInProgress2.lanes = NoLanes;
        {
          if (current2 !== null && current2.memoizedState !== null) {
            ReactCurrentDispatcher$1.current = HooksDispatcherOnUpdateInDEV;
          } else if (hookTypesDev !== null) {
            ReactCurrentDispatcher$1.current = HooksDispatcherOnMountWithHookTypesInDEV;
          } else {
            ReactCurrentDispatcher$1.current = HooksDispatcherOnMountInDEV;
          }
        }
        var shouldDoubleRenderDEV = (workInProgress2.mode & StrictLegacyMode) !== NoMode;
        shouldDoubleInvokeUserFnsInHooksDEV = shouldDoubleRenderDEV;
        var children = Component(props, secondArg);
        shouldDoubleInvokeUserFnsInHooksDEV = false;
        if (didScheduleRenderPhaseUpdateDuringThisPass) {
          children = renderWithHooksAgain(workInProgress2, Component, props, secondArg);
        }
        if (shouldDoubleRenderDEV) {
          setIsStrictModeForDevtools(true);
          try {
            children = renderWithHooksAgain(workInProgress2, Component, props, secondArg);
          } finally {
            setIsStrictModeForDevtools(false);
          }
        }
        finishRenderingHooks(current2, workInProgress2);
        return children;
      }
      function finishRenderingHooks(current2, workInProgress2) {
        ReactCurrentDispatcher$1.current = ContextOnlyDispatcher;
        {
          workInProgress2._debugHookTypes = hookTypesDev;
        }
        var didRenderTooFewHooks = currentHook !== null && currentHook.next !== null;
        renderLanes$1 = NoLanes;
        currentlyRenderingFiber$1 = null;
        currentHook = null;
        workInProgressHook = null;
        {
          currentHookNameInDev = null;
          hookTypesDev = null;
          hookTypesUpdateIndexDev = -1;
          if (current2 !== null && (current2.flags & StaticMask) !== (workInProgress2.flags & StaticMask) && (current2.mode & ConcurrentMode) !== NoMode) {
            error("Internal React error: Expected static flag was missing. Please " + "notify the React team.");
          }
        }
        didScheduleRenderPhaseUpdate = false;
        thenableIndexCounter = 0;
        thenableState = null;
        if (didRenderTooFewHooks) {
          throw new Error("Rendered fewer hooks than expected. This may be caused by an accidental " + "early return statement.");
        }
        {
          if (checkIfUseWrappedInTryCatch()) {
            var componentName = getComponentNameFromFiber(workInProgress2) || "Unknown";
            if (!didWarnAboutUseWrappedInTryCatch.has(componentName)) {
              didWarnAboutUseWrappedInTryCatch.add(componentName);
              error("`use` was called from inside a try/catch block. This is not allowed " + "and can lead to unexpected behavior. To handle errors triggered " + "by `use`, wrap your component in a error boundary.");
            }
          }
        }
      }
      function replaySuspendedComponentWithHooks(current2, workInProgress2, Component, props, secondArg) {
        {
          hookTypesUpdateIndexDev = -1;
          ignorePreviousDependencies = current2 !== null && current2.type !== workInProgress2.type;
        }
        var children = renderWithHooksAgain(workInProgress2, Component, props, secondArg);
        finishRenderingHooks(current2, workInProgress2);
        return children;
      }
      function renderWithHooksAgain(workInProgress2, Component, props, secondArg) {
        currentlyRenderingFiber$1 = workInProgress2;
        var numberOfReRenders = 0;
        var children;
        do {
          if (didScheduleRenderPhaseUpdateDuringThisPass) {
            thenableState = null;
          }
          thenableIndexCounter = 0;
          didScheduleRenderPhaseUpdateDuringThisPass = false;
          if (numberOfReRenders >= RE_RENDER_LIMIT) {
            throw new Error("Too many re-renders. React limits the number of renders to prevent " + "an infinite loop.");
          }
          numberOfReRenders += 1;
          {
            ignorePreviousDependencies = false;
          }
          currentHook = null;
          workInProgressHook = null;
          workInProgress2.updateQueue = null;
          {
            hookTypesUpdateIndexDev = -1;
          }
          ReactCurrentDispatcher$1.current = HooksDispatcherOnRerenderInDEV;
          children = Component(props, secondArg);
        } while (didScheduleRenderPhaseUpdateDuringThisPass);
        return children;
      }
      function renderTransitionAwareHostComponentWithHooks(current2, workInProgress2, lanes) {
        return renderWithHooks(current2, workInProgress2, TransitionAwareHostComponent, null, null, lanes);
      }
      function TransitionAwareHostComponent() {
        var dispatcher = ReactCurrentDispatcher$1.current;
        var _dispatcher$useState = dispatcher.useState(), maybeThenable = _dispatcher$useState[0];
        if (typeof maybeThenable.then === "function") {
          var thenable = maybeThenable;
          return useThenable(thenable);
        } else {
          var status = maybeThenable;
          return status;
        }
      }
      function checkDidRenderIdHook() {
        var didRenderIdHook = localIdCounter !== 0;
        localIdCounter = 0;
        return didRenderIdHook;
      }
      function bailoutHooks(current2, workInProgress2, lanes) {
        workInProgress2.updateQueue = current2.updateQueue;
        if ((workInProgress2.mode & StrictEffectsMode) !== NoMode) {
          workInProgress2.flags &= ~(MountPassiveDev | MountLayoutDev | Passive$1 | Update);
        } else {
          workInProgress2.flags &= ~(Passive$1 | Update);
        }
        current2.lanes = removeLanes(current2.lanes, lanes);
      }
      function resetHooksAfterThrow() {
        currentlyRenderingFiber$1 = null;
        ReactCurrentDispatcher$1.current = ContextOnlyDispatcher;
      }
      function resetHooksOnUnwind(workInProgress2) {
        if (didScheduleRenderPhaseUpdate) {
          var hook = workInProgress2.memoizedState;
          while (hook !== null) {
            var queue = hook.queue;
            if (queue !== null) {
              queue.pending = null;
            }
            hook = hook.next;
          }
          didScheduleRenderPhaseUpdate = false;
        }
        renderLanes$1 = NoLanes;
        currentlyRenderingFiber$1 = null;
        currentHook = null;
        workInProgressHook = null;
        {
          hookTypesDev = null;
          hookTypesUpdateIndexDev = -1;
          currentHookNameInDev = null;
        }
        didScheduleRenderPhaseUpdateDuringThisPass = false;
        localIdCounter = 0;
        thenableIndexCounter = 0;
        thenableState = null;
      }
      function mountWorkInProgressHook() {
        var hook = {
          memoizedState: null,
          baseState: null,
          baseQueue: null,
          queue: null,
          next: null
        };
        if (workInProgressHook === null) {
          currentlyRenderingFiber$1.memoizedState = workInProgressHook = hook;
        } else {
          workInProgressHook = workInProgressHook.next = hook;
        }
        return workInProgressHook;
      }
      function updateWorkInProgressHook() {
        var nextCurrentHook;
        if (currentHook === null) {
          var current2 = currentlyRenderingFiber$1.alternate;
          if (current2 !== null) {
            nextCurrentHook = current2.memoizedState;
          } else {
            nextCurrentHook = null;
          }
        } else {
          nextCurrentHook = currentHook.next;
        }
        var nextWorkInProgressHook;
        if (workInProgressHook === null) {
          nextWorkInProgressHook = currentlyRenderingFiber$1.memoizedState;
        } else {
          nextWorkInProgressHook = workInProgressHook.next;
        }
        if (nextWorkInProgressHook !== null) {
          workInProgressHook = nextWorkInProgressHook;
          nextWorkInProgressHook = workInProgressHook.next;
          currentHook = nextCurrentHook;
        } else {
          if (nextCurrentHook === null) {
            var currentFiber = currentlyRenderingFiber$1.alternate;
            if (currentFiber === null) {
              throw new Error("Update hook called on initial render. This is likely a bug in React. Please file an issue.");
            } else {
              throw new Error("Rendered more hooks than during the previous render.");
            }
          }
          currentHook = nextCurrentHook;
          var newHook = {
            memoizedState: currentHook.memoizedState,
            baseState: currentHook.baseState,
            baseQueue: currentHook.baseQueue,
            queue: currentHook.queue,
            next: null
          };
          if (workInProgressHook === null) {
            currentlyRenderingFiber$1.memoizedState = workInProgressHook = newHook;
          } else {
            workInProgressHook = workInProgressHook.next = newHook;
          }
        }
        return workInProgressHook;
      }
      var createFunctionComponentUpdateQueue;
      {
        createFunctionComponentUpdateQueue = function() {
          return {
            lastEffect: null,
            events: null,
            stores: null,
            memoCache: null
          };
        };
      }
      function useThenable(thenable) {
        var index2 = thenableIndexCounter;
        thenableIndexCounter += 1;
        if (thenableState === null) {
          thenableState = createThenableState();
        }
        var result = trackUsedThenable(thenableState, thenable, index2);
        if (currentlyRenderingFiber$1.alternate === null && (workInProgressHook === null ? currentlyRenderingFiber$1.memoizedState === null : workInProgressHook.next === null)) {
          {
            ReactCurrentDispatcher$1.current = HooksDispatcherOnMountInDEV;
          }
        }
        return result;
      }
      function use(usable) {
        if (usable !== null && typeof usable === "object") {
          if (typeof usable.then === "function") {
            var thenable = usable;
            return useThenable(thenable);
          } else if (usable.$$typeof === REACT_CONTEXT_TYPE || usable.$$typeof === REACT_SERVER_CONTEXT_TYPE) {
            var context = usable;
            return readContext(context);
          }
        }
        throw new Error("An unsupported type was passed to use(): " + String(usable));
      }
      function useMemoCache(size) {
        var memoCache = null;
        var updateQueue = currentlyRenderingFiber$1.updateQueue;
        if (updateQueue !== null) {
          memoCache = updateQueue.memoCache;
        }
        if (memoCache == null) {
          var current2 = currentlyRenderingFiber$1.alternate;
          if (current2 !== null) {
            var currentUpdateQueue = current2.updateQueue;
            if (currentUpdateQueue !== null) {
              var currentMemoCache = currentUpdateQueue.memoCache;
              if (currentMemoCache != null) {
                memoCache = {
                  data: currentMemoCache.data.map(function(array) {
                    return array.slice();
                  }),
                  index: 0
                };
              }
            }
          }
        }
        if (memoCache == null) {
          memoCache = {
            data: [],
            index: 0
          };
        }
        if (updateQueue === null) {
          updateQueue = createFunctionComponentUpdateQueue();
          currentlyRenderingFiber$1.updateQueue = updateQueue;
        }
        updateQueue.memoCache = memoCache;
        var data = memoCache.data[memoCache.index];
        if (data === undefined) {
          data = memoCache.data[memoCache.index] = new Array(size);
          for (var i = 0;i < size; i++) {
            data[i] = REACT_MEMO_CACHE_SENTINEL;
          }
        } else if (data.length !== size) {
          {
            error("Expected a constant size argument for each invocation of useMemoCache. " + "The previous cache was allocated with size %s but size %s was requested.", data.length, size);
          }
        }
        memoCache.index++;
        return data;
      }
      function basicStateReducer(state, action) {
        return typeof action === "function" ? action(state) : action;
      }
      function mountReducer(reducer, initialArg, init) {
        var hook = mountWorkInProgressHook();
        var initialState;
        if (init !== undefined) {
          initialState = init(initialArg);
        } else {
          initialState = initialArg;
        }
        hook.memoizedState = hook.baseState = initialState;
        var queue = {
          pending: null,
          lanes: NoLanes,
          dispatch: null,
          lastRenderedReducer: reducer,
          lastRenderedState: initialState
        };
        hook.queue = queue;
        var dispatch = queue.dispatch = dispatchReducerAction.bind(null, currentlyRenderingFiber$1, queue);
        return [hook.memoizedState, dispatch];
      }
      function updateReducer(reducer, initialArg, init) {
        var hook = updateWorkInProgressHook();
        return updateReducerImpl(hook, currentHook, reducer);
      }
      function updateReducerImpl(hook, current2, reducer) {
        var queue = hook.queue;
        if (queue === null) {
          throw new Error("Should have a queue. This is likely a bug in React. Please file an issue.");
        }
        queue.lastRenderedReducer = reducer;
        var baseQueue = hook.baseQueue;
        var pendingQueue = queue.pending;
        if (pendingQueue !== null) {
          if (baseQueue !== null) {
            var baseFirst = baseQueue.next;
            var pendingFirst = pendingQueue.next;
            baseQueue.next = pendingFirst;
            pendingQueue.next = baseFirst;
          }
          {
            if (current2.baseQueue !== baseQueue) {
              error("Internal error: Expected work-in-progress queue to be a clone. " + "This is a bug in React.");
            }
          }
          current2.baseQueue = baseQueue = pendingQueue;
          queue.pending = null;
        }
        if (baseQueue !== null) {
          var first = baseQueue.next;
          var newState = hook.baseState;
          var newBaseState = null;
          var newBaseQueueFirst = null;
          var newBaseQueueLast = null;
          var update = first;
          do {
            var updateLane = removeLanes(update.lane, OffscreenLane);
            var isHiddenUpdate = updateLane !== update.lane;
            var shouldSkipUpdate = isHiddenUpdate ? !isSubsetOfLanes(getWorkInProgressRootRenderLanes(), updateLane) : !isSubsetOfLanes(renderLanes$1, updateLane);
            if (shouldSkipUpdate) {
              var clone = {
                lane: updateLane,
                revertLane: update.revertLane,
                action: update.action,
                hasEagerState: update.hasEagerState,
                eagerState: update.eagerState,
                next: null
              };
              if (newBaseQueueLast === null) {
                newBaseQueueFirst = newBaseQueueLast = clone;
                newBaseState = newState;
              } else {
                newBaseQueueLast = newBaseQueueLast.next = clone;
              }
              currentlyRenderingFiber$1.lanes = mergeLanes(currentlyRenderingFiber$1.lanes, updateLane);
              markSkippedUpdateLanes(updateLane);
            } else {
              var revertLane = update.revertLane;
              if (revertLane === NoLane) {
                if (newBaseQueueLast !== null) {
                  var _clone = {
                    lane: NoLane,
                    revertLane: NoLane,
                    action: update.action,
                    hasEagerState: update.hasEagerState,
                    eagerState: update.eagerState,
                    next: null
                  };
                  newBaseQueueLast = newBaseQueueLast.next = _clone;
                }
              } else {
                if (isSubsetOfLanes(renderLanes$1, revertLane)) {
                  update = update.next;
                  continue;
                } else {
                  var _clone2 = {
                    lane: NoLane,
                    revertLane: update.revertLane,
                    action: update.action,
                    hasEagerState: update.hasEagerState,
                    eagerState: update.eagerState,
                    next: null
                  };
                  if (newBaseQueueLast === null) {
                    newBaseQueueFirst = newBaseQueueLast = _clone2;
                    newBaseState = newState;
                  } else {
                    newBaseQueueLast = newBaseQueueLast.next = _clone2;
                  }
                  currentlyRenderingFiber$1.lanes = mergeLanes(currentlyRenderingFiber$1.lanes, revertLane);
                  markSkippedUpdateLanes(revertLane);
                }
              }
              var action = update.action;
              if (shouldDoubleInvokeUserFnsInHooksDEV) {
                reducer(newState, action);
              }
              if (update.hasEagerState) {
                newState = update.eagerState;
              } else {
                newState = reducer(newState, action);
              }
            }
            update = update.next;
          } while (update !== null && update !== first);
          if (newBaseQueueLast === null) {
            newBaseState = newState;
          } else {
            newBaseQueueLast.next = newBaseQueueFirst;
          }
          if (!objectIs(newState, hook.memoizedState)) {
            markWorkInProgressReceivedUpdate();
          }
          hook.memoizedState = newState;
          hook.baseState = newBaseState;
          hook.baseQueue = newBaseQueueLast;
          queue.lastRenderedState = newState;
        }
        if (baseQueue === null) {
          queue.lanes = NoLanes;
        }
        var dispatch = queue.dispatch;
        return [hook.memoizedState, dispatch];
      }
      function rerenderReducer(reducer, initialArg, init) {
        var hook = updateWorkInProgressHook();
        var queue = hook.queue;
        if (queue === null) {
          throw new Error("Should have a queue. This is likely a bug in React. Please file an issue.");
        }
        queue.lastRenderedReducer = reducer;
        var dispatch = queue.dispatch;
        var lastRenderPhaseUpdate = queue.pending;
        var newState = hook.memoizedState;
        if (lastRenderPhaseUpdate !== null) {
          queue.pending = null;
          var firstRenderPhaseUpdate = lastRenderPhaseUpdate.next;
          var update = firstRenderPhaseUpdate;
          do {
            var action = update.action;
            newState = reducer(newState, action);
            update = update.next;
          } while (update !== firstRenderPhaseUpdate);
          if (!objectIs(newState, hook.memoizedState)) {
            markWorkInProgressReceivedUpdate();
          }
          hook.memoizedState = newState;
          if (hook.baseQueue === null) {
            hook.baseState = newState;
          }
          queue.lastRenderedState = newState;
        }
        return [newState, dispatch];
      }
      function mountMutableSource(source, getSnapshot, subscribe) {
        {
          return;
        }
      }
      function updateMutableSource(source, getSnapshot, subscribe) {
        {
          return;
        }
      }
      function mountSyncExternalStore(subscribe, getSnapshot, getServerSnapshot) {
        var fiber = currentlyRenderingFiber$1;
        var hook = mountWorkInProgressHook();
        var nextSnapshot;
        var isHydrating2 = getIsHydrating();
        if (isHydrating2) {
          if (getServerSnapshot === undefined) {
            throw new Error("Missing getServerSnapshot, which is required for " + "server-rendered content. Will revert to client rendering.");
          }
          nextSnapshot = getServerSnapshot();
          {
            if (!didWarnUncachedGetSnapshot) {
              if (nextSnapshot !== getServerSnapshot()) {
                error("The result of getServerSnapshot should be cached to avoid an infinite loop");
                didWarnUncachedGetSnapshot = true;
              }
            }
          }
        } else {
          nextSnapshot = getSnapshot();
          {
            if (!didWarnUncachedGetSnapshot) {
              var cachedSnapshot = getSnapshot();
              if (!objectIs(nextSnapshot, cachedSnapshot)) {
                error("The result of getSnapshot should be cached to avoid an infinite loop");
                didWarnUncachedGetSnapshot = true;
              }
            }
          }
          var root2 = getWorkInProgressRoot();
          if (root2 === null) {
            throw new Error("Expected a work-in-progress root. This is a bug in React. Please file an issue.");
          }
          if (!includesBlockingLane(root2, renderLanes$1)) {
            pushStoreConsistencyCheck(fiber, getSnapshot, nextSnapshot);
          }
        }
        hook.memoizedState = nextSnapshot;
        var inst = {
          value: nextSnapshot,
          getSnapshot
        };
        hook.queue = inst;
        mountEffect(subscribeToStore.bind(null, fiber, inst, subscribe), [subscribe]);
        fiber.flags |= Passive$1;
        pushEffect(HasEffect | Passive, updateStoreInstance.bind(null, fiber, inst, nextSnapshot, getSnapshot), createEffectInstance(), null);
        return nextSnapshot;
      }
      function updateSyncExternalStore(subscribe, getSnapshot, getServerSnapshot) {
        var fiber = currentlyRenderingFiber$1;
        var hook = updateWorkInProgressHook();
        var nextSnapshot = getSnapshot();
        {
          if (!didWarnUncachedGetSnapshot) {
            var cachedSnapshot = getSnapshot();
            if (!objectIs(nextSnapshot, cachedSnapshot)) {
              error("The result of getSnapshot should be cached to avoid an infinite loop");
              didWarnUncachedGetSnapshot = true;
            }
          }
        }
        var prevSnapshot = (currentHook || hook).memoizedState;
        var snapshotChanged = !objectIs(prevSnapshot, nextSnapshot);
        if (snapshotChanged) {
          hook.memoizedState = nextSnapshot;
          markWorkInProgressReceivedUpdate();
        }
        var inst = hook.queue;
        updateEffect(subscribeToStore.bind(null, fiber, inst, subscribe), [subscribe]);
        if (inst.getSnapshot !== getSnapshot || snapshotChanged || workInProgressHook !== null && workInProgressHook.memoizedState.tag & HasEffect) {
          fiber.flags |= Passive$1;
          pushEffect(HasEffect | Passive, updateStoreInstance.bind(null, fiber, inst, nextSnapshot, getSnapshot), createEffectInstance(), null);
          var root2 = getWorkInProgressRoot();
          if (root2 === null) {
            throw new Error("Expected a work-in-progress root. This is a bug in React. Please file an issue.");
          }
          if (!includesBlockingLane(root2, renderLanes$1)) {
            pushStoreConsistencyCheck(fiber, getSnapshot, nextSnapshot);
          }
        }
        return nextSnapshot;
      }
      function pushStoreConsistencyCheck(fiber, getSnapshot, renderedSnapshot) {
        fiber.flags |= StoreConsistency;
        var check = {
          getSnapshot,
          value: renderedSnapshot
        };
        var componentUpdateQueue = currentlyRenderingFiber$1.updateQueue;
        if (componentUpdateQueue === null) {
          componentUpdateQueue = createFunctionComponentUpdateQueue();
          currentlyRenderingFiber$1.updateQueue = componentUpdateQueue;
          componentUpdateQueue.stores = [check];
        } else {
          var stores = componentUpdateQueue.stores;
          if (stores === null) {
            componentUpdateQueue.stores = [check];
          } else {
            stores.push(check);
          }
        }
      }
      function updateStoreInstance(fiber, inst, nextSnapshot, getSnapshot) {
        inst.value = nextSnapshot;
        inst.getSnapshot = getSnapshot;
        if (checkIfSnapshotChanged(inst)) {
          forceStoreRerender(fiber);
        }
      }
      function subscribeToStore(fiber, inst, subscribe) {
        var handleStoreChange = function() {
          if (checkIfSnapshotChanged(inst)) {
            forceStoreRerender(fiber);
          }
        };
        return subscribe(handleStoreChange);
      }
      function checkIfSnapshotChanged(inst) {
        var latestGetSnapshot = inst.getSnapshot;
        var prevValue = inst.value;
        try {
          var nextValue = latestGetSnapshot();
          return !objectIs(prevValue, nextValue);
        } catch (error2) {
          return true;
        }
      }
      function forceStoreRerender(fiber) {
        var root2 = enqueueConcurrentRenderForLane(fiber, SyncLane);
        if (root2 !== null) {
          scheduleUpdateOnFiber(root2, fiber, SyncLane);
        }
      }
      function mountStateImpl(initialState) {
        var hook = mountWorkInProgressHook();
        if (typeof initialState === "function") {
          initialState = initialState();
        }
        hook.memoizedState = hook.baseState = initialState;
        var queue = {
          pending: null,
          lanes: NoLanes,
          dispatch: null,
          lastRenderedReducer: basicStateReducer,
          lastRenderedState: initialState
        };
        hook.queue = queue;
        return hook;
      }
      function mountState(initialState) {
        var hook = mountStateImpl(initialState);
        var queue = hook.queue;
        var dispatch = dispatchSetState.bind(null, currentlyRenderingFiber$1, queue);
        queue.dispatch = dispatch;
        return [hook.memoizedState, dispatch];
      }
      function updateState(initialState) {
        return updateReducer(basicStateReducer);
      }
      function rerenderState(initialState) {
        return rerenderReducer(basicStateReducer);
      }
      function mountOptimistic(passthrough, reducer) {
        var hook = mountWorkInProgressHook();
        hook.memoizedState = hook.baseState = passthrough;
        var queue = {
          pending: null,
          lanes: NoLanes,
          dispatch: null,
          lastRenderedReducer: null,
          lastRenderedState: null
        };
        hook.queue = queue;
        var dispatch = dispatchOptimisticSetState.bind(null, currentlyRenderingFiber$1, true, queue);
        queue.dispatch = dispatch;
        return [passthrough, dispatch];
      }
      function updateOptimistic(passthrough, reducer) {
        var hook = updateWorkInProgressHook();
        hook.baseState = hook.memoizedState = passthrough;
        var resolvedReducer = typeof reducer === "function" ? reducer : basicStateReducer;
        return updateReducerImpl(hook, currentHook, resolvedReducer);
      }
      function rerenderOptimistic(passthrough, reducer) {
        if (currentHook !== null) {
          return updateOptimistic(passthrough, reducer);
        }
        var hook = updateWorkInProgressHook();
        hook.baseState = hook.memoizedState = passthrough;
        var dispatch = hook.queue.dispatch;
        return [passthrough, dispatch];
      }
      function pushEffect(tag, create2, inst, deps) {
        var effect = {
          tag,
          create: create2,
          inst,
          deps,
          next: null
        };
        var componentUpdateQueue = currentlyRenderingFiber$1.updateQueue;
        if (componentUpdateQueue === null) {
          componentUpdateQueue = createFunctionComponentUpdateQueue();
          currentlyRenderingFiber$1.updateQueue = componentUpdateQueue;
          componentUpdateQueue.lastEffect = effect.next = effect;
        } else {
          var lastEffect = componentUpdateQueue.lastEffect;
          if (lastEffect === null) {
            componentUpdateQueue.lastEffect = effect.next = effect;
          } else {
            var firstEffect = lastEffect.next;
            lastEffect.next = effect;
            effect.next = firstEffect;
            componentUpdateQueue.lastEffect = effect;
          }
        }
        return effect;
      }
      function createEffectInstance() {
        return {
          destroy: undefined
        };
      }
      function mountRef(initialValue) {
        var hook = mountWorkInProgressHook();
        {
          var _ref2 = {
            current: initialValue
          };
          hook.memoizedState = _ref2;
          return _ref2;
        }
      }
      function updateRef(initialValue) {
        var hook = updateWorkInProgressHook();
        return hook.memoizedState;
      }
      function mountEffectImpl(fiberFlags, hookFlags, create2, deps) {
        var hook = mountWorkInProgressHook();
        var nextDeps = deps === undefined ? null : deps;
        currentlyRenderingFiber$1.flags |= fiberFlags;
        hook.memoizedState = pushEffect(HasEffect | hookFlags, create2, createEffectInstance(), nextDeps);
      }
      function updateEffectImpl(fiberFlags, hookFlags, create2, deps) {
        var hook = updateWorkInProgressHook();
        var nextDeps = deps === undefined ? null : deps;
        var effect = hook.memoizedState;
        var inst = effect.inst;
        if (currentHook !== null) {
          if (nextDeps !== null) {
            var prevEffect = currentHook.memoizedState;
            var prevDeps = prevEffect.deps;
            if (areHookInputsEqual(nextDeps, prevDeps)) {
              hook.memoizedState = pushEffect(hookFlags, create2, inst, nextDeps);
              return;
            }
          }
        }
        currentlyRenderingFiber$1.flags |= fiberFlags;
        hook.memoizedState = pushEffect(HasEffect | hookFlags, create2, inst, nextDeps);
      }
      function mountEffect(create2, deps) {
        if ((currentlyRenderingFiber$1.mode & StrictEffectsMode) !== NoMode) {
          mountEffectImpl(MountPassiveDev | Passive$1 | PassiveStatic, Passive, create2, deps);
        } else {
          mountEffectImpl(Passive$1 | PassiveStatic, Passive, create2, deps);
        }
      }
      function updateEffect(create2, deps) {
        updateEffectImpl(Passive$1, Passive, create2, deps);
      }
      function useEffectEventImpl(payload) {
        currentlyRenderingFiber$1.flags |= Update;
        var componentUpdateQueue = currentlyRenderingFiber$1.updateQueue;
        if (componentUpdateQueue === null) {
          componentUpdateQueue = createFunctionComponentUpdateQueue();
          currentlyRenderingFiber$1.updateQueue = componentUpdateQueue;
          componentUpdateQueue.events = [payload];
        } else {
          var events = componentUpdateQueue.events;
          if (events === null) {
            componentUpdateQueue.events = [payload];
          } else {
            events.push(payload);
          }
        }
      }
      function mountEvent(callback) {
        var hook = mountWorkInProgressHook();
        var ref = {
          impl: callback
        };
        hook.memoizedState = ref;
        return function eventFn() {
          if (isInvalidExecutionContextForEventFunction()) {
            throw new Error("A function wrapped in useEffectEvent can't be called during rendering.");
          }
          return ref.impl.apply(undefined, arguments);
        };
      }
      function updateEvent(callback) {
        var hook = updateWorkInProgressHook();
        var ref = hook.memoizedState;
        useEffectEventImpl({
          ref,
          nextImpl: callback
        });
        return function eventFn() {
          if (isInvalidExecutionContextForEventFunction()) {
            throw new Error("A function wrapped in useEffectEvent can't be called during rendering.");
          }
          return ref.impl.apply(undefined, arguments);
        };
      }
      function mountInsertionEffect(create2, deps) {
        mountEffectImpl(Update, Insertion, create2, deps);
      }
      function updateInsertionEffect(create2, deps) {
        return updateEffectImpl(Update, Insertion, create2, deps);
      }
      function mountLayoutEffect(create2, deps) {
        var fiberFlags = Update | LayoutStatic;
        if ((currentlyRenderingFiber$1.mode & StrictEffectsMode) !== NoMode) {
          fiberFlags |= MountLayoutDev;
        }
        return mountEffectImpl(fiberFlags, Layout, create2, deps);
      }
      function updateLayoutEffect(create2, deps) {
        return updateEffectImpl(Update, Layout, create2, deps);
      }
      function imperativeHandleEffect(create2, ref) {
        if (typeof ref === "function") {
          var refCallback = ref;
          var inst = create2();
          refCallback(inst);
          return function() {
            refCallback(null);
          };
        } else if (ref !== null && ref !== undefined) {
          var refObject = ref;
          {
            if (!refObject.hasOwnProperty("current")) {
              error("Expected useImperativeHandle() first argument to either be a " + "ref callback or React.createRef() object. Instead received: %s.", "an object with keys {" + Object.keys(refObject).join(", ") + "}");
            }
          }
          var _inst = create2();
          refObject.current = _inst;
          return function() {
            refObject.current = null;
          };
        }
      }
      function mountImperativeHandle(ref, create2, deps) {
        {
          if (typeof create2 !== "function") {
            error("Expected useImperativeHandle() second argument to be a function " + "that creates a handle. Instead received: %s.", create2 !== null ? typeof create2 : "null");
          }
        }
        var effectDeps = deps !== null && deps !== undefined ? deps.concat([ref]) : null;
        var fiberFlags = Update | LayoutStatic;
        if ((currentlyRenderingFiber$1.mode & StrictEffectsMode) !== NoMode) {
          fiberFlags |= MountLayoutDev;
        }
        mountEffectImpl(fiberFlags, Layout, imperativeHandleEffect.bind(null, create2, ref), effectDeps);
      }
      function updateImperativeHandle(ref, create2, deps) {
        {
          if (typeof create2 !== "function") {
            error("Expected useImperativeHandle() second argument to be a function " + "that creates a handle. Instead received: %s.", create2 !== null ? typeof create2 : "null");
          }
        }
        var effectDeps = deps !== null && deps !== undefined ? deps.concat([ref]) : null;
        updateEffectImpl(Update, Layout, imperativeHandleEffect.bind(null, create2, ref), effectDeps);
      }
      function mountDebugValue(value, formatterFn) {}
      var updateDebugValue = mountDebugValue;
      function mountCallback(callback, deps) {
        var hook = mountWorkInProgressHook();
        var nextDeps = deps === undefined ? null : deps;
        hook.memoizedState = [callback, nextDeps];
        return callback;
      }
      function updateCallback(callback, deps) {
        var hook = updateWorkInProgressHook();
        var nextDeps = deps === undefined ? null : deps;
        var prevState = hook.memoizedState;
        if (nextDeps !== null) {
          var prevDeps = prevState[1];
          if (areHookInputsEqual(nextDeps, prevDeps)) {
            return prevState[0];
          }
        }
        hook.memoizedState = [callback, nextDeps];
        return callback;
      }
      function mountMemo(nextCreate, deps) {
        var hook = mountWorkInProgressHook();
        var nextDeps = deps === undefined ? null : deps;
        if (shouldDoubleInvokeUserFnsInHooksDEV) {
          nextCreate();
        }
        var nextValue = nextCreate();
        hook.memoizedState = [nextValue, nextDeps];
        return nextValue;
      }
      function updateMemo(nextCreate, deps) {
        var hook = updateWorkInProgressHook();
        var nextDeps = deps === undefined ? null : deps;
        var prevState = hook.memoizedState;
        if (nextDeps !== null) {
          var prevDeps = prevState[1];
          if (areHookInputsEqual(nextDeps, prevDeps)) {
            return prevState[0];
          }
        }
        if (shouldDoubleInvokeUserFnsInHooksDEV) {
          nextCreate();
        }
        var nextValue = nextCreate();
        hook.memoizedState = [nextValue, nextDeps];
        return nextValue;
      }
      function mountDeferredValue(value) {
        var hook = mountWorkInProgressHook();
        hook.memoizedState = value;
        return value;
      }
      function updateDeferredValue(value) {
        var hook = updateWorkInProgressHook();
        var resolvedCurrentHook = currentHook;
        var prevValue = resolvedCurrentHook.memoizedState;
        return updateDeferredValueImpl(hook, prevValue, value);
      }
      function rerenderDeferredValue(value) {
        var hook = updateWorkInProgressHook();
        if (currentHook === null) {
          hook.memoizedState = value;
          return value;
        } else {
          var prevValue = currentHook.memoizedState;
          return updateDeferredValueImpl(hook, prevValue, value);
        }
      }
      function updateDeferredValueImpl(hook, prevValue, value) {
        var shouldDeferValue = !includesOnlyNonUrgentLanes(renderLanes$1);
        if (shouldDeferValue) {
          if (!objectIs(value, prevValue)) {
            var deferredLane = claimNextTransitionLane();
            currentlyRenderingFiber$1.lanes = mergeLanes(currentlyRenderingFiber$1.lanes, deferredLane);
            markSkippedUpdateLanes(deferredLane);
            hook.baseState = true;
          }
          return prevValue;
        } else {
          if (hook.baseState) {
            hook.baseState = false;
            markWorkInProgressReceivedUpdate();
          }
          hook.memoizedState = value;
          return value;
        }
      }
      function startTransition(fiber, queue, pendingState, finishedState, callback, options2) {
        var previousPriority = getCurrentUpdatePriority();
        setCurrentUpdatePriority(higherEventPriority(previousPriority, ContinuousEventPriority));
        var prevTransition = ReactCurrentBatchConfig$3.transition;
        {
          dispatchOptimisticSetState(fiber, false, queue, pendingState);
        }
        var currentTransition = ReactCurrentBatchConfig$3.transition = {};
        {
          ReactCurrentBatchConfig$3.transition._updatedFibers = new Set;
        }
        try {
          if (enableAsyncActions) {
            var returnValue = callback();
            var maybeThenable = requestAsyncActionContext(returnValue, finishedState);
            dispatchSetState(fiber, queue, maybeThenable);
          }
        } catch (error2) {
          {
            var rejectedThenable = {
              then: function() {},
              status: "rejected",
              reason: error2
            };
            dispatchSetState(fiber, queue, rejectedThenable);
          }
        } finally {
          setCurrentUpdatePriority(previousPriority);
          ReactCurrentBatchConfig$3.transition = prevTransition;
          {
            if (prevTransition === null && currentTransition._updatedFibers) {
              var updatedFibersCount = currentTransition._updatedFibers.size;
              currentTransition._updatedFibers.clear();
              if (updatedFibersCount > 10) {
                warn("Detected a large number of updates inside startTransition. " + "If this is due to a subscription please re-write it to use React provided hooks. " + "Otherwise concurrent mode guarantees are off the table.");
              }
            }
          }
        }
      }
      function startHostTransition(formFiber, pendingState, callback, formData) {
        if (formFiber.tag !== HostComponent) {
          throw new Error("Expected the form instance to be a HostComponent. This " + "is a bug in React.");
        }
        var queue;
        if (formFiber.memoizedState === null) {
          var newQueue = {
            pending: null,
            lanes: NoLanes,
            dispatch: null,
            lastRenderedReducer: basicStateReducer,
            lastRenderedState: NotPendingTransition
          };
          queue = newQueue;
          var stateHook = {
            memoizedState: NotPendingTransition,
            baseState: NotPendingTransition,
            baseQueue: null,
            queue: newQueue,
            next: null
          };
          formFiber.memoizedState = stateHook;
          var alternate = formFiber.alternate;
          if (alternate !== null) {
            alternate.memoizedState = stateHook;
          }
        } else {
          var _stateHook = formFiber.memoizedState;
          queue = _stateHook.queue;
        }
        startTransition(formFiber, queue, pendingState, NotPendingTransition, function() {
          return callback(formData);
        });
      }
      function mountTransition() {
        var stateHook = mountStateImpl(false);
        var start = startTransition.bind(null, currentlyRenderingFiber$1, stateHook.queue, true, false);
        var hook = mountWorkInProgressHook();
        hook.memoizedState = start;
        return [false, start];
      }
      function updateTransition() {
        var _updateState = updateState(), booleanOrThenable = _updateState[0];
        var hook = updateWorkInProgressHook();
        var start = hook.memoizedState;
        var isPending = typeof booleanOrThenable === "boolean" ? booleanOrThenable : useThenable(booleanOrThenable);
        return [isPending, start];
      }
      function rerenderTransition() {
        var _rerenderState = rerenderState(), booleanOrThenable = _rerenderState[0];
        var hook = updateWorkInProgressHook();
        var start = hook.memoizedState;
        var isPending = typeof booleanOrThenable === "boolean" ? booleanOrThenable : useThenable(booleanOrThenable);
        return [isPending, start];
      }
      function useHostTransitionStatus() {
        var status = readContext(HostTransitionContext);
        return status !== null ? status : NotPendingTransition;
      }
      function mountId() {
        var hook = mountWorkInProgressHook();
        var root2 = getWorkInProgressRoot();
        var identifierPrefix = root2.identifierPrefix;
        var id;
        if (getIsHydrating()) {
          var treeId = getTreeId();
          id = ":" + identifierPrefix + "R" + treeId;
          var localId = localIdCounter++;
          if (localId > 0) {
            id += "H" + localId.toString(32);
          }
          id += ":";
        } else {
          var globalClientId = globalClientIdCounter++;
          id = ":" + identifierPrefix + "r" + globalClientId.toString(32) + ":";
        }
        hook.memoizedState = id;
        return id;
      }
      function updateId() {
        var hook = updateWorkInProgressHook();
        var id = hook.memoizedState;
        return id;
      }
      function mountRefresh() {
        var hook = mountWorkInProgressHook();
        var refresh = hook.memoizedState = refreshCache.bind(null, currentlyRenderingFiber$1);
        return refresh;
      }
      function updateRefresh() {
        var hook = updateWorkInProgressHook();
        return hook.memoizedState;
      }
      function refreshCache(fiber, seedKey, seedValue) {
        var provider = fiber.return;
        while (provider !== null) {
          switch (provider.tag) {
            case CacheComponent:
            case HostRoot: {
              var lane = requestUpdateLane(provider);
              var refreshUpdate = createUpdate(lane);
              var root2 = enqueueUpdate(provider, refreshUpdate, lane);
              if (root2 !== null) {
                scheduleUpdateOnFiber(root2, provider, lane);
                entangleTransitions(root2, provider, lane);
              }
              var seededCache = createCache();
              if (seedKey !== null && seedKey !== undefined && root2 !== null) {
                {
                  seededCache.data.set(seedKey, seedValue);
                }
              }
              var payload = {
                cache: seededCache
              };
              refreshUpdate.payload = payload;
              return;
            }
          }
          provider = provider.return;
        }
      }
      function dispatchReducerAction(fiber, queue, action) {
        {
          if (typeof arguments[3] === "function") {
            error("State updates from the useState() and useReducer() Hooks don't support the " + "second callback argument. To execute a side effect after " + "rendering, declare it in the component body with useEffect().");
          }
        }
        var lane = requestUpdateLane(fiber);
        var update = {
          lane,
          revertLane: NoLane,
          action,
          hasEagerState: false,
          eagerState: null,
          next: null
        };
        if (isRenderPhaseUpdate(fiber)) {
          enqueueRenderPhaseUpdate(queue, update);
        } else {
          var root2 = enqueueConcurrentHookUpdate(fiber, queue, update, lane);
          if (root2 !== null) {
            scheduleUpdateOnFiber(root2, fiber, lane);
            entangleTransitionUpdate(root2, queue, lane);
          }
        }
        markUpdateInDevTools(fiber, lane);
      }
      function dispatchSetState(fiber, queue, action) {
        {
          if (typeof arguments[3] === "function") {
            error("State updates from the useState() and useReducer() Hooks don't support the " + "second callback argument. To execute a side effect after " + "rendering, declare it in the component body with useEffect().");
          }
        }
        var lane = requestUpdateLane(fiber);
        var update = {
          lane,
          revertLane: NoLane,
          action,
          hasEagerState: false,
          eagerState: null,
          next: null
        };
        if (isRenderPhaseUpdate(fiber)) {
          enqueueRenderPhaseUpdate(queue, update);
        } else {
          var alternate = fiber.alternate;
          if (fiber.lanes === NoLanes && (alternate === null || alternate.lanes === NoLanes)) {
            var lastRenderedReducer = queue.lastRenderedReducer;
            if (lastRenderedReducer !== null) {
              var prevDispatcher;
              {
                prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
              }
              try {
                var currentState = queue.lastRenderedState;
                var eagerState = lastRenderedReducer(currentState, action);
                update.hasEagerState = true;
                update.eagerState = eagerState;
                if (objectIs(eagerState, currentState)) {
                  enqueueConcurrentHookUpdateAndEagerlyBailout(fiber, queue, update);
                  return;
                }
              } catch (error2) {} finally {
                {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              }
            }
          }
          var root2 = enqueueConcurrentHookUpdate(fiber, queue, update, lane);
          if (root2 !== null) {
            scheduleUpdateOnFiber(root2, fiber, lane);
            entangleTransitionUpdate(root2, queue, lane);
          }
        }
        markUpdateInDevTools(fiber, lane);
      }
      function dispatchOptimisticSetState(fiber, throwIfDuringRender, queue, action) {
        var update = {
          lane: SyncLane,
          revertLane: requestTransitionLane(),
          action,
          hasEagerState: false,
          eagerState: null,
          next: null
        };
        if (isRenderPhaseUpdate(fiber)) {
          if (throwIfDuringRender) {
            throw new Error("Cannot update optimistic state while rendering.");
          } else {
            {
              error("Cannot call startTransition while rendering.");
            }
          }
        } else {
          var root2 = enqueueConcurrentHookUpdate(fiber, queue, update, SyncLane);
          if (root2 !== null) {
            scheduleUpdateOnFiber(root2, fiber, SyncLane);
          }
        }
        markUpdateInDevTools(fiber, SyncLane);
      }
      function isRenderPhaseUpdate(fiber) {
        var alternate = fiber.alternate;
        return fiber === currentlyRenderingFiber$1 || alternate !== null && alternate === currentlyRenderingFiber$1;
      }
      function enqueueRenderPhaseUpdate(queue, update) {
        didScheduleRenderPhaseUpdateDuringThisPass = didScheduleRenderPhaseUpdate = true;
        var pending = queue.pending;
        if (pending === null) {
          update.next = update;
        } else {
          update.next = pending.next;
          pending.next = update;
        }
        queue.pending = update;
      }
      function entangleTransitionUpdate(root2, queue, lane) {
        if (isTransitionLane(lane)) {
          var queueLanes = queue.lanes;
          queueLanes = intersectLanes(queueLanes, root2.pendingLanes);
          var newQueueLanes = mergeLanes(queueLanes, lane);
          queue.lanes = newQueueLanes;
          markRootEntangled(root2, newQueueLanes);
        }
      }
      function markUpdateInDevTools(fiber, lane, action) {
        {
          markStateUpdateScheduled(fiber, lane);
        }
      }
      var ContextOnlyDispatcher = {
        readContext,
        use,
        useCallback: throwInvalidHookError,
        useContext: throwInvalidHookError,
        useEffect: throwInvalidHookError,
        useImperativeHandle: throwInvalidHookError,
        useInsertionEffect: throwInvalidHookError,
        useLayoutEffect: throwInvalidHookError,
        useMemo: throwInvalidHookError,
        useReducer: throwInvalidHookError,
        useRef: throwInvalidHookError,
        useState: throwInvalidHookError,
        useDebugValue: throwInvalidHookError,
        useDeferredValue: throwInvalidHookError,
        useTransition: throwInvalidHookError,
        useMutableSource: throwInvalidHookError,
        useSyncExternalStore: throwInvalidHookError,
        useId: throwInvalidHookError
      };
      {
        ContextOnlyDispatcher.useCacheRefresh = throwInvalidHookError;
      }
      {
        ContextOnlyDispatcher.useMemoCache = throwInvalidHookError;
      }
      {
        ContextOnlyDispatcher.useEffectEvent = throwInvalidHookError;
      }
      {
        ContextOnlyDispatcher.useHostTransitionStatus = throwInvalidHookError;
      }
      {
        ContextOnlyDispatcher.useOptimistic = throwInvalidHookError;
      }
      var HooksDispatcherOnMountInDEV = null;
      var HooksDispatcherOnMountWithHookTypesInDEV = null;
      var HooksDispatcherOnUpdateInDEV = null;
      var HooksDispatcherOnRerenderInDEV = null;
      var InvalidNestedHooksDispatcherOnMountInDEV = null;
      var InvalidNestedHooksDispatcherOnUpdateInDEV = null;
      var InvalidNestedHooksDispatcherOnRerenderInDEV = null;
      {
        var warnInvalidContextAccess = function() {
          error("Context can only be read while React is rendering. " + "In classes, you can read it in the render method or getDerivedStateFromProps. " + "In function components, you can read it directly in the function body, but not " + "inside Hooks like useReducer() or useMemo().");
        };
        var warnInvalidHookAccess = function() {
          error("Do not call Hooks inside useEffect(...), useMemo(...), or other built-in Hooks. " + "You can only call Hooks at the top level of your React function. " + "For more information, see " + "https://reactjs.org/link/rules-of-hooks");
        };
        HooksDispatcherOnMountInDEV = {
          readContext: function(context) {
            return readContext(context);
          },
          use,
          useCallback: function(callback, deps) {
            currentHookNameInDev = "useCallback";
            mountHookTypesDev();
            checkDepsAreArrayDev(deps);
            return mountCallback(callback, deps);
          },
          useContext: function(context) {
            currentHookNameInDev = "useContext";
            mountHookTypesDev();
            return readContext(context);
          },
          useEffect: function(create2, deps) {
            currentHookNameInDev = "useEffect";
            mountHookTypesDev();
            checkDepsAreArrayDev(deps);
            return mountEffect(create2, deps);
          },
          useImperativeHandle: function(ref, create2, deps) {
            currentHookNameInDev = "useImperativeHandle";
            mountHookTypesDev();
            checkDepsAreArrayDev(deps);
            return mountImperativeHandle(ref, create2, deps);
          },
          useInsertionEffect: function(create2, deps) {
            currentHookNameInDev = "useInsertionEffect";
            mountHookTypesDev();
            checkDepsAreArrayDev(deps);
            return mountInsertionEffect(create2, deps);
          },
          useLayoutEffect: function(create2, deps) {
            currentHookNameInDev = "useLayoutEffect";
            mountHookTypesDev();
            checkDepsAreArrayDev(deps);
            return mountLayoutEffect(create2, deps);
          },
          useMemo: function(create2, deps) {
            currentHookNameInDev = "useMemo";
            mountHookTypesDev();
            checkDepsAreArrayDev(deps);
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
            try {
              return mountMemo(create2, deps);
            } finally {
              ReactCurrentDispatcher$1.current = prevDispatcher;
            }
          },
          useReducer: function(reducer, initialArg, init) {
            currentHookNameInDev = "useReducer";
            mountHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
            try {
              return mountReducer(reducer, initialArg, init);
            } finally {
              ReactCurrentDispatcher$1.current = prevDispatcher;
            }
          },
          useRef: function(initialValue) {
            currentHookNameInDev = "useRef";
            mountHookTypesDev();
            return mountRef(initialValue);
          },
          useState: function(initialState) {
            currentHookNameInDev = "useState";
            mountHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
            try {
              return mountState(initialState);
            } finally {
              ReactCurrentDispatcher$1.current = prevDispatcher;
            }
          },
          useDebugValue: function(value, formatterFn) {
            currentHookNameInDev = "useDebugValue";
            mountHookTypesDev();
            return mountDebugValue();
          },
          useDeferredValue: function(value) {
            currentHookNameInDev = "useDeferredValue";
            mountHookTypesDev();
            return mountDeferredValue(value);
          },
          useTransition: function() {
            currentHookNameInDev = "useTransition";
            mountHookTypesDev();
            return mountTransition();
          },
          useMutableSource: function(source, getSnapshot, subscribe) {
            currentHookNameInDev = "useMutableSource";
            mountHookTypesDev();
            return mountMutableSource();
          },
          useSyncExternalStore: function(subscribe, getSnapshot, getServerSnapshot) {
            currentHookNameInDev = "useSyncExternalStore";
            mountHookTypesDev();
            return mountSyncExternalStore(subscribe, getSnapshot, getServerSnapshot);
          },
          useId: function() {
            currentHookNameInDev = "useId";
            mountHookTypesDev();
            return mountId();
          }
        };
        {
          HooksDispatcherOnMountInDEV.useCacheRefresh = function useCacheRefresh() {
            currentHookNameInDev = "useCacheRefresh";
            mountHookTypesDev();
            return mountRefresh();
          };
        }
        {
          HooksDispatcherOnMountInDEV.useMemoCache = useMemoCache;
        }
        {
          HooksDispatcherOnMountInDEV.useEffectEvent = function useEffectEvent(callback) {
            currentHookNameInDev = "useEffectEvent";
            mountHookTypesDev();
            return mountEvent(callback);
          };
        }
        {
          HooksDispatcherOnMountInDEV.useHostTransitionStatus = useHostTransitionStatus;
        }
        {
          HooksDispatcherOnMountInDEV.useOptimistic = function useOptimistic(passthrough, reducer) {
            currentHookNameInDev = "useOptimistic";
            mountHookTypesDev();
            return mountOptimistic(passthrough);
          };
        }
        HooksDispatcherOnMountWithHookTypesInDEV = {
          readContext: function(context) {
            return readContext(context);
          },
          use,
          useCallback: function(callback, deps) {
            currentHookNameInDev = "useCallback";
            updateHookTypesDev();
            return mountCallback(callback, deps);
          },
          useContext: function(context) {
            currentHookNameInDev = "useContext";
            updateHookTypesDev();
            return readContext(context);
          },
          useEffect: function(create2, deps) {
            currentHookNameInDev = "useEffect";
            updateHookTypesDev();
            return mountEffect(create2, deps);
          },
          useImperativeHandle: function(ref, create2, deps) {
            currentHookNameInDev = "useImperativeHandle";
            updateHookTypesDev();
            return mountImperativeHandle(ref, create2, deps);
          },
          useInsertionEffect: function(create2, deps) {
            currentHookNameInDev = "useInsertionEffect";
            updateHookTypesDev();
            return mountInsertionEffect(create2, deps);
          },
          useLayoutEffect: function(create2, deps) {
            currentHookNameInDev = "useLayoutEffect";
            updateHookTypesDev();
            return mountLayoutEffect(create2, deps);
          },
          useMemo: function(create2, deps) {
            currentHookNameInDev = "useMemo";
            updateHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
            try {
              return mountMemo(create2, deps);
            } finally {
              ReactCurrentDispatcher$1.current = prevDispatcher;
            }
          },
          useReducer: function(reducer, initialArg, init) {
            currentHookNameInDev = "useReducer";
            updateHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
            try {
              return mountReducer(reducer, initialArg, init);
            } finally {
              ReactCurrentDispatcher$1.current = prevDispatcher;
            }
          },
          useRef: function(initialValue) {
            currentHookNameInDev = "useRef";
            updateHookTypesDev();
            return mountRef(initialValue);
          },
          useState: function(initialState) {
            currentHookNameInDev = "useState";
            updateHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
            try {
              return mountState(initialState);
            } finally {
              ReactCurrentDispatcher$1.current = prevDispatcher;
            }
          },
          useDebugValue: function(value, formatterFn) {
            currentHookNameInDev = "useDebugValue";
            updateHookTypesDev();
            return mountDebugValue();
          },
          useDeferredValue: function(value) {
            currentHookNameInDev = "useDeferredValue";
            updateHookTypesDev();
            return mountDeferredValue(value);
          },
          useTransition: function() {
            currentHookNameInDev = "useTransition";
            updateHookTypesDev();
            return mountTransition();
          },
          useMutableSource: function(source, getSnapshot, subscribe) {
            currentHookNameInDev = "useMutableSource";
            updateHookTypesDev();
            return mountMutableSource();
          },
          useSyncExternalStore: function(subscribe, getSnapshot, getServerSnapshot) {
            currentHookNameInDev = "useSyncExternalStore";
            updateHookTypesDev();
            return mountSyncExternalStore(subscribe, getSnapshot, getServerSnapshot);
          },
          useId: function() {
            currentHookNameInDev = "useId";
            updateHookTypesDev();
            return mountId();
          }
        };
        {
          HooksDispatcherOnMountWithHookTypesInDEV.useCacheRefresh = function useCacheRefresh() {
            currentHookNameInDev = "useCacheRefresh";
            updateHookTypesDev();
            return mountRefresh();
          };
        }
        {
          HooksDispatcherOnMountWithHookTypesInDEV.useMemoCache = useMemoCache;
        }
        {
          HooksDispatcherOnMountWithHookTypesInDEV.useEffectEvent = function useEffectEvent(callback) {
            currentHookNameInDev = "useEffectEvent";
            updateHookTypesDev();
            return mountEvent(callback);
          };
        }
        {
          HooksDispatcherOnMountWithHookTypesInDEV.useHostTransitionStatus = useHostTransitionStatus;
        }
        {
          HooksDispatcherOnMountWithHookTypesInDEV.useOptimistic = function useOptimistic(passthrough, reducer) {
            currentHookNameInDev = "useOptimistic";
            updateHookTypesDev();
            return mountOptimistic(passthrough);
          };
        }
        HooksDispatcherOnUpdateInDEV = {
          readContext: function(context) {
            return readContext(context);
          },
          use,
          useCallback: function(callback, deps) {
            currentHookNameInDev = "useCallback";
            updateHookTypesDev();
            return updateCallback(callback, deps);
          },
          useContext: function(context) {
            currentHookNameInDev = "useContext";
            updateHookTypesDev();
            return readContext(context);
          },
          useEffect: function(create2, deps) {
            currentHookNameInDev = "useEffect";
            updateHookTypesDev();
            return updateEffect(create2, deps);
          },
          useImperativeHandle: function(ref, create2, deps) {
            currentHookNameInDev = "useImperativeHandle";
            updateHookTypesDev();
            return updateImperativeHandle(ref, create2, deps);
          },
          useInsertionEffect: function(create2, deps) {
            currentHookNameInDev = "useInsertionEffect";
            updateHookTypesDev();
            return updateInsertionEffect(create2, deps);
          },
          useLayoutEffect: function(create2, deps) {
            currentHookNameInDev = "useLayoutEffect";
            updateHookTypesDev();
            return updateLayoutEffect(create2, deps);
          },
          useMemo: function(create2, deps) {
            currentHookNameInDev = "useMemo";
            updateHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
            try {
              return updateMemo(create2, deps);
            } finally {
              ReactCurrentDispatcher$1.current = prevDispatcher;
            }
          },
          useReducer: function(reducer, initialArg, init) {
            currentHookNameInDev = "useReducer";
            updateHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
            try {
              return updateReducer(reducer, initialArg, init);
            } finally {
              ReactCurrentDispatcher$1.current = prevDispatcher;
            }
          },
          useRef: function(initialValue) {
            currentHookNameInDev = "useRef";
            updateHookTypesDev();
            return updateRef();
          },
          useState: function(initialState) {
            currentHookNameInDev = "useState";
            updateHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
            try {
              return updateState(initialState);
            } finally {
              ReactCurrentDispatcher$1.current = prevDispatcher;
            }
          },
          useDebugValue: function(value, formatterFn) {
            currentHookNameInDev = "useDebugValue";
            updateHookTypesDev();
            return updateDebugValue();
          },
          useDeferredValue: function(value) {
            currentHookNameInDev = "useDeferredValue";
            updateHookTypesDev();
            return updateDeferredValue(value);
          },
          useTransition: function() {
            currentHookNameInDev = "useTransition";
            updateHookTypesDev();
            return updateTransition();
          },
          useMutableSource: function(source, getSnapshot, subscribe) {
            currentHookNameInDev = "useMutableSource";
            updateHookTypesDev();
            return updateMutableSource();
          },
          useSyncExternalStore: function(subscribe, getSnapshot, getServerSnapshot) {
            currentHookNameInDev = "useSyncExternalStore";
            updateHookTypesDev();
            return updateSyncExternalStore(subscribe, getSnapshot);
          },
          useId: function() {
            currentHookNameInDev = "useId";
            updateHookTypesDev();
            return updateId();
          }
        };
        {
          HooksDispatcherOnUpdateInDEV.useCacheRefresh = function useCacheRefresh() {
            currentHookNameInDev = "useCacheRefresh";
            updateHookTypesDev();
            return updateRefresh();
          };
        }
        {
          HooksDispatcherOnUpdateInDEV.useMemoCache = useMemoCache;
        }
        {
          HooksDispatcherOnUpdateInDEV.useEffectEvent = function useEffectEvent(callback) {
            currentHookNameInDev = "useEffectEvent";
            updateHookTypesDev();
            return updateEvent(callback);
          };
        }
        {
          HooksDispatcherOnUpdateInDEV.useHostTransitionStatus = useHostTransitionStatus;
        }
        {
          HooksDispatcherOnUpdateInDEV.useOptimistic = function useOptimistic(passthrough, reducer) {
            currentHookNameInDev = "useOptimistic";
            updateHookTypesDev();
            return updateOptimistic(passthrough, reducer);
          };
        }
        HooksDispatcherOnRerenderInDEV = {
          readContext: function(context) {
            return readContext(context);
          },
          use,
          useCallback: function(callback, deps) {
            currentHookNameInDev = "useCallback";
            updateHookTypesDev();
            return updateCallback(callback, deps);
          },
          useContext: function(context) {
            currentHookNameInDev = "useContext";
            updateHookTypesDev();
            return readContext(context);
          },
          useEffect: function(create2, deps) {
            currentHookNameInDev = "useEffect";
            updateHookTypesDev();
            return updateEffect(create2, deps);
          },
          useImperativeHandle: function(ref, create2, deps) {
            currentHookNameInDev = "useImperativeHandle";
            updateHookTypesDev();
            return updateImperativeHandle(ref, create2, deps);
          },
          useInsertionEffect: function(create2, deps) {
            currentHookNameInDev = "useInsertionEffect";
            updateHookTypesDev();
            return updateInsertionEffect(create2, deps);
          },
          useLayoutEffect: function(create2, deps) {
            currentHookNameInDev = "useLayoutEffect";
            updateHookTypesDev();
            return updateLayoutEffect(create2, deps);
          },
          useMemo: function(create2, deps) {
            currentHookNameInDev = "useMemo";
            updateHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnRerenderInDEV;
            try {
              return updateMemo(create2, deps);
            } finally {
              ReactCurrentDispatcher$1.current = prevDispatcher;
            }
          },
          useReducer: function(reducer, initialArg, init) {
            currentHookNameInDev = "useReducer";
            updateHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnRerenderInDEV;
            try {
              return rerenderReducer(reducer, initialArg, init);
            } finally {
              ReactCurrentDispatcher$1.current = prevDispatcher;
            }
          },
          useRef: function(initialValue) {
            currentHookNameInDev = "useRef";
            updateHookTypesDev();
            return updateRef();
          },
          useState: function(initialState) {
            currentHookNameInDev = "useState";
            updateHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnRerenderInDEV;
            try {
              return rerenderState(initialState);
            } finally {
              ReactCurrentDispatcher$1.current = prevDispatcher;
            }
          },
          useDebugValue: function(value, formatterFn) {
            currentHookNameInDev = "useDebugValue";
            updateHookTypesDev();
            return updateDebugValue();
          },
          useDeferredValue: function(value) {
            currentHookNameInDev = "useDeferredValue";
            updateHookTypesDev();
            return rerenderDeferredValue(value);
          },
          useTransition: function() {
            currentHookNameInDev = "useTransition";
            updateHookTypesDev();
            return rerenderTransition();
          },
          useMutableSource: function(source, getSnapshot, subscribe) {
            currentHookNameInDev = "useMutableSource";
            updateHookTypesDev();
            return updateMutableSource();
          },
          useSyncExternalStore: function(subscribe, getSnapshot, getServerSnapshot) {
            currentHookNameInDev = "useSyncExternalStore";
            updateHookTypesDev();
            return updateSyncExternalStore(subscribe, getSnapshot);
          },
          useId: function() {
            currentHookNameInDev = "useId";
            updateHookTypesDev();
            return updateId();
          }
        };
        {
          HooksDispatcherOnRerenderInDEV.useCacheRefresh = function useCacheRefresh() {
            currentHookNameInDev = "useCacheRefresh";
            updateHookTypesDev();
            return updateRefresh();
          };
        }
        {
          HooksDispatcherOnRerenderInDEV.useMemoCache = useMemoCache;
        }
        {
          HooksDispatcherOnRerenderInDEV.useEffectEvent = function useEffectEvent(callback) {
            currentHookNameInDev = "useEffectEvent";
            updateHookTypesDev();
            return updateEvent(callback);
          };
        }
        {
          HooksDispatcherOnRerenderInDEV.useHostTransitionStatus = useHostTransitionStatus;
        }
        {
          HooksDispatcherOnRerenderInDEV.useOptimistic = function useOptimistic(passthrough, reducer) {
            currentHookNameInDev = "useOptimistic";
            updateHookTypesDev();
            return rerenderOptimistic(passthrough, reducer);
          };
        }
        InvalidNestedHooksDispatcherOnMountInDEV = {
          readContext: function(context) {
            warnInvalidContextAccess();
            return readContext(context);
          },
          use: function(usable) {
            warnInvalidHookAccess();
            return use(usable);
          },
          useCallback: function(callback, deps) {
            currentHookNameInDev = "useCallback";
            warnInvalidHookAccess();
            mountHookTypesDev();
            return mountCallback(callback, deps);
          },
          useContext: function(context) {
            currentHookNameInDev = "useContext";
            warnInvalidHookAccess();
            mountHookTypesDev();
            return readContext(context);
          },
          useEffect: function(create2, deps) {
            currentHookNameInDev = "useEffect";
            warnInvalidHookAccess();
            mountHookTypesDev();
            return mountEffect(create2, deps);
          },
          useImperativeHandle: function(ref, create2, deps) {
            currentHookNameInDev = "useImperativeHandle";
            warnInvalidHookAccess();
            mountHookTypesDev();
            return mountImperativeHandle(ref, create2, deps);
          },
          useInsertionEffect: function(create2, deps) {
            currentHookNameInDev = "useInsertionEffect";
            warnInvalidHookAccess();
            mountHookTypesDev();
            return mountInsertionEffect(create2, deps);
          },
          useLayoutEffect: function(create2, deps) {
            currentHookNameInDev = "useLayoutEffect";
            warnInvalidHookAccess();
            mountHookTypesDev();
            return mountLayoutEffect(create2, deps);
          },
          useMemo: function(create2, deps) {
            currentHookNameInDev = "useMemo";
            warnInvalidHookAccess();
            mountHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
            try {
              return mountMemo(create2, deps);
            } finally {
              ReactCurrentDispatcher$1.current = prevDispatcher;
            }
          },
          useReducer: function(reducer, initialArg, init) {
            currentHookNameInDev = "useReducer";
            warnInvalidHookAccess();
            mountHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
            try {
              return mountReducer(reducer, initialArg, init);
            } finally {
              ReactCurrentDispatcher$1.current = prevDispatcher;
            }
          },
          useRef: function(initialValue) {
            currentHookNameInDev = "useRef";
            warnInvalidHookAccess();
            mountHookTypesDev();
            return mountRef(initialValue);
          },
          useState: function(initialState) {
            currentHookNameInDev = "useState";
            warnInvalidHookAccess();
            mountHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
            try {
              return mountState(initialState);
            } finally {
              ReactCurrentDispatcher$1.current = prevDispatcher;
            }
          },
          useDebugValue: function(value, formatterFn) {
            currentHookNameInDev = "useDebugValue";
            warnInvalidHookAccess();
            mountHookTypesDev();
            return mountDebugValue();
          },
          useDeferredValue: function(value) {
            currentHookNameInDev = "useDeferredValue";
            warnInvalidHookAccess();
            mountHookTypesDev();
            return mountDeferredValue(value);
          },
          useTransition: function() {
            currentHookNameInDev = "useTransition";
            warnInvalidHookAccess();
            mountHookTypesDev();
            return mountTransition();
          },
          useMutableSource: function(source, getSnapshot, subscribe) {
            currentHookNameInDev = "useMutableSource";
            warnInvalidHookAccess();
            mountHookTypesDev();
            return mountMutableSource();
          },
          useSyncExternalStore: function(subscribe, getSnapshot, getServerSnapshot) {
            currentHookNameInDev = "useSyncExternalStore";
            warnInvalidHookAccess();
            mountHookTypesDev();
            return mountSyncExternalStore(subscribe, getSnapshot, getServerSnapshot);
          },
          useId: function() {
            currentHookNameInDev = "useId";
            warnInvalidHookAccess();
            mountHookTypesDev();
            return mountId();
          }
        };
        {
          InvalidNestedHooksDispatcherOnMountInDEV.useCacheRefresh = function useCacheRefresh() {
            currentHookNameInDev = "useCacheRefresh";
            mountHookTypesDev();
            return mountRefresh();
          };
        }
        {
          InvalidNestedHooksDispatcherOnMountInDEV.useMemoCache = function(size) {
            warnInvalidHookAccess();
            return useMemoCache(size);
          };
        }
        {
          InvalidNestedHooksDispatcherOnMountInDEV.useEffectEvent = function useEffectEvent(callback) {
            currentHookNameInDev = "useEffectEvent";
            warnInvalidHookAccess();
            mountHookTypesDev();
            return mountEvent(callback);
          };
        }
        {
          InvalidNestedHooksDispatcherOnMountInDEV.useHostTransitionStatus = useHostTransitionStatus;
        }
        {
          InvalidNestedHooksDispatcherOnMountInDEV.useOptimistic = function useOptimistic(passthrough, reducer) {
            currentHookNameInDev = "useOptimistic";
            warnInvalidHookAccess();
            mountHookTypesDev();
            return mountOptimistic(passthrough);
          };
        }
        InvalidNestedHooksDispatcherOnUpdateInDEV = {
          readContext: function(context) {
            warnInvalidContextAccess();
            return readContext(context);
          },
          use: function(usable) {
            warnInvalidHookAccess();
            return use(usable);
          },
          useCallback: function(callback, deps) {
            currentHookNameInDev = "useCallback";
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateCallback(callback, deps);
          },
          useContext: function(context) {
            currentHookNameInDev = "useContext";
            warnInvalidHookAccess();
            updateHookTypesDev();
            return readContext(context);
          },
          useEffect: function(create2, deps) {
            currentHookNameInDev = "useEffect";
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateEffect(create2, deps);
          },
          useImperativeHandle: function(ref, create2, deps) {
            currentHookNameInDev = "useImperativeHandle";
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateImperativeHandle(ref, create2, deps);
          },
          useInsertionEffect: function(create2, deps) {
            currentHookNameInDev = "useInsertionEffect";
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateInsertionEffect(create2, deps);
          },
          useLayoutEffect: function(create2, deps) {
            currentHookNameInDev = "useLayoutEffect";
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateLayoutEffect(create2, deps);
          },
          useMemo: function(create2, deps) {
            currentHookNameInDev = "useMemo";
            warnInvalidHookAccess();
            updateHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
            try {
              return updateMemo(create2, deps);
            } finally {
              ReactCurrentDispatcher$1.current = prevDispatcher;
            }
          },
          useReducer: function(reducer, initialArg, init) {
            currentHookNameInDev = "useReducer";
            warnInvalidHookAccess();
            updateHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
            try {
              return updateReducer(reducer, initialArg, init);
            } finally {
              ReactCurrentDispatcher$1.current = prevDispatcher;
            }
          },
          useRef: function(initialValue) {
            currentHookNameInDev = "useRef";
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateRef();
          },
          useState: function(initialState) {
            currentHookNameInDev = "useState";
            warnInvalidHookAccess();
            updateHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
            try {
              return updateState(initialState);
            } finally {
              ReactCurrentDispatcher$1.current = prevDispatcher;
            }
          },
          useDebugValue: function(value, formatterFn) {
            currentHookNameInDev = "useDebugValue";
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateDebugValue();
          },
          useDeferredValue: function(value) {
            currentHookNameInDev = "useDeferredValue";
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateDeferredValue(value);
          },
          useTransition: function() {
            currentHookNameInDev = "useTransition";
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateTransition();
          },
          useMutableSource: function(source, getSnapshot, subscribe) {
            currentHookNameInDev = "useMutableSource";
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateMutableSource();
          },
          useSyncExternalStore: function(subscribe, getSnapshot, getServerSnapshot) {
            currentHookNameInDev = "useSyncExternalStore";
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateSyncExternalStore(subscribe, getSnapshot);
          },
          useId: function() {
            currentHookNameInDev = "useId";
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateId();
          }
        };
        {
          InvalidNestedHooksDispatcherOnUpdateInDEV.useCacheRefresh = function useCacheRefresh() {
            currentHookNameInDev = "useCacheRefresh";
            updateHookTypesDev();
            return updateRefresh();
          };
        }
        {
          InvalidNestedHooksDispatcherOnUpdateInDEV.useMemoCache = function(size) {
            warnInvalidHookAccess();
            return useMemoCache(size);
          };
        }
        {
          InvalidNestedHooksDispatcherOnUpdateInDEV.useEffectEvent = function useEffectEvent(callback) {
            currentHookNameInDev = "useEffectEvent";
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateEvent(callback);
          };
        }
        {
          InvalidNestedHooksDispatcherOnUpdateInDEV.useHostTransitionStatus = useHostTransitionStatus;
        }
        {
          InvalidNestedHooksDispatcherOnUpdateInDEV.useOptimistic = function useOptimistic(passthrough, reducer) {
            currentHookNameInDev = "useOptimistic";
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateOptimistic(passthrough, reducer);
          };
        }
        InvalidNestedHooksDispatcherOnRerenderInDEV = {
          readContext: function(context) {
            warnInvalidContextAccess();
            return readContext(context);
          },
          use: function(usable) {
            warnInvalidHookAccess();
            return use(usable);
          },
          useCallback: function(callback, deps) {
            currentHookNameInDev = "useCallback";
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateCallback(callback, deps);
          },
          useContext: function(context) {
            currentHookNameInDev = "useContext";
            warnInvalidHookAccess();
            updateHookTypesDev();
            return readContext(context);
          },
          useEffect: function(create2, deps) {
            currentHookNameInDev = "useEffect";
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateEffect(create2, deps);
          },
          useImperativeHandle: function(ref, create2, deps) {
            currentHookNameInDev = "useImperativeHandle";
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateImperativeHandle(ref, create2, deps);
          },
          useInsertionEffect: function(create2, deps) {
            currentHookNameInDev = "useInsertionEffect";
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateInsertionEffect(create2, deps);
          },
          useLayoutEffect: function(create2, deps) {
            currentHookNameInDev = "useLayoutEffect";
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateLayoutEffect(create2, deps);
          },
          useMemo: function(create2, deps) {
            currentHookNameInDev = "useMemo";
            warnInvalidHookAccess();
            updateHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
            try {
              return updateMemo(create2, deps);
            } finally {
              ReactCurrentDispatcher$1.current = prevDispatcher;
            }
          },
          useReducer: function(reducer, initialArg, init) {
            currentHookNameInDev = "useReducer";
            warnInvalidHookAccess();
            updateHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
            try {
              return rerenderReducer(reducer, initialArg, init);
            } finally {
              ReactCurrentDispatcher$1.current = prevDispatcher;
            }
          },
          useRef: function(initialValue) {
            currentHookNameInDev = "useRef";
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateRef();
          },
          useState: function(initialState) {
            currentHookNameInDev = "useState";
            warnInvalidHookAccess();
            updateHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
            try {
              return rerenderState(initialState);
            } finally {
              ReactCurrentDispatcher$1.current = prevDispatcher;
            }
          },
          useDebugValue: function(value, formatterFn) {
            currentHookNameInDev = "useDebugValue";
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateDebugValue();
          },
          useDeferredValue: function(value) {
            currentHookNameInDev = "useDeferredValue";
            warnInvalidHookAccess();
            updateHookTypesDev();
            return rerenderDeferredValue(value);
          },
          useTransition: function() {
            currentHookNameInDev = "useTransition";
            warnInvalidHookAccess();
            updateHookTypesDev();
            return rerenderTransition();
          },
          useMutableSource: function(source, getSnapshot, subscribe) {
            currentHookNameInDev = "useMutableSource";
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateMutableSource();
          },
          useSyncExternalStore: function(subscribe, getSnapshot, getServerSnapshot) {
            currentHookNameInDev = "useSyncExternalStore";
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateSyncExternalStore(subscribe, getSnapshot);
          },
          useId: function() {
            currentHookNameInDev = "useId";
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateId();
          }
        };
        {
          InvalidNestedHooksDispatcherOnRerenderInDEV.useCacheRefresh = function useCacheRefresh() {
            currentHookNameInDev = "useCacheRefresh";
            updateHookTypesDev();
            return updateRefresh();
          };
        }
        {
          InvalidNestedHooksDispatcherOnRerenderInDEV.useMemoCache = function(size) {
            warnInvalidHookAccess();
            return useMemoCache(size);
          };
        }
        {
          InvalidNestedHooksDispatcherOnRerenderInDEV.useEffectEvent = function useEffectEvent(callback) {
            currentHookNameInDev = "useEffectEvent";
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateEvent(callback);
          };
        }
        {
          InvalidNestedHooksDispatcherOnRerenderInDEV.useHostTransitionStatus = useHostTransitionStatus;
        }
        {
          InvalidNestedHooksDispatcherOnRerenderInDEV.useOptimistic = function useOptimistic(passthrough, reducer) {
            currentHookNameInDev = "useOptimistic";
            warnInvalidHookAccess();
            updateHookTypesDev();
            return rerenderOptimistic(passthrough, reducer);
          };
        }
      }
      var now = Scheduler.unstable_now;
      var commitTime = 0;
      var layoutEffectStartTime = -1;
      var profilerStartTime = -1;
      var passiveEffectStartTime = -1;
      var currentUpdateIsNested = false;
      var nestedUpdateScheduled = false;
      function isCurrentUpdateNested() {
        return currentUpdateIsNested;
      }
      function markNestedUpdateScheduled() {
        {
          nestedUpdateScheduled = true;
        }
      }
      function resetNestedUpdateFlag() {
        {
          currentUpdateIsNested = false;
          nestedUpdateScheduled = false;
        }
      }
      function syncNestedUpdateFlag() {
        {
          currentUpdateIsNested = nestedUpdateScheduled;
          nestedUpdateScheduled = false;
        }
      }
      function getCommitTime() {
        return commitTime;
      }
      function recordCommitTime() {
        commitTime = now();
      }
      function startProfilerTimer(fiber) {
        profilerStartTime = now();
        if (fiber.actualStartTime < 0) {
          fiber.actualStartTime = now();
        }
      }
      function stopProfilerTimerIfRunning(fiber) {
        profilerStartTime = -1;
      }
      function stopProfilerTimerIfRunningAndRecordDelta(fiber, overrideBaseTime) {
        if (profilerStartTime >= 0) {
          var elapsedTime = now() - profilerStartTime;
          fiber.actualDuration += elapsedTime;
          if (overrideBaseTime) {
            fiber.selfBaseDuration = elapsedTime;
          }
          profilerStartTime = -1;
        }
      }
      function recordLayoutEffectDuration(fiber) {
        if (layoutEffectStartTime >= 0) {
          var elapsedTime = now() - layoutEffectStartTime;
          layoutEffectStartTime = -1;
          var parentFiber = fiber.return;
          while (parentFiber !== null) {
            switch (parentFiber.tag) {
              case HostRoot:
                var root2 = parentFiber.stateNode;
                root2.effectDuration += elapsedTime;
                return;
              case Profiler:
                var parentStateNode = parentFiber.stateNode;
                parentStateNode.effectDuration += elapsedTime;
                return;
            }
            parentFiber = parentFiber.return;
          }
        }
      }
      function recordPassiveEffectDuration(fiber) {
        if (passiveEffectStartTime >= 0) {
          var elapsedTime = now() - passiveEffectStartTime;
          passiveEffectStartTime = -1;
          var parentFiber = fiber.return;
          while (parentFiber !== null) {
            switch (parentFiber.tag) {
              case HostRoot:
                var root2 = parentFiber.stateNode;
                if (root2 !== null) {
                  root2.passiveEffectDuration += elapsedTime;
                }
                return;
              case Profiler:
                var parentStateNode = parentFiber.stateNode;
                if (parentStateNode !== null) {
                  parentStateNode.passiveEffectDuration += elapsedTime;
                }
                return;
            }
            parentFiber = parentFiber.return;
          }
        }
      }
      function startLayoutEffectTimer() {
        layoutEffectStartTime = now();
      }
      function startPassiveEffectTimer() {
        passiveEffectStartTime = now();
      }
      function transferActualDuration(fiber) {
        var child = fiber.child;
        while (child) {
          fiber.actualDuration += child.actualDuration;
          child = child.sibling;
        }
      }
      function resolveDefaultProps(Component, baseProps) {
        if (Component && Component.defaultProps) {
          var props = assign({}, baseProps);
          var defaultProps = Component.defaultProps;
          for (var propName in defaultProps) {
            if (props[propName] === undefined) {
              props[propName] = defaultProps[propName];
            }
          }
          return props;
        }
        return baseProps;
      }
      var fakeInternalInstance = {};
      var didWarnAboutStateAssignmentForComponent;
      var didWarnAboutUninitializedState;
      var didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate;
      var didWarnAboutLegacyLifecyclesAndDerivedState;
      var didWarnAboutUndefinedDerivedState;
      var didWarnAboutDirectlyAssigningPropsToState;
      var didWarnAboutContextTypeAndContextTypes;
      var didWarnAboutInvalidateContextType;
      var didWarnOnInvalidCallback;
      {
        didWarnAboutStateAssignmentForComponent = new Set;
        didWarnAboutUninitializedState = new Set;
        didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate = new Set;
        didWarnAboutLegacyLifecyclesAndDerivedState = new Set;
        didWarnAboutDirectlyAssigningPropsToState = new Set;
        didWarnAboutUndefinedDerivedState = new Set;
        didWarnAboutContextTypeAndContextTypes = new Set;
        didWarnAboutInvalidateContextType = new Set;
        didWarnOnInvalidCallback = new Set;
        Object.defineProperty(fakeInternalInstance, "_processChildContext", {
          enumerable: false,
          value: function() {
            throw new Error("_processChildContext is not available in React 16+. This likely " + "means you have multiple copies of React and are attempting to nest " + "a React 15 tree inside a React 16 tree using " + "unstable_renderSubtreeIntoContainer, which isn't supported. Try " + "to make sure you have only one copy of React (and ideally, switch " + "to ReactDOM.createPortal).");
          }
        });
        Object.freeze(fakeInternalInstance);
      }
      function warnOnInvalidCallback$1(callback, callerName) {
        {
          if (callback === null || typeof callback === "function") {
            return;
          }
          var key = callerName + "_" + callback;
          if (!didWarnOnInvalidCallback.has(key)) {
            didWarnOnInvalidCallback.add(key);
            error("%s(...): Expected the last optional `callback` argument to be a " + "function. Instead received: %s.", callerName, callback);
          }
        }
      }
      function warnOnUndefinedDerivedState(type, partialState) {
        {
          if (partialState === undefined) {
            var componentName = getComponentNameFromType(type) || "Component";
            if (!didWarnAboutUndefinedDerivedState.has(componentName)) {
              didWarnAboutUndefinedDerivedState.add(componentName);
              error("%s.getDerivedStateFromProps(): A valid state object (or null) must be returned. " + "You have returned undefined.", componentName);
            }
          }
        }
      }
      function applyDerivedStateFromProps(workInProgress2, ctor, getDerivedStateFromProps, nextProps) {
        var prevState = workInProgress2.memoizedState;
        var partialState = getDerivedStateFromProps(nextProps, prevState);
        {
          if (workInProgress2.mode & StrictLegacyMode) {
            setIsStrictModeForDevtools(true);
            try {
              partialState = getDerivedStateFromProps(nextProps, prevState);
            } finally {
              setIsStrictModeForDevtools(false);
            }
          }
          warnOnUndefinedDerivedState(ctor, partialState);
        }
        var memoizedState = partialState === null || partialState === undefined ? prevState : assign({}, prevState, partialState);
        workInProgress2.memoizedState = memoizedState;
        if (workInProgress2.lanes === NoLanes) {
          var updateQueue = workInProgress2.updateQueue;
          updateQueue.baseState = memoizedState;
        }
      }
      var classComponentUpdater = {
        isMounted,
        enqueueSetState: function(inst, payload, callback) {
          var fiber = get2(inst);
          var lane = requestUpdateLane(fiber);
          var update = createUpdate(lane);
          update.payload = payload;
          if (callback !== undefined && callback !== null) {
            {
              warnOnInvalidCallback$1(callback, "setState");
            }
            update.callback = callback;
          }
          var root2 = enqueueUpdate(fiber, update, lane);
          if (root2 !== null) {
            scheduleUpdateOnFiber(root2, fiber, lane);
            entangleTransitions(root2, fiber, lane);
          }
          {
            markStateUpdateScheduled(fiber, lane);
          }
        },
        enqueueReplaceState: function(inst, payload, callback) {
          var fiber = get2(inst);
          var lane = requestUpdateLane(fiber);
          var update = createUpdate(lane);
          update.tag = ReplaceState;
          update.payload = payload;
          if (callback !== undefined && callback !== null) {
            {
              warnOnInvalidCallback$1(callback, "replaceState");
            }
            update.callback = callback;
          }
          var root2 = enqueueUpdate(fiber, update, lane);
          if (root2 !== null) {
            scheduleUpdateOnFiber(root2, fiber, lane);
            entangleTransitions(root2, fiber, lane);
          }
          {
            markStateUpdateScheduled(fiber, lane);
          }
        },
        enqueueForceUpdate: function(inst, callback) {
          var fiber = get2(inst);
          var lane = requestUpdateLane(fiber);
          var update = createUpdate(lane);
          update.tag = ForceUpdate;
          if (callback !== undefined && callback !== null) {
            {
              warnOnInvalidCallback$1(callback, "forceUpdate");
            }
            update.callback = callback;
          }
          var root2 = enqueueUpdate(fiber, update, lane);
          if (root2 !== null) {
            scheduleUpdateOnFiber(root2, fiber, lane);
            entangleTransitions(root2, fiber, lane);
          }
          {
            markForceUpdateScheduled(fiber, lane);
          }
        }
      };
      function checkShouldComponentUpdate(workInProgress2, ctor, oldProps, newProps, oldState, newState, nextContext) {
        var instance = workInProgress2.stateNode;
        if (typeof instance.shouldComponentUpdate === "function") {
          var shouldUpdate = instance.shouldComponentUpdate(newProps, newState, nextContext);
          {
            if (workInProgress2.mode & StrictLegacyMode) {
              setIsStrictModeForDevtools(true);
              try {
                shouldUpdate = instance.shouldComponentUpdate(newProps, newState, nextContext);
              } finally {
                setIsStrictModeForDevtools(false);
              }
            }
            if (shouldUpdate === undefined) {
              error("%s.shouldComponentUpdate(): Returned undefined instead of a " + "boolean value. Make sure to return true or false.", getComponentNameFromType(ctor) || "Component");
            }
          }
          return shouldUpdate;
        }
        if (ctor.prototype && ctor.prototype.isPureReactComponent) {
          return !shallowEqual(oldProps, newProps) || !shallowEqual(oldState, newState);
        }
        return true;
      }
      function checkClassInstance(workInProgress2, ctor, newProps) {
        var instance = workInProgress2.stateNode;
        {
          var name = getComponentNameFromType(ctor) || "Component";
          var renderPresent = instance.render;
          if (!renderPresent) {
            if (ctor.prototype && typeof ctor.prototype.render === "function") {
              error("%s(...): No `render` method found on the returned component " + "instance: did you accidentally return an object from the constructor?", name);
            } else {
              error("%s(...): No `render` method found on the returned component " + "instance: you may have forgotten to define `render`.", name);
            }
          }
          if (instance.getInitialState && !instance.getInitialState.isReactClassApproved && !instance.state) {
            error("getInitialState was defined on %s, a plain JavaScript class. " + "This is only supported for classes created using React.createClass. " + "Did you mean to define a state property instead?", name);
          }
          if (instance.getDefaultProps && !instance.getDefaultProps.isReactClassApproved) {
            error("getDefaultProps was defined on %s, a plain JavaScript class. " + "This is only supported for classes created using React.createClass. " + "Use a static property to define defaultProps instead.", name);
          }
          if (instance.propTypes) {
            error("propTypes was defined as an instance property on %s. Use a static " + "property to define propTypes instead.", name);
          }
          if (instance.contextType) {
            error("contextType was defined as an instance property on %s. Use a static " + "property to define contextType instead.", name);
          }
          {
            if (instance.contextTypes) {
              error("contextTypes was defined as an instance property on %s. Use a static " + "property to define contextTypes instead.", name);
            }
            if (ctor.contextType && ctor.contextTypes && !didWarnAboutContextTypeAndContextTypes.has(ctor)) {
              didWarnAboutContextTypeAndContextTypes.add(ctor);
              error("%s declares both contextTypes and contextType static properties. " + "The legacy contextTypes property will be ignored.", name);
            }
          }
          if (typeof instance.componentShouldUpdate === "function") {
            error("%s has a method called " + "componentShouldUpdate(). Did you mean shouldComponentUpdate()? " + "The name is phrased as a question because the function is " + "expected to return a value.", name);
          }
          if (ctor.prototype && ctor.prototype.isPureReactComponent && typeof instance.shouldComponentUpdate !== "undefined") {
            error("%s has a method called shouldComponentUpdate(). " + "shouldComponentUpdate should not be used when extending React.PureComponent. " + "Please extend React.Component if shouldComponentUpdate is used.", getComponentNameFromType(ctor) || "A pure component");
          }
          if (typeof instance.componentDidUnmount === "function") {
            error("%s has a method called " + "componentDidUnmount(). But there is no such lifecycle method. " + "Did you mean componentWillUnmount()?", name);
          }
          if (typeof instance.componentDidReceiveProps === "function") {
            error("%s has a method called " + "componentDidReceiveProps(). But there is no such lifecycle method. " + "If you meant to update the state in response to changing props, " + "use componentWillReceiveProps(). If you meant to fetch data or " + "run side-effects or mutations after React has updated the UI, use componentDidUpdate().", name);
          }
          if (typeof instance.componentWillRecieveProps === "function") {
            error("%s has a method called " + "componentWillRecieveProps(). Did you mean componentWillReceiveProps()?", name);
          }
          if (typeof instance.UNSAFE_componentWillRecieveProps === "function") {
            error("%s has a method called " + "UNSAFE_componentWillRecieveProps(). Did you mean UNSAFE_componentWillReceiveProps()?", name);
          }
          var hasMutatedProps = instance.props !== newProps;
          if (instance.props !== undefined && hasMutatedProps) {
            error("%s(...): When calling super() in `%s`, make sure to pass " + "up the same props that your component's constructor was passed.", name, name);
          }
          if (instance.defaultProps) {
            error("Setting defaultProps as an instance property on %s is not supported and will be ignored." + " Instead, define defaultProps as a static property on %s.", name, name);
          }
          if (typeof instance.getSnapshotBeforeUpdate === "function" && typeof instance.componentDidUpdate !== "function" && !didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate.has(ctor)) {
            didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate.add(ctor);
            error("%s: getSnapshotBeforeUpdate() should be used with componentDidUpdate(). " + "This component defines getSnapshotBeforeUpdate() only.", getComponentNameFromType(ctor));
          }
          if (typeof instance.getDerivedStateFromProps === "function") {
            error("%s: getDerivedStateFromProps() is defined as an instance method " + "and will be ignored. Instead, declare it as a static method.", name);
          }
          if (typeof instance.getDerivedStateFromError === "function") {
            error("%s: getDerivedStateFromError() is defined as an instance method " + "and will be ignored. Instead, declare it as a static method.", name);
          }
          if (typeof ctor.getSnapshotBeforeUpdate === "function") {
            error("%s: getSnapshotBeforeUpdate() is defined as a static method " + "and will be ignored. Instead, declare it as an instance method.", name);
          }
          var state = instance.state;
          if (state && (typeof state !== "object" || isArray(state))) {
            error("%s.state: must be set to an object or null", name);
          }
          if (typeof instance.getChildContext === "function" && typeof ctor.childContextTypes !== "object") {
            error("%s.getChildContext(): childContextTypes must be defined in order to " + "use getChildContext().", name);
          }
        }
      }
      function adoptClassInstance(workInProgress2, instance) {
        instance.updater = classComponentUpdater;
        workInProgress2.stateNode = instance;
        set2(instance, workInProgress2);
        {
          instance._reactInternalInstance = fakeInternalInstance;
        }
      }
      function constructClassInstance(workInProgress2, ctor, props) {
        var isLegacyContextConsumer = false;
        var unmaskedContext = emptyContextObject;
        var context = emptyContextObject;
        var contextType = ctor.contextType;
        {
          if ("contextType" in ctor) {
            var isValid = contextType === null || contextType !== undefined && contextType.$$typeof === REACT_CONTEXT_TYPE && contextType._context === undefined;
            if (!isValid && !didWarnAboutInvalidateContextType.has(ctor)) {
              didWarnAboutInvalidateContextType.add(ctor);
              var addendum = "";
              if (contextType === undefined) {
                addendum = " However, it is set to undefined. " + "This can be caused by a typo or by mixing up named and default imports. " + "This can also happen due to a circular dependency, so " + "try moving the createContext() call to a separate file.";
              } else if (typeof contextType !== "object") {
                addendum = " However, it is set to a " + typeof contextType + ".";
              } else if (contextType.$$typeof === REACT_PROVIDER_TYPE) {
                addendum = " Did you accidentally pass the Context.Provider instead?";
              } else if (contextType._context !== undefined) {
                addendum = " Did you accidentally pass the Context.Consumer instead?";
              } else {
                addendum = " However, it is set to an object with keys {" + Object.keys(contextType).join(", ") + "}.";
              }
              error("%s defines an invalid contextType. " + "contextType should point to the Context object returned by React.createContext().%s", getComponentNameFromType(ctor) || "Component", addendum);
            }
          }
        }
        if (typeof contextType === "object" && contextType !== null) {
          context = readContext(contextType);
        } else {
          unmaskedContext = getUnmaskedContext(workInProgress2, ctor, true);
          var contextTypes = ctor.contextTypes;
          isLegacyContextConsumer = contextTypes !== null && contextTypes !== undefined;
          context = isLegacyContextConsumer ? getMaskedContext(workInProgress2, unmaskedContext) : emptyContextObject;
        }
        var instance = new ctor(props, context);
        {
          if (workInProgress2.mode & StrictLegacyMode) {
            setIsStrictModeForDevtools(true);
            try {
              instance = new ctor(props, context);
            } finally {
              setIsStrictModeForDevtools(false);
            }
          }
        }
        var state = workInProgress2.memoizedState = instance.state !== null && instance.state !== undefined ? instance.state : null;
        adoptClassInstance(workInProgress2, instance);
        {
          if (typeof ctor.getDerivedStateFromProps === "function" && state === null) {
            var componentName = getComponentNameFromType(ctor) || "Component";
            if (!didWarnAboutUninitializedState.has(componentName)) {
              didWarnAboutUninitializedState.add(componentName);
              error("`%s` uses `getDerivedStateFromProps` but its initial state is " + "%s. This is not recommended. Instead, define the initial state by " + "assigning an object to `this.state` in the constructor of `%s`. " + "This ensures that `getDerivedStateFromProps` arguments have a consistent shape.", componentName, instance.state === null ? "null" : "undefined", componentName);
            }
          }
          if (typeof ctor.getDerivedStateFromProps === "function" || typeof instance.getSnapshotBeforeUpdate === "function") {
            var foundWillMountName = null;
            var foundWillReceivePropsName = null;
            var foundWillUpdateName = null;
            if (typeof instance.componentWillMount === "function" && instance.componentWillMount.__suppressDeprecationWarning !== true) {
              foundWillMountName = "componentWillMount";
            } else if (typeof instance.UNSAFE_componentWillMount === "function") {
              foundWillMountName = "UNSAFE_componentWillMount";
            }
            if (typeof instance.componentWillReceiveProps === "function" && instance.componentWillReceiveProps.__suppressDeprecationWarning !== true) {
              foundWillReceivePropsName = "componentWillReceiveProps";
            } else if (typeof instance.UNSAFE_componentWillReceiveProps === "function") {
              foundWillReceivePropsName = "UNSAFE_componentWillReceiveProps";
            }
            if (typeof instance.componentWillUpdate === "function" && instance.componentWillUpdate.__suppressDeprecationWarning !== true) {
              foundWillUpdateName = "componentWillUpdate";
            } else if (typeof instance.UNSAFE_componentWillUpdate === "function") {
              foundWillUpdateName = "UNSAFE_componentWillUpdate";
            }
            if (foundWillMountName !== null || foundWillReceivePropsName !== null || foundWillUpdateName !== null) {
              var _componentName = getComponentNameFromType(ctor) || "Component";
              var newApiName = typeof ctor.getDerivedStateFromProps === "function" ? "getDerivedStateFromProps()" : "getSnapshotBeforeUpdate()";
              if (!didWarnAboutLegacyLifecyclesAndDerivedState.has(_componentName)) {
                didWarnAboutLegacyLifecyclesAndDerivedState.add(_componentName);
                error(`Unsafe legacy lifecycles will not be called for components using new component APIs.

` + `%s uses %s but also contains the following legacy lifecycles:%s%s%s

` + `The above lifecycles should be removed. Learn more about this warning here:
` + "https://reactjs.org/link/unsafe-component-lifecycles", _componentName, newApiName, foundWillMountName !== null ? `
  ` + foundWillMountName : "", foundWillReceivePropsName !== null ? `
  ` + foundWillReceivePropsName : "", foundWillUpdateName !== null ? `
  ` + foundWillUpdateName : "");
              }
            }
          }
        }
        if (isLegacyContextConsumer) {
          cacheContext(workInProgress2, unmaskedContext, context);
        }
        return instance;
      }
      function callComponentWillMount(workInProgress2, instance) {
        var oldState = instance.state;
        if (typeof instance.componentWillMount === "function") {
          instance.componentWillMount();
        }
        if (typeof instance.UNSAFE_componentWillMount === "function") {
          instance.UNSAFE_componentWillMount();
        }
        if (oldState !== instance.state) {
          {
            error("%s.componentWillMount(): Assigning directly to this.state is " + "deprecated (except inside a component's " + "constructor). Use setState instead.", getComponentNameFromFiber(workInProgress2) || "Component");
          }
          classComponentUpdater.enqueueReplaceState(instance, instance.state, null);
        }
      }
      function callComponentWillReceiveProps(workInProgress2, instance, newProps, nextContext) {
        var oldState = instance.state;
        if (typeof instance.componentWillReceiveProps === "function") {
          instance.componentWillReceiveProps(newProps, nextContext);
        }
        if (typeof instance.UNSAFE_componentWillReceiveProps === "function") {
          instance.UNSAFE_componentWillReceiveProps(newProps, nextContext);
        }
        if (instance.state !== oldState) {
          {
            var componentName = getComponentNameFromFiber(workInProgress2) || "Component";
            if (!didWarnAboutStateAssignmentForComponent.has(componentName)) {
              didWarnAboutStateAssignmentForComponent.add(componentName);
              error("%s.componentWillReceiveProps(): Assigning directly to " + "this.state is deprecated (except inside a component's " + "constructor). Use setState instead.", componentName);
            }
          }
          classComponentUpdater.enqueueReplaceState(instance, instance.state, null);
        }
      }
      function mountClassInstance(workInProgress2, ctor, newProps, renderLanes2) {
        {
          checkClassInstance(workInProgress2, ctor, newProps);
        }
        var instance = workInProgress2.stateNode;
        instance.props = newProps;
        instance.state = workInProgress2.memoizedState;
        instance.refs = {};
        initializeUpdateQueue(workInProgress2);
        var contextType = ctor.contextType;
        if (typeof contextType === "object" && contextType !== null) {
          instance.context = readContext(contextType);
        } else {
          var unmaskedContext = getUnmaskedContext(workInProgress2, ctor, true);
          instance.context = getMaskedContext(workInProgress2, unmaskedContext);
        }
        {
          if (instance.state === newProps) {
            var componentName = getComponentNameFromType(ctor) || "Component";
            if (!didWarnAboutDirectlyAssigningPropsToState.has(componentName)) {
              didWarnAboutDirectlyAssigningPropsToState.add(componentName);
              error("%s: It is not recommended to assign props directly to state " + "because updates to props won't be reflected in state. " + "In most cases, it is better to use props directly.", componentName);
            }
          }
          if (workInProgress2.mode & StrictLegacyMode) {
            ReactStrictModeWarnings.recordLegacyContextWarning(workInProgress2, instance);
          }
          ReactStrictModeWarnings.recordUnsafeLifecycleWarnings(workInProgress2, instance);
        }
        instance.state = workInProgress2.memoizedState;
        var getDerivedStateFromProps = ctor.getDerivedStateFromProps;
        if (typeof getDerivedStateFromProps === "function") {
          applyDerivedStateFromProps(workInProgress2, ctor, getDerivedStateFromProps, newProps);
          instance.state = workInProgress2.memoizedState;
        }
        if (typeof ctor.getDerivedStateFromProps !== "function" && typeof instance.getSnapshotBeforeUpdate !== "function" && (typeof instance.UNSAFE_componentWillMount === "function" || typeof instance.componentWillMount === "function")) {
          callComponentWillMount(workInProgress2, instance);
          processUpdateQueue(workInProgress2, newProps, instance, renderLanes2);
          instance.state = workInProgress2.memoizedState;
        }
        if (typeof instance.componentDidMount === "function") {
          var fiberFlags = Update | LayoutStatic;
          if ((workInProgress2.mode & StrictEffectsMode) !== NoMode) {
            fiberFlags |= MountLayoutDev;
          }
          workInProgress2.flags |= fiberFlags;
        }
      }
      function resumeMountClassInstance(workInProgress2, ctor, newProps, renderLanes2) {
        var instance = workInProgress2.stateNode;
        var oldProps = workInProgress2.memoizedProps;
        instance.props = oldProps;
        var oldContext = instance.context;
        var contextType = ctor.contextType;
        var nextContext = emptyContextObject;
        if (typeof contextType === "object" && contextType !== null) {
          nextContext = readContext(contextType);
        } else {
          var nextLegacyUnmaskedContext = getUnmaskedContext(workInProgress2, ctor, true);
          nextContext = getMaskedContext(workInProgress2, nextLegacyUnmaskedContext);
        }
        var getDerivedStateFromProps = ctor.getDerivedStateFromProps;
        var hasNewLifecycles = typeof getDerivedStateFromProps === "function" || typeof instance.getSnapshotBeforeUpdate === "function";
        if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillReceiveProps === "function" || typeof instance.componentWillReceiveProps === "function")) {
          if (oldProps !== newProps || oldContext !== nextContext) {
            callComponentWillReceiveProps(workInProgress2, instance, newProps, nextContext);
          }
        }
        resetHasForceUpdateBeforeProcessing();
        var oldState = workInProgress2.memoizedState;
        var newState = instance.state = oldState;
        processUpdateQueue(workInProgress2, newProps, instance, renderLanes2);
        newState = workInProgress2.memoizedState;
        if (oldProps === newProps && oldState === newState && !hasContextChanged() && !checkHasForceUpdateAfterProcessing()) {
          if (typeof instance.componentDidMount === "function") {
            var fiberFlags = Update | LayoutStatic;
            if ((workInProgress2.mode & StrictEffectsMode) !== NoMode) {
              fiberFlags |= MountLayoutDev;
            }
            workInProgress2.flags |= fiberFlags;
          }
          return false;
        }
        if (typeof getDerivedStateFromProps === "function") {
          applyDerivedStateFromProps(workInProgress2, ctor, getDerivedStateFromProps, newProps);
          newState = workInProgress2.memoizedState;
        }
        var shouldUpdate = checkHasForceUpdateAfterProcessing() || checkShouldComponentUpdate(workInProgress2, ctor, oldProps, newProps, oldState, newState, nextContext);
        if (shouldUpdate) {
          if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillMount === "function" || typeof instance.componentWillMount === "function")) {
            if (typeof instance.componentWillMount === "function") {
              instance.componentWillMount();
            }
            if (typeof instance.UNSAFE_componentWillMount === "function") {
              instance.UNSAFE_componentWillMount();
            }
          }
          if (typeof instance.componentDidMount === "function") {
            var _fiberFlags = Update | LayoutStatic;
            if ((workInProgress2.mode & StrictEffectsMode) !== NoMode) {
              _fiberFlags |= MountLayoutDev;
            }
            workInProgress2.flags |= _fiberFlags;
          }
        } else {
          if (typeof instance.componentDidMount === "function") {
            var _fiberFlags2 = Update | LayoutStatic;
            if ((workInProgress2.mode & StrictEffectsMode) !== NoMode) {
              _fiberFlags2 |= MountLayoutDev;
            }
            workInProgress2.flags |= _fiberFlags2;
          }
          workInProgress2.memoizedProps = newProps;
          workInProgress2.memoizedState = newState;
        }
        instance.props = newProps;
        instance.state = newState;
        instance.context = nextContext;
        return shouldUpdate;
      }
      function updateClassInstance(current2, workInProgress2, ctor, newProps, renderLanes2) {
        var instance = workInProgress2.stateNode;
        cloneUpdateQueue(current2, workInProgress2);
        var unresolvedOldProps = workInProgress2.memoizedProps;
        var oldProps = workInProgress2.type === workInProgress2.elementType ? unresolvedOldProps : resolveDefaultProps(workInProgress2.type, unresolvedOldProps);
        instance.props = oldProps;
        var unresolvedNewProps = workInProgress2.pendingProps;
        var oldContext = instance.context;
        var contextType = ctor.contextType;
        var nextContext = emptyContextObject;
        if (typeof contextType === "object" && contextType !== null) {
          nextContext = readContext(contextType);
        } else {
          var nextUnmaskedContext = getUnmaskedContext(workInProgress2, ctor, true);
          nextContext = getMaskedContext(workInProgress2, nextUnmaskedContext);
        }
        var getDerivedStateFromProps = ctor.getDerivedStateFromProps;
        var hasNewLifecycles = typeof getDerivedStateFromProps === "function" || typeof instance.getSnapshotBeforeUpdate === "function";
        if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillReceiveProps === "function" || typeof instance.componentWillReceiveProps === "function")) {
          if (unresolvedOldProps !== unresolvedNewProps || oldContext !== nextContext) {
            callComponentWillReceiveProps(workInProgress2, instance, newProps, nextContext);
          }
        }
        resetHasForceUpdateBeforeProcessing();
        var oldState = workInProgress2.memoizedState;
        var newState = instance.state = oldState;
        processUpdateQueue(workInProgress2, newProps, instance, renderLanes2);
        newState = workInProgress2.memoizedState;
        if (unresolvedOldProps === unresolvedNewProps && oldState === newState && !hasContextChanged() && !checkHasForceUpdateAfterProcessing() && !enableLazyContextPropagation) {
          if (typeof instance.componentDidUpdate === "function") {
            if (unresolvedOldProps !== current2.memoizedProps || oldState !== current2.memoizedState) {
              workInProgress2.flags |= Update;
            }
          }
          if (typeof instance.getSnapshotBeforeUpdate === "function") {
            if (unresolvedOldProps !== current2.memoizedProps || oldState !== current2.memoizedState) {
              workInProgress2.flags |= Snapshot;
            }
          }
          return false;
        }
        if (typeof getDerivedStateFromProps === "function") {
          applyDerivedStateFromProps(workInProgress2, ctor, getDerivedStateFromProps, newProps);
          newState = workInProgress2.memoizedState;
        }
        var shouldUpdate = checkHasForceUpdateAfterProcessing() || checkShouldComponentUpdate(workInProgress2, ctor, oldProps, newProps, oldState, newState, nextContext) || enableLazyContextPropagation;
        if (shouldUpdate) {
          if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillUpdate === "function" || typeof instance.componentWillUpdate === "function")) {
            if (typeof instance.componentWillUpdate === "function") {
              instance.componentWillUpdate(newProps, newState, nextContext);
            }
            if (typeof instance.UNSAFE_componentWillUpdate === "function") {
              instance.UNSAFE_componentWillUpdate(newProps, newState, nextContext);
            }
          }
          if (typeof instance.componentDidUpdate === "function") {
            workInProgress2.flags |= Update;
          }
          if (typeof instance.getSnapshotBeforeUpdate === "function") {
            workInProgress2.flags |= Snapshot;
          }
        } else {
          if (typeof instance.componentDidUpdate === "function") {
            if (unresolvedOldProps !== current2.memoizedProps || oldState !== current2.memoizedState) {
              workInProgress2.flags |= Update;
            }
          }
          if (typeof instance.getSnapshotBeforeUpdate === "function") {
            if (unresolvedOldProps !== current2.memoizedProps || oldState !== current2.memoizedState) {
              workInProgress2.flags |= Snapshot;
            }
          }
          workInProgress2.memoizedProps = newProps;
          workInProgress2.memoizedState = newState;
        }
        instance.props = newProps;
        instance.state = newState;
        instance.context = nextContext;
        return shouldUpdate;
      }
      function createCapturedValueAtFiber(value, source) {
        return {
          value,
          source,
          stack: getStackByFiberInDevAndProd(source),
          digest: null
        };
      }
      function createCapturedValue(value, digest, stack) {
        return {
          value,
          source: null,
          stack: stack != null ? stack : null,
          digest: digest != null ? digest : null
        };
      }
      function showErrorDialog(boundary, errorInfo) {
        return true;
      }
      function logCapturedError(boundary, errorInfo) {
        try {
          var logError = showErrorDialog(boundary, errorInfo);
          if (logError === false) {
            return;
          }
          var error2 = errorInfo.value;
          if (true) {
            var source = errorInfo.source;
            var stack = errorInfo.stack;
            var componentStack = stack !== null ? stack : "";
            if (error2 != null && error2._suppressLogging) {
              if (boundary.tag === ClassComponent) {
                return;
              }
              console["error"](error2);
            }
            var componentName = source ? getComponentNameFromFiber(source) : null;
            var componentNameMessage = componentName ? "The above error occurred in the <" + componentName + "> component:" : "The above error occurred in one of your React components:";
            var errorBoundaryMessage;
            if (boundary.tag === HostRoot) {
              errorBoundaryMessage = `Consider adding an error boundary to your tree to customize error handling behavior.
` + "Visit https://reactjs.org/link/error-boundaries to learn more about error boundaries.";
            } else {
              var errorBoundaryName = getComponentNameFromFiber(boundary) || "Anonymous";
              errorBoundaryMessage = "React will try to recreate this component tree from scratch " + ("using the error boundary you provided, " + errorBoundaryName + ".");
            }
            var combinedMessage = componentNameMessage + `
` + componentStack + `

` + ("" + errorBoundaryMessage);
            console["error"](combinedMessage);
          }
        } catch (e) {
          setTimeout(function() {
            throw e;
          });
        }
      }
      function createRootErrorUpdate(fiber, errorInfo, lane) {
        var update = createUpdate(lane);
        update.tag = CaptureUpdate;
        update.payload = {
          element: null
        };
        var error2 = errorInfo.value;
        update.callback = function() {
          onUncaughtError(error2);
          logCapturedError(fiber, errorInfo);
        };
        return update;
      }
      function createClassErrorUpdate(fiber, errorInfo, lane) {
        var update = createUpdate(lane);
        update.tag = CaptureUpdate;
        var getDerivedStateFromError = fiber.type.getDerivedStateFromError;
        if (typeof getDerivedStateFromError === "function") {
          var error$1 = errorInfo.value;
          update.payload = function() {
            return getDerivedStateFromError(error$1);
          };
          update.callback = function() {
            {
              markFailedErrorBoundaryForHotReloading(fiber);
            }
            logCapturedError(fiber, errorInfo);
          };
        }
        var inst = fiber.stateNode;
        if (inst !== null && typeof inst.componentDidCatch === "function") {
          update.callback = function callback() {
            {
              markFailedErrorBoundaryForHotReloading(fiber);
            }
            logCapturedError(fiber, errorInfo);
            if (typeof getDerivedStateFromError !== "function") {
              markLegacyErrorBoundaryAsFailed(this);
            }
            var error$12 = errorInfo.value;
            var stack = errorInfo.stack;
            this.componentDidCatch(error$12, {
              componentStack: stack !== null ? stack : ""
            });
            {
              if (typeof getDerivedStateFromError !== "function") {
                if (!includesSomeLane(fiber.lanes, SyncLane)) {
                  error("%s: Error boundaries should implement getDerivedStateFromError(). " + "In that method, return a state update to display an error message or fallback UI.", getComponentNameFromFiber(fiber) || "Unknown");
                }
              }
            }
          };
        }
        return update;
      }
      function resetSuspendedComponent(sourceFiber, rootRenderLanes) {
        var tag = sourceFiber.tag;
        if ((sourceFiber.mode & ConcurrentMode) === NoMode && (tag === FunctionComponent || tag === ForwardRef || tag === SimpleMemoComponent)) {
          var currentSource = sourceFiber.alternate;
          if (currentSource) {
            sourceFiber.updateQueue = currentSource.updateQueue;
            sourceFiber.memoizedState = currentSource.memoizedState;
            sourceFiber.lanes = currentSource.lanes;
          } else {
            sourceFiber.updateQueue = null;
            sourceFiber.memoizedState = null;
          }
        }
      }
      function markSuspenseBoundaryShouldCapture(suspenseBoundary, returnFiber, sourceFiber, root2, rootRenderLanes) {
        if ((suspenseBoundary.mode & ConcurrentMode) === NoMode) {
          if (suspenseBoundary === returnFiber) {
            suspenseBoundary.flags |= ShouldCapture;
          } else {
            suspenseBoundary.flags |= DidCapture;
            sourceFiber.flags |= ForceUpdateForLegacySuspense;
            sourceFiber.flags &= ~(LifecycleEffectMask | Incomplete);
            if (sourceFiber.tag === ClassComponent) {
              var currentSourceFiber = sourceFiber.alternate;
              if (currentSourceFiber === null) {
                sourceFiber.tag = IncompleteClassComponent;
              } else {
                var update = createUpdate(SyncLane);
                update.tag = ForceUpdate;
                enqueueUpdate(sourceFiber, update, SyncLane);
              }
            }
            sourceFiber.lanes = mergeLanes(sourceFiber.lanes, SyncLane);
          }
          return suspenseBoundary;
        }
        suspenseBoundary.flags |= ShouldCapture;
        suspenseBoundary.lanes = rootRenderLanes;
        return suspenseBoundary;
      }
      function throwException(root2, returnFiber, sourceFiber, value, rootRenderLanes) {
        sourceFiber.flags |= Incomplete;
        {
          if (isDevToolsPresent) {
            restorePendingUpdaters(root2, rootRenderLanes);
          }
        }
        if (value !== null && typeof value === "object" && typeof value.then === "function") {
          var wakeable = value;
          resetSuspendedComponent(sourceFiber);
          {
            if (getIsHydrating() && sourceFiber.mode & ConcurrentMode) {
              markDidThrowWhileHydratingDEV();
            }
          }
          var suspenseBoundary = getSuspenseHandler();
          if (suspenseBoundary !== null) {
            switch (suspenseBoundary.tag) {
              case SuspenseComponent: {
                if (sourceFiber.mode & ConcurrentMode) {
                  if (getShellBoundary() === null) {
                    renderDidSuspendDelayIfPossible();
                  } else {
                    var current2 = suspenseBoundary.alternate;
                    if (current2 === null) {
                      renderDidSuspend();
                    }
                  }
                }
                suspenseBoundary.flags &= ~ForceClientRender;
                markSuspenseBoundaryShouldCapture(suspenseBoundary, returnFiber, sourceFiber, root2, rootRenderLanes);
                var isSuspenseyResource = wakeable === noopSuspenseyCommitThenable;
                if (isSuspenseyResource) {
                  suspenseBoundary.flags |= ScheduleRetry;
                } else {
                  var retryQueue = suspenseBoundary.updateQueue;
                  if (retryQueue === null) {
                    suspenseBoundary.updateQueue = new Set([wakeable]);
                  } else {
                    retryQueue.add(wakeable);
                  }
                }
                break;
              }
              case OffscreenComponent: {
                if (suspenseBoundary.mode & ConcurrentMode) {
                  suspenseBoundary.flags |= ShouldCapture;
                  var _isSuspenseyResource = wakeable === noopSuspenseyCommitThenable;
                  if (_isSuspenseyResource) {
                    suspenseBoundary.flags |= ScheduleRetry;
                  } else {
                    var offscreenQueue = suspenseBoundary.updateQueue;
                    if (offscreenQueue === null) {
                      var newOffscreenQueue = {
                        transitions: null,
                        markerInstances: null,
                        retryQueue: new Set([wakeable])
                      };
                      suspenseBoundary.updateQueue = newOffscreenQueue;
                    } else {
                      var _retryQueue = offscreenQueue.retryQueue;
                      if (_retryQueue === null) {
                        offscreenQueue.retryQueue = new Set([wakeable]);
                      } else {
                        _retryQueue.add(wakeable);
                      }
                    }
                  }
                  break;
                }
              }
              default: {
                throw new Error("Unexpected Suspense handler tag (" + suspenseBoundary.tag + "). This " + "is a bug in React.");
              }
            }
            if (suspenseBoundary.mode & ConcurrentMode) {
              attachPingListener(root2, wakeable, rootRenderLanes);
            }
            return;
          } else {
            if (root2.tag === ConcurrentRoot) {
              attachPingListener(root2, wakeable, rootRenderLanes);
              renderDidSuspendDelayIfPossible();
              return;
            } else {
              var uncaughtSuspenseError = new Error("A component suspended while responding to synchronous input. This " + "will cause the UI to be replaced with a loading indicator. To " + "fix, updates that suspend should be wrapped " + "with startTransition.");
              value = uncaughtSuspenseError;
            }
          }
        } else {
          if (getIsHydrating() && sourceFiber.mode & ConcurrentMode) {
            markDidThrowWhileHydratingDEV();
            var _suspenseBoundary = getSuspenseHandler();
            if (_suspenseBoundary !== null) {
              if ((_suspenseBoundary.flags & ShouldCapture) === NoFlags$1) {
                _suspenseBoundary.flags |= ForceClientRender;
              }
              markSuspenseBoundaryShouldCapture(_suspenseBoundary, returnFiber, sourceFiber, root2, rootRenderLanes);
              queueHydrationError(createCapturedValueAtFiber(value, sourceFiber));
              return;
            }
          }
        }
        value = createCapturedValueAtFiber(value, sourceFiber);
        renderDidError(value);
        var workInProgress2 = returnFiber;
        do {
          switch (workInProgress2.tag) {
            case HostRoot: {
              var _errorInfo = value;
              workInProgress2.flags |= ShouldCapture;
              var lane = pickArbitraryLane(rootRenderLanes);
              workInProgress2.lanes = mergeLanes(workInProgress2.lanes, lane);
              var update = createRootErrorUpdate(workInProgress2, _errorInfo, lane);
              enqueueCapturedUpdate(workInProgress2, update);
              return;
            }
            case ClassComponent:
              var errorInfo = value;
              var ctor = workInProgress2.type;
              var instance = workInProgress2.stateNode;
              if ((workInProgress2.flags & DidCapture) === NoFlags$1 && (typeof ctor.getDerivedStateFromError === "function" || instance !== null && typeof instance.componentDidCatch === "function" && !isAlreadyFailedLegacyErrorBoundary(instance))) {
                workInProgress2.flags |= ShouldCapture;
                var _lane = pickArbitraryLane(rootRenderLanes);
                workInProgress2.lanes = mergeLanes(workInProgress2.lanes, _lane);
                var _update = createClassErrorUpdate(workInProgress2, errorInfo, _lane);
                enqueueCapturedUpdate(workInProgress2, _update);
                return;
              }
              break;
          }
          workInProgress2 = workInProgress2.return;
        } while (workInProgress2 !== null);
      }
      var ReactCurrentOwner$2 = ReactSharedInternals.ReactCurrentOwner;
      var SelectiveHydrationException = new Error("This is not a real error. It's an implementation detail of React's " + "selective hydration feature. If this leaks into userspace, it's a bug in " + "React. Please file an issue.");
      var didReceiveUpdate = false;
      var didWarnAboutBadClass;
      var didWarnAboutModulePatternComponent;
      var didWarnAboutContextTypeOnFunctionComponent;
      var didWarnAboutGetDerivedStateOnFunctionComponent;
      var didWarnAboutFunctionRefs;
      var didWarnAboutReassigningProps;
      var didWarnAboutRevealOrder;
      var didWarnAboutTailOptions;
      var didWarnAboutDefaultPropsOnFunctionComponent;
      {
        didWarnAboutBadClass = {};
        didWarnAboutModulePatternComponent = {};
        didWarnAboutContextTypeOnFunctionComponent = {};
        didWarnAboutGetDerivedStateOnFunctionComponent = {};
        didWarnAboutFunctionRefs = {};
        didWarnAboutReassigningProps = false;
        didWarnAboutRevealOrder = {};
        didWarnAboutTailOptions = {};
        didWarnAboutDefaultPropsOnFunctionComponent = {};
      }
      function reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2) {
        if (current2 === null) {
          workInProgress2.child = mountChildFibers(workInProgress2, null, nextChildren, renderLanes2);
        } else {
          workInProgress2.child = reconcileChildFibers(workInProgress2, current2.child, nextChildren, renderLanes2);
        }
      }
      function forceUnmountCurrentAndReconcile(current2, workInProgress2, nextChildren, renderLanes2) {
        workInProgress2.child = reconcileChildFibers(workInProgress2, current2.child, null, renderLanes2);
        workInProgress2.child = reconcileChildFibers(workInProgress2, null, nextChildren, renderLanes2);
      }
      function updateForwardRef(current2, workInProgress2, Component, nextProps, renderLanes2) {
        {
          if (workInProgress2.type !== workInProgress2.elementType) {
            var innerPropTypes = Component.propTypes;
            if (innerPropTypes) {
              checkPropTypes(innerPropTypes, nextProps, "prop", getComponentNameFromType(Component));
            }
          }
        }
        var render2 = Component.render;
        var ref = workInProgress2.ref;
        var nextChildren;
        var hasId;
        prepareToReadContext(workInProgress2, renderLanes2);
        {
          markComponentRenderStarted(workInProgress2);
        }
        {
          ReactCurrentOwner$2.current = workInProgress2;
          setIsRendering(true);
          nextChildren = renderWithHooks(current2, workInProgress2, render2, nextProps, ref, renderLanes2);
          hasId = checkDidRenderIdHook();
          setIsRendering(false);
        }
        {
          markComponentRenderStopped();
        }
        if (current2 !== null && !didReceiveUpdate) {
          bailoutHooks(current2, workInProgress2, renderLanes2);
          return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
        }
        if (getIsHydrating() && hasId) {
          pushMaterializedTreeId(workInProgress2);
        }
        workInProgress2.flags |= PerformedWork;
        reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
        return workInProgress2.child;
      }
      function updateMemoComponent(current2, workInProgress2, Component, nextProps, renderLanes2) {
        if (current2 === null) {
          var type = Component.type;
          if (isSimpleFunctionComponent(type) && Component.compare === null && Component.defaultProps === undefined) {
            var resolvedType = type;
            {
              resolvedType = resolveFunctionForHotReloading(type);
            }
            workInProgress2.tag = SimpleMemoComponent;
            workInProgress2.type = resolvedType;
            {
              validateFunctionComponentInDev(workInProgress2, type);
            }
            return updateSimpleMemoComponent(current2, workInProgress2, resolvedType, nextProps, renderLanes2);
          }
          {
            var innerPropTypes = type.propTypes;
            if (innerPropTypes) {
              checkPropTypes(innerPropTypes, nextProps, "prop", getComponentNameFromType(type));
            }
            if (Component.defaultProps !== undefined) {
              var componentName = getComponentNameFromType(type) || "Unknown";
              if (!didWarnAboutDefaultPropsOnFunctionComponent[componentName]) {
                error("%s: Support for defaultProps will be removed from memo components " + "in a future major release. Use JavaScript default parameters instead.", componentName);
                didWarnAboutDefaultPropsOnFunctionComponent[componentName] = true;
              }
            }
          }
          var child = createFiberFromTypeAndProps(Component.type, null, nextProps, workInProgress2, workInProgress2.mode, renderLanes2);
          child.ref = workInProgress2.ref;
          child.return = workInProgress2;
          workInProgress2.child = child;
          return child;
        }
        {
          var _type = Component.type;
          var _innerPropTypes = _type.propTypes;
          if (_innerPropTypes) {
            checkPropTypes(_innerPropTypes, nextProps, "prop", getComponentNameFromType(_type));
          }
        }
        var currentChild = current2.child;
        var hasScheduledUpdateOrContext = checkScheduledUpdateOrContext(current2, renderLanes2);
        if (!hasScheduledUpdateOrContext) {
          var prevProps = currentChild.memoizedProps;
          var compare = Component.compare;
          compare = compare !== null ? compare : shallowEqual;
          if (compare(prevProps, nextProps) && current2.ref === workInProgress2.ref) {
            return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
          }
        }
        workInProgress2.flags |= PerformedWork;
        var newChild = createWorkInProgress(currentChild, nextProps);
        newChild.ref = workInProgress2.ref;
        newChild.return = workInProgress2;
        workInProgress2.child = newChild;
        return newChild;
      }
      function updateSimpleMemoComponent(current2, workInProgress2, Component, nextProps, renderLanes2) {
        {
          if (workInProgress2.type !== workInProgress2.elementType) {
            var outerMemoType = workInProgress2.elementType;
            if (outerMemoType.$$typeof === REACT_LAZY_TYPE) {
              var lazyComponent = outerMemoType;
              var payload = lazyComponent._payload;
              var init = lazyComponent._init;
              try {
                outerMemoType = init(payload);
              } catch (x) {
                outerMemoType = null;
              }
              var outerPropTypes = outerMemoType && outerMemoType.propTypes;
              if (outerPropTypes) {
                checkPropTypes(outerPropTypes, nextProps, "prop", getComponentNameFromType(outerMemoType));
              }
            }
          }
        }
        if (current2 !== null) {
          var prevProps = current2.memoizedProps;
          if (shallowEqual(prevProps, nextProps) && current2.ref === workInProgress2.ref && workInProgress2.type === current2.type) {
            didReceiveUpdate = false;
            workInProgress2.pendingProps = nextProps = prevProps;
            if (!checkScheduledUpdateOrContext(current2, renderLanes2)) {
              workInProgress2.lanes = current2.lanes;
              return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
            } else if ((current2.flags & ForceUpdateForLegacySuspense) !== NoFlags$1) {
              didReceiveUpdate = true;
            }
          }
        }
        return updateFunctionComponent(current2, workInProgress2, Component, nextProps, renderLanes2);
      }
      function updateOffscreenComponent(current2, workInProgress2, renderLanes2) {
        var nextProps = workInProgress2.pendingProps;
        var nextChildren = nextProps.children;
        var nextIsDetached = (workInProgress2.stateNode._pendingVisibility & OffscreenDetached) !== 0;
        var prevState = current2 !== null ? current2.memoizedState : null;
        markRef$1(current2, workInProgress2);
        if (nextProps.mode === "hidden" || enableLegacyHidden || nextIsDetached) {
          var didSuspend = (workInProgress2.flags & DidCapture) !== NoFlags$1;
          if (didSuspend) {
            var nextBaseLanes = prevState !== null ? mergeLanes(prevState.baseLanes, renderLanes2) : renderLanes2;
            if (current2 !== null) {
              var currentChild = workInProgress2.child = current2.child;
              var currentChildLanes = NoLanes;
              while (currentChild !== null) {
                currentChildLanes = mergeLanes(mergeLanes(currentChildLanes, currentChild.lanes), currentChild.childLanes);
                currentChild = currentChild.sibling;
              }
              var lanesWeJustAttempted = nextBaseLanes;
              var remainingChildLanes = removeLanes(currentChildLanes, lanesWeJustAttempted);
              workInProgress2.childLanes = remainingChildLanes;
            } else {
              workInProgress2.childLanes = NoLanes;
              workInProgress2.child = null;
            }
            return deferHiddenOffscreenComponent(current2, workInProgress2, nextBaseLanes);
          }
          if ((workInProgress2.mode & ConcurrentMode) === NoMode) {
            var nextState = {
              baseLanes: NoLanes,
              cachePool: null
            };
            workInProgress2.memoizedState = nextState;
            {
              if (current2 !== null) {
                pushTransition(workInProgress2, null);
              }
            }
            reuseHiddenContextOnStack(workInProgress2);
            pushOffscreenSuspenseHandler(workInProgress2);
          } else if (!includesSomeLane(renderLanes2, OffscreenLane)) {
            workInProgress2.lanes = workInProgress2.childLanes = laneToLanes(OffscreenLane);
            var _nextBaseLanes = prevState !== null ? mergeLanes(prevState.baseLanes, renderLanes2) : renderLanes2;
            return deferHiddenOffscreenComponent(current2, workInProgress2, _nextBaseLanes);
          } else {
            var _nextState = {
              baseLanes: NoLanes,
              cachePool: null
            };
            workInProgress2.memoizedState = _nextState;
            if (current2 !== null) {
              var prevCachePool = prevState !== null ? prevState.cachePool : null;
              pushTransition(workInProgress2, prevCachePool);
            }
            if (prevState !== null) {
              pushHiddenContext(workInProgress2, prevState);
            } else {
              reuseHiddenContextOnStack(workInProgress2);
            }
            pushOffscreenSuspenseHandler(workInProgress2);
          }
        } else {
          if (prevState !== null) {
            var _prevCachePool = null;
            {
              _prevCachePool = prevState.cachePool;
            }
            pushTransition(workInProgress2, _prevCachePool);
            pushHiddenContext(workInProgress2, prevState);
            reuseSuspenseHandlerOnStack(workInProgress2);
            workInProgress2.memoizedState = null;
          } else {
            {
              if (current2 !== null) {
                pushTransition(workInProgress2, null);
              }
            }
            reuseHiddenContextOnStack(workInProgress2);
            reuseSuspenseHandlerOnStack(workInProgress2);
          }
        }
        reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
        return workInProgress2.child;
      }
      function deferHiddenOffscreenComponent(current2, workInProgress2, nextBaseLanes, renderLanes2) {
        var nextState = {
          baseLanes: nextBaseLanes,
          cachePool: getOffscreenDeferredCache()
        };
        workInProgress2.memoizedState = nextState;
        {
          if (current2 !== null) {
            pushTransition(workInProgress2, null);
          }
        }
        reuseHiddenContextOnStack(workInProgress2);
        pushOffscreenSuspenseHandler(workInProgress2);
        return null;
      }
      function updateCacheComponent(current2, workInProgress2, renderLanes2) {
        prepareToReadContext(workInProgress2, renderLanes2);
        var parentCache = readContext(CacheContext);
        if (current2 === null) {
          var freshCache = requestCacheFromPool(renderLanes2);
          var initialState = {
            parent: parentCache,
            cache: freshCache
          };
          workInProgress2.memoizedState = initialState;
          initializeUpdateQueue(workInProgress2);
          pushCacheProvider(workInProgress2, freshCache);
        } else {
          if (includesSomeLane(current2.lanes, renderLanes2)) {
            cloneUpdateQueue(current2, workInProgress2);
            processUpdateQueue(workInProgress2, null, null, renderLanes2);
          }
          var prevState = current2.memoizedState;
          var nextState = workInProgress2.memoizedState;
          if (prevState.parent !== parentCache) {
            var derivedState = {
              parent: parentCache,
              cache: parentCache
            };
            workInProgress2.memoizedState = derivedState;
            if (workInProgress2.lanes === NoLanes) {
              var updateQueue = workInProgress2.updateQueue;
              workInProgress2.memoizedState = updateQueue.baseState = derivedState;
            }
            pushCacheProvider(workInProgress2, parentCache);
          } else {
            var nextCache = nextState.cache;
            pushCacheProvider(workInProgress2, nextCache);
            if (nextCache !== prevState.cache) {
              propagateContextChange(workInProgress2, CacheContext, renderLanes2);
            }
          }
        }
        var nextChildren = workInProgress2.pendingProps.children;
        reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
        return workInProgress2.child;
      }
      function updateFragment(current2, workInProgress2, renderLanes2) {
        var nextChildren = workInProgress2.pendingProps;
        reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
        return workInProgress2.child;
      }
      function updateMode(current2, workInProgress2, renderLanes2) {
        var nextChildren = workInProgress2.pendingProps.children;
        reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
        return workInProgress2.child;
      }
      function updateProfiler(current2, workInProgress2, renderLanes2) {
        {
          workInProgress2.flags |= Update;
          {
            var stateNode = workInProgress2.stateNode;
            stateNode.effectDuration = 0;
            stateNode.passiveEffectDuration = 0;
          }
        }
        var nextProps = workInProgress2.pendingProps;
        var nextChildren = nextProps.children;
        reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
        return workInProgress2.child;
      }
      function markRef$1(current2, workInProgress2) {
        var ref = workInProgress2.ref;
        if (current2 === null && ref !== null || current2 !== null && current2.ref !== ref) {
          workInProgress2.flags |= Ref;
          workInProgress2.flags |= RefStatic;
        }
      }
      function updateFunctionComponent(current2, workInProgress2, Component, nextProps, renderLanes2) {
        {
          if (workInProgress2.type !== workInProgress2.elementType) {
            var innerPropTypes = Component.propTypes;
            if (innerPropTypes) {
              checkPropTypes(innerPropTypes, nextProps, "prop", getComponentNameFromType(Component));
            }
          }
        }
        var context;
        {
          var unmaskedContext = getUnmaskedContext(workInProgress2, Component, true);
          context = getMaskedContext(workInProgress2, unmaskedContext);
        }
        var nextChildren;
        var hasId;
        prepareToReadContext(workInProgress2, renderLanes2);
        {
          markComponentRenderStarted(workInProgress2);
        }
        {
          ReactCurrentOwner$2.current = workInProgress2;
          setIsRendering(true);
          nextChildren = renderWithHooks(current2, workInProgress2, Component, nextProps, context, renderLanes2);
          hasId = checkDidRenderIdHook();
          setIsRendering(false);
        }
        {
          markComponentRenderStopped();
        }
        if (current2 !== null && !didReceiveUpdate) {
          bailoutHooks(current2, workInProgress2, renderLanes2);
          return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
        }
        if (getIsHydrating() && hasId) {
          pushMaterializedTreeId(workInProgress2);
        }
        workInProgress2.flags |= PerformedWork;
        reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
        return workInProgress2.child;
      }
      function replayFunctionComponent(current2, workInProgress2, nextProps, Component, secondArg, renderLanes2) {
        prepareToReadContext(workInProgress2, renderLanes2);
        {
          markComponentRenderStarted(workInProgress2);
        }
        var nextChildren = replaySuspendedComponentWithHooks(current2, workInProgress2, Component, nextProps, secondArg);
        var hasId = checkDidRenderIdHook();
        {
          markComponentRenderStopped();
        }
        if (current2 !== null && !didReceiveUpdate) {
          bailoutHooks(current2, workInProgress2, renderLanes2);
          return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
        }
        if (getIsHydrating() && hasId) {
          pushMaterializedTreeId(workInProgress2);
        }
        workInProgress2.flags |= PerformedWork;
        reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
        return workInProgress2.child;
      }
      function updateClassComponent(current2, workInProgress2, Component, nextProps, renderLanes2) {
        {
          switch (shouldError(workInProgress2)) {
            case false: {
              var _instance = workInProgress2.stateNode;
              var ctor = workInProgress2.type;
              var tempInstance = new ctor(workInProgress2.memoizedProps, _instance.context);
              var state = tempInstance.state;
              _instance.updater.enqueueSetState(_instance, state, null);
              break;
            }
            case true: {
              workInProgress2.flags |= DidCapture;
              workInProgress2.flags |= ShouldCapture;
              var error$1 = new Error("Simulated error coming from DevTools");
              var lane = pickArbitraryLane(renderLanes2);
              workInProgress2.lanes = mergeLanes(workInProgress2.lanes, lane);
              var update = createClassErrorUpdate(workInProgress2, createCapturedValueAtFiber(error$1, workInProgress2), lane);
              enqueueCapturedUpdate(workInProgress2, update);
              break;
            }
          }
          if (workInProgress2.type !== workInProgress2.elementType) {
            var innerPropTypes = Component.propTypes;
            if (innerPropTypes) {
              checkPropTypes(innerPropTypes, nextProps, "prop", getComponentNameFromType(Component));
            }
          }
        }
        var hasContext;
        if (isContextProvider(Component)) {
          hasContext = true;
          pushContextProvider(workInProgress2);
        } else {
          hasContext = false;
        }
        prepareToReadContext(workInProgress2, renderLanes2);
        var instance = workInProgress2.stateNode;
        var shouldUpdate;
        if (instance === null) {
          resetSuspendedCurrentOnMountInLegacyMode(current2, workInProgress2);
          constructClassInstance(workInProgress2, Component, nextProps);
          mountClassInstance(workInProgress2, Component, nextProps, renderLanes2);
          shouldUpdate = true;
        } else if (current2 === null) {
          shouldUpdate = resumeMountClassInstance(workInProgress2, Component, nextProps, renderLanes2);
        } else {
          shouldUpdate = updateClassInstance(current2, workInProgress2, Component, nextProps, renderLanes2);
        }
        var nextUnitOfWork = finishClassComponent(current2, workInProgress2, Component, shouldUpdate, hasContext, renderLanes2);
        {
          var inst = workInProgress2.stateNode;
          if (shouldUpdate && inst.props !== nextProps) {
            if (!didWarnAboutReassigningProps) {
              error("It looks like %s is reassigning its own `this.props` while rendering. " + "This is not supported and can lead to confusing bugs.", getComponentNameFromFiber(workInProgress2) || "a component");
            }
            didWarnAboutReassigningProps = true;
          }
        }
        return nextUnitOfWork;
      }
      function finishClassComponent(current2, workInProgress2, Component, shouldUpdate, hasContext, renderLanes2) {
        markRef$1(current2, workInProgress2);
        var didCaptureError = (workInProgress2.flags & DidCapture) !== NoFlags$1;
        if (!shouldUpdate && !didCaptureError) {
          if (hasContext) {
            invalidateContextProvider(workInProgress2, Component, false);
          }
          return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
        }
        var instance = workInProgress2.stateNode;
        ReactCurrentOwner$2.current = workInProgress2;
        var nextChildren;
        if (didCaptureError && typeof Component.getDerivedStateFromError !== "function") {
          nextChildren = null;
          {
            stopProfilerTimerIfRunning();
          }
        } else {
          {
            markComponentRenderStarted(workInProgress2);
          }
          {
            setIsRendering(true);
            nextChildren = instance.render();
            if (workInProgress2.mode & StrictLegacyMode) {
              setIsStrictModeForDevtools(true);
              try {
                instance.render();
              } finally {
                setIsStrictModeForDevtools(false);
              }
            }
            setIsRendering(false);
          }
          {
            markComponentRenderStopped();
          }
        }
        workInProgress2.flags |= PerformedWork;
        if (current2 !== null && didCaptureError) {
          forceUnmountCurrentAndReconcile(current2, workInProgress2, nextChildren, renderLanes2);
        } else {
          reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
        }
        workInProgress2.memoizedState = instance.state;
        if (hasContext) {
          invalidateContextProvider(workInProgress2, Component, true);
        }
        return workInProgress2.child;
      }
      function pushHostRootContext(workInProgress2) {
        var root2 = workInProgress2.stateNode;
        if (root2.pendingContext) {
          pushTopLevelContextObject(workInProgress2, root2.pendingContext, root2.pendingContext !== root2.context);
        } else if (root2.context) {
          pushTopLevelContextObject(workInProgress2, root2.context, false);
        }
        pushHostContainer(workInProgress2, root2.containerInfo);
      }
      function updateHostRoot(current2, workInProgress2, renderLanes2) {
        pushHostRootContext(workInProgress2);
        if (current2 === null) {
          throw new Error("Should have a current fiber. This is a bug in React.");
        }
        var nextProps = workInProgress2.pendingProps;
        var prevState = workInProgress2.memoizedState;
        var prevChildren = prevState.element;
        cloneUpdateQueue(current2, workInProgress2);
        processUpdateQueue(workInProgress2, nextProps, null, renderLanes2);
        var nextState = workInProgress2.memoizedState;
        {
          var nextCache = nextState.cache;
          pushCacheProvider(workInProgress2, nextCache);
          if (nextCache !== prevState.cache) {
            propagateContextChange(workInProgress2, CacheContext, renderLanes2);
          }
        }
        var nextChildren = nextState.element;
        if (prevState.isDehydrated) {
          var overrideState = {
            element: nextChildren,
            isDehydrated: false,
            cache: nextState.cache
          };
          var updateQueue = workInProgress2.updateQueue;
          updateQueue.baseState = overrideState;
          workInProgress2.memoizedState = overrideState;
          if (workInProgress2.flags & ForceClientRender) {
            var recoverableError = createCapturedValueAtFiber(new Error("There was an error while hydrating. Because the error happened outside " + "of a Suspense boundary, the entire root will switch to " + "client rendering."), workInProgress2);
            return mountHostRootWithoutHydrating(current2, workInProgress2, nextChildren, renderLanes2, recoverableError);
          } else if (nextChildren !== prevChildren) {
            var _recoverableError = createCapturedValueAtFiber(new Error("This root received an early update, before anything was able " + "hydrate. Switched the entire root to client rendering."), workInProgress2);
            return mountHostRootWithoutHydrating(current2, workInProgress2, nextChildren, renderLanes2, _recoverableError);
          } else {
            enterHydrationState(workInProgress2);
            var child = mountChildFibers(workInProgress2, null, nextChildren, renderLanes2);
            workInProgress2.child = child;
            var node = child;
            while (node) {
              node.flags = node.flags & ~Placement | Hydrating;
              node = node.sibling;
            }
          }
        } else {
          resetHydrationState();
          if (nextChildren === prevChildren) {
            return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
          }
          reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
        }
        return workInProgress2.child;
      }
      function mountHostRootWithoutHydrating(current2, workInProgress2, nextChildren, renderLanes2, recoverableError) {
        resetHydrationState();
        queueHydrationError(recoverableError);
        workInProgress2.flags |= ForceClientRender;
        reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
        return workInProgress2.child;
      }
      function updateHostComponent$1(current2, workInProgress2, renderLanes2) {
        pushHostContext(workInProgress2);
        if (current2 === null) {
          tryToClaimNextHydratableInstance(workInProgress2);
        }
        var type = workInProgress2.type;
        var nextProps = workInProgress2.pendingProps;
        var prevProps = current2 !== null ? current2.memoizedProps : null;
        var nextChildren = nextProps.children;
        var isDirectTextChild = shouldSetTextContent(type, nextProps);
        if (isDirectTextChild) {
          nextChildren = null;
        } else if (prevProps !== null && shouldSetTextContent(type, prevProps)) {
          workInProgress2.flags |= ContentReset;
        }
        {
          var memoizedState = workInProgress2.memoizedState;
          if (memoizedState !== null) {
            var newState = renderTransitionAwareHostComponentWithHooks(current2, workInProgress2, renderLanes2);
            {
              HostTransitionContext._currentValue = newState;
            }
            {
              if (didReceiveUpdate) {
                if (current2 !== null) {
                  var oldStateHook = current2.memoizedState;
                  var oldState = oldStateHook.memoizedState;
                  if (oldState !== newState) {
                    propagateContextChange(workInProgress2, HostTransitionContext, renderLanes2);
                  }
                }
              }
            }
          }
        }
        markRef$1(current2, workInProgress2);
        reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
        return workInProgress2.child;
      }
      function updateHostHoistable(current2, workInProgress2, renderLanes2) {
        markRef$1(current2, workInProgress2);
        var currentProps = current2 === null ? null : current2.memoizedProps;
        var resource = workInProgress2.memoizedState = getResource(workInProgress2.type, currentProps, workInProgress2.pendingProps);
        if (current2 === null) {
          if (!getIsHydrating() && resource === null) {
            workInProgress2.stateNode = createHoistableInstance(workInProgress2.type, workInProgress2.pendingProps, getRootHostContainer(), workInProgress2);
          }
        }
        return null;
      }
      function updateHostSingleton(current2, workInProgress2, renderLanes2) {
        pushHostContext(workInProgress2);
        if (current2 === null) {
          claimHydratableSingleton(workInProgress2);
        }
        var nextChildren = workInProgress2.pendingProps.children;
        if (current2 === null && !getIsHydrating()) {
          workInProgress2.child = reconcileChildFibers(workInProgress2, null, nextChildren, renderLanes2);
        } else {
          reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
        }
        markRef$1(current2, workInProgress2);
        return workInProgress2.child;
      }
      function updateHostText$1(current2, workInProgress2) {
        if (current2 === null) {
          tryToClaimNextHydratableTextInstance(workInProgress2);
        }
        return null;
      }
      function mountLazyComponent(_current, workInProgress2, elementType, renderLanes2) {
        resetSuspendedCurrentOnMountInLegacyMode(_current, workInProgress2);
        var props = workInProgress2.pendingProps;
        var lazyComponent = elementType;
        var payload = lazyComponent._payload;
        var init = lazyComponent._init;
        var Component = init(payload);
        workInProgress2.type = Component;
        var resolvedTag = workInProgress2.tag = resolveLazyComponentTag(Component);
        var resolvedProps = resolveDefaultProps(Component, props);
        var child;
        switch (resolvedTag) {
          case FunctionComponent: {
            {
              validateFunctionComponentInDev(workInProgress2, Component);
              workInProgress2.type = Component = resolveFunctionForHotReloading(Component);
            }
            child = updateFunctionComponent(null, workInProgress2, Component, resolvedProps, renderLanes2);
            return child;
          }
          case ClassComponent: {
            {
              workInProgress2.type = Component = resolveClassForHotReloading(Component);
            }
            child = updateClassComponent(null, workInProgress2, Component, resolvedProps, renderLanes2);
            return child;
          }
          case ForwardRef: {
            {
              workInProgress2.type = Component = resolveForwardRefForHotReloading(Component);
            }
            child = updateForwardRef(null, workInProgress2, Component, resolvedProps, renderLanes2);
            return child;
          }
          case MemoComponent: {
            {
              if (workInProgress2.type !== workInProgress2.elementType) {
                var outerPropTypes = Component.propTypes;
                if (outerPropTypes) {
                  checkPropTypes(outerPropTypes, resolvedProps, "prop", getComponentNameFromType(Component));
                }
              }
            }
            child = updateMemoComponent(null, workInProgress2, Component, resolveDefaultProps(Component.type, resolvedProps), renderLanes2);
            return child;
          }
        }
        var hint = "";
        {
          if (Component !== null && typeof Component === "object" && Component.$$typeof === REACT_LAZY_TYPE) {
            hint = " Did you wrap a component in React.lazy() more than once?";
          }
        }
        throw new Error("Element type is invalid. Received a promise that resolves to: " + Component + ". " + ("Lazy element type must resolve to a class or function." + hint));
      }
      function mountIncompleteClassComponent(_current, workInProgress2, Component, nextProps, renderLanes2) {
        resetSuspendedCurrentOnMountInLegacyMode(_current, workInProgress2);
        workInProgress2.tag = ClassComponent;
        var hasContext;
        if (isContextProvider(Component)) {
          hasContext = true;
          pushContextProvider(workInProgress2);
        } else {
          hasContext = false;
        }
        prepareToReadContext(workInProgress2, renderLanes2);
        constructClassInstance(workInProgress2, Component, nextProps);
        mountClassInstance(workInProgress2, Component, nextProps, renderLanes2);
        return finishClassComponent(null, workInProgress2, Component, true, hasContext, renderLanes2);
      }
      function mountIndeterminateComponent(_current, workInProgress2, Component, renderLanes2) {
        resetSuspendedCurrentOnMountInLegacyMode(_current, workInProgress2);
        var props = workInProgress2.pendingProps;
        var context;
        {
          var unmaskedContext = getUnmaskedContext(workInProgress2, Component, false);
          context = getMaskedContext(workInProgress2, unmaskedContext);
        }
        prepareToReadContext(workInProgress2, renderLanes2);
        var value;
        var hasId;
        {
          markComponentRenderStarted(workInProgress2);
        }
        {
          if (Component.prototype && typeof Component.prototype.render === "function") {
            var componentName = getComponentNameFromType(Component) || "Unknown";
            if (!didWarnAboutBadClass[componentName]) {
              error("The <%s /> component appears to have a render method, but doesn't extend React.Component. " + "This is likely to cause errors. Change %s to extend React.Component instead.", componentName, componentName);
              didWarnAboutBadClass[componentName] = true;
            }
          }
          if (workInProgress2.mode & StrictLegacyMode) {
            ReactStrictModeWarnings.recordLegacyContextWarning(workInProgress2, null);
          }
          setIsRendering(true);
          ReactCurrentOwner$2.current = workInProgress2;
          value = renderWithHooks(null, workInProgress2, Component, props, context, renderLanes2);
          hasId = checkDidRenderIdHook();
          setIsRendering(false);
        }
        {
          markComponentRenderStopped();
        }
        workInProgress2.flags |= PerformedWork;
        {
          if (typeof value === "object" && value !== null && typeof value.render === "function" && value.$$typeof === undefined) {
            var _componentName = getComponentNameFromType(Component) || "Unknown";
            if (!didWarnAboutModulePatternComponent[_componentName]) {
              error("The <%s /> component appears to be a function component that returns a class instance. " + "Change %s to a class that extends React.Component instead. " + "If you can't use a class try assigning the prototype on the function as a workaround. " + "`%s.prototype = React.Component.prototype`. Don't use an arrow function since it " + "cannot be called with `new` by React.", _componentName, _componentName, _componentName);
              didWarnAboutModulePatternComponent[_componentName] = true;
            }
          }
        }
        if (typeof value === "object" && value !== null && typeof value.render === "function" && value.$$typeof === undefined) {
          {
            var _componentName2 = getComponentNameFromType(Component) || "Unknown";
            if (!didWarnAboutModulePatternComponent[_componentName2]) {
              error("The <%s /> component appears to be a function component that returns a class instance. " + "Change %s to a class that extends React.Component instead. " + "If you can't use a class try assigning the prototype on the function as a workaround. " + "`%s.prototype = React.Component.prototype`. Don't use an arrow function since it " + "cannot be called with `new` by React.", _componentName2, _componentName2, _componentName2);
              didWarnAboutModulePatternComponent[_componentName2] = true;
            }
          }
          workInProgress2.tag = ClassComponent;
          workInProgress2.memoizedState = null;
          workInProgress2.updateQueue = null;
          var hasContext = false;
          if (isContextProvider(Component)) {
            hasContext = true;
            pushContextProvider(workInProgress2);
          } else {
            hasContext = false;
          }
          workInProgress2.memoizedState = value.state !== null && value.state !== undefined ? value.state : null;
          initializeUpdateQueue(workInProgress2);
          adoptClassInstance(workInProgress2, value);
          mountClassInstance(workInProgress2, Component, props, renderLanes2);
          return finishClassComponent(null, workInProgress2, Component, true, hasContext, renderLanes2);
        } else {
          workInProgress2.tag = FunctionComponent;
          if (getIsHydrating() && hasId) {
            pushMaterializedTreeId(workInProgress2);
          }
          reconcileChildren(null, workInProgress2, value, renderLanes2);
          {
            validateFunctionComponentInDev(workInProgress2, Component);
          }
          return workInProgress2.child;
        }
      }
      function validateFunctionComponentInDev(workInProgress2, Component) {
        {
          if (Component) {
            if (Component.childContextTypes) {
              error("%s(...): childContextTypes cannot be defined on a function component.", Component.displayName || Component.name || "Component");
            }
          }
          if (workInProgress2.ref !== null) {
            var info2 = "";
            var ownerName = getCurrentFiberOwnerNameInDevOrNull();
            if (ownerName) {
              info2 += `

Check the render method of \`` + ownerName + "`.";
            }
            var warningKey = ownerName || "";
            var debugSource = workInProgress2._debugSource;
            if (debugSource) {
              warningKey = debugSource.fileName + ":" + debugSource.lineNumber;
            }
            if (!didWarnAboutFunctionRefs[warningKey]) {
              didWarnAboutFunctionRefs[warningKey] = true;
              error("Function components cannot be given refs. " + "Attempts to access this ref will fail. " + "Did you mean to use React.forwardRef()?%s", info2);
            }
          }
          if (Component.defaultProps !== undefined) {
            var componentName = getComponentNameFromType(Component) || "Unknown";
            if (!didWarnAboutDefaultPropsOnFunctionComponent[componentName]) {
              error("%s: Support for defaultProps will be removed from function components " + "in a future major release. Use JavaScript default parameters instead.", componentName);
              didWarnAboutDefaultPropsOnFunctionComponent[componentName] = true;
            }
          }
          if (typeof Component.getDerivedStateFromProps === "function") {
            var _componentName3 = getComponentNameFromType(Component) || "Unknown";
            if (!didWarnAboutGetDerivedStateOnFunctionComponent[_componentName3]) {
              error("%s: Function components do not support getDerivedStateFromProps.", _componentName3);
              didWarnAboutGetDerivedStateOnFunctionComponent[_componentName3] = true;
            }
          }
          if (typeof Component.contextType === "object" && Component.contextType !== null) {
            var _componentName4 = getComponentNameFromType(Component) || "Unknown";
            if (!didWarnAboutContextTypeOnFunctionComponent[_componentName4]) {
              error("%s: Function components do not support contextType.", _componentName4);
              didWarnAboutContextTypeOnFunctionComponent[_componentName4] = true;
            }
          }
        }
      }
      var SUSPENDED_MARKER = {
        dehydrated: null,
        treeContext: null,
        retryLane: NoLane
      };
      function mountSuspenseOffscreenState(renderLanes2) {
        return {
          baseLanes: renderLanes2,
          cachePool: getSuspendedCache()
        };
      }
      function updateSuspenseOffscreenState(prevOffscreenState, renderLanes2) {
        var cachePool = null;
        {
          var prevCachePool = prevOffscreenState.cachePool;
          if (prevCachePool !== null) {
            var parentCache = CacheContext._currentValue;
            if (prevCachePool.parent !== parentCache) {
              cachePool = {
                parent: parentCache,
                pool: parentCache
              };
            } else {
              cachePool = prevCachePool;
            }
          } else {
            cachePool = getSuspendedCache();
          }
        }
        return {
          baseLanes: mergeLanes(prevOffscreenState.baseLanes, renderLanes2),
          cachePool
        };
      }
      function shouldRemainOnFallback(current2, workInProgress2, renderLanes2) {
        if (current2 !== null) {
          var suspenseState = current2.memoizedState;
          if (suspenseState === null) {
            return false;
          }
        }
        var suspenseContext = suspenseStackCursor.current;
        return hasSuspenseListContext(suspenseContext, ForceSuspenseFallback);
      }
      function getRemainingWorkInPrimaryTree(current2, renderLanes2) {
        return removeLanes(current2.childLanes, renderLanes2);
      }
      function updateSuspenseComponent(current2, workInProgress2, renderLanes2) {
        var nextProps = workInProgress2.pendingProps;
        {
          if (shouldSuspend(workInProgress2)) {
            workInProgress2.flags |= DidCapture;
          }
        }
        var showFallback = false;
        var didSuspend = (workInProgress2.flags & DidCapture) !== NoFlags$1;
        if (didSuspend || shouldRemainOnFallback(current2)) {
          showFallback = true;
          workInProgress2.flags &= ~DidCapture;
        }
        if (current2 === null) {
          if (getIsHydrating()) {
            if (showFallback) {
              pushPrimaryTreeSuspenseHandler(workInProgress2);
            } else {
              pushFallbackTreeSuspenseHandler(workInProgress2);
            }
            tryToClaimNextHydratableSuspenseInstance(workInProgress2);
            var suspenseState = workInProgress2.memoizedState;
            if (suspenseState !== null) {
              var dehydrated = suspenseState.dehydrated;
              if (dehydrated !== null) {
                return mountDehydratedSuspenseComponent(workInProgress2, dehydrated);
              }
            }
            popSuspenseHandler(workInProgress2);
          }
          var nextPrimaryChildren = nextProps.children;
          var nextFallbackChildren = nextProps.fallback;
          if (showFallback) {
            pushFallbackTreeSuspenseHandler(workInProgress2);
            var fallbackFragment = mountSuspenseFallbackChildren(workInProgress2, nextPrimaryChildren, nextFallbackChildren, renderLanes2);
            var primaryChildFragment = workInProgress2.child;
            primaryChildFragment.memoizedState = mountSuspenseOffscreenState(renderLanes2);
            workInProgress2.memoizedState = SUSPENDED_MARKER;
            return fallbackFragment;
          } else if (typeof nextProps.unstable_expectedLoadTime === "number") {
            pushFallbackTreeSuspenseHandler(workInProgress2);
            var _fallbackFragment = mountSuspenseFallbackChildren(workInProgress2, nextPrimaryChildren, nextFallbackChildren, renderLanes2);
            var _primaryChildFragment = workInProgress2.child;
            _primaryChildFragment.memoizedState = mountSuspenseOffscreenState(renderLanes2);
            workInProgress2.memoizedState = SUSPENDED_MARKER;
            workInProgress2.lanes = SomeRetryLane;
            return _fallbackFragment;
          } else {
            pushPrimaryTreeSuspenseHandler(workInProgress2);
            return mountSuspensePrimaryChildren(workInProgress2, nextPrimaryChildren);
          }
        } else {
          var prevState = current2.memoizedState;
          if (prevState !== null) {
            var _dehydrated = prevState.dehydrated;
            if (_dehydrated !== null) {
              return updateDehydratedSuspenseComponent(current2, workInProgress2, didSuspend, nextProps, _dehydrated, prevState, renderLanes2);
            }
          }
          if (showFallback) {
            pushFallbackTreeSuspenseHandler(workInProgress2);
            var _nextFallbackChildren = nextProps.fallback;
            var _nextPrimaryChildren = nextProps.children;
            var fallbackChildFragment = updateSuspenseFallbackChildren(current2, workInProgress2, _nextPrimaryChildren, _nextFallbackChildren, renderLanes2);
            var _primaryChildFragment2 = workInProgress2.child;
            var prevOffscreenState = current2.child.memoizedState;
            _primaryChildFragment2.memoizedState = prevOffscreenState === null ? mountSuspenseOffscreenState(renderLanes2) : updateSuspenseOffscreenState(prevOffscreenState, renderLanes2);
            _primaryChildFragment2.childLanes = getRemainingWorkInPrimaryTree(current2, renderLanes2);
            workInProgress2.memoizedState = SUSPENDED_MARKER;
            return fallbackChildFragment;
          } else {
            pushPrimaryTreeSuspenseHandler(workInProgress2);
            var _nextPrimaryChildren2 = nextProps.children;
            var _primaryChildFragment3 = updateSuspensePrimaryChildren(current2, workInProgress2, _nextPrimaryChildren2, renderLanes2);
            workInProgress2.memoizedState = null;
            return _primaryChildFragment3;
          }
        }
      }
      function mountSuspensePrimaryChildren(workInProgress2, primaryChildren, renderLanes2) {
        var mode = workInProgress2.mode;
        var primaryChildProps = {
          mode: "visible",
          children: primaryChildren
        };
        var primaryChildFragment = mountWorkInProgressOffscreenFiber(primaryChildProps, mode);
        primaryChildFragment.return = workInProgress2;
        workInProgress2.child = primaryChildFragment;
        return primaryChildFragment;
      }
      function mountSuspenseFallbackChildren(workInProgress2, primaryChildren, fallbackChildren, renderLanes2) {
        var mode = workInProgress2.mode;
        var progressedPrimaryFragment = workInProgress2.child;
        var primaryChildProps = {
          mode: "hidden",
          children: primaryChildren
        };
        var primaryChildFragment;
        var fallbackChildFragment;
        if ((mode & ConcurrentMode) === NoMode && progressedPrimaryFragment !== null) {
          primaryChildFragment = progressedPrimaryFragment;
          primaryChildFragment.childLanes = NoLanes;
          primaryChildFragment.pendingProps = primaryChildProps;
          if (workInProgress2.mode & ProfileMode) {
            primaryChildFragment.actualDuration = 0;
            primaryChildFragment.actualStartTime = -1;
            primaryChildFragment.selfBaseDuration = 0;
            primaryChildFragment.treeBaseDuration = 0;
          }
          fallbackChildFragment = createFiberFromFragment(fallbackChildren, mode, renderLanes2, null);
        } else {
          primaryChildFragment = mountWorkInProgressOffscreenFiber(primaryChildProps, mode);
          fallbackChildFragment = createFiberFromFragment(fallbackChildren, mode, renderLanes2, null);
        }
        primaryChildFragment.return = workInProgress2;
        fallbackChildFragment.return = workInProgress2;
        primaryChildFragment.sibling = fallbackChildFragment;
        workInProgress2.child = primaryChildFragment;
        return fallbackChildFragment;
      }
      function mountWorkInProgressOffscreenFiber(offscreenProps, mode, renderLanes2) {
        return createFiberFromOffscreen(offscreenProps, mode, NoLanes, null);
      }
      function updateWorkInProgressOffscreenFiber(current2, offscreenProps) {
        return createWorkInProgress(current2, offscreenProps);
      }
      function updateSuspensePrimaryChildren(current2, workInProgress2, primaryChildren, renderLanes2) {
        var currentPrimaryChildFragment = current2.child;
        var currentFallbackChildFragment = currentPrimaryChildFragment.sibling;
        var primaryChildFragment = updateWorkInProgressOffscreenFiber(currentPrimaryChildFragment, {
          mode: "visible",
          children: primaryChildren
        });
        if ((workInProgress2.mode & ConcurrentMode) === NoMode) {
          primaryChildFragment.lanes = renderLanes2;
        }
        primaryChildFragment.return = workInProgress2;
        primaryChildFragment.sibling = null;
        if (currentFallbackChildFragment !== null) {
          var deletions = workInProgress2.deletions;
          if (deletions === null) {
            workInProgress2.deletions = [currentFallbackChildFragment];
            workInProgress2.flags |= ChildDeletion;
          } else {
            deletions.push(currentFallbackChildFragment);
          }
        }
        workInProgress2.child = primaryChildFragment;
        return primaryChildFragment;
      }
      function updateSuspenseFallbackChildren(current2, workInProgress2, primaryChildren, fallbackChildren, renderLanes2) {
        var mode = workInProgress2.mode;
        var currentPrimaryChildFragment = current2.child;
        var currentFallbackChildFragment = currentPrimaryChildFragment.sibling;
        var primaryChildProps = {
          mode: "hidden",
          children: primaryChildren
        };
        var primaryChildFragment;
        if ((mode & ConcurrentMode) === NoMode && workInProgress2.child !== currentPrimaryChildFragment) {
          var progressedPrimaryFragment = workInProgress2.child;
          primaryChildFragment = progressedPrimaryFragment;
          primaryChildFragment.childLanes = NoLanes;
          primaryChildFragment.pendingProps = primaryChildProps;
          if (workInProgress2.mode & ProfileMode) {
            primaryChildFragment.actualDuration = 0;
            primaryChildFragment.actualStartTime = -1;
            primaryChildFragment.selfBaseDuration = currentPrimaryChildFragment.selfBaseDuration;
            primaryChildFragment.treeBaseDuration = currentPrimaryChildFragment.treeBaseDuration;
          }
          workInProgress2.deletions = null;
        } else {
          primaryChildFragment = updateWorkInProgressOffscreenFiber(currentPrimaryChildFragment, primaryChildProps);
          primaryChildFragment.subtreeFlags = currentPrimaryChildFragment.subtreeFlags & StaticMask;
        }
        var fallbackChildFragment;
        if (currentFallbackChildFragment !== null) {
          fallbackChildFragment = createWorkInProgress(currentFallbackChildFragment, fallbackChildren);
        } else {
          fallbackChildFragment = createFiberFromFragment(fallbackChildren, mode, renderLanes2, null);
          fallbackChildFragment.flags |= Placement;
        }
        fallbackChildFragment.return = workInProgress2;
        primaryChildFragment.return = workInProgress2;
        primaryChildFragment.sibling = fallbackChildFragment;
        workInProgress2.child = primaryChildFragment;
        return fallbackChildFragment;
      }
      function retrySuspenseComponentWithoutHydrating(current2, workInProgress2, renderLanes2, recoverableError) {
        if (recoverableError !== null) {
          queueHydrationError(recoverableError);
        }
        reconcileChildFibers(workInProgress2, current2.child, null, renderLanes2);
        var nextProps = workInProgress2.pendingProps;
        var primaryChildren = nextProps.children;
        var primaryChildFragment = mountSuspensePrimaryChildren(workInProgress2, primaryChildren);
        primaryChildFragment.flags |= Placement;
        workInProgress2.memoizedState = null;
        return primaryChildFragment;
      }
      function mountSuspenseFallbackAfterRetryWithoutHydrating(current2, workInProgress2, primaryChildren, fallbackChildren, renderLanes2) {
        var fiberMode = workInProgress2.mode;
        var primaryChildProps = {
          mode: "visible",
          children: primaryChildren
        };
        var primaryChildFragment = mountWorkInProgressOffscreenFiber(primaryChildProps, fiberMode);
        var fallbackChildFragment = createFiberFromFragment(fallbackChildren, fiberMode, renderLanes2, null);
        fallbackChildFragment.flags |= Placement;
        primaryChildFragment.return = workInProgress2;
        fallbackChildFragment.return = workInProgress2;
        primaryChildFragment.sibling = fallbackChildFragment;
        workInProgress2.child = primaryChildFragment;
        if ((workInProgress2.mode & ConcurrentMode) !== NoMode) {
          reconcileChildFibers(workInProgress2, current2.child, null, renderLanes2);
        }
        return fallbackChildFragment;
      }
      function mountDehydratedSuspenseComponent(workInProgress2, suspenseInstance, renderLanes2) {
        if ((workInProgress2.mode & ConcurrentMode) === NoMode) {
          {
            error("Cannot hydrate Suspense in legacy mode. Switch from " + "ReactDOM.hydrate(element, container) to " + "ReactDOMClient.hydrateRoot(container, <App />)" + ".render(element) or remove the Suspense components from " + "the server rendered components.");
          }
          workInProgress2.lanes = laneToLanes(SyncLane);
        } else if (isSuspenseInstanceFallback(suspenseInstance)) {
          workInProgress2.lanes = laneToLanes(DefaultHydrationLane);
        } else {
          workInProgress2.lanes = laneToLanes(OffscreenLane);
        }
        return null;
      }
      function updateDehydratedSuspenseComponent(current2, workInProgress2, didSuspend, nextProps, suspenseInstance, suspenseState, renderLanes2) {
        if (!didSuspend) {
          pushPrimaryTreeSuspenseHandler(workInProgress2);
          warnIfHydrating();
          if ((workInProgress2.mode & ConcurrentMode) === NoMode) {
            return retrySuspenseComponentWithoutHydrating(current2, workInProgress2, renderLanes2, null);
          }
          if (isSuspenseInstanceFallback(suspenseInstance)) {
            var digest, message, stack;
            {
              var _getSuspenseInstanceF = getSuspenseInstanceFallbackErrorDetails(suspenseInstance);
              digest = _getSuspenseInstanceF.digest;
              message = _getSuspenseInstanceF.message;
              stack = _getSuspenseInstanceF.stack;
            }
            var error2;
            if (message) {
              error2 = new Error(message);
            } else {
              error2 = new Error("The server could not finish this Suspense boundary, likely " + "due to an error during server rendering. Switched to " + "client rendering.");
            }
            error2.digest = digest;
            var capturedValue = createCapturedValue(error2, digest, stack);
            return retrySuspenseComponentWithoutHydrating(current2, workInProgress2, renderLanes2, capturedValue);
          }
          var hasContextChanged2 = includesSomeLane(renderLanes2, current2.childLanes);
          if (didReceiveUpdate || hasContextChanged2) {
            var root2 = getWorkInProgressRoot();
            if (root2 !== null) {
              var attemptHydrationAtLane = getBumpedLaneForHydration(root2, renderLanes2);
              if (attemptHydrationAtLane !== NoLane && attemptHydrationAtLane !== suspenseState.retryLane) {
                suspenseState.retryLane = attemptHydrationAtLane;
                enqueueConcurrentRenderForLane(current2, attemptHydrationAtLane);
                scheduleUpdateOnFiber(root2, current2, attemptHydrationAtLane);
                throw SelectiveHydrationException;
              }
            }
            renderDidSuspendDelayIfPossible();
            return retrySuspenseComponentWithoutHydrating(current2, workInProgress2, renderLanes2, null);
          } else if (isSuspenseInstancePending(suspenseInstance)) {
            workInProgress2.flags |= DidCapture;
            workInProgress2.child = current2.child;
            var retry = retryDehydratedSuspenseBoundary.bind(null, current2);
            registerSuspenseInstanceRetry(suspenseInstance, retry);
            return null;
          } else {
            reenterHydrationStateFromDehydratedSuspenseInstance(workInProgress2, suspenseInstance, suspenseState.treeContext);
            var primaryChildren = nextProps.children;
            var primaryChildFragment = mountSuspensePrimaryChildren(workInProgress2, primaryChildren);
            primaryChildFragment.flags |= Hydrating;
            return primaryChildFragment;
          }
        } else {
          if (workInProgress2.flags & ForceClientRender) {
            pushPrimaryTreeSuspenseHandler(workInProgress2);
            workInProgress2.flags &= ~ForceClientRender;
            var _capturedValue = createCapturedValue(new Error("There was an error while hydrating this Suspense boundary. " + "Switched to client rendering."));
            return retrySuspenseComponentWithoutHydrating(current2, workInProgress2, renderLanes2, _capturedValue);
          } else if (workInProgress2.memoizedState !== null) {
            pushFallbackTreeSuspenseHandler(workInProgress2);
            workInProgress2.child = current2.child;
            workInProgress2.flags |= DidCapture;
            return null;
          } else {
            pushFallbackTreeSuspenseHandler(workInProgress2);
            var nextPrimaryChildren = nextProps.children;
            var nextFallbackChildren = nextProps.fallback;
            var fallbackChildFragment = mountSuspenseFallbackAfterRetryWithoutHydrating(current2, workInProgress2, nextPrimaryChildren, nextFallbackChildren, renderLanes2);
            var _primaryChildFragment4 = workInProgress2.child;
            _primaryChildFragment4.memoizedState = mountSuspenseOffscreenState(renderLanes2);
            workInProgress2.memoizedState = SUSPENDED_MARKER;
            return fallbackChildFragment;
          }
        }
      }
      function scheduleSuspenseWorkOnFiber(fiber, renderLanes2, propagationRoot) {
        fiber.lanes = mergeLanes(fiber.lanes, renderLanes2);
        var alternate = fiber.alternate;
        if (alternate !== null) {
          alternate.lanes = mergeLanes(alternate.lanes, renderLanes2);
        }
        scheduleContextWorkOnParentPath(fiber.return, renderLanes2, propagationRoot);
      }
      function propagateSuspenseContextChange(workInProgress2, firstChild, renderLanes2) {
        var node = firstChild;
        while (node !== null) {
          if (node.tag === SuspenseComponent) {
            var state = node.memoizedState;
            if (state !== null) {
              scheduleSuspenseWorkOnFiber(node, renderLanes2, workInProgress2);
            }
          } else if (node.tag === SuspenseListComponent) {
            scheduleSuspenseWorkOnFiber(node, renderLanes2, workInProgress2);
          } else if (node.child !== null) {
            node.child.return = node;
            node = node.child;
            continue;
          }
          if (node === workInProgress2) {
            return;
          }
          while (node.sibling === null) {
            if (node.return === null || node.return === workInProgress2) {
              return;
            }
            node = node.return;
          }
          node.sibling.return = node.return;
          node = node.sibling;
        }
      }
      function findLastContentRow(firstChild) {
        var row = firstChild;
        var lastContentRow = null;
        while (row !== null) {
          var currentRow = row.alternate;
          if (currentRow !== null && findFirstSuspended(currentRow) === null) {
            lastContentRow = row;
          }
          row = row.sibling;
        }
        return lastContentRow;
      }
      function validateRevealOrder(revealOrder) {
        {
          if (revealOrder !== undefined && revealOrder !== "forwards" && revealOrder !== "backwards" && revealOrder !== "together" && !didWarnAboutRevealOrder[revealOrder]) {
            didWarnAboutRevealOrder[revealOrder] = true;
            if (typeof revealOrder === "string") {
              switch (revealOrder.toLowerCase()) {
                case "together":
                case "forwards":
                case "backwards": {
                  error('"%s" is not a valid value for revealOrder on <SuspenseList />. ' + 'Use lowercase "%s" instead.', revealOrder, revealOrder.toLowerCase());
                  break;
                }
                case "forward":
                case "backward": {
                  error('"%s" is not a valid value for revealOrder on <SuspenseList />. ' + 'React uses the -s suffix in the spelling. Use "%ss" instead.', revealOrder, revealOrder.toLowerCase());
                  break;
                }
                default:
                  error('"%s" is not a supported revealOrder on <SuspenseList />. ' + 'Did you mean "together", "forwards" or "backwards"?', revealOrder);
                  break;
              }
            } else {
              error("%s is not a supported value for revealOrder on <SuspenseList />. " + 'Did you mean "together", "forwards" or "backwards"?', revealOrder);
            }
          }
        }
      }
      function validateTailOptions(tailMode, revealOrder) {
        {
          if (tailMode !== undefined && !didWarnAboutTailOptions[tailMode]) {
            if (tailMode !== "collapsed" && tailMode !== "hidden") {
              didWarnAboutTailOptions[tailMode] = true;
              error('"%s" is not a supported value for tail on <SuspenseList />. ' + 'Did you mean "collapsed" or "hidden"?', tailMode);
            } else if (revealOrder !== "forwards" && revealOrder !== "backwards") {
              didWarnAboutTailOptions[tailMode] = true;
              error('<SuspenseList tail="%s" /> is only valid if revealOrder is ' + '"forwards" or "backwards". ' + 'Did you mean to specify revealOrder="forwards"?', tailMode);
            }
          }
        }
      }
      function validateSuspenseListNestedChild(childSlot, index2) {
        {
          var isAnArray = isArray(childSlot);
          var isIterable = !isAnArray && typeof getIteratorFn(childSlot) === "function";
          if (isAnArray || isIterable) {
            var type = isAnArray ? "array" : "iterable";
            error("A nested %s was passed to row #%s in <SuspenseList />. Wrap it in " + "an additional SuspenseList to configure its revealOrder: " + "<SuspenseList revealOrder=...> ... " + "<SuspenseList revealOrder=...>{%s}</SuspenseList> ... " + "</SuspenseList>", type, index2, type);
            return false;
          }
        }
        return true;
      }
      function validateSuspenseListChildren(children, revealOrder) {
        {
          if ((revealOrder === "forwards" || revealOrder === "backwards") && children !== undefined && children !== null && children !== false) {
            if (isArray(children)) {
              for (var i = 0;i < children.length; i++) {
                if (!validateSuspenseListNestedChild(children[i], i)) {
                  return;
                }
              }
            } else {
              var iteratorFn = getIteratorFn(children);
              if (typeof iteratorFn === "function") {
                var childrenIterator = iteratorFn.call(children);
                if (childrenIterator) {
                  var step = childrenIterator.next();
                  var _i = 0;
                  for (;!step.done; step = childrenIterator.next()) {
                    if (!validateSuspenseListNestedChild(step.value, _i)) {
                      return;
                    }
                    _i++;
                  }
                }
              } else {
                error('A single row was passed to a <SuspenseList revealOrder="%s" />. ' + "This is not useful since it needs multiple rows. " + "Did you mean to pass multiple children or an array?", revealOrder);
              }
            }
          }
        }
      }
      function initSuspenseListRenderState(workInProgress2, isBackwards, tail, lastContentRow, tailMode) {
        var renderState = workInProgress2.memoizedState;
        if (renderState === null) {
          workInProgress2.memoizedState = {
            isBackwards,
            rendering: null,
            renderingStartTime: 0,
            last: lastContentRow,
            tail,
            tailMode
          };
        } else {
          renderState.isBackwards = isBackwards;
          renderState.rendering = null;
          renderState.renderingStartTime = 0;
          renderState.last = lastContentRow;
          renderState.tail = tail;
          renderState.tailMode = tailMode;
        }
      }
      function updateSuspenseListComponent(current2, workInProgress2, renderLanes2) {
        var nextProps = workInProgress2.pendingProps;
        var revealOrder = nextProps.revealOrder;
        var tailMode = nextProps.tail;
        var newChildren = nextProps.children;
        validateRevealOrder(revealOrder);
        validateTailOptions(tailMode, revealOrder);
        validateSuspenseListChildren(newChildren, revealOrder);
        reconcileChildren(current2, workInProgress2, newChildren, renderLanes2);
        var suspenseContext = suspenseStackCursor.current;
        var shouldForceFallback = hasSuspenseListContext(suspenseContext, ForceSuspenseFallback);
        if (shouldForceFallback) {
          suspenseContext = setShallowSuspenseListContext(suspenseContext, ForceSuspenseFallback);
          workInProgress2.flags |= DidCapture;
        } else {
          var didSuspendBefore = current2 !== null && (current2.flags & DidCapture) !== NoFlags$1;
          if (didSuspendBefore) {
            propagateSuspenseContextChange(workInProgress2, workInProgress2.child, renderLanes2);
          }
          suspenseContext = setDefaultShallowSuspenseListContext(suspenseContext);
        }
        pushSuspenseListContext(workInProgress2, suspenseContext);
        if ((workInProgress2.mode & ConcurrentMode) === NoMode) {
          workInProgress2.memoizedState = null;
        } else {
          switch (revealOrder) {
            case "forwards": {
              var lastContentRow = findLastContentRow(workInProgress2.child);
              var tail;
              if (lastContentRow === null) {
                tail = workInProgress2.child;
                workInProgress2.child = null;
              } else {
                tail = lastContentRow.sibling;
                lastContentRow.sibling = null;
              }
              initSuspenseListRenderState(workInProgress2, false, tail, lastContentRow, tailMode);
              break;
            }
            case "backwards": {
              var _tail = null;
              var row = workInProgress2.child;
              workInProgress2.child = null;
              while (row !== null) {
                var currentRow = row.alternate;
                if (currentRow !== null && findFirstSuspended(currentRow) === null) {
                  workInProgress2.child = row;
                  break;
                }
                var nextRow = row.sibling;
                row.sibling = _tail;
                _tail = row;
                row = nextRow;
              }
              initSuspenseListRenderState(workInProgress2, true, _tail, null, tailMode);
              break;
            }
            case "together": {
              initSuspenseListRenderState(workInProgress2, false, null, null, undefined);
              break;
            }
            default: {
              workInProgress2.memoizedState = null;
            }
          }
        }
        return workInProgress2.child;
      }
      function updatePortalComponent(current2, workInProgress2, renderLanes2) {
        pushHostContainer(workInProgress2, workInProgress2.stateNode.containerInfo);
        var nextChildren = workInProgress2.pendingProps;
        if (current2 === null) {
          workInProgress2.child = reconcileChildFibers(workInProgress2, null, nextChildren, renderLanes2);
        } else {
          reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
        }
        return workInProgress2.child;
      }
      var hasWarnedAboutUsingNoValuePropOnContextProvider = false;
      function updateContextProvider(current2, workInProgress2, renderLanes2) {
        var providerType = workInProgress2.type;
        var context = providerType._context;
        var newProps = workInProgress2.pendingProps;
        var oldProps = workInProgress2.memoizedProps;
        var newValue = newProps.value;
        {
          if (!("value" in newProps)) {
            if (!hasWarnedAboutUsingNoValuePropOnContextProvider) {
              hasWarnedAboutUsingNoValuePropOnContextProvider = true;
              error("The `value` prop is required for the `<Context.Provider>`. Did you misspell it or forget to pass it?");
            }
          }
          var providerPropTypes = workInProgress2.type.propTypes;
          if (providerPropTypes) {
            checkPropTypes(providerPropTypes, newProps, "prop", "Context.Provider");
          }
        }
        pushProvider(workInProgress2, context, newValue);
        {
          if (oldProps !== null) {
            var oldValue = oldProps.value;
            if (objectIs(oldValue, newValue)) {
              if (oldProps.children === newProps.children && !hasContextChanged()) {
                return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
              }
            } else {
              propagateContextChange(workInProgress2, context, renderLanes2);
            }
          }
        }
        var newChildren = newProps.children;
        reconcileChildren(current2, workInProgress2, newChildren, renderLanes2);
        return workInProgress2.child;
      }
      var hasWarnedAboutUsingContextAsConsumer = false;
      function updateContextConsumer(current2, workInProgress2, renderLanes2) {
        var context = workInProgress2.type;
        {
          if (context._context === undefined) {
            if (context !== context.Consumer) {
              if (!hasWarnedAboutUsingContextAsConsumer) {
                hasWarnedAboutUsingContextAsConsumer = true;
                error("Rendering <Context> directly is not supported and will be removed in " + "a future major release. Did you mean to render <Context.Consumer> instead?");
              }
            }
          } else {
            context = context._context;
          }
        }
        var newProps = workInProgress2.pendingProps;
        var render2 = newProps.children;
        {
          if (typeof render2 !== "function") {
            error("A context consumer was rendered with multiple children, or a child " + "that isn't a function. A context consumer expects a single child " + "that is a function. If you did pass a function, make sure there " + "is no trailing or leading whitespace around it.");
          }
        }
        prepareToReadContext(workInProgress2, renderLanes2);
        var newValue = readContext(context);
        {
          markComponentRenderStarted(workInProgress2);
        }
        var newChildren;
        {
          ReactCurrentOwner$2.current = workInProgress2;
          setIsRendering(true);
          newChildren = render2(newValue);
          setIsRendering(false);
        }
        {
          markComponentRenderStopped();
        }
        workInProgress2.flags |= PerformedWork;
        reconcileChildren(current2, workInProgress2, newChildren, renderLanes2);
        return workInProgress2.child;
      }
      function markWorkInProgressReceivedUpdate() {
        didReceiveUpdate = true;
      }
      function resetSuspendedCurrentOnMountInLegacyMode(current2, workInProgress2) {
        if ((workInProgress2.mode & ConcurrentMode) === NoMode) {
          if (current2 !== null) {
            current2.alternate = null;
            workInProgress2.alternate = null;
            workInProgress2.flags |= Placement;
          }
        }
      }
      function bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2) {
        if (current2 !== null) {
          workInProgress2.dependencies = current2.dependencies;
        }
        {
          stopProfilerTimerIfRunning();
        }
        markSkippedUpdateLanes(workInProgress2.lanes);
        if (!includesSomeLane(renderLanes2, workInProgress2.childLanes)) {
          {
            return null;
          }
        }
        cloneChildFibers(current2, workInProgress2);
        return workInProgress2.child;
      }
      function remountFiber(current2, oldWorkInProgress, newWorkInProgress) {
        {
          var returnFiber = oldWorkInProgress.return;
          if (returnFiber === null) {
            throw new Error("Cannot swap the root fiber.");
          }
          current2.alternate = null;
          oldWorkInProgress.alternate = null;
          newWorkInProgress.index = oldWorkInProgress.index;
          newWorkInProgress.sibling = oldWorkInProgress.sibling;
          newWorkInProgress.return = oldWorkInProgress.return;
          newWorkInProgress.ref = oldWorkInProgress.ref;
          if (oldWorkInProgress === returnFiber.child) {
            returnFiber.child = newWorkInProgress;
          } else {
            var prevSibling = returnFiber.child;
            if (prevSibling === null) {
              throw new Error("Expected parent to have a child.");
            }
            while (prevSibling.sibling !== oldWorkInProgress) {
              prevSibling = prevSibling.sibling;
              if (prevSibling === null) {
                throw new Error("Expected to find the previous sibling.");
              }
            }
            prevSibling.sibling = newWorkInProgress;
          }
          var deletions = returnFiber.deletions;
          if (deletions === null) {
            returnFiber.deletions = [current2];
            returnFiber.flags |= ChildDeletion;
          } else {
            deletions.push(current2);
          }
          newWorkInProgress.flags |= Placement;
          return newWorkInProgress;
        }
      }
      function checkScheduledUpdateOrContext(current2, renderLanes2) {
        var updateLanes = current2.lanes;
        if (includesSomeLane(updateLanes, renderLanes2)) {
          return true;
        }
        return false;
      }
      function attemptEarlyBailoutIfNoScheduledUpdate(current2, workInProgress2, renderLanes2) {
        switch (workInProgress2.tag) {
          case HostRoot:
            pushHostRootContext(workInProgress2);
            {
              var cache = current2.memoizedState.cache;
              pushCacheProvider(workInProgress2, cache);
            }
            resetHydrationState();
            break;
          case HostSingleton:
          case HostComponent:
            pushHostContext(workInProgress2);
            break;
          case ClassComponent: {
            var Component = workInProgress2.type;
            if (isContextProvider(Component)) {
              pushContextProvider(workInProgress2);
            }
            break;
          }
          case HostPortal:
            pushHostContainer(workInProgress2, workInProgress2.stateNode.containerInfo);
            break;
          case ContextProvider: {
            var newValue = workInProgress2.memoizedProps.value;
            var context = workInProgress2.type._context;
            pushProvider(workInProgress2, context, newValue);
            break;
          }
          case Profiler:
            {
              var hasChildWork = includesSomeLane(renderLanes2, workInProgress2.childLanes);
              if (hasChildWork) {
                workInProgress2.flags |= Update;
              }
              {
                var stateNode = workInProgress2.stateNode;
                stateNode.effectDuration = 0;
                stateNode.passiveEffectDuration = 0;
              }
            }
            break;
          case SuspenseComponent: {
            var state = workInProgress2.memoizedState;
            if (state !== null) {
              if (state.dehydrated !== null) {
                pushPrimaryTreeSuspenseHandler(workInProgress2);
                workInProgress2.flags |= DidCapture;
                return null;
              }
              var primaryChildFragment = workInProgress2.child;
              var primaryChildLanes = primaryChildFragment.childLanes;
              if (includesSomeLane(renderLanes2, primaryChildLanes)) {
                return updateSuspenseComponent(current2, workInProgress2, renderLanes2);
              } else {
                pushPrimaryTreeSuspenseHandler(workInProgress2);
                var child = bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
                if (child !== null) {
                  return child.sibling;
                } else {
                  return null;
                }
              }
            } else {
              pushPrimaryTreeSuspenseHandler(workInProgress2);
            }
            break;
          }
          case SuspenseListComponent: {
            var didSuspendBefore = (current2.flags & DidCapture) !== NoFlags$1;
            var _hasChildWork = includesSomeLane(renderLanes2, workInProgress2.childLanes);
            if (didSuspendBefore) {
              if (_hasChildWork) {
                return updateSuspenseListComponent(current2, workInProgress2, renderLanes2);
              }
              workInProgress2.flags |= DidCapture;
            }
            var renderState = workInProgress2.memoizedState;
            if (renderState !== null) {
              renderState.rendering = null;
              renderState.tail = null;
              renderState.lastEffect = null;
            }
            pushSuspenseListContext(workInProgress2, suspenseStackCursor.current);
            if (_hasChildWork) {
              break;
            } else {
              return null;
            }
          }
          case OffscreenComponent:
          case LegacyHiddenComponent: {
            workInProgress2.lanes = NoLanes;
            return updateOffscreenComponent(current2, workInProgress2, renderLanes2);
          }
          case CacheComponent: {
            {
              var _cache = current2.memoizedState.cache;
              pushCacheProvider(workInProgress2, _cache);
            }
            break;
          }
        }
        return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
      }
      function beginWork$1(current2, workInProgress2, renderLanes2) {
        {
          if (workInProgress2._debugNeedsRemount && current2 !== null) {
            return remountFiber(current2, workInProgress2, createFiberFromTypeAndProps(workInProgress2.type, workInProgress2.key, workInProgress2.pendingProps, workInProgress2._debugOwner || null, workInProgress2.mode, workInProgress2.lanes));
          }
        }
        if (current2 !== null) {
          var oldProps = current2.memoizedProps;
          var newProps = workInProgress2.pendingProps;
          if (oldProps !== newProps || hasContextChanged() || workInProgress2.type !== current2.type) {
            didReceiveUpdate = true;
          } else {
            var hasScheduledUpdateOrContext = checkScheduledUpdateOrContext(current2, renderLanes2);
            if (!hasScheduledUpdateOrContext && (workInProgress2.flags & DidCapture) === NoFlags$1) {
              didReceiveUpdate = false;
              return attemptEarlyBailoutIfNoScheduledUpdate(current2, workInProgress2, renderLanes2);
            }
            if ((current2.flags & ForceUpdateForLegacySuspense) !== NoFlags$1) {
              didReceiveUpdate = true;
            } else {
              didReceiveUpdate = false;
            }
          }
        } else {
          didReceiveUpdate = false;
          if (getIsHydrating() && isForkedChild(workInProgress2)) {
            var slotIndex = workInProgress2.index;
            var numberOfForks = getForksAtLevel();
            pushTreeId(workInProgress2, numberOfForks, slotIndex);
          }
        }
        workInProgress2.lanes = NoLanes;
        switch (workInProgress2.tag) {
          case IndeterminateComponent: {
            return mountIndeterminateComponent(current2, workInProgress2, workInProgress2.type, renderLanes2);
          }
          case LazyComponent: {
            var elementType = workInProgress2.elementType;
            return mountLazyComponent(current2, workInProgress2, elementType, renderLanes2);
          }
          case FunctionComponent: {
            var Component = workInProgress2.type;
            var unresolvedProps = workInProgress2.pendingProps;
            var resolvedProps = workInProgress2.elementType === Component ? unresolvedProps : resolveDefaultProps(Component, unresolvedProps);
            return updateFunctionComponent(current2, workInProgress2, Component, resolvedProps, renderLanes2);
          }
          case ClassComponent: {
            var _Component = workInProgress2.type;
            var _unresolvedProps = workInProgress2.pendingProps;
            var _resolvedProps = workInProgress2.elementType === _Component ? _unresolvedProps : resolveDefaultProps(_Component, _unresolvedProps);
            return updateClassComponent(current2, workInProgress2, _Component, _resolvedProps, renderLanes2);
          }
          case HostRoot:
            return updateHostRoot(current2, workInProgress2, renderLanes2);
          case HostHoistable: {
            return updateHostHoistable(current2, workInProgress2);
          }
          case HostSingleton: {
            return updateHostSingleton(current2, workInProgress2, renderLanes2);
          }
          case HostComponent:
            return updateHostComponent$1(current2, workInProgress2, renderLanes2);
          case HostText:
            return updateHostText$1(current2, workInProgress2);
          case SuspenseComponent:
            return updateSuspenseComponent(current2, workInProgress2, renderLanes2);
          case HostPortal:
            return updatePortalComponent(current2, workInProgress2, renderLanes2);
          case ForwardRef: {
            var type = workInProgress2.type;
            var _unresolvedProps2 = workInProgress2.pendingProps;
            var _resolvedProps2 = workInProgress2.elementType === type ? _unresolvedProps2 : resolveDefaultProps(type, _unresolvedProps2);
            return updateForwardRef(current2, workInProgress2, type, _resolvedProps2, renderLanes2);
          }
          case Fragment2:
            return updateFragment(current2, workInProgress2, renderLanes2);
          case Mode:
            return updateMode(current2, workInProgress2, renderLanes2);
          case Profiler:
            return updateProfiler(current2, workInProgress2, renderLanes2);
          case ContextProvider:
            return updateContextProvider(current2, workInProgress2, renderLanes2);
          case ContextConsumer:
            return updateContextConsumer(current2, workInProgress2, renderLanes2);
          case MemoComponent: {
            var _type2 = workInProgress2.type;
            var _unresolvedProps3 = workInProgress2.pendingProps;
            var _resolvedProps3 = resolveDefaultProps(_type2, _unresolvedProps3);
            {
              if (workInProgress2.type !== workInProgress2.elementType) {
                var outerPropTypes = _type2.propTypes;
                if (outerPropTypes) {
                  checkPropTypes(outerPropTypes, _resolvedProps3, "prop", getComponentNameFromType(_type2));
                }
              }
            }
            _resolvedProps3 = resolveDefaultProps(_type2.type, _resolvedProps3);
            return updateMemoComponent(current2, workInProgress2, _type2, _resolvedProps3, renderLanes2);
          }
          case SimpleMemoComponent: {
            return updateSimpleMemoComponent(current2, workInProgress2, workInProgress2.type, workInProgress2.pendingProps, renderLanes2);
          }
          case IncompleteClassComponent: {
            var _Component2 = workInProgress2.type;
            var _unresolvedProps4 = workInProgress2.pendingProps;
            var _resolvedProps4 = workInProgress2.elementType === _Component2 ? _unresolvedProps4 : resolveDefaultProps(_Component2, _unresolvedProps4);
            return mountIncompleteClassComponent(current2, workInProgress2, _Component2, _resolvedProps4, renderLanes2);
          }
          case SuspenseListComponent: {
            return updateSuspenseListComponent(current2, workInProgress2, renderLanes2);
          }
          case ScopeComponent: {
            break;
          }
          case OffscreenComponent: {
            return updateOffscreenComponent(current2, workInProgress2, renderLanes2);
          }
          case LegacyHiddenComponent: {
            break;
          }
          case CacheComponent: {
            {
              return updateCacheComponent(current2, workInProgress2, renderLanes2);
            }
          }
        }
        throw new Error("Unknown unit of work tag (" + workInProgress2.tag + "). This error is likely caused by a bug in " + "React. Please file an issue.");
      }
      var valueCursor = createCursor(null);
      var rendererCursorDEV;
      {
        rendererCursorDEV = createCursor(null);
      }
      var rendererSigil;
      {
        rendererSigil = {};
      }
      var currentlyRenderingFiber = null;
      var lastContextDependency = null;
      var lastFullyObservedContext = null;
      var isDisallowedContextReadInDEV = false;
      function resetContextDependencies() {
        currentlyRenderingFiber = null;
        lastContextDependency = null;
        lastFullyObservedContext = null;
        {
          isDisallowedContextReadInDEV = false;
        }
      }
      function enterDisallowedContextReadInDEV() {
        {
          isDisallowedContextReadInDEV = true;
        }
      }
      function exitDisallowedContextReadInDEV() {
        {
          isDisallowedContextReadInDEV = false;
        }
      }
      function pushProvider(providerFiber, context, nextValue) {
        {
          push(valueCursor, context._currentValue, providerFiber);
          context._currentValue = nextValue;
          {
            push(rendererCursorDEV, context._currentRenderer, providerFiber);
            if (context._currentRenderer !== undefined && context._currentRenderer !== null && context._currentRenderer !== rendererSigil) {
              error("Detected multiple renderers concurrently rendering the " + "same context provider. This is currently unsupported.");
            }
            context._currentRenderer = rendererSigil;
          }
        }
      }
      function popProvider(context, providerFiber) {
        var currentValue = valueCursor.current;
        {
          if (currentValue === REACT_SERVER_CONTEXT_DEFAULT_VALUE_NOT_LOADED) {
            context._currentValue = context._defaultValue;
          } else {
            context._currentValue = currentValue;
          }
          {
            var currentRenderer = rendererCursorDEV.current;
            pop(rendererCursorDEV, providerFiber);
            context._currentRenderer = currentRenderer;
          }
        }
        pop(valueCursor, providerFiber);
      }
      function scheduleContextWorkOnParentPath(parent, renderLanes2, propagationRoot) {
        var node = parent;
        while (node !== null) {
          var alternate = node.alternate;
          if (!isSubsetOfLanes(node.childLanes, renderLanes2)) {
            node.childLanes = mergeLanes(node.childLanes, renderLanes2);
            if (alternate !== null) {
              alternate.childLanes = mergeLanes(alternate.childLanes, renderLanes2);
            }
          } else if (alternate !== null && !isSubsetOfLanes(alternate.childLanes, renderLanes2)) {
            alternate.childLanes = mergeLanes(alternate.childLanes, renderLanes2);
          } else
            ;
          if (node === propagationRoot) {
            break;
          }
          node = node.return;
        }
        {
          if (node !== propagationRoot) {
            error("Expected to find the propagation root when scheduling context work. " + "This error is likely caused by a bug in React. Please file an issue.");
          }
        }
      }
      function propagateContextChange(workInProgress2, context, renderLanes2) {
        {
          propagateContextChange_eager(workInProgress2, context, renderLanes2);
        }
      }
      function propagateContextChange_eager(workInProgress2, context, renderLanes2) {
        var fiber = workInProgress2.child;
        if (fiber !== null) {
          fiber.return = workInProgress2;
        }
        while (fiber !== null) {
          var nextFiber = undefined;
          var list3 = fiber.dependencies;
          if (list3 !== null) {
            nextFiber = fiber.child;
            var dependency = list3.firstContext;
            while (dependency !== null) {
              if (dependency.context === context) {
                if (fiber.tag === ClassComponent) {
                  var lane = pickArbitraryLane(renderLanes2);
                  var update = createUpdate(lane);
                  update.tag = ForceUpdate;
                  var updateQueue = fiber.updateQueue;
                  if (updateQueue === null)
                    ;
                  else {
                    var sharedQueue = updateQueue.shared;
                    var pending = sharedQueue.pending;
                    if (pending === null) {
                      update.next = update;
                    } else {
                      update.next = pending.next;
                      pending.next = update;
                    }
                    sharedQueue.pending = update;
                  }
                }
                fiber.lanes = mergeLanes(fiber.lanes, renderLanes2);
                var alternate = fiber.alternate;
                if (alternate !== null) {
                  alternate.lanes = mergeLanes(alternate.lanes, renderLanes2);
                }
                scheduleContextWorkOnParentPath(fiber.return, renderLanes2, workInProgress2);
                list3.lanes = mergeLanes(list3.lanes, renderLanes2);
                break;
              }
              dependency = dependency.next;
            }
          } else if (fiber.tag === ContextProvider) {
            nextFiber = fiber.type === workInProgress2.type ? null : fiber.child;
          } else if (fiber.tag === DehydratedFragment) {
            var parentSuspense = fiber.return;
            if (parentSuspense === null) {
              throw new Error("We just came from a parent so we must have had a parent. This is a bug in React.");
            }
            parentSuspense.lanes = mergeLanes(parentSuspense.lanes, renderLanes2);
            var _alternate = parentSuspense.alternate;
            if (_alternate !== null) {
              _alternate.lanes = mergeLanes(_alternate.lanes, renderLanes2);
            }
            scheduleContextWorkOnParentPath(parentSuspense, renderLanes2, workInProgress2);
            nextFiber = fiber.sibling;
          } else {
            nextFiber = fiber.child;
          }
          if (nextFiber !== null) {
            nextFiber.return = fiber;
          } else {
            nextFiber = fiber;
            while (nextFiber !== null) {
              if (nextFiber === workInProgress2) {
                nextFiber = null;
                break;
              }
              var sibling = nextFiber.sibling;
              if (sibling !== null) {
                sibling.return = nextFiber.return;
                nextFiber = sibling;
                break;
              }
              nextFiber = nextFiber.return;
            }
          }
          fiber = nextFiber;
        }
      }
      function prepareToReadContext(workInProgress2, renderLanes2) {
        currentlyRenderingFiber = workInProgress2;
        lastContextDependency = null;
        lastFullyObservedContext = null;
        var dependencies = workInProgress2.dependencies;
        if (dependencies !== null) {
          {
            var firstContext = dependencies.firstContext;
            if (firstContext !== null) {
              if (includesSomeLane(dependencies.lanes, renderLanes2)) {
                markWorkInProgressReceivedUpdate();
              }
              dependencies.firstContext = null;
            }
          }
        }
      }
      function readContext(context) {
        {
          if (isDisallowedContextReadInDEV) {
            error("Context can only be read while React is rendering. " + "In classes, you can read it in the render method or getDerivedStateFromProps. " + "In function components, you can read it directly in the function body, but not " + "inside Hooks like useReducer() or useMemo().");
          }
        }
        return readContextForConsumer(currentlyRenderingFiber, context);
      }
      function readContextDuringReconcilation(consumer, context, renderLanes2) {
        if (currentlyRenderingFiber === null) {
          prepareToReadContext(consumer, renderLanes2);
        }
        return readContextForConsumer(consumer, context);
      }
      function readContextForConsumer(consumer, context) {
        var value = context._currentValue;
        if (lastFullyObservedContext === context)
          ;
        else {
          var contextItem = {
            context,
            memoizedValue: value,
            next: null
          };
          if (lastContextDependency === null) {
            if (consumer === null) {
              throw new Error("Context can only be read while React is rendering. " + "In classes, you can read it in the render method or getDerivedStateFromProps. " + "In function components, you can read it directly in the function body, but not " + "inside Hooks like useReducer() or useMemo().");
            }
            lastContextDependency = contextItem;
            consumer.dependencies = {
              lanes: NoLanes,
              firstContext: contextItem
            };
          } else {
            lastContextDependency = lastContextDependency.next = contextItem;
          }
        }
        return value;
      }
      var AbortControllerLocal = typeof AbortController !== "undefined" ? AbortController : function AbortControllerShim() {
        var listeners = [];
        var signal = this.signal = {
          aborted: false,
          addEventListener: function(type, listener) {
            listeners.push(listener);
          }
        };
        this.abort = function() {
          signal.aborted = true;
          listeners.forEach(function(listener) {
            return listener();
          });
        };
      };
      var scheduleCallback$1 = Scheduler.unstable_scheduleCallback, NormalPriority = Scheduler.unstable_NormalPriority;
      var CacheContext = {
        $$typeof: REACT_CONTEXT_TYPE,
        Consumer: null,
        Provider: null,
        _currentValue: null,
        _currentValue2: null,
        _threadCount: 0,
        _defaultValue: null,
        _globalName: null
      };
      {
        CacheContext._currentRenderer = null;
        CacheContext._currentRenderer2 = null;
      }
      function createCache() {
        var cache = {
          controller: new AbortControllerLocal,
          data: new Map,
          refCount: 0
        };
        return cache;
      }
      function retainCache(cache) {
        {
          if (cache.controller.signal.aborted) {
            warn("A cache instance was retained after it was already freed. " + "This likely indicates a bug in React.");
          }
        }
        cache.refCount++;
      }
      function releaseCache(cache) {
        cache.refCount--;
        {
          if (cache.refCount < 0) {
            warn("A cache instance was released after it was already freed. " + "This likely indicates a bug in React.");
          }
        }
        if (cache.refCount === 0) {
          scheduleCallback$1(NormalPriority, function() {
            cache.controller.abort();
          });
        }
      }
      function pushCacheProvider(workInProgress2, cache) {
        pushProvider(workInProgress2, CacheContext, cache);
      }
      function popCacheProvider(workInProgress2, cache) {
        popProvider(CacheContext, workInProgress2);
      }
      var ReactCurrentBatchConfig$2 = ReactSharedInternals.ReactCurrentBatchConfig;
      var NoTransition = null;
      function requestCurrentTransition() {
        return ReactCurrentBatchConfig$2.transition;
      }
      var resumedCache = createCursor(null);
      function peekCacheFromPool() {
        var cacheResumedFromPreviousRender = resumedCache.current;
        if (cacheResumedFromPreviousRender !== null) {
          return cacheResumedFromPreviousRender;
        }
        var root2 = getWorkInProgressRoot();
        var cacheFromRootCachePool = root2.pooledCache;
        return cacheFromRootCachePool;
      }
      function requestCacheFromPool(renderLanes2) {
        var cacheFromPool = peekCacheFromPool();
        if (cacheFromPool !== null) {
          return cacheFromPool;
        }
        var root2 = getWorkInProgressRoot();
        var freshCache = createCache();
        root2.pooledCache = freshCache;
        retainCache(freshCache);
        if (freshCache !== null) {
          root2.pooledCacheLanes |= renderLanes2;
        }
        return freshCache;
      }
      function pushTransition(offscreenWorkInProgress, prevCachePool, newTransitions) {
        {
          if (prevCachePool === null) {
            push(resumedCache, resumedCache.current, offscreenWorkInProgress);
          } else {
            push(resumedCache, prevCachePool.pool, offscreenWorkInProgress);
          }
        }
      }
      function popTransition(workInProgress2, current2) {
        if (current2 !== null) {
          {
            pop(resumedCache, workInProgress2);
          }
        }
      }
      function getSuspendedCache() {
        var cacheFromPool = peekCacheFromPool();
        if (cacheFromPool === null) {
          return null;
        }
        return {
          parent: CacheContext._currentValue,
          pool: cacheFromPool
        };
      }
      function getOffscreenDeferredCache() {
        var cacheFromPool = peekCacheFromPool();
        if (cacheFromPool === null) {
          return null;
        }
        return {
          parent: CacheContext._currentValue,
          pool: cacheFromPool
        };
      }
      function markUpdate(workInProgress2) {
        workInProgress2.flags |= Update;
      }
      function markRef(workInProgress2) {
        workInProgress2.flags |= Ref | RefStatic;
      }
      function appendAllChildren(parent, workInProgress2, needsVisibilityToggle, isHidden) {
        {
          var node = workInProgress2.child;
          while (node !== null) {
            if (node.tag === HostComponent || node.tag === HostText) {
              appendInitialChild(parent, node.stateNode);
            } else if (node.tag === HostPortal || node.tag === HostSingleton)
              ;
            else if (node.child !== null) {
              node.child.return = node;
              node = node.child;
              continue;
            }
            if (node === workInProgress2) {
              return;
            }
            while (node.sibling === null) {
              if (node.return === null || node.return === workInProgress2) {
                return;
              }
              node = node.return;
            }
            node.sibling.return = node.return;
            node = node.sibling;
          }
        }
      }
      function updateHostComponent(current2, workInProgress2, type, newProps, renderLanes2) {
        {
          var oldProps = current2.memoizedProps;
          if (oldProps === newProps) {
            return;
          }
          {
            markUpdate(workInProgress2);
          }
        }
      }
      function preloadInstanceAndSuspendIfNeeded(workInProgress2, type, props, renderLanes2) {
        {
          workInProgress2.flags &= ~MaySuspendCommit;
          return;
        }
      }
      function preloadResourceAndSuspendIfNeeded(workInProgress2, resource, type, props, renderLanes2) {
        if (!mayResourceSuspendCommit(resource)) {
          workInProgress2.flags &= ~MaySuspendCommit;
          return;
        }
        workInProgress2.flags |= MaySuspendCommit;
        var rootRenderLanes = getWorkInProgressRootRenderLanes();
        if (!includesOnlyNonUrgentLanes(rootRenderLanes))
          ;
        else {
          var isReady = preloadResource(resource);
          if (!isReady) {
            if (shouldRemainOnPreviousScreen()) {
              workInProgress2.flags |= ShouldSuspendCommit;
            } else {
              suspendCommit();
            }
          }
        }
      }
      function scheduleRetryEffect(workInProgress2, retryQueue) {
        var wakeables = retryQueue;
        if (wakeables !== null) {
          workInProgress2.flags |= Update;
        } else {
          if (workInProgress2.flags & ScheduleRetry) {
            var retryLane = workInProgress2.tag !== OffscreenComponent ? claimNextRetryLane() : OffscreenLane;
            workInProgress2.lanes = mergeLanes(workInProgress2.lanes, retryLane);
          }
        }
      }
      function updateHostText(current2, workInProgress2, oldText, newText) {
        {
          if (oldText !== newText) {
            markUpdate(workInProgress2);
          }
        }
      }
      function cutOffTailIfNeeded(renderState, hasRenderedATailFallback) {
        if (getIsHydrating()) {
          return;
        }
        switch (renderState.tailMode) {
          case "hidden": {
            var tailNode = renderState.tail;
            var lastTailNode = null;
            while (tailNode !== null) {
              if (tailNode.alternate !== null) {
                lastTailNode = tailNode;
              }
              tailNode = tailNode.sibling;
            }
            if (lastTailNode === null) {
              renderState.tail = null;
            } else {
              lastTailNode.sibling = null;
            }
            break;
          }
          case "collapsed": {
            var _tailNode = renderState.tail;
            var _lastTailNode = null;
            while (_tailNode !== null) {
              if (_tailNode.alternate !== null) {
                _lastTailNode = _tailNode;
              }
              _tailNode = _tailNode.sibling;
            }
            if (_lastTailNode === null) {
              if (!hasRenderedATailFallback && renderState.tail !== null) {
                renderState.tail.sibling = null;
              } else {
                renderState.tail = null;
              }
            } else {
              _lastTailNode.sibling = null;
            }
            break;
          }
        }
      }
      function bubbleProperties(completedWork) {
        var didBailout = completedWork.alternate !== null && completedWork.alternate.child === completedWork.child;
        var newChildLanes = NoLanes;
        var subtreeFlags = NoFlags$1;
        if (!didBailout) {
          if ((completedWork.mode & ProfileMode) !== NoMode) {
            var actualDuration = completedWork.actualDuration;
            var treeBaseDuration = completedWork.selfBaseDuration;
            var child = completedWork.child;
            while (child !== null) {
              newChildLanes = mergeLanes(newChildLanes, mergeLanes(child.lanes, child.childLanes));
              subtreeFlags |= child.subtreeFlags;
              subtreeFlags |= child.flags;
              actualDuration += child.actualDuration;
              treeBaseDuration += child.treeBaseDuration;
              child = child.sibling;
            }
            completedWork.actualDuration = actualDuration;
            completedWork.treeBaseDuration = treeBaseDuration;
          } else {
            var _child = completedWork.child;
            while (_child !== null) {
              newChildLanes = mergeLanes(newChildLanes, mergeLanes(_child.lanes, _child.childLanes));
              subtreeFlags |= _child.subtreeFlags;
              subtreeFlags |= _child.flags;
              _child.return = completedWork;
              _child = _child.sibling;
            }
          }
          completedWork.subtreeFlags |= subtreeFlags;
        } else {
          if ((completedWork.mode & ProfileMode) !== NoMode) {
            var _treeBaseDuration = completedWork.selfBaseDuration;
            var _child2 = completedWork.child;
            while (_child2 !== null) {
              newChildLanes = mergeLanes(newChildLanes, mergeLanes(_child2.lanes, _child2.childLanes));
              subtreeFlags |= _child2.subtreeFlags & StaticMask;
              subtreeFlags |= _child2.flags & StaticMask;
              _treeBaseDuration += _child2.treeBaseDuration;
              _child2 = _child2.sibling;
            }
            completedWork.treeBaseDuration = _treeBaseDuration;
          } else {
            var _child3 = completedWork.child;
            while (_child3 !== null) {
              newChildLanes = mergeLanes(newChildLanes, mergeLanes(_child3.lanes, _child3.childLanes));
              subtreeFlags |= _child3.subtreeFlags & StaticMask;
              subtreeFlags |= _child3.flags & StaticMask;
              _child3.return = completedWork;
              _child3 = _child3.sibling;
            }
          }
          completedWork.subtreeFlags |= subtreeFlags;
        }
        completedWork.childLanes = newChildLanes;
        return didBailout;
      }
      function completeDehydratedSuspenseBoundary(current2, workInProgress2, nextState) {
        if (hasUnhydratedTailNodes() && (workInProgress2.mode & ConcurrentMode) !== NoMode && (workInProgress2.flags & DidCapture) === NoFlags$1) {
          warnIfUnhydratedTailNodes(workInProgress2);
          resetHydrationState();
          workInProgress2.flags |= ForceClientRender | DidCapture;
          return false;
        }
        var wasHydrated = popHydrationState(workInProgress2);
        if (nextState !== null && nextState.dehydrated !== null) {
          if (current2 === null) {
            if (!wasHydrated) {
              throw new Error("A dehydrated suspense component was completed without a hydrated node. " + "This is probably a bug in React.");
            }
            prepareToHydrateHostSuspenseInstance(workInProgress2);
            bubbleProperties(workInProgress2);
            {
              if ((workInProgress2.mode & ProfileMode) !== NoMode) {
                var isTimedOutSuspense = nextState !== null;
                if (isTimedOutSuspense) {
                  var primaryChildFragment = workInProgress2.child;
                  if (primaryChildFragment !== null) {
                    workInProgress2.treeBaseDuration -= primaryChildFragment.treeBaseDuration;
                  }
                }
              }
            }
            return false;
          } else {
            resetHydrationState();
            if ((workInProgress2.flags & DidCapture) === NoFlags$1) {
              workInProgress2.memoizedState = null;
            }
            workInProgress2.flags |= Update;
            bubbleProperties(workInProgress2);
            {
              if ((workInProgress2.mode & ProfileMode) !== NoMode) {
                var _isTimedOutSuspense = nextState !== null;
                if (_isTimedOutSuspense) {
                  var _primaryChildFragment = workInProgress2.child;
                  if (_primaryChildFragment !== null) {
                    workInProgress2.treeBaseDuration -= _primaryChildFragment.treeBaseDuration;
                  }
                }
              }
            }
            return false;
          }
        } else {
          upgradeHydrationErrorsToRecoverable();
          return true;
        }
      }
      function completeWork(current2, workInProgress2, renderLanes2) {
        var newProps = workInProgress2.pendingProps;
        popTreeContext(workInProgress2);
        switch (workInProgress2.tag) {
          case IndeterminateComponent:
          case LazyComponent:
          case SimpleMemoComponent:
          case FunctionComponent:
          case ForwardRef:
          case Fragment2:
          case Mode:
          case Profiler:
          case ContextConsumer:
          case MemoComponent:
            bubbleProperties(workInProgress2);
            return null;
          case ClassComponent: {
            var Component = workInProgress2.type;
            if (isContextProvider(Component)) {
              popContext(workInProgress2);
            }
            bubbleProperties(workInProgress2);
            return null;
          }
          case HostRoot: {
            var fiberRoot = workInProgress2.stateNode;
            {
              var previousCache = null;
              if (current2 !== null) {
                previousCache = current2.memoizedState.cache;
              }
              var cache = workInProgress2.memoizedState.cache;
              if (cache !== previousCache) {
                workInProgress2.flags |= Passive$1;
              }
              popCacheProvider(workInProgress2);
            }
            popHostContainer(workInProgress2);
            popTopLevelContextObject(workInProgress2);
            resetWorkInProgressVersions();
            if (fiberRoot.pendingContext) {
              fiberRoot.context = fiberRoot.pendingContext;
              fiberRoot.pendingContext = null;
            }
            if (current2 === null || current2.child === null) {
              var wasHydrated = popHydrationState(workInProgress2);
              if (wasHydrated) {
                markUpdate(workInProgress2);
              } else {
                if (current2 !== null) {
                  var prevState = current2.memoizedState;
                  if (!prevState.isDehydrated || (workInProgress2.flags & ForceClientRender) !== NoFlags$1) {
                    workInProgress2.flags |= Snapshot;
                    upgradeHydrationErrorsToRecoverable();
                  }
                }
              }
            }
            bubbleProperties(workInProgress2);
            return null;
          }
          case HostHoistable: {
            {
              var type = workInProgress2.type;
              var nextResource = workInProgress2.memoizedState;
              if (current2 === null) {
                markUpdate(workInProgress2);
                if (workInProgress2.ref !== null) {
                  markRef(workInProgress2);
                }
                if (nextResource !== null) {
                  bubbleProperties(workInProgress2);
                  preloadResourceAndSuspendIfNeeded(workInProgress2, nextResource);
                  return null;
                } else {
                  bubbleProperties(workInProgress2);
                  preloadInstanceAndSuspendIfNeeded(workInProgress2);
                  return null;
                }
              } else {
                var currentResource = current2.memoizedState;
                if (nextResource !== currentResource) {
                  markUpdate(workInProgress2);
                }
                if (current2.ref !== workInProgress2.ref) {
                  markRef(workInProgress2);
                }
                if (nextResource !== null) {
                  bubbleProperties(workInProgress2);
                  if (nextResource === currentResource) {
                    workInProgress2.flags &= ~MaySuspendCommit;
                  } else {
                    preloadResourceAndSuspendIfNeeded(workInProgress2, nextResource);
                  }
                  return null;
                } else {
                  updateHostComponent(current2, workInProgress2, type, newProps);
                  bubbleProperties(workInProgress2);
                  preloadInstanceAndSuspendIfNeeded(workInProgress2);
                  return null;
                }
              }
            }
          }
          case HostSingleton: {
            {
              popHostContext(workInProgress2);
              var rootContainerInstance = getRootHostContainer();
              var _type = workInProgress2.type;
              if (current2 !== null && workInProgress2.stateNode != null) {
                updateHostComponent(current2, workInProgress2, _type, newProps);
                if (current2.ref !== workInProgress2.ref) {
                  markRef(workInProgress2);
                }
              } else {
                if (!newProps) {
                  if (workInProgress2.stateNode === null) {
                    throw new Error("We must have new props for new mounts. This error is likely " + "caused by a bug in React. Please file an issue.");
                  }
                  bubbleProperties(workInProgress2);
                  return null;
                }
                var currentHostContext = getHostContext();
                var _wasHydrated = popHydrationState(workInProgress2);
                var instance;
                if (_wasHydrated) {
                  prepareToHydrateHostInstance(workInProgress2, currentHostContext);
                  instance = workInProgress2.stateNode;
                } else {
                  instance = resolveSingletonInstance(_type, newProps, rootContainerInstance, currentHostContext, true);
                  workInProgress2.stateNode = instance;
                  markUpdate(workInProgress2);
                }
                if (workInProgress2.ref !== null) {
                  markRef(workInProgress2);
                }
              }
              bubbleProperties(workInProgress2);
              return null;
            }
          }
          case HostComponent: {
            popHostContext(workInProgress2);
            var _type2 = workInProgress2.type;
            if (current2 !== null && workInProgress2.stateNode != null) {
              updateHostComponent(current2, workInProgress2, _type2, newProps);
              if (current2.ref !== workInProgress2.ref) {
                markRef(workInProgress2);
              }
            } else {
              if (!newProps) {
                if (workInProgress2.stateNode === null) {
                  throw new Error("We must have new props for new mounts. This error is likely " + "caused by a bug in React. Please file an issue.");
                }
                bubbleProperties(workInProgress2);
                return null;
              }
              var _currentHostContext2 = getHostContext();
              var _wasHydrated2 = popHydrationState(workInProgress2);
              if (_wasHydrated2) {
                if (prepareToHydrateHostInstance(workInProgress2, _currentHostContext2)) {
                  markUpdate(workInProgress2);
                }
              } else {
                var _rootContainerInstance = getRootHostContainer();
                var _instance3 = createInstance(_type2, newProps, _rootContainerInstance, _currentHostContext2, workInProgress2);
                appendAllChildren(_instance3, workInProgress2);
                workInProgress2.stateNode = _instance3;
                if (finalizeInitialChildren(_instance3, _type2, newProps)) {
                  markUpdate(workInProgress2);
                }
              }
              if (workInProgress2.ref !== null) {
                markRef(workInProgress2);
              }
            }
            bubbleProperties(workInProgress2);
            preloadInstanceAndSuspendIfNeeded(workInProgress2);
            return null;
          }
          case HostText: {
            var newText = newProps;
            if (current2 && workInProgress2.stateNode != null) {
              var oldText = current2.memoizedProps;
              updateHostText(current2, workInProgress2, oldText, newText);
            } else {
              if (typeof newText !== "string") {
                if (workInProgress2.stateNode === null) {
                  throw new Error("We must have new props for new mounts. This error is likely " + "caused by a bug in React. Please file an issue.");
                }
              }
              var _rootContainerInstance2 = getRootHostContainer();
              var _currentHostContext3 = getHostContext();
              var _wasHydrated3 = popHydrationState(workInProgress2);
              if (_wasHydrated3) {
                if (prepareToHydrateHostTextInstance(workInProgress2)) {
                  markUpdate(workInProgress2);
                }
              } else {
                workInProgress2.stateNode = createTextInstance(newText, _rootContainerInstance2, _currentHostContext3, workInProgress2);
              }
            }
            bubbleProperties(workInProgress2);
            return null;
          }
          case SuspenseComponent: {
            popSuspenseHandler(workInProgress2);
            var nextState = workInProgress2.memoizedState;
            if (current2 === null || current2.memoizedState !== null && current2.memoizedState.dehydrated !== null) {
              var fallthroughToNormalSuspensePath = completeDehydratedSuspenseBoundary(current2, workInProgress2, nextState);
              if (!fallthroughToNormalSuspensePath) {
                if (workInProgress2.flags & ForceClientRender) {
                  return workInProgress2;
                } else {
                  return null;
                }
              }
            }
            if ((workInProgress2.flags & DidCapture) !== NoFlags$1) {
              workInProgress2.lanes = renderLanes2;
              if ((workInProgress2.mode & ProfileMode) !== NoMode) {
                transferActualDuration(workInProgress2);
              }
              return workInProgress2;
            }
            var nextDidTimeout = nextState !== null;
            var prevDidTimeout = current2 !== null && current2.memoizedState !== null;
            if (nextDidTimeout) {
              var offscreenFiber = workInProgress2.child;
              var _previousCache = null;
              if (offscreenFiber.alternate !== null && offscreenFiber.alternate.memoizedState !== null && offscreenFiber.alternate.memoizedState.cachePool !== null) {
                _previousCache = offscreenFiber.alternate.memoizedState.cachePool.pool;
              }
              var _cache = null;
              if (offscreenFiber.memoizedState !== null && offscreenFiber.memoizedState.cachePool !== null) {
                _cache = offscreenFiber.memoizedState.cachePool.pool;
              }
              if (_cache !== _previousCache) {
                offscreenFiber.flags |= Passive$1;
              }
            }
            if (nextDidTimeout !== prevDidTimeout) {
              if (nextDidTimeout) {
                var _offscreenFiber2 = workInProgress2.child;
                _offscreenFiber2.flags |= Visibility;
              }
            }
            var retryQueue = workInProgress2.updateQueue;
            scheduleRetryEffect(workInProgress2, retryQueue);
            bubbleProperties(workInProgress2);
            {
              if ((workInProgress2.mode & ProfileMode) !== NoMode) {
                if (nextDidTimeout) {
                  var primaryChildFragment = workInProgress2.child;
                  if (primaryChildFragment !== null) {
                    workInProgress2.treeBaseDuration -= primaryChildFragment.treeBaseDuration;
                  }
                }
              }
            }
            return null;
          }
          case HostPortal:
            popHostContainer(workInProgress2);
            if (current2 === null) {
              preparePortalMount(workInProgress2.stateNode.containerInfo);
            }
            bubbleProperties(workInProgress2);
            return null;
          case ContextProvider:
            var context = workInProgress2.type._context;
            popProvider(context, workInProgress2);
            bubbleProperties(workInProgress2);
            return null;
          case IncompleteClassComponent: {
            var _Component = workInProgress2.type;
            if (isContextProvider(_Component)) {
              popContext(workInProgress2);
            }
            bubbleProperties(workInProgress2);
            return null;
          }
          case SuspenseListComponent: {
            popSuspenseListContext(workInProgress2);
            var renderState = workInProgress2.memoizedState;
            if (renderState === null) {
              bubbleProperties(workInProgress2);
              return null;
            }
            var didSuspendAlready = (workInProgress2.flags & DidCapture) !== NoFlags$1;
            var renderedTail = renderState.rendering;
            if (renderedTail === null) {
              if (!didSuspendAlready) {
                var cannotBeSuspended = renderHasNotSuspendedYet() && (current2 === null || (current2.flags & DidCapture) === NoFlags$1);
                if (!cannotBeSuspended) {
                  var row = workInProgress2.child;
                  while (row !== null) {
                    var suspended = findFirstSuspended(row);
                    if (suspended !== null) {
                      didSuspendAlready = true;
                      workInProgress2.flags |= DidCapture;
                      cutOffTailIfNeeded(renderState, false);
                      var _retryQueue = suspended.updateQueue;
                      workInProgress2.updateQueue = _retryQueue;
                      scheduleRetryEffect(workInProgress2, _retryQueue);
                      workInProgress2.subtreeFlags = NoFlags$1;
                      resetChildFibers(workInProgress2, renderLanes2);
                      pushSuspenseListContext(workInProgress2, setShallowSuspenseListContext(suspenseStackCursor.current, ForceSuspenseFallback));
                      return workInProgress2.child;
                    }
                    row = row.sibling;
                  }
                }
                if (renderState.tail !== null && now$1() > getRenderTargetTime()) {
                  workInProgress2.flags |= DidCapture;
                  didSuspendAlready = true;
                  cutOffTailIfNeeded(renderState, false);
                  workInProgress2.lanes = SomeRetryLane;
                }
              } else {
                cutOffTailIfNeeded(renderState, false);
              }
            } else {
              if (!didSuspendAlready) {
                var _suspended = findFirstSuspended(renderedTail);
                if (_suspended !== null) {
                  workInProgress2.flags |= DidCapture;
                  didSuspendAlready = true;
                  var _retryQueue2 = _suspended.updateQueue;
                  workInProgress2.updateQueue = _retryQueue2;
                  scheduleRetryEffect(workInProgress2, _retryQueue2);
                  cutOffTailIfNeeded(renderState, true);
                  if (renderState.tail === null && renderState.tailMode === "hidden" && !renderedTail.alternate && !getIsHydrating()) {
                    bubbleProperties(workInProgress2);
                    return null;
                  }
                } else if (now$1() * 2 - renderState.renderingStartTime > getRenderTargetTime() && renderLanes2 !== OffscreenLane) {
                  workInProgress2.flags |= DidCapture;
                  didSuspendAlready = true;
                  cutOffTailIfNeeded(renderState, false);
                  workInProgress2.lanes = SomeRetryLane;
                }
              }
              if (renderState.isBackwards) {
                renderedTail.sibling = workInProgress2.child;
                workInProgress2.child = renderedTail;
              } else {
                var previousSibling = renderState.last;
                if (previousSibling !== null) {
                  previousSibling.sibling = renderedTail;
                } else {
                  workInProgress2.child = renderedTail;
                }
                renderState.last = renderedTail;
              }
            }
            if (renderState.tail !== null) {
              var next = renderState.tail;
              renderState.rendering = next;
              renderState.tail = next.sibling;
              renderState.renderingStartTime = now$1();
              next.sibling = null;
              var suspenseContext = suspenseStackCursor.current;
              if (didSuspendAlready) {
                suspenseContext = setShallowSuspenseListContext(suspenseContext, ForceSuspenseFallback);
              } else {
                suspenseContext = setDefaultShallowSuspenseListContext(suspenseContext);
              }
              pushSuspenseListContext(workInProgress2, suspenseContext);
              return next;
            }
            bubbleProperties(workInProgress2);
            return null;
          }
          case ScopeComponent: {
            break;
          }
          case OffscreenComponent:
          case LegacyHiddenComponent: {
            popSuspenseHandler(workInProgress2);
            popHiddenContext(workInProgress2);
            var _nextState = workInProgress2.memoizedState;
            var nextIsHidden = _nextState !== null;
            {
              if (current2 !== null) {
                var _prevState = current2.memoizedState;
                var prevIsHidden = _prevState !== null;
                if (prevIsHidden !== nextIsHidden) {
                  workInProgress2.flags |= Visibility;
                }
              } else {
                if (nextIsHidden) {
                  workInProgress2.flags |= Visibility;
                }
              }
            }
            if (!nextIsHidden || (workInProgress2.mode & ConcurrentMode) === NoMode) {
              bubbleProperties(workInProgress2);
            } else {
              if (includesSomeLane(renderLanes2, OffscreenLane) && (workInProgress2.flags & DidCapture) === NoLanes) {
                bubbleProperties(workInProgress2);
                if (workInProgress2.subtreeFlags & (Placement | Update)) {
                  workInProgress2.flags |= Visibility;
                }
              }
            }
            var offscreenQueue = workInProgress2.updateQueue;
            if (offscreenQueue !== null) {
              var _retryQueue3 = offscreenQueue.retryQueue;
              scheduleRetryEffect(workInProgress2, _retryQueue3);
            }
            {
              var _previousCache2 = null;
              if (current2 !== null && current2.memoizedState !== null && current2.memoizedState.cachePool !== null) {
                _previousCache2 = current2.memoizedState.cachePool.pool;
              }
              var _cache2 = null;
              if (workInProgress2.memoizedState !== null && workInProgress2.memoizedState.cachePool !== null) {
                _cache2 = workInProgress2.memoizedState.cachePool.pool;
              }
              if (_cache2 !== _previousCache2) {
                workInProgress2.flags |= Passive$1;
              }
            }
            popTransition(workInProgress2, current2);
            return null;
          }
          case CacheComponent: {
            {
              var _previousCache3 = null;
              if (current2 !== null) {
                _previousCache3 = current2.memoizedState.cache;
              }
              var _cache3 = workInProgress2.memoizedState.cache;
              if (_cache3 !== _previousCache3) {
                workInProgress2.flags |= Passive$1;
              }
              popCacheProvider(workInProgress2);
              bubbleProperties(workInProgress2);
            }
            return null;
          }
          case TracingMarkerComponent: {
            return null;
          }
        }
        throw new Error("Unknown unit of work tag (" + workInProgress2.tag + "). This error is likely caused by a bug in " + "React. Please file an issue.");
      }
      function unwindWork(current2, workInProgress2, renderLanes2) {
        popTreeContext(workInProgress2);
        switch (workInProgress2.tag) {
          case ClassComponent: {
            var Component = workInProgress2.type;
            if (isContextProvider(Component)) {
              popContext(workInProgress2);
            }
            var flags = workInProgress2.flags;
            if (flags & ShouldCapture) {
              workInProgress2.flags = flags & ~ShouldCapture | DidCapture;
              if ((workInProgress2.mode & ProfileMode) !== NoMode) {
                transferActualDuration(workInProgress2);
              }
              return workInProgress2;
            }
            return null;
          }
          case HostRoot: {
            {
              popCacheProvider(workInProgress2);
            }
            popHostContainer(workInProgress2);
            popTopLevelContextObject(workInProgress2);
            resetWorkInProgressVersions();
            var _flags = workInProgress2.flags;
            if ((_flags & ShouldCapture) !== NoFlags$1 && (_flags & DidCapture) === NoFlags$1) {
              workInProgress2.flags = _flags & ~ShouldCapture | DidCapture;
              return workInProgress2;
            }
            return null;
          }
          case HostHoistable:
          case HostSingleton:
          case HostComponent: {
            popHostContext(workInProgress2);
            return null;
          }
          case SuspenseComponent: {
            popSuspenseHandler(workInProgress2);
            var suspenseState = workInProgress2.memoizedState;
            if (suspenseState !== null && suspenseState.dehydrated !== null) {
              if (workInProgress2.alternate === null) {
                throw new Error("Threw in newly mounted dehydrated component. This is likely a bug in " + "React. Please file an issue.");
              }
              resetHydrationState();
            }
            var _flags2 = workInProgress2.flags;
            if (_flags2 & ShouldCapture) {
              workInProgress2.flags = _flags2 & ~ShouldCapture | DidCapture;
              if ((workInProgress2.mode & ProfileMode) !== NoMode) {
                transferActualDuration(workInProgress2);
              }
              return workInProgress2;
            }
            return null;
          }
          case SuspenseListComponent: {
            popSuspenseListContext(workInProgress2);
            return null;
          }
          case HostPortal:
            popHostContainer(workInProgress2);
            return null;
          case ContextProvider:
            var context = workInProgress2.type._context;
            popProvider(context, workInProgress2);
            return null;
          case OffscreenComponent:
          case LegacyHiddenComponent: {
            popSuspenseHandler(workInProgress2);
            popHiddenContext(workInProgress2);
            popTransition(workInProgress2, current2);
            var _flags3 = workInProgress2.flags;
            if (_flags3 & ShouldCapture) {
              workInProgress2.flags = _flags3 & ~ShouldCapture | DidCapture;
              if ((workInProgress2.mode & ProfileMode) !== NoMode) {
                transferActualDuration(workInProgress2);
              }
              return workInProgress2;
            }
            return null;
          }
          case CacheComponent:
            {
              popCacheProvider(workInProgress2);
            }
            return null;
          case TracingMarkerComponent:
            return null;
          default:
            return null;
        }
      }
      function unwindInterruptedWork(current2, interruptedWork, renderLanes2) {
        popTreeContext(interruptedWork);
        switch (interruptedWork.tag) {
          case ClassComponent: {
            var childContextTypes = interruptedWork.type.childContextTypes;
            if (childContextTypes !== null && childContextTypes !== undefined) {
              popContext(interruptedWork);
            }
            break;
          }
          case HostRoot: {
            {
              popCacheProvider(interruptedWork);
            }
            popHostContainer(interruptedWork);
            popTopLevelContextObject(interruptedWork);
            resetWorkInProgressVersions();
            break;
          }
          case HostHoistable:
          case HostSingleton:
          case HostComponent: {
            popHostContext(interruptedWork);
            break;
          }
          case HostPortal:
            popHostContainer(interruptedWork);
            break;
          case SuspenseComponent:
            popSuspenseHandler(interruptedWork);
            break;
          case SuspenseListComponent:
            popSuspenseListContext(interruptedWork);
            break;
          case ContextProvider:
            var context = interruptedWork.type._context;
            popProvider(context, interruptedWork);
            break;
          case OffscreenComponent:
          case LegacyHiddenComponent:
            popSuspenseHandler(interruptedWork);
            popHiddenContext(interruptedWork);
            popTransition(interruptedWork, current2);
            break;
          case CacheComponent:
            {
              popCacheProvider(interruptedWork);
            }
            break;
        }
      }
      var fakeNode = null;
      {
        if (typeof window !== "undefined" && typeof window.dispatchEvent === "function" && typeof document !== "undefined" && typeof document.createEvent === "function") {
          fakeNode = document.createElement("react");
        }
      }
      function invokeGuardedCallbackImpl(name, func, context) {
        {
          if (fakeNode) {
            var evt = document.createEvent("Event");
            var didCall = false;
            var didError = true;
            var windowEvent = window.event;
            var windowEventDescriptor = Object.getOwnPropertyDescriptor(window, "event");
            var restoreAfterDispatch = function() {
              fakeNode.removeEventListener(evtType, callCallback2, false);
              if (typeof window.event !== "undefined" && window.hasOwnProperty("event")) {
                window.event = windowEvent;
              }
            };
            var _funcArgs = Array.prototype.slice.call(arguments, 3);
            var callCallback2 = function() {
              didCall = true;
              restoreAfterDispatch();
              func.apply(context, _funcArgs);
              didError = false;
            };
            var error2;
            var didSetError = false;
            var isCrossOriginError = false;
            var handleWindowError = function(event) {
              error2 = event.error;
              didSetError = true;
              if (error2 === null && event.colno === 0 && event.lineno === 0) {
                isCrossOriginError = true;
              }
              if (event.defaultPrevented) {
                if (error2 != null && typeof error2 === "object") {
                  try {
                    error2._suppressLogging = true;
                  } catch (inner) {}
                }
              }
            };
            var evtType = "react-" + (name ? name : "invokeguardedcallback");
            window.addEventListener("error", handleWindowError);
            fakeNode.addEventListener(evtType, callCallback2, false);
            evt.initEvent(evtType, false, false);
            fakeNode.dispatchEvent(evt);
            if (windowEventDescriptor) {
              Object.defineProperty(window, "event", windowEventDescriptor);
            }
            if (didCall && didError) {
              if (!didSetError) {
                error2 = new Error("An error was thrown inside one of your components, but React " + "doesn't know what it was. This is likely due to browser " + 'flakiness. React does its best to preserve the "Pause on ' + 'exceptions" behavior of the DevTools, which requires some ' + "DEV-mode only tricks. It's possible that these don't work in " + "your browser. Try triggering the error in production mode, " + "or switching to a modern browser. If you suspect that this is " + "actually an issue with React, please file an issue.");
              } else if (isCrossOriginError) {
                error2 = new Error("A cross-origin error was thrown. React doesn't have access to " + "the actual error object in development. " + "See https://reactjs.org/link/crossorigin-error for more information.");
              }
              this.onError(error2);
            }
            window.removeEventListener("error", handleWindowError);
            if (didCall) {
              return;
            } else {
              restoreAfterDispatch();
            }
          }
          var funcArgs = Array.prototype.slice.call(arguments, 3);
          try {
            func.apply(context, funcArgs);
          } catch (error3) {
            this.onError(error3);
          }
        }
      }
      var hasError = false;
      var caughtError = null;
      var hasRethrowError = false;
      var rethrowError = null;
      var reporter = {
        onError: function(error2) {
          hasError = true;
          caughtError = error2;
        }
      };
      function invokeGuardedCallback(name, func, context, a, b, c, d, e, f) {
        hasError = false;
        caughtError = null;
        invokeGuardedCallbackImpl.apply(reporter, arguments);
      }
      function invokeGuardedCallbackAndCatchFirstError(name, func, context, a, b, c, d, e, f) {
        invokeGuardedCallback.apply(this, arguments);
        if (hasError) {
          var error2 = clearCaughtError();
          if (!hasRethrowError) {
            hasRethrowError = true;
            rethrowError = error2;
          }
        }
      }
      function rethrowCaughtError() {
        if (hasRethrowError) {
          var error2 = rethrowError;
          hasRethrowError = false;
          rethrowError = null;
          throw error2;
        }
      }
      function hasCaughtError() {
        return hasError;
      }
      function clearCaughtError() {
        if (hasError) {
          var error2 = caughtError;
          hasError = false;
          caughtError = null;
          return error2;
        } else {
          throw new Error("clearCaughtError was called but no error was captured. This error " + "is likely caused by a bug in React. Please file an issue.");
        }
      }
      var didWarnAboutUndefinedSnapshotBeforeUpdate = null;
      {
        didWarnAboutUndefinedSnapshotBeforeUpdate = new Set;
      }
      var offscreenSubtreeIsHidden = false;
      var offscreenSubtreeWasHidden = false;
      var PossiblyWeakSet = typeof WeakSet === "function" ? WeakSet : Set;
      var nextEffect = null;
      var inProgressLanes = null;
      var inProgressRoot = null;
      function shouldProfile(current2) {
        return (current2.mode & ProfileMode) !== NoMode && (getExecutionContext() & CommitContext) !== NoContext;
      }
      function reportUncaughtErrorInDEV(error2) {
        {
          invokeGuardedCallback(null, function() {
            throw error2;
          });
          clearCaughtError();
        }
      }
      function callComponentWillUnmountWithTimer(current2, instance) {
        instance.props = current2.memoizedProps;
        instance.state = current2.memoizedState;
        if (shouldProfile(current2)) {
          try {
            startLayoutEffectTimer();
            instance.componentWillUnmount();
          } finally {
            recordLayoutEffectDuration(current2);
          }
        } else {
          instance.componentWillUnmount();
        }
      }
      function safelyCallComponentWillUnmount(current2, nearestMountedAncestor, instance) {
        try {
          callComponentWillUnmountWithTimer(current2, instance);
        } catch (error2) {
          captureCommitPhaseError(current2, nearestMountedAncestor, error2);
        }
      }
      function safelyAttachRef(current2, nearestMountedAncestor) {
        try {
          commitAttachRef(current2);
        } catch (error2) {
          captureCommitPhaseError(current2, nearestMountedAncestor, error2);
        }
      }
      function safelyDetachRef(current2, nearestMountedAncestor) {
        var ref = current2.ref;
        var refCleanup = current2.refCleanup;
        if (ref !== null) {
          if (typeof refCleanup === "function") {
            try {
              if (shouldProfile(current2)) {
                try {
                  startLayoutEffectTimer();
                  refCleanup();
                } finally {
                  recordLayoutEffectDuration(current2);
                }
              } else {
                refCleanup();
              }
            } catch (error2) {
              captureCommitPhaseError(current2, nearestMountedAncestor, error2);
            } finally {
              current2.refCleanup = null;
              var finishedWork = current2.alternate;
              if (finishedWork != null) {
                finishedWork.refCleanup = null;
              }
            }
          } else if (typeof ref === "function") {
            var retVal;
            try {
              if (shouldProfile(current2)) {
                try {
                  startLayoutEffectTimer();
                  retVal = ref(null);
                } finally {
                  recordLayoutEffectDuration(current2);
                }
              } else {
                retVal = ref(null);
              }
            } catch (error2) {
              captureCommitPhaseError(current2, nearestMountedAncestor, error2);
            }
            {
              if (typeof retVal === "function") {
                error("Unexpected return value from a callback ref in %s. " + "A callback ref should not return a function.", getComponentNameFromFiber(current2));
              }
            }
          } else {
            ref.current = null;
          }
        }
      }
      function safelyCallDestroy(current2, nearestMountedAncestor, destroy) {
        try {
          destroy();
        } catch (error2) {
          captureCommitPhaseError(current2, nearestMountedAncestor, error2);
        }
      }
      var shouldFireAfterActiveInstanceBlur = false;
      function commitBeforeMutationEffects(root2, firstChild) {
        prepareForCommit();
        nextEffect = firstChild;
        commitBeforeMutationEffects_begin();
        var shouldFire = shouldFireAfterActiveInstanceBlur;
        shouldFireAfterActiveInstanceBlur = false;
        return shouldFire;
      }
      function commitBeforeMutationEffects_begin() {
        while (nextEffect !== null) {
          var fiber = nextEffect;
          var child = fiber.child;
          if ((fiber.subtreeFlags & BeforeMutationMask) !== NoFlags$1 && child !== null) {
            child.return = fiber;
            nextEffect = child;
          } else {
            commitBeforeMutationEffects_complete();
          }
        }
      }
      function commitBeforeMutationEffects_complete() {
        while (nextEffect !== null) {
          var fiber = nextEffect;
          setCurrentFiber(fiber);
          try {
            commitBeforeMutationEffectsOnFiber(fiber);
          } catch (error2) {
            captureCommitPhaseError(fiber, fiber.return, error2);
          }
          resetCurrentFiber();
          var sibling = fiber.sibling;
          if (sibling !== null) {
            sibling.return = fiber.return;
            nextEffect = sibling;
            return;
          }
          nextEffect = fiber.return;
        }
      }
      function commitBeforeMutationEffectsOnFiber(finishedWork) {
        var current2 = finishedWork.alternate;
        var flags = finishedWork.flags;
        if ((flags & Snapshot) !== NoFlags$1) {
          setCurrentFiber(finishedWork);
        }
        switch (finishedWork.tag) {
          case FunctionComponent: {
            {
              if ((flags & Update) !== NoFlags$1) {
                commitUseEffectEventMount(finishedWork);
              }
            }
            break;
          }
          case ForwardRef:
          case SimpleMemoComponent: {
            break;
          }
          case ClassComponent: {
            if ((flags & Snapshot) !== NoFlags$1) {
              if (current2 !== null) {
                var prevProps = current2.memoizedProps;
                var prevState = current2.memoizedState;
                var instance = finishedWork.stateNode;
                {
                  if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
                    if (instance.props !== finishedWork.memoizedProps) {
                      error("Expected %s props to match memoized props before " + "getSnapshotBeforeUpdate. " + "This might either be because of a bug in React, or because " + "a component reassigns its own `this.props`. " + "Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance");
                    }
                    if (instance.state !== finishedWork.memoizedState) {
                      error("Expected %s state to match memoized state before " + "getSnapshotBeforeUpdate. " + "This might either be because of a bug in React, or because " + "a component reassigns its own `this.state`. " + "Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance");
                    }
                  }
                }
                var snapshot = instance.getSnapshotBeforeUpdate(finishedWork.elementType === finishedWork.type ? prevProps : resolveDefaultProps(finishedWork.type, prevProps), prevState);
                {
                  var didWarnSet = didWarnAboutUndefinedSnapshotBeforeUpdate;
                  if (snapshot === undefined && !didWarnSet.has(finishedWork.type)) {
                    didWarnSet.add(finishedWork.type);
                    error("%s.getSnapshotBeforeUpdate(): A snapshot value (or null) " + "must be returned. You have returned undefined.", getComponentNameFromFiber(finishedWork));
                  }
                }
                instance.__reactInternalSnapshotBeforeUpdate = snapshot;
              }
            }
            break;
          }
          case HostRoot: {
            if ((flags & Snapshot) !== NoFlags$1) {
              {
                var root2 = finishedWork.stateNode;
                clearContainer(root2.containerInfo);
              }
            }
            break;
          }
          case HostComponent:
          case HostHoistable:
          case HostSingleton:
          case HostText:
          case HostPortal:
          case IncompleteClassComponent:
            break;
          default: {
            if ((flags & Snapshot) !== NoFlags$1) {
              throw new Error("This unit of work tag should not have side-effects. This error is " + "likely caused by a bug in React. Please file an issue.");
            }
          }
        }
        if ((flags & Snapshot) !== NoFlags$1) {
          resetCurrentFiber();
        }
      }
      function commitHookEffectListUnmount(flags, finishedWork, nearestMountedAncestor) {
        var updateQueue = finishedWork.updateQueue;
        var lastEffect = updateQueue !== null ? updateQueue.lastEffect : null;
        if (lastEffect !== null) {
          var firstEffect = lastEffect.next;
          var effect = firstEffect;
          do {
            if ((effect.tag & flags) === flags) {
              var inst = effect.inst;
              var destroy = inst.destroy;
              if (destroy !== undefined) {
                inst.destroy = undefined;
                {
                  if ((flags & Passive) !== NoFlags) {
                    markComponentPassiveEffectUnmountStarted(finishedWork);
                  } else if ((flags & Layout) !== NoFlags) {
                    markComponentLayoutEffectUnmountStarted(finishedWork);
                  }
                }
                {
                  if ((flags & Insertion) !== NoFlags) {
                    setIsRunningInsertionEffect(true);
                  }
                }
                safelyCallDestroy(finishedWork, nearestMountedAncestor, destroy);
                {
                  if ((flags & Insertion) !== NoFlags) {
                    setIsRunningInsertionEffect(false);
                  }
                }
                {
                  if ((flags & Passive) !== NoFlags) {
                    markComponentPassiveEffectUnmountStopped();
                  } else if ((flags & Layout) !== NoFlags) {
                    markComponentLayoutEffectUnmountStopped();
                  }
                }
              }
            }
            effect = effect.next;
          } while (effect !== firstEffect);
        }
      }
      function commitHookEffectListMount(flags, finishedWork) {
        var updateQueue = finishedWork.updateQueue;
        var lastEffect = updateQueue !== null ? updateQueue.lastEffect : null;
        if (lastEffect !== null) {
          var firstEffect = lastEffect.next;
          var effect = firstEffect;
          do {
            if ((effect.tag & flags) === flags) {
              {
                if ((flags & Passive) !== NoFlags) {
                  markComponentPassiveEffectMountStarted(finishedWork);
                } else if ((flags & Layout) !== NoFlags) {
                  markComponentLayoutEffectMountStarted(finishedWork);
                }
              }
              var create2 = effect.create;
              {
                if ((flags & Insertion) !== NoFlags) {
                  setIsRunningInsertionEffect(true);
                }
              }
              var inst = effect.inst;
              var destroy = create2();
              inst.destroy = destroy;
              {
                if ((flags & Insertion) !== NoFlags) {
                  setIsRunningInsertionEffect(false);
                }
              }
              {
                if ((flags & Passive) !== NoFlags) {
                  markComponentPassiveEffectMountStopped();
                } else if ((flags & Layout) !== NoFlags) {
                  markComponentLayoutEffectMountStopped();
                }
              }
              {
                if (destroy !== undefined && typeof destroy !== "function") {
                  var hookName = undefined;
                  if ((effect.tag & Layout) !== NoFlags$1) {
                    hookName = "useLayoutEffect";
                  } else if ((effect.tag & Insertion) !== NoFlags$1) {
                    hookName = "useInsertionEffect";
                  } else {
                    hookName = "useEffect";
                  }
                  var addendum = undefined;
                  if (destroy === null) {
                    addendum = " You returned null. If your effect does not require clean " + "up, return undefined (or nothing).";
                  } else if (typeof destroy.then === "function") {
                    addendum = `

It looks like you wrote ` + hookName + "(async () => ...) or returned a Promise. " + "Instead, write the async function inside your effect " + `and call it immediately:

` + hookName + `(() => {
` + `  async function fetchData() {
` + `    // You can await here
` + `    const response = await MyAPI.getData(someId);
` + `    // ...
` + `  }
` + `  fetchData();
` + `}, [someId]); // Or [] if effect doesn't need props or state

` + "Learn more about data fetching with Hooks: https://reactjs.org/link/hooks-data-fetching";
                  } else {
                    addendum = " You returned: " + destroy;
                  }
                  error("%s must not return anything besides a function, " + "which is used for clean-up.%s", hookName, addendum);
                }
              }
            }
            effect = effect.next;
          } while (effect !== firstEffect);
        }
      }
      function commitUseEffectEventMount(finishedWork) {
        var updateQueue = finishedWork.updateQueue;
        var eventPayloads = updateQueue !== null ? updateQueue.events : null;
        if (eventPayloads !== null) {
          for (var ii = 0;ii < eventPayloads.length; ii++) {
            var _eventPayloads$ii = eventPayloads[ii], ref = _eventPayloads$ii.ref, nextImpl = _eventPayloads$ii.nextImpl;
            ref.impl = nextImpl;
          }
        }
      }
      function commitPassiveEffectDurations(finishedRoot, finishedWork) {
        if (getExecutionContext() & CommitContext) {
          if ((finishedWork.flags & Update) !== NoFlags$1) {
            switch (finishedWork.tag) {
              case Profiler: {
                var passiveEffectDuration = finishedWork.stateNode.passiveEffectDuration;
                var _finishedWork$memoize = finishedWork.memoizedProps, id = _finishedWork$memoize.id, onPostCommit = _finishedWork$memoize.onPostCommit;
                var commitTime2 = getCommitTime();
                var phase = finishedWork.alternate === null ? "mount" : "update";
                {
                  if (isCurrentUpdateNested()) {
                    phase = "nested-update";
                  }
                }
                if (typeof onPostCommit === "function") {
                  onPostCommit(id, phase, passiveEffectDuration, commitTime2);
                }
                var parentFiber = finishedWork.return;
                outer:
                  while (parentFiber !== null) {
                    switch (parentFiber.tag) {
                      case HostRoot:
                        var root2 = parentFiber.stateNode;
                        root2.passiveEffectDuration += passiveEffectDuration;
                        break outer;
                      case Profiler:
                        var parentStateNode = parentFiber.stateNode;
                        parentStateNode.passiveEffectDuration += passiveEffectDuration;
                        break outer;
                    }
                    parentFiber = parentFiber.return;
                  }
                break;
              }
            }
          }
        }
      }
      function commitHookLayoutEffects(finishedWork, hookFlags) {
        if (shouldProfile(finishedWork)) {
          try {
            startLayoutEffectTimer();
            commitHookEffectListMount(hookFlags, finishedWork);
          } catch (error2) {
            captureCommitPhaseError(finishedWork, finishedWork.return, error2);
          }
          recordLayoutEffectDuration(finishedWork);
        } else {
          try {
            commitHookEffectListMount(hookFlags, finishedWork);
          } catch (error2) {
            captureCommitPhaseError(finishedWork, finishedWork.return, error2);
          }
        }
      }
      function commitClassLayoutLifecycles(finishedWork, current2) {
        var instance = finishedWork.stateNode;
        if (current2 === null) {
          {
            if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
              if (instance.props !== finishedWork.memoizedProps) {
                error("Expected %s props to match memoized props before " + "componentDidMount. " + "This might either be because of a bug in React, or because " + "a component reassigns its own `this.props`. " + "Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance");
              }
              if (instance.state !== finishedWork.memoizedState) {
                error("Expected %s state to match memoized state before " + "componentDidMount. " + "This might either be because of a bug in React, or because " + "a component reassigns its own `this.state`. " + "Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance");
              }
            }
          }
          if (shouldProfile(finishedWork)) {
            try {
              startLayoutEffectTimer();
              instance.componentDidMount();
            } catch (error2) {
              captureCommitPhaseError(finishedWork, finishedWork.return, error2);
            }
            recordLayoutEffectDuration(finishedWork);
          } else {
            try {
              instance.componentDidMount();
            } catch (error2) {
              captureCommitPhaseError(finishedWork, finishedWork.return, error2);
            }
          }
        } else {
          var prevProps = finishedWork.elementType === finishedWork.type ? current2.memoizedProps : resolveDefaultProps(finishedWork.type, current2.memoizedProps);
          var prevState = current2.memoizedState;
          {
            if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
              if (instance.props !== finishedWork.memoizedProps) {
                error("Expected %s props to match memoized props before " + "componentDidUpdate. " + "This might either be because of a bug in React, or because " + "a component reassigns its own `this.props`. " + "Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance");
              }
              if (instance.state !== finishedWork.memoizedState) {
                error("Expected %s state to match memoized state before " + "componentDidUpdate. " + "This might either be because of a bug in React, or because " + "a component reassigns its own `this.state`. " + "Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance");
              }
            }
          }
          if (shouldProfile(finishedWork)) {
            try {
              startLayoutEffectTimer();
              instance.componentDidUpdate(prevProps, prevState, instance.__reactInternalSnapshotBeforeUpdate);
            } catch (error2) {
              captureCommitPhaseError(finishedWork, finishedWork.return, error2);
            }
            recordLayoutEffectDuration(finishedWork);
          } else {
            try {
              instance.componentDidUpdate(prevProps, prevState, instance.__reactInternalSnapshotBeforeUpdate);
            } catch (error2) {
              captureCommitPhaseError(finishedWork, finishedWork.return, error2);
            }
          }
        }
      }
      function commitClassCallbacks(finishedWork) {
        var updateQueue = finishedWork.updateQueue;
        if (updateQueue !== null) {
          var instance = finishedWork.stateNode;
          {
            if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
              if (instance.props !== finishedWork.memoizedProps) {
                error("Expected %s props to match memoized props before " + "processing the update queue. " + "This might either be because of a bug in React, or because " + "a component reassigns its own `this.props`. " + "Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance");
              }
              if (instance.state !== finishedWork.memoizedState) {
                error("Expected %s state to match memoized state before " + "processing the update queue. " + "This might either be because of a bug in React, or because " + "a component reassigns its own `this.state`. " + "Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance");
              }
            }
          }
          try {
            commitCallbacks(updateQueue, instance);
          } catch (error2) {
            captureCommitPhaseError(finishedWork, finishedWork.return, error2);
          }
        }
      }
      function commitHostComponentMount(finishedWork) {
        var type = finishedWork.type;
        var props = finishedWork.memoizedProps;
        var instance = finishedWork.stateNode;
        try {
          commitMount(instance, type, props, finishedWork);
        } catch (error2) {
          captureCommitPhaseError(finishedWork, finishedWork.return, error2);
        }
      }
      function commitProfilerUpdate(finishedWork, current2) {
        if (getExecutionContext() & CommitContext) {
          try {
            var _finishedWork$memoize2 = finishedWork.memoizedProps, onCommit = _finishedWork$memoize2.onCommit, onRender = _finishedWork$memoize2.onRender;
            var effectDuration = finishedWork.stateNode.effectDuration;
            var commitTime2 = getCommitTime();
            var phase = current2 === null ? "mount" : "update";
            if (enableProfilerNestedUpdatePhase) {
              if (isCurrentUpdateNested()) {
                phase = "nested-update";
              }
            }
            if (typeof onRender === "function") {
              onRender(finishedWork.memoizedProps.id, phase, finishedWork.actualDuration, finishedWork.treeBaseDuration, finishedWork.actualStartTime, commitTime2);
            }
            if (enableProfilerCommitHooks) {
              if (typeof onCommit === "function") {
                onCommit(finishedWork.memoizedProps.id, phase, effectDuration, commitTime2);
              }
              enqueuePendingPassiveProfilerEffect(finishedWork);
              var parentFiber = finishedWork.return;
              outer:
                while (parentFiber !== null) {
                  switch (parentFiber.tag) {
                    case HostRoot:
                      var root2 = parentFiber.stateNode;
                      root2.effectDuration += effectDuration;
                      break outer;
                    case Profiler:
                      var parentStateNode = parentFiber.stateNode;
                      parentStateNode.effectDuration += effectDuration;
                      break outer;
                  }
                  parentFiber = parentFiber.return;
                }
            }
          } catch (error2) {
            captureCommitPhaseError(finishedWork, finishedWork.return, error2);
          }
        }
      }
      function commitLayoutEffectOnFiber(finishedRoot, current2, finishedWork, committedLanes) {
        var flags = finishedWork.flags;
        switch (finishedWork.tag) {
          case FunctionComponent:
          case ForwardRef:
          case SimpleMemoComponent: {
            recursivelyTraverseLayoutEffects(finishedRoot, finishedWork);
            if (flags & Update) {
              commitHookLayoutEffects(finishedWork, Layout | HasEffect);
            }
            break;
          }
          case ClassComponent: {
            recursivelyTraverseLayoutEffects(finishedRoot, finishedWork);
            if (flags & Update) {
              commitClassLayoutLifecycles(finishedWork, current2);
            }
            if (flags & Callback) {
              commitClassCallbacks(finishedWork);
            }
            if (flags & Ref) {
              safelyAttachRef(finishedWork, finishedWork.return);
            }
            break;
          }
          case HostRoot: {
            recursivelyTraverseLayoutEffects(finishedRoot, finishedWork);
            if (flags & Callback) {
              var updateQueue = finishedWork.updateQueue;
              if (updateQueue !== null) {
                var instance = null;
                if (finishedWork.child !== null) {
                  switch (finishedWork.child.tag) {
                    case HostSingleton:
                    case HostComponent:
                      instance = getPublicInstance(finishedWork.child.stateNode);
                      break;
                    case ClassComponent:
                      instance = finishedWork.child.stateNode;
                      break;
                  }
                }
                try {
                  commitCallbacks(updateQueue, instance);
                } catch (error2) {
                  captureCommitPhaseError(finishedWork, finishedWork.return, error2);
                }
              }
            }
            break;
          }
          case HostHoistable: {
            {
              recursivelyTraverseLayoutEffects(finishedRoot, finishedWork);
              if (flags & Ref) {
                safelyAttachRef(finishedWork, finishedWork.return);
              }
              break;
            }
          }
          case HostSingleton:
          case HostComponent: {
            recursivelyTraverseLayoutEffects(finishedRoot, finishedWork);
            if (current2 === null && flags & Update) {
              commitHostComponentMount(finishedWork);
            }
            if (flags & Ref) {
              safelyAttachRef(finishedWork, finishedWork.return);
            }
            break;
          }
          case Profiler: {
            recursivelyTraverseLayoutEffects(finishedRoot, finishedWork);
            if (flags & Update) {
              commitProfilerUpdate(finishedWork, current2);
            }
            break;
          }
          case SuspenseComponent: {
            recursivelyTraverseLayoutEffects(finishedRoot, finishedWork);
            if (flags & Update) {
              commitSuspenseHydrationCallbacks(finishedRoot, finishedWork);
            }
            break;
          }
          case OffscreenComponent: {
            var isModernRoot = (finishedWork.mode & ConcurrentMode) !== NoMode;
            if (isModernRoot) {
              var isHidden = finishedWork.memoizedState !== null;
              var newOffscreenSubtreeIsHidden = isHidden || offscreenSubtreeIsHidden;
              if (newOffscreenSubtreeIsHidden)
                ;
              else {
                var wasHidden = current2 !== null && current2.memoizedState !== null;
                var newOffscreenSubtreeWasHidden = wasHidden || offscreenSubtreeWasHidden;
                var prevOffscreenSubtreeIsHidden = offscreenSubtreeIsHidden;
                var prevOffscreenSubtreeWasHidden = offscreenSubtreeWasHidden;
                offscreenSubtreeIsHidden = newOffscreenSubtreeIsHidden;
                offscreenSubtreeWasHidden = newOffscreenSubtreeWasHidden;
                if (offscreenSubtreeWasHidden && !prevOffscreenSubtreeWasHidden) {
                  var includeWorkInProgressEffects = (finishedWork.subtreeFlags & LayoutMask) !== NoFlags$1;
                  recursivelyTraverseReappearLayoutEffects(finishedRoot, finishedWork, includeWorkInProgressEffects);
                } else {
                  recursivelyTraverseLayoutEffects(finishedRoot, finishedWork);
                }
                offscreenSubtreeIsHidden = prevOffscreenSubtreeIsHidden;
                offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden;
              }
            } else {
              recursivelyTraverseLayoutEffects(finishedRoot, finishedWork);
            }
            if (flags & Ref) {
              var props = finishedWork.memoizedProps;
              if (props.mode === "manual") {
                safelyAttachRef(finishedWork, finishedWork.return);
              } else {
                safelyDetachRef(finishedWork, finishedWork.return);
              }
            }
            break;
          }
          default: {
            recursivelyTraverseLayoutEffects(finishedRoot, finishedWork);
            break;
          }
        }
      }
      function hideOrUnhideAllChildren(finishedWork, isHidden) {
        var hostSubtreeRoot = null;
        {
          var node = finishedWork;
          while (true) {
            if (node.tag === HostComponent || node.tag === HostHoistable || node.tag === HostSingleton) {
              if (hostSubtreeRoot === null) {
                hostSubtreeRoot = node;
                try {
                  var instance = node.stateNode;
                  if (isHidden) {
                    hideInstance(instance);
                  } else {
                    unhideInstance(node.stateNode, node.memoizedProps);
                  }
                } catch (error2) {
                  captureCommitPhaseError(finishedWork, finishedWork.return, error2);
                }
              }
            } else if (node.tag === HostText) {
              if (hostSubtreeRoot === null) {
                try {
                  var _instance = node.stateNode;
                  if (isHidden) {
                    hideTextInstance(_instance);
                  } else {
                    unhideTextInstance(_instance, node.memoizedProps);
                  }
                } catch (error2) {
                  captureCommitPhaseError(finishedWork, finishedWork.return, error2);
                }
              }
            } else if ((node.tag === OffscreenComponent || node.tag === LegacyHiddenComponent) && node.memoizedState !== null && node !== finishedWork)
              ;
            else if (node.child !== null) {
              node.child.return = node;
              node = node.child;
              continue;
            }
            if (node === finishedWork) {
              return;
            }
            while (node.sibling === null) {
              if (node.return === null || node.return === finishedWork) {
                return;
              }
              if (hostSubtreeRoot === node) {
                hostSubtreeRoot = null;
              }
              node = node.return;
            }
            if (hostSubtreeRoot === node) {
              hostSubtreeRoot = null;
            }
            node.sibling.return = node.return;
            node = node.sibling;
          }
        }
      }
      function commitAttachRef(finishedWork) {
        var ref = finishedWork.ref;
        if (ref !== null) {
          var instance = finishedWork.stateNode;
          var instanceToUse;
          switch (finishedWork.tag) {
            case HostHoistable:
            case HostSingleton:
            case HostComponent:
              instanceToUse = getPublicInstance(instance);
              break;
            default:
              instanceToUse = instance;
          }
          if (typeof ref === "function") {
            if (shouldProfile(finishedWork)) {
              try {
                startLayoutEffectTimer();
                finishedWork.refCleanup = ref(instanceToUse);
              } finally {
                recordLayoutEffectDuration(finishedWork);
              }
            } else {
              finishedWork.refCleanup = ref(instanceToUse);
            }
          } else {
            {
              if (!ref.hasOwnProperty("current")) {
                error("Unexpected ref object provided for %s. " + "Use either a ref-setter function or React.createRef().", getComponentNameFromFiber(finishedWork));
              }
            }
            ref.current = instanceToUse;
          }
        }
      }
      function detachFiberMutation(fiber) {
        var alternate = fiber.alternate;
        if (alternate !== null) {
          alternate.return = null;
        }
        fiber.return = null;
      }
      function detachFiberAfterEffects(fiber) {
        var alternate = fiber.alternate;
        if (alternate !== null) {
          fiber.alternate = null;
          detachFiberAfterEffects(alternate);
        }
        fiber.child = null;
        fiber.deletions = null;
        fiber.sibling = null;
        if (fiber.tag === HostComponent) {
          var hostInstance = fiber.stateNode;
          if (hostInstance !== null) {
            detachDeletedInstance(hostInstance);
          }
        }
        fiber.stateNode = null;
        {
          fiber._debugOwner = null;
        }
        fiber.return = null;
        fiber.dependencies = null;
        fiber.memoizedProps = null;
        fiber.memoizedState = null;
        fiber.pendingProps = null;
        fiber.stateNode = null;
        fiber.updateQueue = null;
      }
      function getHostParentFiber(fiber) {
        var parent = fiber.return;
        while (parent !== null) {
          if (isHostParent(parent)) {
            return parent;
          }
          parent = parent.return;
        }
        throw new Error("Expected to find a host parent. This error is likely caused by a bug " + "in React. Please file an issue.");
      }
      function isHostParent(fiber) {
        return fiber.tag === HostComponent || fiber.tag === HostRoot || fiber.tag === HostHoistable || fiber.tag === HostSingleton || fiber.tag === HostPortal;
      }
      function getHostSibling(fiber) {
        var node = fiber;
        siblings:
          while (true) {
            while (node.sibling === null) {
              if (node.return === null || isHostParent(node.return)) {
                return null;
              }
              node = node.return;
            }
            node.sibling.return = node.return;
            node = node.sibling;
            while (node.tag !== HostComponent && node.tag !== HostText && node.tag !== HostSingleton && node.tag !== DehydratedFragment) {
              if (node.flags & Placement) {
                continue siblings;
              }
              if (node.child === null || node.tag === HostPortal) {
                continue siblings;
              } else {
                node.child.return = node;
                node = node.child;
              }
            }
            if (!(node.flags & Placement)) {
              return node.stateNode;
            }
          }
      }
      function commitPlacement(finishedWork) {
        {
          if (finishedWork.tag === HostSingleton) {
            return;
          }
        }
        var parentFiber = getHostParentFiber(finishedWork);
        switch (parentFiber.tag) {
          case HostSingleton: {
            {
              var parent = parentFiber.stateNode;
              var before = getHostSibling(finishedWork);
              insertOrAppendPlacementNode(finishedWork, before, parent);
              break;
            }
          }
          case HostComponent: {
            var _parent = parentFiber.stateNode;
            if (parentFiber.flags & ContentReset) {
              resetTextContent(_parent);
              parentFiber.flags &= ~ContentReset;
            }
            var _before = getHostSibling(finishedWork);
            insertOrAppendPlacementNode(finishedWork, _before, _parent);
            break;
          }
          case HostRoot:
          case HostPortal: {
            var _parent2 = parentFiber.stateNode.containerInfo;
            var _before2 = getHostSibling(finishedWork);
            insertOrAppendPlacementNodeIntoContainer(finishedWork, _before2, _parent2);
            break;
          }
          default:
            throw new Error("Invalid host parent fiber. This error is likely caused by a bug " + "in React. Please file an issue.");
        }
      }
      function insertOrAppendPlacementNodeIntoContainer(node, before, parent) {
        var tag = node.tag;
        var isHost = tag === HostComponent || tag === HostText;
        if (isHost) {
          var stateNode = node.stateNode;
          if (before) {
            insertInContainerBefore(parent, stateNode, before);
          } else {
            appendChildToContainer(parent, stateNode);
          }
        } else if (tag === HostPortal || tag === HostSingleton)
          ;
        else {
          var child = node.child;
          if (child !== null) {
            insertOrAppendPlacementNodeIntoContainer(child, before, parent);
            var sibling = child.sibling;
            while (sibling !== null) {
              insertOrAppendPlacementNodeIntoContainer(sibling, before, parent);
              sibling = sibling.sibling;
            }
          }
        }
      }
      function insertOrAppendPlacementNode(node, before, parent) {
        var tag = node.tag;
        var isHost = tag === HostComponent || tag === HostText;
        if (isHost) {
          var stateNode = node.stateNode;
          if (before) {
            insertBefore(parent, stateNode, before);
          } else {
            appendChild(parent, stateNode);
          }
        } else if (tag === HostPortal || tag === HostSingleton)
          ;
        else {
          var child = node.child;
          if (child !== null) {
            insertOrAppendPlacementNode(child, before, parent);
            var sibling = child.sibling;
            while (sibling !== null) {
              insertOrAppendPlacementNode(sibling, before, parent);
              sibling = sibling.sibling;
            }
          }
        }
      }
      var hostParent = null;
      var hostParentIsContainer = false;
      function commitDeletionEffects(root2, returnFiber, deletedFiber) {
        {
          var parent = returnFiber;
          findParent:
            while (parent !== null) {
              switch (parent.tag) {
                case HostSingleton:
                case HostComponent: {
                  hostParent = parent.stateNode;
                  hostParentIsContainer = false;
                  break findParent;
                }
                case HostRoot: {
                  hostParent = parent.stateNode.containerInfo;
                  hostParentIsContainer = true;
                  break findParent;
                }
                case HostPortal: {
                  hostParent = parent.stateNode.containerInfo;
                  hostParentIsContainer = true;
                  break findParent;
                }
              }
              parent = parent.return;
            }
          if (hostParent === null) {
            throw new Error("Expected to find a host parent. This error is likely caused by " + "a bug in React. Please file an issue.");
          }
          commitDeletionEffectsOnFiber(root2, returnFiber, deletedFiber);
          hostParent = null;
          hostParentIsContainer = false;
        }
        detachFiberMutation(deletedFiber);
      }
      function recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, parent) {
        var child = parent.child;
        while (child !== null) {
          commitDeletionEffectsOnFiber(finishedRoot, nearestMountedAncestor, child);
          child = child.sibling;
        }
      }
      function commitDeletionEffectsOnFiber(finishedRoot, nearestMountedAncestor, deletedFiber) {
        onCommitUnmount(deletedFiber);
        switch (deletedFiber.tag) {
          case HostHoistable: {
            {
              if (!offscreenSubtreeWasHidden) {
                safelyDetachRef(deletedFiber, nearestMountedAncestor);
              }
              recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
              if (deletedFiber.memoizedState) {
                releaseResource(deletedFiber.memoizedState);
              } else if (deletedFiber.stateNode) {
                unmountHoistable(deletedFiber.stateNode);
              }
              return;
            }
          }
          case HostSingleton: {
            {
              if (!offscreenSubtreeWasHidden) {
                safelyDetachRef(deletedFiber, nearestMountedAncestor);
              }
              var prevHostParent = hostParent;
              var prevHostParentIsContainer = hostParentIsContainer;
              hostParent = deletedFiber.stateNode;
              recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
              releaseSingletonInstance(deletedFiber.stateNode);
              hostParent = prevHostParent;
              hostParentIsContainer = prevHostParentIsContainer;
              return;
            }
          }
          case HostComponent: {
            if (!offscreenSubtreeWasHidden) {
              safelyDetachRef(deletedFiber, nearestMountedAncestor);
            }
          }
          case HostText: {
            {
              var _prevHostParent = hostParent;
              var _prevHostParentIsContainer = hostParentIsContainer;
              hostParent = null;
              recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
              hostParent = _prevHostParent;
              hostParentIsContainer = _prevHostParentIsContainer;
              if (hostParent !== null) {
                if (hostParentIsContainer) {
                  removeChildFromContainer(hostParent, deletedFiber.stateNode);
                } else {
                  removeChild(hostParent, deletedFiber.stateNode);
                }
              }
            }
            return;
          }
          case DehydratedFragment: {
            {
              if (hostParent !== null) {
                if (hostParentIsContainer) {
                  clearSuspenseBoundaryFromContainer(hostParent, deletedFiber.stateNode);
                } else {
                  clearSuspenseBoundary(hostParent, deletedFiber.stateNode);
                }
              }
            }
            return;
          }
          case HostPortal: {
            {
              var _prevHostParent2 = hostParent;
              var _prevHostParentIsContainer2 = hostParentIsContainer;
              hostParent = deletedFiber.stateNode.containerInfo;
              hostParentIsContainer = true;
              recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
              hostParent = _prevHostParent2;
              hostParentIsContainer = _prevHostParentIsContainer2;
            }
            return;
          }
          case FunctionComponent:
          case ForwardRef:
          case MemoComponent:
          case SimpleMemoComponent: {
            if (!offscreenSubtreeWasHidden) {
              var updateQueue = deletedFiber.updateQueue;
              if (updateQueue !== null) {
                var lastEffect = updateQueue.lastEffect;
                if (lastEffect !== null) {
                  var firstEffect = lastEffect.next;
                  var effect = firstEffect;
                  do {
                    var tag = effect.tag;
                    var inst = effect.inst;
                    var destroy = inst.destroy;
                    if (destroy !== undefined) {
                      if ((tag & Insertion) !== NoFlags) {
                        inst.destroy = undefined;
                        safelyCallDestroy(deletedFiber, nearestMountedAncestor, destroy);
                      } else if ((tag & Layout) !== NoFlags) {
                        {
                          markComponentLayoutEffectUnmountStarted(deletedFiber);
                        }
                        if (shouldProfile(deletedFiber)) {
                          startLayoutEffectTimer();
                          inst.destroy = undefined;
                          safelyCallDestroy(deletedFiber, nearestMountedAncestor, destroy);
                          recordLayoutEffectDuration(deletedFiber);
                        } else {
                          inst.destroy = undefined;
                          safelyCallDestroy(deletedFiber, nearestMountedAncestor, destroy);
                        }
                        {
                          markComponentLayoutEffectUnmountStopped();
                        }
                      }
                    }
                    effect = effect.next;
                  } while (effect !== firstEffect);
                }
              }
            }
            recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
            return;
          }
          case ClassComponent: {
            if (!offscreenSubtreeWasHidden) {
              safelyDetachRef(deletedFiber, nearestMountedAncestor);
              var instance = deletedFiber.stateNode;
              if (typeof instance.componentWillUnmount === "function") {
                safelyCallComponentWillUnmount(deletedFiber, nearestMountedAncestor, instance);
              }
            }
            recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
            return;
          }
          case ScopeComponent: {
            recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
            return;
          }
          case OffscreenComponent: {
            safelyDetachRef(deletedFiber, nearestMountedAncestor);
            if (deletedFiber.mode & ConcurrentMode) {
              var prevOffscreenSubtreeWasHidden = offscreenSubtreeWasHidden;
              offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden || deletedFiber.memoizedState !== null;
              recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
              offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden;
            } else {
              recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
            }
            break;
          }
          default: {
            recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
            return;
          }
        }
      }
      function commitSuspenseCallback(finishedWork) {}
      function commitSuspenseHydrationCallbacks(finishedRoot, finishedWork) {
        var newState = finishedWork.memoizedState;
        if (newState === null) {
          var current2 = finishedWork.alternate;
          if (current2 !== null) {
            var prevState = current2.memoizedState;
            if (prevState !== null) {
              var suspenseInstance = prevState.dehydrated;
              if (suspenseInstance !== null) {
                try {
                  commitHydratedSuspenseInstance(suspenseInstance);
                  var hydrationCallbacks, onHydrated;
                  if (enableSuspenseCallback)
                    ;
                } catch (error2) {
                  captureCommitPhaseError(finishedWork, finishedWork.return, error2);
                }
              }
            }
          }
        }
      }
      function getRetryCache(finishedWork) {
        switch (finishedWork.tag) {
          case SuspenseComponent:
          case SuspenseListComponent: {
            var retryCache = finishedWork.stateNode;
            if (retryCache === null) {
              retryCache = finishedWork.stateNode = new PossiblyWeakSet;
            }
            return retryCache;
          }
          case OffscreenComponent: {
            var instance = finishedWork.stateNode;
            var _retryCache = instance._retryCache;
            if (_retryCache === null) {
              _retryCache = instance._retryCache = new PossiblyWeakSet;
            }
            return _retryCache;
          }
          default: {
            throw new Error("Unexpected Suspense handler tag (" + finishedWork.tag + "). This is a " + "bug in React.");
          }
        }
      }
      function detachOffscreenInstance(instance) {
        var fiber = instance._current;
        if (fiber === null) {
          throw new Error("Calling Offscreen.detach before instance handle has been set.");
        }
        if ((instance._pendingVisibility & OffscreenDetached) !== NoFlags$1) {
          return;
        }
        var root2 = enqueueConcurrentRenderForLane(fiber, SyncLane);
        if (root2 !== null) {
          instance._pendingVisibility |= OffscreenDetached;
          scheduleUpdateOnFiber(root2, fiber, SyncLane);
        }
      }
      function attachOffscreenInstance(instance) {
        var fiber = instance._current;
        if (fiber === null) {
          throw new Error("Calling Offscreen.detach before instance handle has been set.");
        }
        if ((instance._pendingVisibility & OffscreenDetached) === NoFlags$1) {
          return;
        }
        var root2 = enqueueConcurrentRenderForLane(fiber, SyncLane);
        if (root2 !== null) {
          instance._pendingVisibility &= ~OffscreenDetached;
          scheduleUpdateOnFiber(root2, fiber, SyncLane);
        }
      }
      function attachSuspenseRetryListeners(finishedWork, wakeables) {
        var retryCache = getRetryCache(finishedWork);
        wakeables.forEach(function(wakeable) {
          var retry = resolveRetryWakeable.bind(null, finishedWork, wakeable);
          if (!retryCache.has(wakeable)) {
            retryCache.add(wakeable);
            {
              if (isDevToolsPresent) {
                if (inProgressLanes !== null && inProgressRoot !== null) {
                  restorePendingUpdaters(inProgressRoot, inProgressLanes);
                } else {
                  throw Error("Expected finished root and lanes to be set. This is a bug in React.");
                }
              }
            }
            wakeable.then(retry, retry);
          }
        });
      }
      function commitMutationEffects(root2, finishedWork, committedLanes) {
        inProgressLanes = committedLanes;
        inProgressRoot = root2;
        setCurrentFiber(finishedWork);
        commitMutationEffectsOnFiber(finishedWork, root2);
        setCurrentFiber(finishedWork);
        inProgressLanes = null;
        inProgressRoot = null;
      }
      function recursivelyTraverseMutationEffects(root2, parentFiber, lanes) {
        var deletions = parentFiber.deletions;
        if (deletions !== null) {
          for (var i = 0;i < deletions.length; i++) {
            var childToDelete = deletions[i];
            try {
              commitDeletionEffects(root2, parentFiber, childToDelete);
            } catch (error2) {
              captureCommitPhaseError(childToDelete, parentFiber, error2);
            }
          }
        }
        var prevDebugFiber = getCurrentFiber();
        if (parentFiber.subtreeFlags & MutationMask) {
          var child = parentFiber.child;
          while (child !== null) {
            setCurrentFiber(child);
            commitMutationEffectsOnFiber(child, root2);
            child = child.sibling;
          }
        }
        setCurrentFiber(prevDebugFiber);
      }
      var currentHoistableRoot = null;
      function commitMutationEffectsOnFiber(finishedWork, root2, lanes) {
        var current2 = finishedWork.alternate;
        var flags = finishedWork.flags;
        switch (finishedWork.tag) {
          case FunctionComponent:
          case ForwardRef:
          case MemoComponent:
          case SimpleMemoComponent: {
            recursivelyTraverseMutationEffects(root2, finishedWork);
            commitReconciliationEffects(finishedWork);
            if (flags & Update) {
              try {
                commitHookEffectListUnmount(Insertion | HasEffect, finishedWork, finishedWork.return);
                commitHookEffectListMount(Insertion | HasEffect, finishedWork);
              } catch (error2) {
                captureCommitPhaseError(finishedWork, finishedWork.return, error2);
              }
              if (shouldProfile(finishedWork)) {
                try {
                  startLayoutEffectTimer();
                  commitHookEffectListUnmount(Layout | HasEffect, finishedWork, finishedWork.return);
                } catch (error2) {
                  captureCommitPhaseError(finishedWork, finishedWork.return, error2);
                }
                recordLayoutEffectDuration(finishedWork);
              } else {
                try {
                  commitHookEffectListUnmount(Layout | HasEffect, finishedWork, finishedWork.return);
                } catch (error2) {
                  captureCommitPhaseError(finishedWork, finishedWork.return, error2);
                }
              }
            }
            return;
          }
          case ClassComponent: {
            recursivelyTraverseMutationEffects(root2, finishedWork);
            commitReconciliationEffects(finishedWork);
            if (flags & Ref) {
              if (current2 !== null) {
                safelyDetachRef(current2, current2.return);
              }
            }
            if (flags & Callback && offscreenSubtreeIsHidden) {
              var updateQueue = finishedWork.updateQueue;
              if (updateQueue !== null) {
                deferHiddenCallbacks(updateQueue);
              }
            }
            return;
          }
          case HostHoistable: {
            {
              var hoistableRoot = currentHoistableRoot;
              recursivelyTraverseMutationEffects(root2, finishedWork);
              commitReconciliationEffects(finishedWork);
              if (flags & Ref) {
                if (current2 !== null) {
                  safelyDetachRef(current2, current2.return);
                }
              }
              if (flags & Update) {
                var currentResource = current2 !== null ? current2.memoizedState : null;
                var newResource = finishedWork.memoizedState;
                if (current2 === null) {
                  if (newResource === null) {
                    if (finishedWork.stateNode === null) {
                      finishedWork.stateNode = hydrateHoistable(hoistableRoot, finishedWork.type, finishedWork.memoizedProps, finishedWork);
                    } else {
                      mountHoistable(hoistableRoot, finishedWork.type, finishedWork.stateNode);
                    }
                  } else {
                    finishedWork.stateNode = acquireResource(hoistableRoot, newResource, finishedWork.memoizedProps);
                  }
                } else if (currentResource !== newResource) {
                  if (currentResource === null) {
                    if (current2.stateNode !== null) {
                      unmountHoistable(current2.stateNode);
                    }
                  } else {
                    releaseResource(currentResource);
                  }
                  if (newResource === null) {
                    mountHoistable(hoistableRoot, finishedWork.type, finishedWork.stateNode);
                  } else {
                    acquireResource(hoistableRoot, newResource, finishedWork.memoizedProps);
                  }
                } else if (newResource === null && finishedWork.stateNode !== null) {
                  var updatePayload = finishedWork.updateQueue;
                  finishedWork.updateQueue = null;
                  if (updatePayload !== null) {
                    try {
                      commitUpdate(finishedWork.stateNode, updatePayload, finishedWork.type, current2.memoizedProps, finishedWork.memoizedProps, finishedWork);
                    } catch (error2) {
                      captureCommitPhaseError(finishedWork, finishedWork.return, error2);
                    }
                  }
                }
              }
              return;
            }
          }
          case HostSingleton: {
            {
              if (flags & Update) {
                var previousWork = finishedWork.alternate;
                if (previousWork === null) {
                  var singleton = finishedWork.stateNode;
                  var props = finishedWork.memoizedProps;
                  clearSingleton(singleton);
                  acquireSingletonInstance(finishedWork.type, props, singleton, finishedWork);
                }
              }
            }
          }
          case HostComponent: {
            recursivelyTraverseMutationEffects(root2, finishedWork);
            commitReconciliationEffects(finishedWork);
            if (flags & Ref) {
              if (current2 !== null) {
                safelyDetachRef(current2, current2.return);
              }
            }
            {
              if (finishedWork.flags & ContentReset) {
                var instance = finishedWork.stateNode;
                try {
                  resetTextContent(instance);
                } catch (error2) {
                  captureCommitPhaseError(finishedWork, finishedWork.return, error2);
                }
              }
              if (flags & Update) {
                var _instance2 = finishedWork.stateNode;
                if (_instance2 != null) {
                  var newProps = finishedWork.memoizedProps;
                  var oldProps = current2 !== null ? current2.memoizedProps : newProps;
                  var type = finishedWork.type;
                  var _updatePayload = finishedWork.updateQueue;
                  finishedWork.updateQueue = null;
                  if (_updatePayload !== null || diffInCommitPhase) {
                    try {
                      commitUpdate(_instance2, _updatePayload, type, oldProps, newProps, finishedWork);
                    } catch (error2) {
                      captureCommitPhaseError(finishedWork, finishedWork.return, error2);
                    }
                  }
                }
              }
            }
            return;
          }
          case HostText: {
            recursivelyTraverseMutationEffects(root2, finishedWork);
            commitReconciliationEffects(finishedWork);
            if (flags & Update) {
              {
                if (finishedWork.stateNode === null) {
                  throw new Error("This should have a text node initialized. This error is likely " + "caused by a bug in React. Please file an issue.");
                }
                var textInstance = finishedWork.stateNode;
                var newText = finishedWork.memoizedProps;
                var oldText = current2 !== null ? current2.memoizedProps : newText;
                try {
                  commitTextUpdate(textInstance, oldText, newText);
                } catch (error2) {
                  captureCommitPhaseError(finishedWork, finishedWork.return, error2);
                }
              }
            }
            return;
          }
          case HostRoot: {
            {
              prepareToCommitHoistables();
              var previousHoistableRoot = currentHoistableRoot;
              currentHoistableRoot = getHoistableRoot(root2.containerInfo);
              recursivelyTraverseMutationEffects(root2, finishedWork);
              currentHoistableRoot = previousHoistableRoot;
              commitReconciliationEffects(finishedWork);
            }
            if (flags & Update) {
              {
                if (current2 !== null) {
                  var prevRootState = current2.memoizedState;
                  if (prevRootState.isDehydrated) {
                    try {
                      commitHydratedContainer(root2.containerInfo);
                    } catch (error2) {
                      captureCommitPhaseError(finishedWork, finishedWork.return, error2);
                    }
                  }
                }
              }
            }
            return;
          }
          case HostPortal: {
            {
              var _previousHoistableRoot = currentHoistableRoot;
              currentHoistableRoot = getHoistableRoot(finishedWork.stateNode.containerInfo);
              recursivelyTraverseMutationEffects(root2, finishedWork);
              commitReconciliationEffects(finishedWork);
              currentHoistableRoot = _previousHoistableRoot;
            }
            return;
          }
          case SuspenseComponent: {
            recursivelyTraverseMutationEffects(root2, finishedWork);
            commitReconciliationEffects(finishedWork);
            var offscreenFiber = finishedWork.child;
            if (offscreenFiber.flags & Visibility) {
              var newState = offscreenFiber.memoizedState;
              var isHidden = newState !== null;
              if (isHidden) {
                var wasHidden = offscreenFiber.alternate !== null && offscreenFiber.alternate.memoizedState !== null;
                if (!wasHidden) {
                  markCommitTimeOfFallback();
                }
              }
            }
            if (flags & Update) {
              try {
                commitSuspenseCallback(finishedWork);
              } catch (error2) {
                captureCommitPhaseError(finishedWork, finishedWork.return, error2);
              }
              var retryQueue = finishedWork.updateQueue;
              if (retryQueue !== null) {
                finishedWork.updateQueue = null;
                attachSuspenseRetryListeners(finishedWork, retryQueue);
              }
            }
            return;
          }
          case OffscreenComponent: {
            if (flags & Ref) {
              if (current2 !== null) {
                safelyDetachRef(current2, current2.return);
              }
            }
            var _newState = finishedWork.memoizedState;
            var _isHidden = _newState !== null;
            var _wasHidden = current2 !== null && current2.memoizedState !== null;
            if (finishedWork.mode & ConcurrentMode) {
              var prevOffscreenSubtreeIsHidden = offscreenSubtreeIsHidden;
              var prevOffscreenSubtreeWasHidden = offscreenSubtreeWasHidden;
              offscreenSubtreeIsHidden = prevOffscreenSubtreeIsHidden || _isHidden;
              offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden || _wasHidden;
              recursivelyTraverseMutationEffects(root2, finishedWork);
              offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden;
              offscreenSubtreeIsHidden = prevOffscreenSubtreeIsHidden;
            } else {
              recursivelyTraverseMutationEffects(root2, finishedWork);
            }
            commitReconciliationEffects(finishedWork);
            var offscreenInstance = finishedWork.stateNode;
            offscreenInstance._current = finishedWork;
            offscreenInstance._visibility &= ~OffscreenDetached;
            offscreenInstance._visibility |= offscreenInstance._pendingVisibility & OffscreenDetached;
            if (flags & Visibility) {
              if (_isHidden) {
                offscreenInstance._visibility &= ~OffscreenVisible;
              } else {
                offscreenInstance._visibility |= OffscreenVisible;
              }
              if (_isHidden) {
                var isUpdate = current2 !== null;
                var wasHiddenByAncestorOffscreen = offscreenSubtreeIsHidden || offscreenSubtreeWasHidden;
                if (isUpdate && !_wasHidden && !wasHiddenByAncestorOffscreen) {
                  if ((finishedWork.mode & ConcurrentMode) !== NoMode) {
                    recursivelyTraverseDisappearLayoutEffects(finishedWork);
                  }
                }
              }
              if (!isOffscreenManual(finishedWork)) {
                hideOrUnhideAllChildren(finishedWork, _isHidden);
              }
            }
            if (flags & Update) {
              var offscreenQueue = finishedWork.updateQueue;
              if (offscreenQueue !== null) {
                var _retryQueue = offscreenQueue.retryQueue;
                if (_retryQueue !== null) {
                  offscreenQueue.retryQueue = null;
                  attachSuspenseRetryListeners(finishedWork, _retryQueue);
                }
              }
            }
            return;
          }
          case SuspenseListComponent: {
            recursivelyTraverseMutationEffects(root2, finishedWork);
            commitReconciliationEffects(finishedWork);
            if (flags & Update) {
              var _retryQueue2 = finishedWork.updateQueue;
              if (_retryQueue2 !== null) {
                finishedWork.updateQueue = null;
                attachSuspenseRetryListeners(finishedWork, _retryQueue2);
              }
            }
            return;
          }
          case ScopeComponent: {
            return;
          }
          default: {
            recursivelyTraverseMutationEffects(root2, finishedWork);
            commitReconciliationEffects(finishedWork);
            return;
          }
        }
      }
      function commitReconciliationEffects(finishedWork) {
        var flags = finishedWork.flags;
        if (flags & Placement) {
          try {
            commitPlacement(finishedWork);
          } catch (error2) {
            captureCommitPhaseError(finishedWork, finishedWork.return, error2);
          }
          finishedWork.flags &= ~Placement;
        }
        if (flags & Hydrating) {
          finishedWork.flags &= ~Hydrating;
        }
      }
      function commitLayoutEffects(finishedWork, root2, committedLanes) {
        inProgressLanes = committedLanes;
        inProgressRoot = root2;
        var current2 = finishedWork.alternate;
        commitLayoutEffectOnFiber(root2, current2, finishedWork);
        inProgressLanes = null;
        inProgressRoot = null;
      }
      function recursivelyTraverseLayoutEffects(root2, parentFiber, lanes) {
        var prevDebugFiber = getCurrentFiber();
        if (parentFiber.subtreeFlags & LayoutMask) {
          var child = parentFiber.child;
          while (child !== null) {
            setCurrentFiber(child);
            var current2 = child.alternate;
            commitLayoutEffectOnFiber(root2, current2, child);
            child = child.sibling;
          }
        }
        setCurrentFiber(prevDebugFiber);
      }
      function disappearLayoutEffects(finishedWork) {
        switch (finishedWork.tag) {
          case FunctionComponent:
          case ForwardRef:
          case MemoComponent:
          case SimpleMemoComponent: {
            if (shouldProfile(finishedWork)) {
              try {
                startLayoutEffectTimer();
                commitHookEffectListUnmount(Layout, finishedWork, finishedWork.return);
              } finally {
                recordLayoutEffectDuration(finishedWork);
              }
            } else {
              commitHookEffectListUnmount(Layout, finishedWork, finishedWork.return);
            }
            recursivelyTraverseDisappearLayoutEffects(finishedWork);
            break;
          }
          case ClassComponent: {
            safelyDetachRef(finishedWork, finishedWork.return);
            var instance = finishedWork.stateNode;
            if (typeof instance.componentWillUnmount === "function") {
              safelyCallComponentWillUnmount(finishedWork, finishedWork.return, instance);
            }
            recursivelyTraverseDisappearLayoutEffects(finishedWork);
            break;
          }
          case HostHoistable:
          case HostSingleton:
          case HostComponent: {
            safelyDetachRef(finishedWork, finishedWork.return);
            recursivelyTraverseDisappearLayoutEffects(finishedWork);
            break;
          }
          case OffscreenComponent: {
            safelyDetachRef(finishedWork, finishedWork.return);
            var isHidden = finishedWork.memoizedState !== null;
            if (isHidden)
              ;
            else {
              recursivelyTraverseDisappearLayoutEffects(finishedWork);
            }
            break;
          }
          default: {
            recursivelyTraverseDisappearLayoutEffects(finishedWork);
            break;
          }
        }
      }
      function recursivelyTraverseDisappearLayoutEffects(parentFiber) {
        var child = parentFiber.child;
        while (child !== null) {
          disappearLayoutEffects(child);
          child = child.sibling;
        }
      }
      function reappearLayoutEffects(finishedRoot, current2, finishedWork, includeWorkInProgressEffects) {
        var flags = finishedWork.flags;
        switch (finishedWork.tag) {
          case FunctionComponent:
          case ForwardRef:
          case SimpleMemoComponent: {
            recursivelyTraverseReappearLayoutEffects(finishedRoot, finishedWork, includeWorkInProgressEffects);
            commitHookLayoutEffects(finishedWork, Layout);
            break;
          }
          case ClassComponent: {
            recursivelyTraverseReappearLayoutEffects(finishedRoot, finishedWork, includeWorkInProgressEffects);
            var instance = finishedWork.stateNode;
            if (typeof instance.componentDidMount === "function") {
              try {
                instance.componentDidMount();
              } catch (error2) {
                captureCommitPhaseError(finishedWork, finishedWork.return, error2);
              }
            }
            var updateQueue = finishedWork.updateQueue;
            if (updateQueue !== null) {
              commitHiddenCallbacks(updateQueue, instance);
            }
            if (includeWorkInProgressEffects && flags & Callback) {
              commitClassCallbacks(finishedWork);
            }
            safelyAttachRef(finishedWork, finishedWork.return);
            break;
          }
          case HostHoistable:
          case HostSingleton:
          case HostComponent: {
            recursivelyTraverseReappearLayoutEffects(finishedRoot, finishedWork, includeWorkInProgressEffects);
            if (includeWorkInProgressEffects && current2 === null && flags & Update) {
              commitHostComponentMount(finishedWork);
            }
            safelyAttachRef(finishedWork, finishedWork.return);
            break;
          }
          case Profiler: {
            recursivelyTraverseReappearLayoutEffects(finishedRoot, finishedWork, includeWorkInProgressEffects);
            if (includeWorkInProgressEffects && flags & Update) {
              commitProfilerUpdate(finishedWork, current2);
            }
            break;
          }
          case SuspenseComponent: {
            recursivelyTraverseReappearLayoutEffects(finishedRoot, finishedWork, includeWorkInProgressEffects);
            if (includeWorkInProgressEffects && flags & Update) {
              commitSuspenseHydrationCallbacks(finishedRoot, finishedWork);
            }
            break;
          }
          case OffscreenComponent: {
            var offscreenState = finishedWork.memoizedState;
            var isHidden = offscreenState !== null;
            if (isHidden)
              ;
            else {
              recursivelyTraverseReappearLayoutEffects(finishedRoot, finishedWork, includeWorkInProgressEffects);
            }
            safelyAttachRef(finishedWork, finishedWork.return);
            break;
          }
          default: {
            recursivelyTraverseReappearLayoutEffects(finishedRoot, finishedWork, includeWorkInProgressEffects);
            break;
          }
        }
      }
      function recursivelyTraverseReappearLayoutEffects(finishedRoot, parentFiber, includeWorkInProgressEffects) {
        var childShouldIncludeWorkInProgressEffects = includeWorkInProgressEffects && (parentFiber.subtreeFlags & LayoutMask) !== NoFlags$1;
        var prevDebugFiber = getCurrentFiber();
        var child = parentFiber.child;
        while (child !== null) {
          var current2 = child.alternate;
          reappearLayoutEffects(finishedRoot, current2, child, childShouldIncludeWorkInProgressEffects);
          child = child.sibling;
        }
        setCurrentFiber(prevDebugFiber);
      }
      function commitHookPassiveMountEffects(finishedWork, hookFlags) {
        if (shouldProfile(finishedWork)) {
          startPassiveEffectTimer();
          try {
            commitHookEffectListMount(hookFlags, finishedWork);
          } catch (error2) {
            captureCommitPhaseError(finishedWork, finishedWork.return, error2);
          }
          recordPassiveEffectDuration(finishedWork);
        } else {
          try {
            commitHookEffectListMount(hookFlags, finishedWork);
          } catch (error2) {
            captureCommitPhaseError(finishedWork, finishedWork.return, error2);
          }
        }
      }
      function commitOffscreenPassiveMountEffects(current2, finishedWork, instance) {
        {
          var previousCache = null;
          if (current2 !== null && current2.memoizedState !== null && current2.memoizedState.cachePool !== null) {
            previousCache = current2.memoizedState.cachePool.pool;
          }
          var nextCache = null;
          if (finishedWork.memoizedState !== null && finishedWork.memoizedState.cachePool !== null) {
            nextCache = finishedWork.memoizedState.cachePool.pool;
          }
          if (nextCache !== previousCache) {
            if (nextCache != null) {
              retainCache(nextCache);
            }
            if (previousCache != null) {
              releaseCache(previousCache);
            }
          }
        }
      }
      function commitCachePassiveMountEffect(current2, finishedWork) {
        {
          var previousCache = null;
          if (finishedWork.alternate !== null) {
            previousCache = finishedWork.alternate.memoizedState.cache;
          }
          var nextCache = finishedWork.memoizedState.cache;
          if (nextCache !== previousCache) {
            retainCache(nextCache);
            if (previousCache != null) {
              releaseCache(previousCache);
            }
          }
        }
      }
      function commitPassiveMountEffects(root2, finishedWork, committedLanes, committedTransitions) {
        setCurrentFiber(finishedWork);
        commitPassiveMountOnFiber(root2, finishedWork, committedLanes, committedTransitions);
        resetCurrentFiber();
      }
      function recursivelyTraversePassiveMountEffects(root2, parentFiber, committedLanes, committedTransitions) {
        var prevDebugFiber = getCurrentFiber();
        if (parentFiber.subtreeFlags & PassiveMask) {
          var child = parentFiber.child;
          while (child !== null) {
            setCurrentFiber(child);
            commitPassiveMountOnFiber(root2, child, committedLanes, committedTransitions);
            child = child.sibling;
          }
        }
        setCurrentFiber(prevDebugFiber);
      }
      function commitPassiveMountOnFiber(finishedRoot, finishedWork, committedLanes, committedTransitions) {
        var flags = finishedWork.flags;
        switch (finishedWork.tag) {
          case FunctionComponent:
          case ForwardRef:
          case SimpleMemoComponent: {
            recursivelyTraversePassiveMountEffects(finishedRoot, finishedWork, committedLanes, committedTransitions);
            if (flags & Passive$1) {
              commitHookPassiveMountEffects(finishedWork, Passive | HasEffect);
            }
            break;
          }
          case HostRoot: {
            recursivelyTraversePassiveMountEffects(finishedRoot, finishedWork, committedLanes, committedTransitions);
            if (flags & Passive$1) {
              {
                var previousCache = null;
                if (finishedWork.alternate !== null) {
                  previousCache = finishedWork.alternate.memoizedState.cache;
                }
                var nextCache = finishedWork.memoizedState.cache;
                if (nextCache !== previousCache) {
                  retainCache(nextCache);
                  if (previousCache != null) {
                    releaseCache(previousCache);
                  }
                }
              }
            }
            break;
          }
          case LegacyHiddenComponent: {
            break;
          }
          case OffscreenComponent: {
            var _instance3 = finishedWork.stateNode;
            var nextState = finishedWork.memoizedState;
            var isHidden = nextState !== null;
            if (isHidden) {
              if (_instance3._visibility & OffscreenPassiveEffectsConnected) {
                recursivelyTraversePassiveMountEffects(finishedRoot, finishedWork, committedLanes, committedTransitions);
              } else {
                if (finishedWork.mode & ConcurrentMode) {
                  {
                    recursivelyTraverseAtomicPassiveEffects(finishedRoot, finishedWork);
                  }
                } else {
                  _instance3._visibility |= OffscreenPassiveEffectsConnected;
                  recursivelyTraversePassiveMountEffects(finishedRoot, finishedWork, committedLanes, committedTransitions);
                }
              }
            } else {
              if (_instance3._visibility & OffscreenPassiveEffectsConnected) {
                recursivelyTraversePassiveMountEffects(finishedRoot, finishedWork, committedLanes, committedTransitions);
              } else {
                _instance3._visibility |= OffscreenPassiveEffectsConnected;
                var includeWorkInProgressEffects = (finishedWork.subtreeFlags & PassiveMask) !== NoFlags$1;
                recursivelyTraverseReconnectPassiveEffects(finishedRoot, finishedWork, committedLanes, committedTransitions, includeWorkInProgressEffects);
              }
            }
            if (flags & Passive$1) {
              var _current = finishedWork.alternate;
              commitOffscreenPassiveMountEffects(_current, finishedWork);
            }
            break;
          }
          case CacheComponent: {
            recursivelyTraversePassiveMountEffects(finishedRoot, finishedWork, committedLanes, committedTransitions);
            if (flags & Passive$1) {
              var _current2 = finishedWork.alternate;
              commitCachePassiveMountEffect(_current2, finishedWork);
            }
            break;
          }
          case TracingMarkerComponent:
          default: {
            recursivelyTraversePassiveMountEffects(finishedRoot, finishedWork, committedLanes, committedTransitions);
            break;
          }
        }
      }
      function recursivelyTraverseReconnectPassiveEffects(finishedRoot, parentFiber, committedLanes, committedTransitions, includeWorkInProgressEffects) {
        var childShouldIncludeWorkInProgressEffects = includeWorkInProgressEffects && (parentFiber.subtreeFlags & PassiveMask) !== NoFlags$1;
        var prevDebugFiber = getCurrentFiber();
        var child = parentFiber.child;
        while (child !== null) {
          reconnectPassiveEffects(finishedRoot, child, committedLanes, committedTransitions, childShouldIncludeWorkInProgressEffects);
          child = child.sibling;
        }
        setCurrentFiber(prevDebugFiber);
      }
      function reconnectPassiveEffects(finishedRoot, finishedWork, committedLanes, committedTransitions, includeWorkInProgressEffects) {
        var flags = finishedWork.flags;
        switch (finishedWork.tag) {
          case FunctionComponent:
          case ForwardRef:
          case SimpleMemoComponent: {
            recursivelyTraverseReconnectPassiveEffects(finishedRoot, finishedWork, committedLanes, committedTransitions, includeWorkInProgressEffects);
            commitHookPassiveMountEffects(finishedWork, Passive);
            break;
          }
          case LegacyHiddenComponent: {
            break;
          }
          case OffscreenComponent: {
            var _instance4 = finishedWork.stateNode;
            var nextState = finishedWork.memoizedState;
            var isHidden = nextState !== null;
            if (isHidden) {
              if (_instance4._visibility & OffscreenPassiveEffectsConnected) {
                recursivelyTraverseReconnectPassiveEffects(finishedRoot, finishedWork, committedLanes, committedTransitions, includeWorkInProgressEffects);
              } else {
                if (finishedWork.mode & ConcurrentMode) {
                  {
                    recursivelyTraverseAtomicPassiveEffects(finishedRoot, finishedWork);
                  }
                } else {
                  _instance4._visibility |= OffscreenPassiveEffectsConnected;
                  recursivelyTraverseReconnectPassiveEffects(finishedRoot, finishedWork, committedLanes, committedTransitions, includeWorkInProgressEffects);
                }
              }
            } else {
              _instance4._visibility |= OffscreenPassiveEffectsConnected;
              recursivelyTraverseReconnectPassiveEffects(finishedRoot, finishedWork, committedLanes, committedTransitions, includeWorkInProgressEffects);
            }
            if (includeWorkInProgressEffects && flags & Passive$1) {
              var _current3 = finishedWork.alternate;
              commitOffscreenPassiveMountEffects(_current3, finishedWork);
            }
            break;
          }
          case CacheComponent: {
            recursivelyTraverseReconnectPassiveEffects(finishedRoot, finishedWork, committedLanes, committedTransitions, includeWorkInProgressEffects);
            if (includeWorkInProgressEffects && flags & Passive$1) {
              var _current4 = finishedWork.alternate;
              commitCachePassiveMountEffect(_current4, finishedWork);
            }
            break;
          }
          case TracingMarkerComponent:
          default: {
            recursivelyTraverseReconnectPassiveEffects(finishedRoot, finishedWork, committedLanes, committedTransitions, includeWorkInProgressEffects);
            break;
          }
        }
      }
      function recursivelyTraverseAtomicPassiveEffects(finishedRoot, parentFiber, committedLanes, committedTransitions) {
        var prevDebugFiber = getCurrentFiber();
        if (parentFiber.subtreeFlags & PassiveMask) {
          var child = parentFiber.child;
          while (child !== null) {
            setCurrentFiber(child);
            commitAtomicPassiveEffects(finishedRoot, child);
            child = child.sibling;
          }
        }
        setCurrentFiber(prevDebugFiber);
      }
      function commitAtomicPassiveEffects(finishedRoot, finishedWork, committedLanes, committedTransitions) {
        var flags = finishedWork.flags;
        switch (finishedWork.tag) {
          case OffscreenComponent: {
            recursivelyTraverseAtomicPassiveEffects(finishedRoot, finishedWork);
            if (flags & Passive$1) {
              var current2 = finishedWork.alternate;
              commitOffscreenPassiveMountEffects(current2, finishedWork);
            }
            break;
          }
          case CacheComponent: {
            recursivelyTraverseAtomicPassiveEffects(finishedRoot, finishedWork);
            if (flags & Passive$1) {
              var _current5 = finishedWork.alternate;
              commitCachePassiveMountEffect(_current5, finishedWork);
            }
            break;
          }
          default: {
            recursivelyTraverseAtomicPassiveEffects(finishedRoot, finishedWork);
            break;
          }
        }
      }
      function commitPassiveUnmountEffects(finishedWork) {
        setCurrentFiber(finishedWork);
        commitPassiveUnmountOnFiber(finishedWork);
        resetCurrentFiber();
      }
      var suspenseyCommitFlag = ShouldSuspendCommit;
      function accumulateSuspenseyCommit(finishedWork) {
        accumulateSuspenseyCommitOnFiber(finishedWork);
      }
      function recursivelyAccumulateSuspenseyCommit(parentFiber) {
        if (parentFiber.subtreeFlags & suspenseyCommitFlag) {
          var child = parentFiber.child;
          while (child !== null) {
            accumulateSuspenseyCommitOnFiber(child);
            child = child.sibling;
          }
        }
      }
      function accumulateSuspenseyCommitOnFiber(fiber) {
        switch (fiber.tag) {
          case HostHoistable: {
            recursivelyAccumulateSuspenseyCommit(fiber);
            if (fiber.flags & suspenseyCommitFlag) {
              if (fiber.memoizedState !== null) {
                suspendResource(currentHoistableRoot, fiber.memoizedState, fiber.memoizedProps);
              }
            }
            break;
          }
          case HostComponent: {
            recursivelyAccumulateSuspenseyCommit(fiber);
            break;
          }
          case HostRoot:
          case HostPortal: {
            {
              var previousHoistableRoot = currentHoistableRoot;
              var container = fiber.stateNode.containerInfo;
              currentHoistableRoot = getHoistableRoot(container);
              recursivelyAccumulateSuspenseyCommit(fiber);
              currentHoistableRoot = previousHoistableRoot;
            }
            break;
          }
          case OffscreenComponent: {
            var isHidden = fiber.memoizedState !== null;
            if (isHidden)
              ;
            else {
              var current2 = fiber.alternate;
              var wasHidden = current2 !== null && current2.memoizedState !== null;
              if (wasHidden) {
                var prevFlags = suspenseyCommitFlag;
                suspenseyCommitFlag = MaySuspendCommit;
                recursivelyAccumulateSuspenseyCommit(fiber);
                suspenseyCommitFlag = prevFlags;
              } else {
                recursivelyAccumulateSuspenseyCommit(fiber);
              }
            }
            break;
          }
          default: {
            recursivelyAccumulateSuspenseyCommit(fiber);
          }
        }
      }
      function detachAlternateSiblings(parentFiber) {
        var previousFiber = parentFiber.alternate;
        if (previousFiber !== null) {
          var detachedChild = previousFiber.child;
          if (detachedChild !== null) {
            previousFiber.child = null;
            do {
              var detachedSibling = detachedChild.sibling;
              detachedChild.sibling = null;
              detachedChild = detachedSibling;
            } while (detachedChild !== null);
          }
        }
      }
      function commitHookPassiveUnmountEffects(finishedWork, nearestMountedAncestor, hookFlags) {
        if (shouldProfile(finishedWork)) {
          startPassiveEffectTimer();
          commitHookEffectListUnmount(hookFlags, finishedWork, nearestMountedAncestor);
          recordPassiveEffectDuration(finishedWork);
        } else {
          commitHookEffectListUnmount(hookFlags, finishedWork, nearestMountedAncestor);
        }
      }
      function recursivelyTraversePassiveUnmountEffects(parentFiber) {
        var deletions = parentFiber.deletions;
        if ((parentFiber.flags & ChildDeletion) !== NoFlags$1) {
          if (deletions !== null) {
            for (var i = 0;i < deletions.length; i++) {
              var childToDelete = deletions[i];
              nextEffect = childToDelete;
              commitPassiveUnmountEffectsInsideOfDeletedTree_begin(childToDelete, parentFiber);
            }
          }
          detachAlternateSiblings(parentFiber);
        }
        var prevDebugFiber = getCurrentFiber();
        if (parentFiber.subtreeFlags & PassiveMask) {
          var child = parentFiber.child;
          while (child !== null) {
            setCurrentFiber(child);
            commitPassiveUnmountOnFiber(child);
            child = child.sibling;
          }
        }
        setCurrentFiber(prevDebugFiber);
      }
      function commitPassiveUnmountOnFiber(finishedWork) {
        switch (finishedWork.tag) {
          case FunctionComponent:
          case ForwardRef:
          case SimpleMemoComponent: {
            recursivelyTraversePassiveUnmountEffects(finishedWork);
            if (finishedWork.flags & Passive$1) {
              commitHookPassiveUnmountEffects(finishedWork, finishedWork.return, Passive | HasEffect);
            }
            break;
          }
          case OffscreenComponent: {
            var instance = finishedWork.stateNode;
            var nextState = finishedWork.memoizedState;
            var isHidden = nextState !== null;
            if (isHidden && instance._visibility & OffscreenPassiveEffectsConnected && (finishedWork.return === null || finishedWork.return.tag !== SuspenseComponent)) {
              instance._visibility &= ~OffscreenPassiveEffectsConnected;
              recursivelyTraverseDisconnectPassiveEffects(finishedWork);
            } else {
              recursivelyTraversePassiveUnmountEffects(finishedWork);
            }
            break;
          }
          default: {
            recursivelyTraversePassiveUnmountEffects(finishedWork);
            break;
          }
        }
      }
      function recursivelyTraverseDisconnectPassiveEffects(parentFiber) {
        var deletions = parentFiber.deletions;
        if ((parentFiber.flags & ChildDeletion) !== NoFlags$1) {
          if (deletions !== null) {
            for (var i = 0;i < deletions.length; i++) {
              var childToDelete = deletions[i];
              nextEffect = childToDelete;
              commitPassiveUnmountEffectsInsideOfDeletedTree_begin(childToDelete, parentFiber);
            }
          }
          detachAlternateSiblings(parentFiber);
        }
        var prevDebugFiber = getCurrentFiber();
        var child = parentFiber.child;
        while (child !== null) {
          setCurrentFiber(child);
          disconnectPassiveEffect(child);
          child = child.sibling;
        }
        setCurrentFiber(prevDebugFiber);
      }
      function disconnectPassiveEffect(finishedWork) {
        switch (finishedWork.tag) {
          case FunctionComponent:
          case ForwardRef:
          case SimpleMemoComponent: {
            commitHookPassiveUnmountEffects(finishedWork, finishedWork.return, Passive);
            recursivelyTraverseDisconnectPassiveEffects(finishedWork);
            break;
          }
          case OffscreenComponent: {
            var instance = finishedWork.stateNode;
            if (instance._visibility & OffscreenPassiveEffectsConnected) {
              instance._visibility &= ~OffscreenPassiveEffectsConnected;
              recursivelyTraverseDisconnectPassiveEffects(finishedWork);
            }
            break;
          }
          default: {
            recursivelyTraverseDisconnectPassiveEffects(finishedWork);
            break;
          }
        }
      }
      function commitPassiveUnmountEffectsInsideOfDeletedTree_begin(deletedSubtreeRoot, nearestMountedAncestor) {
        while (nextEffect !== null) {
          var fiber = nextEffect;
          setCurrentFiber(fiber);
          commitPassiveUnmountInsideDeletedTreeOnFiber(fiber, nearestMountedAncestor);
          resetCurrentFiber();
          var child = fiber.child;
          if (child !== null) {
            child.return = fiber;
            nextEffect = child;
          } else {
            commitPassiveUnmountEffectsInsideOfDeletedTree_complete(deletedSubtreeRoot);
          }
        }
      }
      function commitPassiveUnmountEffectsInsideOfDeletedTree_complete(deletedSubtreeRoot) {
        while (nextEffect !== null) {
          var fiber = nextEffect;
          var sibling = fiber.sibling;
          var returnFiber = fiber.return;
          detachFiberAfterEffects(fiber);
          if (fiber === deletedSubtreeRoot) {
            nextEffect = null;
            return;
          }
          if (sibling !== null) {
            sibling.return = returnFiber;
            nextEffect = sibling;
            return;
          }
          nextEffect = returnFiber;
        }
      }
      function commitPassiveUnmountInsideDeletedTreeOnFiber(current2, nearestMountedAncestor) {
        switch (current2.tag) {
          case FunctionComponent:
          case ForwardRef:
          case SimpleMemoComponent: {
            commitHookPassiveUnmountEffects(current2, nearestMountedAncestor, Passive);
            break;
          }
          case LegacyHiddenComponent:
          case OffscreenComponent: {
            {
              if (current2.memoizedState !== null && current2.memoizedState.cachePool !== null) {
                var cache = current2.memoizedState.cachePool.pool;
                if (cache != null) {
                  retainCache(cache);
                }
              }
            }
            break;
          }
          case SuspenseComponent: {
            break;
          }
          case CacheComponent: {
            {
              var _cache = current2.memoizedState.cache;
              releaseCache(_cache);
            }
            break;
          }
        }
      }
      function invokeLayoutEffectMountInDEV(fiber) {
        {
          switch (fiber.tag) {
            case FunctionComponent:
            case ForwardRef:
            case SimpleMemoComponent: {
              try {
                commitHookEffectListMount(Layout | HasEffect, fiber);
              } catch (error2) {
                captureCommitPhaseError(fiber, fiber.return, error2);
              }
              break;
            }
            case ClassComponent: {
              var instance = fiber.stateNode;
              try {
                instance.componentDidMount();
              } catch (error2) {
                captureCommitPhaseError(fiber, fiber.return, error2);
              }
              break;
            }
          }
        }
      }
      function invokePassiveEffectMountInDEV(fiber) {
        {
          switch (fiber.tag) {
            case FunctionComponent:
            case ForwardRef:
            case SimpleMemoComponent: {
              try {
                commitHookEffectListMount(Passive | HasEffect, fiber);
              } catch (error2) {
                captureCommitPhaseError(fiber, fiber.return, error2);
              }
              break;
            }
          }
        }
      }
      function invokeLayoutEffectUnmountInDEV(fiber) {
        {
          switch (fiber.tag) {
            case FunctionComponent:
            case ForwardRef:
            case SimpleMemoComponent: {
              try {
                commitHookEffectListUnmount(Layout | HasEffect, fiber, fiber.return);
              } catch (error2) {
                captureCommitPhaseError(fiber, fiber.return, error2);
              }
              break;
            }
            case ClassComponent: {
              var instance = fiber.stateNode;
              if (typeof instance.componentWillUnmount === "function") {
                safelyCallComponentWillUnmount(fiber, fiber.return, instance);
              }
              break;
            }
          }
        }
      }
      function invokePassiveEffectUnmountInDEV(fiber) {
        {
          switch (fiber.tag) {
            case FunctionComponent:
            case ForwardRef:
            case SimpleMemoComponent: {
              try {
                commitHookEffectListUnmount(Passive | HasEffect, fiber, fiber.return);
              } catch (error2) {
                captureCommitPhaseError(fiber, fiber.return, error2);
              }
            }
          }
        }
      }
      function getCacheSignal() {
        var cache = readContext(CacheContext);
        return cache.controller.signal;
      }
      function getCacheForType(resourceType) {
        var cache = readContext(CacheContext);
        var cacheForType = cache.data.get(resourceType);
        if (cacheForType === undefined) {
          cacheForType = resourceType();
          cache.data.set(resourceType, cacheForType);
        }
        return cacheForType;
      }
      var DefaultCacheDispatcher = {
        getCacheSignal,
        getCacheForType
      };
      if (typeof Symbol === "function" && Symbol.for) {
        var symbolFor = Symbol.for;
        symbolFor("selector.component");
        symbolFor("selector.has_pseudo_class");
        symbolFor("selector.role");
        symbolFor("selector.test_id");
        symbolFor("selector.text");
      }
      var commitHooks = [];
      function onCommitRoot() {
        {
          commitHooks.forEach(function(commitHook) {
            return commitHook();
          });
        }
      }
      var ReactCurrentActQueue$1 = ReactSharedInternals.ReactCurrentActQueue;
      function isLegacyActEnvironment(fiber) {
        {
          var isReactActEnvironmentGlobal = typeof IS_REACT_ACT_ENVIRONMENT !== "undefined" ? IS_REACT_ACT_ENVIRONMENT : undefined;
          var jestIsDefined = typeof jest !== "undefined";
          return jestIsDefined && isReactActEnvironmentGlobal !== false;
        }
      }
      function isConcurrentActEnvironment() {
        {
          var isReactActEnvironmentGlobal = typeof IS_REACT_ACT_ENVIRONMENT !== "undefined" ? IS_REACT_ACT_ENVIRONMENT : undefined;
          if (!isReactActEnvironmentGlobal && ReactCurrentActQueue$1.current !== null) {
            error("The current testing environment is not configured to support " + "act(...)");
          }
          return isReactActEnvironmentGlobal;
        }
      }
      var PossiblyWeakMap = typeof WeakMap === "function" ? WeakMap : Map;
      var { ReactCurrentDispatcher, ReactCurrentCache, ReactCurrentOwner: ReactCurrentOwner$1, ReactCurrentBatchConfig: ReactCurrentBatchConfig$1, ReactCurrentActQueue } = ReactSharedInternals;
      var NoContext = 0;
      var BatchedContext = 1;
      var RenderContext = 2;
      var CommitContext = 4;
      var RootInProgress = 0;
      var RootFatalErrored = 1;
      var RootErrored = 2;
      var RootSuspended = 3;
      var RootSuspendedWithDelay = 4;
      var RootCompleted = 5;
      var RootDidNotComplete = 6;
      var executionContext = NoContext;
      var workInProgressRoot = null;
      var workInProgress = null;
      var workInProgressRootRenderLanes = NoLanes;
      var NotSuspended = 0;
      var SuspendedOnError = 1;
      var SuspendedOnData = 2;
      var SuspendedOnImmediate = 3;
      var SuspendedOnInstance = 4;
      var SuspendedOnInstanceAndReadyToContinue = 5;
      var SuspendedOnDeprecatedThrowPromise = 6;
      var SuspendedAndReadyToContinue = 7;
      var SuspendedOnHydration = 8;
      var workInProgressSuspendedReason = NotSuspended;
      var workInProgressThrownValue = null;
      var workInProgressRootDidAttachPingListener = false;
      var renderLanes = NoLanes;
      var workInProgressRootExitStatus = RootInProgress;
      var workInProgressRootFatalError = null;
      var workInProgressRootSkippedLanes = NoLanes;
      var workInProgressRootInterleavedUpdatedLanes = NoLanes;
      var workInProgressRootPingedLanes = NoLanes;
      var workInProgressRootConcurrentErrors = null;
      var workInProgressRootRecoverableErrors = null;
      var globalMostRecentFallbackTime = 0;
      var FALLBACK_THROTTLE_MS = 500;
      var workInProgressRootRenderTargetTime = Infinity;
      var RENDER_TIMEOUT_MS = 500;
      var workInProgressTransitions = null;
      function resetRenderTimer() {
        workInProgressRootRenderTargetTime = now$1() + RENDER_TIMEOUT_MS;
      }
      function getRenderTargetTime() {
        return workInProgressRootRenderTargetTime;
      }
      var hasUncaughtError = false;
      var firstUncaughtError = null;
      var legacyErrorBoundariesThatAlreadyFailed = null;
      var rootDoesHavePassiveEffects = false;
      var rootWithPendingPassiveEffects = null;
      var pendingPassiveEffectsLanes = NoLanes;
      var pendingPassiveProfilerEffects = [];
      var pendingPassiveEffectsRemainingLanes = NoLanes;
      var pendingPassiveTransitions = null;
      var NESTED_UPDATE_LIMIT = 50;
      var nestedUpdateCount = 0;
      var rootWithNestedUpdates = null;
      var isFlushingPassiveEffects = false;
      var didScheduleUpdateDuringPassiveEffects = false;
      var NESTED_PASSIVE_UPDATE_LIMIT = 50;
      var nestedPassiveUpdateCount = 0;
      var rootWithPassiveNestedUpdates = null;
      var isRunningInsertionEffect = false;
      function getWorkInProgressRoot() {
        return workInProgressRoot;
      }
      function getWorkInProgressRootRenderLanes() {
        return workInProgressRootRenderLanes;
      }
      function isWorkLoopSuspendedOnData() {
        return workInProgressSuspendedReason === SuspendedOnData;
      }
      function requestUpdateLane(fiber) {
        var mode = fiber.mode;
        if ((mode & ConcurrentMode) === NoMode) {
          return SyncLane;
        } else if ((executionContext & RenderContext) !== NoContext && workInProgressRootRenderLanes !== NoLanes) {
          return pickArbitraryLane(workInProgressRootRenderLanes);
        }
        var isTransition = requestCurrentTransition() !== NoTransition;
        if (isTransition) {
          if (ReactCurrentBatchConfig$1.transition !== null) {
            var transition = ReactCurrentBatchConfig$1.transition;
            if (!transition._updatedFibers) {
              transition._updatedFibers = new Set;
            }
            transition._updatedFibers.add(fiber);
          }
          var actionScopeLane = peekEntangledActionLane();
          return actionScopeLane !== NoLane ? actionScopeLane : requestTransitionLane();
        }
        var updateLane = getCurrentUpdatePriority();
        if (updateLane !== NoLane) {
          return updateLane;
        }
        var eventLane = getCurrentEventPriority();
        return eventLane;
      }
      function requestRetryLane(fiber) {
        var mode = fiber.mode;
        if ((mode & ConcurrentMode) === NoMode) {
          return SyncLane;
        }
        return claimNextRetryLane();
      }
      function scheduleUpdateOnFiber(root2, fiber, lane) {
        {
          if (isRunningInsertionEffect) {
            error("useInsertionEffect must not schedule updates.");
          }
        }
        {
          if (isFlushingPassiveEffects) {
            didScheduleUpdateDuringPassiveEffects = true;
          }
        }
        if (root2 === workInProgressRoot && workInProgressSuspendedReason === SuspendedOnData || root2.cancelPendingCommit !== null) {
          prepareFreshStack(root2, NoLanes);
          markRootSuspended(root2, workInProgressRootRenderLanes);
        }
        markRootUpdated(root2, lane);
        if ((executionContext & RenderContext) !== NoLanes && root2 === workInProgressRoot) {
          warnAboutRenderPhaseUpdatesInDEV(fiber);
        } else {
          {
            if (isDevToolsPresent) {
              addFiberToLanesMap(root2, fiber, lane);
            }
          }
          warnIfUpdatesNotWrappedWithActDEV(fiber);
          if (root2 === workInProgressRoot) {
            if ((executionContext & RenderContext) === NoContext) {
              workInProgressRootInterleavedUpdatedLanes = mergeLanes(workInProgressRootInterleavedUpdatedLanes, lane);
            }
            if (workInProgressRootExitStatus === RootSuspendedWithDelay) {
              markRootSuspended(root2, workInProgressRootRenderLanes);
            }
          }
          ensureRootIsScheduled(root2);
          if (lane === SyncLane && executionContext === NoContext && (fiber.mode & ConcurrentMode) === NoMode) {
            if (ReactCurrentActQueue.isBatchingLegacy)
              ;
            else {
              resetRenderTimer();
              flushSyncWorkOnLegacyRootsOnly();
            }
          }
        }
      }
      function scheduleInitialHydrationOnRoot(root2, lane) {
        var current2 = root2.current;
        current2.lanes = lane;
        markRootUpdated(root2, lane);
        ensureRootIsScheduled(root2);
      }
      function isUnsafeClassRenderPhaseUpdate(fiber) {
        return (executionContext & RenderContext) !== NoContext;
      }
      function performConcurrentWorkOnRoot(root2, didTimeout) {
        {
          resetNestedUpdateFlag();
        }
        if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {
          throw new Error("Should not already be working.");
        }
        var originalCallbackNode = root2.callbackNode;
        var didFlushPassiveEffects = flushPassiveEffects();
        if (didFlushPassiveEffects) {
          if (root2.callbackNode !== originalCallbackNode) {
            return null;
          }
        }
        var lanes = getNextLanes(root2, root2 === workInProgressRoot ? workInProgressRootRenderLanes : NoLanes);
        if (lanes === NoLanes) {
          return null;
        }
        var shouldTimeSlice = !includesBlockingLane(root2, lanes) && !includesExpiredLane(root2, lanes) && !didTimeout;
        var exitStatus = shouldTimeSlice ? renderRootConcurrent(root2, lanes) : renderRootSync(root2, lanes);
        if (exitStatus !== RootInProgress) {
          if (exitStatus === RootErrored) {
            var originallyAttemptedLanes = lanes;
            var errorRetryLanes = getLanesToRetrySynchronouslyOnError(root2, originallyAttemptedLanes);
            if (errorRetryLanes !== NoLanes) {
              lanes = errorRetryLanes;
              exitStatus = recoverFromConcurrentError(root2, originallyAttemptedLanes, errorRetryLanes);
            }
          }
          if (exitStatus === RootFatalErrored) {
            var fatalError = workInProgressRootFatalError;
            prepareFreshStack(root2, NoLanes);
            markRootSuspended(root2, lanes);
            ensureRootIsScheduled(root2);
            throw fatalError;
          }
          if (exitStatus === RootDidNotComplete) {
            markRootSuspended(root2, lanes);
          } else {
            var renderWasConcurrent = !includesBlockingLane(root2, lanes);
            var finishedWork = root2.current.alternate;
            if (renderWasConcurrent && !isRenderConsistentWithExternalStores(finishedWork)) {
              exitStatus = renderRootSync(root2, lanes);
              if (exitStatus === RootErrored) {
                var _originallyAttemptedLanes = lanes;
                var _errorRetryLanes = getLanesToRetrySynchronouslyOnError(root2, _originallyAttemptedLanes);
                if (_errorRetryLanes !== NoLanes) {
                  lanes = _errorRetryLanes;
                  exitStatus = recoverFromConcurrentError(root2, _originallyAttemptedLanes, _errorRetryLanes);
                }
              }
              if (exitStatus === RootFatalErrored) {
                var _fatalError = workInProgressRootFatalError;
                prepareFreshStack(root2, NoLanes);
                markRootSuspended(root2, lanes);
                ensureRootIsScheduled(root2);
                throw _fatalError;
              }
            }
            root2.finishedWork = finishedWork;
            root2.finishedLanes = lanes;
            finishConcurrentRender(root2, exitStatus, finishedWork, lanes);
          }
        }
        ensureRootIsScheduled(root2);
        return getContinuationForRoot(root2, originalCallbackNode);
      }
      function recoverFromConcurrentError(root2, originallyAttemptedLanes, errorRetryLanes) {
        var errorsFromFirstAttempt = workInProgressRootConcurrentErrors;
        var wasRootDehydrated = isRootDehydrated(root2);
        if (wasRootDehydrated) {
          var rootWorkInProgress = prepareFreshStack(root2, errorRetryLanes);
          rootWorkInProgress.flags |= ForceClientRender;
          {
            errorHydratingContainer(root2.containerInfo);
          }
        }
        var exitStatus = renderRootSync(root2, errorRetryLanes);
        if (exitStatus !== RootErrored) {
          if (workInProgressRootDidAttachPingListener && !wasRootDehydrated) {
            root2.errorRecoveryDisabledLanes = mergeLanes(root2.errorRecoveryDisabledLanes, originallyAttemptedLanes);
            workInProgressRootInterleavedUpdatedLanes |= originallyAttemptedLanes;
            return RootSuspendedWithDelay;
          }
          var errorsFromSecondAttempt = workInProgressRootRecoverableErrors;
          workInProgressRootRecoverableErrors = errorsFromFirstAttempt;
          if (errorsFromSecondAttempt !== null) {
            queueRecoverableErrors(errorsFromSecondAttempt);
          }
        }
        return exitStatus;
      }
      function queueRecoverableErrors(errors) {
        if (workInProgressRootRecoverableErrors === null) {
          workInProgressRootRecoverableErrors = errors;
        } else {
          workInProgressRootRecoverableErrors.push.apply(workInProgressRootRecoverableErrors, errors);
        }
      }
      function finishConcurrentRender(root2, exitStatus, finishedWork, lanes) {
        switch (exitStatus) {
          case RootInProgress:
          case RootFatalErrored: {
            throw new Error("Root did not complete. This is a bug in React.");
          }
          case RootSuspendedWithDelay: {
            if (includesOnlyTransitions(lanes)) {
              markRootSuspended(root2, lanes);
              return;
            }
            break;
          }
          case RootErrored:
          case RootSuspended:
          case RootCompleted: {
            break;
          }
          default: {
            throw new Error("Unknown root exit status.");
          }
        }
        if (shouldForceFlushFallbacksInDEV()) {
          commitRoot(root2, workInProgressRootRecoverableErrors, workInProgressTransitions);
        } else {
          if (includesOnlyRetries(lanes) && alwaysThrottleRetries) {
            var msUntilTimeout = globalMostRecentFallbackTime + FALLBACK_THROTTLE_MS - now$1();
            if (msUntilTimeout > 10) {
              markRootSuspended(root2, lanes);
              var nextLanes = getNextLanes(root2, NoLanes);
              if (nextLanes !== NoLanes) {
                return;
              }
              root2.timeoutHandle = scheduleTimeout(commitRootWhenReady.bind(null, root2, finishedWork, workInProgressRootRecoverableErrors, workInProgressTransitions, lanes), msUntilTimeout);
              return;
            }
          }
          commitRootWhenReady(root2, finishedWork, workInProgressRootRecoverableErrors, workInProgressTransitions, lanes);
        }
      }
      function commitRootWhenReady(root2, finishedWork, recoverableErrors, transitions, lanes) {
        if (includesOnlyNonUrgentLanes(lanes)) {
          startSuspendingCommit();
          accumulateSuspenseyCommit(finishedWork);
          var schedulePendingCommit = waitForCommitToBeReady();
          if (schedulePendingCommit !== null) {
            root2.cancelPendingCommit = schedulePendingCommit(commitRoot.bind(null, root2, recoverableErrors, transitions));
            markRootSuspended(root2, lanes);
            return;
          }
        }
        commitRoot(root2, recoverableErrors, transitions);
      }
      function isRenderConsistentWithExternalStores(finishedWork) {
        var node = finishedWork;
        while (true) {
          if (node.flags & StoreConsistency) {
            var updateQueue = node.updateQueue;
            if (updateQueue !== null) {
              var checks = updateQueue.stores;
              if (checks !== null) {
                for (var i = 0;i < checks.length; i++) {
                  var check = checks[i];
                  var getSnapshot = check.getSnapshot;
                  var renderedValue = check.value;
                  try {
                    if (!objectIs(getSnapshot(), renderedValue)) {
                      return false;
                    }
                  } catch (error2) {
                    return false;
                  }
                }
              }
            }
          }
          var child = node.child;
          if (node.subtreeFlags & StoreConsistency && child !== null) {
            child.return = node;
            node = child;
            continue;
          }
          if (node === finishedWork) {
            return true;
          }
          while (node.sibling === null) {
            if (node.return === null || node.return === finishedWork) {
              return true;
            }
            node = node.return;
          }
          node.sibling.return = node.return;
          node = node.sibling;
        }
        return true;
      }
      function markRootSuspended(root2, suspendedLanes) {
        suspendedLanes = removeLanes(suspendedLanes, workInProgressRootPingedLanes);
        suspendedLanes = removeLanes(suspendedLanes, workInProgressRootInterleavedUpdatedLanes);
        markRootSuspended$1(root2, suspendedLanes);
      }
      function performSyncWorkOnRoot(root2) {
        {
          syncNestedUpdateFlag();
        }
        if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {
          throw new Error("Should not already be working.");
        }
        flushPassiveEffects();
        var lanes = getNextLanes(root2, NoLanes);
        if (!includesSyncLane(lanes)) {
          ensureRootIsScheduled(root2);
          return null;
        }
        var exitStatus = renderRootSync(root2, lanes);
        if (root2.tag !== LegacyRoot && exitStatus === RootErrored) {
          var originallyAttemptedLanes = lanes;
          var errorRetryLanes = getLanesToRetrySynchronouslyOnError(root2, originallyAttemptedLanes);
          if (errorRetryLanes !== NoLanes) {
            lanes = errorRetryLanes;
            exitStatus = recoverFromConcurrentError(root2, originallyAttemptedLanes, errorRetryLanes);
          }
        }
        if (exitStatus === RootFatalErrored) {
          var fatalError = workInProgressRootFatalError;
          prepareFreshStack(root2, NoLanes);
          markRootSuspended(root2, lanes);
          ensureRootIsScheduled(root2);
          throw fatalError;
        }
        if (exitStatus === RootDidNotComplete) {
          markRootSuspended(root2, lanes);
          ensureRootIsScheduled(root2);
          return null;
        }
        var finishedWork = root2.current.alternate;
        root2.finishedWork = finishedWork;
        root2.finishedLanes = lanes;
        commitRoot(root2, workInProgressRootRecoverableErrors, workInProgressTransitions);
        ensureRootIsScheduled(root2);
        return null;
      }
      function flushRoot(root2, lanes) {
        if (lanes !== NoLanes) {
          markRootEntangled(root2, mergeLanes(lanes, SyncLane));
          ensureRootIsScheduled(root2);
          if ((executionContext & (RenderContext | CommitContext)) === NoContext) {
            resetRenderTimer();
            flushSyncWorkOnAllRoots();
          }
        }
      }
      function getExecutionContext() {
        return executionContext;
      }
      function batchedUpdates$1(fn, a) {
        var prevExecutionContext = executionContext;
        executionContext |= BatchedContext;
        try {
          return fn(a);
        } finally {
          executionContext = prevExecutionContext;
          if (executionContext === NoContext && !ReactCurrentActQueue.isBatchingLegacy) {
            resetRenderTimer();
            flushSyncWorkOnLegacyRootsOnly();
          }
        }
      }
      function flushSync$1(fn) {
        if (rootWithPendingPassiveEffects !== null && rootWithPendingPassiveEffects.tag === LegacyRoot && (executionContext & (RenderContext | CommitContext)) === NoContext) {
          flushPassiveEffects();
        }
        var prevExecutionContext = executionContext;
        executionContext |= BatchedContext;
        var prevTransition = ReactCurrentBatchConfig$1.transition;
        var previousPriority = getCurrentUpdatePriority();
        try {
          ReactCurrentBatchConfig$1.transition = null;
          setCurrentUpdatePriority(DiscreteEventPriority);
          if (fn) {
            return fn();
          } else {
            return;
          }
        } finally {
          setCurrentUpdatePriority(previousPriority);
          ReactCurrentBatchConfig$1.transition = prevTransition;
          executionContext = prevExecutionContext;
          if ((executionContext & (RenderContext | CommitContext)) === NoContext) {
            flushSyncWorkOnAllRoots();
          }
        }
      }
      function isAlreadyRendering() {
        return (executionContext & (RenderContext | CommitContext)) !== NoContext;
      }
      function isInvalidExecutionContextForEventFunction() {
        return (executionContext & RenderContext) !== NoContext;
      }
      function setRenderLanes(subtreeRenderLanes) {
        renderLanes = subtreeRenderLanes;
      }
      function getRenderLanes() {
        return renderLanes;
      }
      function resetWorkInProgressStack() {
        if (workInProgress === null)
          return;
        var interruptedWork;
        if (workInProgressSuspendedReason === NotSuspended) {
          interruptedWork = workInProgress.return;
        } else {
          resetSuspendedWorkLoopOnUnwind(workInProgress);
          interruptedWork = workInProgress;
        }
        while (interruptedWork !== null) {
          var current2 = interruptedWork.alternate;
          unwindInterruptedWork(current2, interruptedWork);
          interruptedWork = interruptedWork.return;
        }
        workInProgress = null;
      }
      function prepareFreshStack(root2, lanes) {
        root2.finishedWork = null;
        root2.finishedLanes = NoLanes;
        var timeoutHandle = root2.timeoutHandle;
        if (timeoutHandle !== noTimeout) {
          root2.timeoutHandle = noTimeout;
          cancelTimeout(timeoutHandle);
        }
        var cancelPendingCommit = root2.cancelPendingCommit;
        if (cancelPendingCommit !== null) {
          root2.cancelPendingCommit = null;
          cancelPendingCommit();
        }
        resetWorkInProgressStack();
        workInProgressRoot = root2;
        var rootWorkInProgress = createWorkInProgress(root2.current, null);
        workInProgress = rootWorkInProgress;
        workInProgressRootRenderLanes = renderLanes = lanes;
        workInProgressSuspendedReason = NotSuspended;
        workInProgressThrownValue = null;
        workInProgressRootDidAttachPingListener = false;
        workInProgressRootExitStatus = RootInProgress;
        workInProgressRootFatalError = null;
        workInProgressRootSkippedLanes = NoLanes;
        workInProgressRootInterleavedUpdatedLanes = NoLanes;
        workInProgressRootPingedLanes = NoLanes;
        workInProgressRootConcurrentErrors = null;
        workInProgressRootRecoverableErrors = null;
        finishQueueingConcurrentUpdates();
        {
          ReactStrictModeWarnings.discardPendingWarnings();
        }
        return rootWorkInProgress;
      }
      function resetSuspendedWorkLoopOnUnwind(fiber) {
        resetContextDependencies();
        resetHooksOnUnwind(fiber);
        resetChildReconcilerOnUnwind();
      }
      function handleThrow(root2, thrownValue) {
        resetHooksAfterThrow();
        resetCurrentFiber();
        ReactCurrentOwner$1.current = null;
        if (thrownValue === SuspenseException) {
          thrownValue = getSuspendedThenable();
          workInProgressSuspendedReason = shouldRemainOnPreviousScreen() && !includesNonIdleWork(workInProgressRootSkippedLanes) && !includesNonIdleWork(workInProgressRootInterleavedUpdatedLanes) ? SuspendedOnData : SuspendedOnImmediate;
        } else if (thrownValue === SuspenseyCommitException) {
          thrownValue = getSuspendedThenable();
          workInProgressSuspendedReason = SuspendedOnInstance;
        } else if (thrownValue === SelectiveHydrationException) {
          workInProgressSuspendedReason = SuspendedOnHydration;
        } else {
          var isWakeable = thrownValue !== null && typeof thrownValue === "object" && typeof thrownValue.then === "function";
          workInProgressSuspendedReason = isWakeable ? SuspendedOnDeprecatedThrowPromise : SuspendedOnError;
        }
        workInProgressThrownValue = thrownValue;
        var erroredWork = workInProgress;
        if (erroredWork === null) {
          workInProgressRootExitStatus = RootFatalErrored;
          workInProgressRootFatalError = thrownValue;
          return;
        }
        if (erroredWork.mode & ProfileMode) {
          stopProfilerTimerIfRunningAndRecordDelta(erroredWork, true);
        }
        {
          markComponentRenderStopped();
          switch (workInProgressSuspendedReason) {
            case SuspendedOnError: {
              markComponentErrored(erroredWork, thrownValue, workInProgressRootRenderLanes);
              break;
            }
            case SuspendedOnData:
            case SuspendedOnImmediate:
            case SuspendedOnDeprecatedThrowPromise:
            case SuspendedAndReadyToContinue: {
              var wakeable = thrownValue;
              markComponentSuspended(erroredWork, wakeable, workInProgressRootRenderLanes);
              break;
            }
          }
        }
      }
      function shouldRemainOnPreviousScreen() {
        if (includesOnlyTransitions(workInProgressRootRenderLanes)) {
          if (getShellBoundary() === null) {
            return true;
          } else {
            return false;
          }
        }
        var handler = getSuspenseHandler();
        if (handler === null)
          ;
        else {
          if (includesOnlyRetries(workInProgressRootRenderLanes) || includesSomeLane(workInProgressRootRenderLanes, OffscreenLane)) {
            return handler === getShellBoundary();
          }
        }
        return false;
      }
      function pushDispatcher(container) {
        var prevDispatcher = ReactCurrentDispatcher.current;
        ReactCurrentDispatcher.current = ContextOnlyDispatcher;
        if (prevDispatcher === null) {
          return ContextOnlyDispatcher;
        } else {
          return prevDispatcher;
        }
      }
      function popDispatcher(prevDispatcher) {
        ReactCurrentDispatcher.current = prevDispatcher;
      }
      function pushCacheDispatcher() {
        {
          var prevCacheDispatcher = ReactCurrentCache.current;
          ReactCurrentCache.current = DefaultCacheDispatcher;
          return prevCacheDispatcher;
        }
      }
      function popCacheDispatcher(prevCacheDispatcher) {
        {
          ReactCurrentCache.current = prevCacheDispatcher;
        }
      }
      function markCommitTimeOfFallback() {
        globalMostRecentFallbackTime = now$1();
      }
      function markSkippedUpdateLanes(lane) {
        workInProgressRootSkippedLanes = mergeLanes(lane, workInProgressRootSkippedLanes);
      }
      function renderDidSuspend() {
        if (workInProgressRootExitStatus === RootInProgress) {
          workInProgressRootExitStatus = RootSuspended;
        }
      }
      function renderDidSuspendDelayIfPossible() {
        workInProgressRootExitStatus = RootSuspendedWithDelay;
        if (workInProgressRoot !== null && (includesNonIdleWork(workInProgressRootSkippedLanes) || includesNonIdleWork(workInProgressRootInterleavedUpdatedLanes))) {
          markRootSuspended(workInProgressRoot, workInProgressRootRenderLanes);
        }
      }
      function renderDidError(error2) {
        if (workInProgressRootExitStatus !== RootSuspendedWithDelay) {
          workInProgressRootExitStatus = RootErrored;
        }
        if (workInProgressRootConcurrentErrors === null) {
          workInProgressRootConcurrentErrors = [error2];
        } else {
          workInProgressRootConcurrentErrors.push(error2);
        }
      }
      function renderHasNotSuspendedYet() {
        return workInProgressRootExitStatus === RootInProgress;
      }
      function renderRootSync(root2, lanes) {
        var prevExecutionContext = executionContext;
        executionContext |= RenderContext;
        var prevDispatcher = pushDispatcher();
        var prevCacheDispatcher = pushCacheDispatcher();
        if (workInProgressRoot !== root2 || workInProgressRootRenderLanes !== lanes) {
          {
            if (isDevToolsPresent) {
              var memoizedUpdaters = root2.memoizedUpdaters;
              if (memoizedUpdaters.size > 0) {
                restorePendingUpdaters(root2, workInProgressRootRenderLanes);
                memoizedUpdaters.clear();
              }
              movePendingFibersToMemoized(root2, lanes);
            }
          }
          workInProgressTransitions = getTransitionsForLanes();
          prepareFreshStack(root2, lanes);
        }
        {
          markRenderStarted(lanes);
        }
        outer:
          do {
            try {
              if (workInProgressSuspendedReason !== NotSuspended && workInProgress !== null) {
                var unitOfWork = workInProgress;
                var thrownValue = workInProgressThrownValue;
                switch (workInProgressSuspendedReason) {
                  case SuspendedOnHydration: {
                    resetWorkInProgressStack();
                    workInProgressRootExitStatus = RootDidNotComplete;
                    break outer;
                  }
                  default: {
                    workInProgressSuspendedReason = NotSuspended;
                    workInProgressThrownValue = null;
                    throwAndUnwindWorkLoop(unitOfWork, thrownValue);
                    break;
                  }
                }
              }
              workLoopSync();
              break;
            } catch (thrownValue2) {
              handleThrow(root2, thrownValue2);
            }
          } while (true);
        resetContextDependencies();
        executionContext = prevExecutionContext;
        popDispatcher(prevDispatcher);
        popCacheDispatcher(prevCacheDispatcher);
        if (workInProgress !== null) {
          throw new Error("Cannot commit an incomplete root. This error is likely caused by a " + "bug in React. Please file an issue.");
        }
        {
          markRenderStopped();
        }
        workInProgressRoot = null;
        workInProgressRootRenderLanes = NoLanes;
        finishQueueingConcurrentUpdates();
        return workInProgressRootExitStatus;
      }
      function workLoopSync() {
        while (workInProgress !== null) {
          performUnitOfWork(workInProgress);
        }
      }
      function renderRootConcurrent(root2, lanes) {
        var prevExecutionContext = executionContext;
        executionContext |= RenderContext;
        var prevDispatcher = pushDispatcher();
        var prevCacheDispatcher = pushCacheDispatcher();
        if (workInProgressRoot !== root2 || workInProgressRootRenderLanes !== lanes) {
          {
            if (isDevToolsPresent) {
              var memoizedUpdaters = root2.memoizedUpdaters;
              if (memoizedUpdaters.size > 0) {
                restorePendingUpdaters(root2, workInProgressRootRenderLanes);
                memoizedUpdaters.clear();
              }
              movePendingFibersToMemoized(root2, lanes);
            }
          }
          workInProgressTransitions = getTransitionsForLanes();
          resetRenderTimer();
          prepareFreshStack(root2, lanes);
        }
        {
          markRenderStarted(lanes);
        }
        outer:
          do {
            try {
              if (workInProgressSuspendedReason !== NotSuspended && workInProgress !== null) {
                var unitOfWork = workInProgress;
                var thrownValue = workInProgressThrownValue;
                resumeOrUnwind:
                  switch (workInProgressSuspendedReason) {
                    case SuspendedOnError: {
                      workInProgressSuspendedReason = NotSuspended;
                      workInProgressThrownValue = null;
                      throwAndUnwindWorkLoop(unitOfWork, thrownValue);
                      break;
                    }
                    case SuspendedOnData: {
                      var thenable = thrownValue;
                      if (isThenableResolved(thenable)) {
                        workInProgressSuspendedReason = NotSuspended;
                        workInProgressThrownValue = null;
                        replaySuspendedUnitOfWork(unitOfWork);
                        break;
                      }
                      var onResolution = function() {
                        if (workInProgressSuspendedReason === SuspendedOnData && workInProgressRoot === root2) {
                          workInProgressSuspendedReason = SuspendedAndReadyToContinue;
                        }
                        ensureRootIsScheduled(root2);
                      };
                      thenable.then(onResolution, onResolution);
                      break outer;
                    }
                    case SuspendedOnImmediate: {
                      workInProgressSuspendedReason = SuspendedAndReadyToContinue;
                      break outer;
                    }
                    case SuspendedOnInstance: {
                      workInProgressSuspendedReason = SuspendedOnInstanceAndReadyToContinue;
                      break outer;
                    }
                    case SuspendedAndReadyToContinue: {
                      var _thenable = thrownValue;
                      if (isThenableResolved(_thenable)) {
                        workInProgressSuspendedReason = NotSuspended;
                        workInProgressThrownValue = null;
                        replaySuspendedUnitOfWork(unitOfWork);
                      } else {
                        workInProgressSuspendedReason = NotSuspended;
                        workInProgressThrownValue = null;
                        throwAndUnwindWorkLoop(unitOfWork, thrownValue);
                      }
                      break;
                    }
                    case SuspendedOnInstanceAndReadyToContinue: {
                      switch (workInProgress.tag) {
                        case HostComponent:
                        case HostHoistable:
                        case HostSingleton: {
                          var hostFiber = workInProgress;
                          var type = hostFiber.type;
                          var props = hostFiber.pendingProps;
                          var isReady = preloadInstance(type, props);
                          if (isReady) {
                            workInProgressSuspendedReason = NotSuspended;
                            workInProgressThrownValue = null;
                            var sibling = hostFiber.sibling;
                            if (sibling !== null) {
                              workInProgress = sibling;
                            } else {
                              var returnFiber = hostFiber.return;
                              if (returnFiber !== null) {
                                workInProgress = returnFiber;
                                completeUnitOfWork(returnFiber);
                              } else {
                                workInProgress = null;
                              }
                            }
                            break resumeOrUnwind;
                          }
                          break;
                        }
                        default: {
                          if (true) {
                            error("Unexpected type of fiber triggered a suspensey commit. " + "This is a bug in React.");
                          }
                          break;
                        }
                      }
                      workInProgressSuspendedReason = NotSuspended;
                      workInProgressThrownValue = null;
                      throwAndUnwindWorkLoop(unitOfWork, thrownValue);
                      break;
                    }
                    case SuspendedOnDeprecatedThrowPromise: {
                      workInProgressSuspendedReason = NotSuspended;
                      workInProgressThrownValue = null;
                      throwAndUnwindWorkLoop(unitOfWork, thrownValue);
                      break;
                    }
                    case SuspendedOnHydration: {
                      resetWorkInProgressStack();
                      workInProgressRootExitStatus = RootDidNotComplete;
                      break outer;
                    }
                    default: {
                      throw new Error("Unexpected SuspendedReason. This is a bug in React.");
                    }
                  }
              }
              if (ReactCurrentActQueue.current !== null) {
                workLoopSync();
              } else {
                workLoopConcurrent();
              }
              break;
            } catch (thrownValue2) {
              handleThrow(root2, thrownValue2);
            }
          } while (true);
        resetContextDependencies();
        popDispatcher(prevDispatcher);
        popCacheDispatcher(prevCacheDispatcher);
        executionContext = prevExecutionContext;
        if (workInProgress !== null) {
          {
            markRenderYielded();
          }
          return RootInProgress;
        } else {
          {
            markRenderStopped();
          }
          workInProgressRoot = null;
          workInProgressRootRenderLanes = NoLanes;
          finishQueueingConcurrentUpdates();
          return workInProgressRootExitStatus;
        }
      }
      function workLoopConcurrent() {
        while (workInProgress !== null && !shouldYield()) {
          performUnitOfWork(workInProgress);
        }
      }
      function performUnitOfWork(unitOfWork) {
        var current2 = unitOfWork.alternate;
        setCurrentFiber(unitOfWork);
        var next;
        if ((unitOfWork.mode & ProfileMode) !== NoMode) {
          startProfilerTimer(unitOfWork);
          next = beginWork(current2, unitOfWork, renderLanes);
          stopProfilerTimerIfRunningAndRecordDelta(unitOfWork, true);
        } else {
          next = beginWork(current2, unitOfWork, renderLanes);
        }
        resetCurrentFiber();
        unitOfWork.memoizedProps = unitOfWork.pendingProps;
        if (next === null) {
          completeUnitOfWork(unitOfWork);
        } else {
          workInProgress = next;
        }
        ReactCurrentOwner$1.current = null;
      }
      function replaySuspendedUnitOfWork(unitOfWork) {
        var current2 = unitOfWork.alternate;
        setCurrentFiber(unitOfWork);
        var next;
        setCurrentFiber(unitOfWork);
        var isProfilingMode = (unitOfWork.mode & ProfileMode) !== NoMode;
        if (isProfilingMode) {
          startProfilerTimer(unitOfWork);
        }
        switch (unitOfWork.tag) {
          case IndeterminateComponent: {
            unitOfWork.tag = FunctionComponent;
          }
          case SimpleMemoComponent:
          case FunctionComponent: {
            var Component = unitOfWork.type;
            var unresolvedProps = unitOfWork.pendingProps;
            var resolvedProps = unitOfWork.elementType === Component ? unresolvedProps : resolveDefaultProps(Component, unresolvedProps);
            var context;
            {
              var unmaskedContext = getUnmaskedContext(unitOfWork, Component, true);
              context = getMaskedContext(unitOfWork, unmaskedContext);
            }
            next = replayFunctionComponent(current2, unitOfWork, resolvedProps, Component, context, workInProgressRootRenderLanes);
            break;
          }
          case ForwardRef: {
            var _Component = unitOfWork.type.render;
            var _unresolvedProps = unitOfWork.pendingProps;
            var _resolvedProps = unitOfWork.elementType === _Component ? _unresolvedProps : resolveDefaultProps(_Component, _unresolvedProps);
            next = replayFunctionComponent(current2, unitOfWork, _resolvedProps, _Component, unitOfWork.ref, workInProgressRootRenderLanes);
            break;
          }
          case HostComponent: {
            resetHooksOnUnwind(unitOfWork);
          }
          default: {
            unwindInterruptedWork(current2, unitOfWork);
            unitOfWork = workInProgress = resetWorkInProgress(unitOfWork, renderLanes);
            next = beginWork(current2, unitOfWork, renderLanes);
            break;
          }
        }
        if (isProfilingMode) {
          stopProfilerTimerIfRunningAndRecordDelta(unitOfWork, true);
        }
        resetCurrentFiber();
        unitOfWork.memoizedProps = unitOfWork.pendingProps;
        if (next === null) {
          completeUnitOfWork(unitOfWork);
        } else {
          workInProgress = next;
        }
        ReactCurrentOwner$1.current = null;
      }
      function throwAndUnwindWorkLoop(unitOfWork, thrownValue) {
        resetSuspendedWorkLoopOnUnwind(unitOfWork);
        var returnFiber = unitOfWork.return;
        if (returnFiber === null || workInProgressRoot === null) {
          workInProgressRootExitStatus = RootFatalErrored;
          workInProgressRootFatalError = thrownValue;
          workInProgress = null;
          return;
        }
        try {
          throwException(workInProgressRoot, returnFiber, unitOfWork, thrownValue, workInProgressRootRenderLanes);
        } catch (error2) {
          workInProgress = returnFiber;
          throw error2;
        }
        if (unitOfWork.flags & Incomplete) {
          unwindUnitOfWork(unitOfWork);
        } else {
          completeUnitOfWork(unitOfWork);
        }
      }
      function completeUnitOfWork(unitOfWork) {
        var completedWork = unitOfWork;
        do {
          {
            if ((completedWork.flags & Incomplete) !== NoFlags$1) {
              error("Internal React error: Expected this fiber to be complete, but " + "it isn't. It should have been unwound. This is a bug in React.");
            }
          }
          var current2 = completedWork.alternate;
          var returnFiber = completedWork.return;
          setCurrentFiber(completedWork);
          var next = undefined;
          if ((completedWork.mode & ProfileMode) === NoMode) {
            next = completeWork(current2, completedWork, renderLanes);
          } else {
            startProfilerTimer(completedWork);
            next = completeWork(current2, completedWork, renderLanes);
            stopProfilerTimerIfRunningAndRecordDelta(completedWork, false);
          }
          resetCurrentFiber();
          if (next !== null) {
            workInProgress = next;
            return;
          }
          var siblingFiber = completedWork.sibling;
          if (siblingFiber !== null) {
            workInProgress = siblingFiber;
            return;
          }
          completedWork = returnFiber;
          workInProgress = completedWork;
        } while (completedWork !== null);
        if (workInProgressRootExitStatus === RootInProgress) {
          workInProgressRootExitStatus = RootCompleted;
        }
      }
      function unwindUnitOfWork(unitOfWork) {
        var incompleteWork = unitOfWork;
        do {
          var current2 = incompleteWork.alternate;
          var next = unwindWork(current2, incompleteWork);
          if (next !== null) {
            next.flags &= HostEffectMask;
            workInProgress = next;
            return;
          }
          if ((incompleteWork.mode & ProfileMode) !== NoMode) {
            stopProfilerTimerIfRunningAndRecordDelta(incompleteWork, false);
            var actualDuration = incompleteWork.actualDuration;
            var child = incompleteWork.child;
            while (child !== null) {
              actualDuration += child.actualDuration;
              child = child.sibling;
            }
            incompleteWork.actualDuration = actualDuration;
          }
          var returnFiber = incompleteWork.return;
          if (returnFiber !== null) {
            returnFiber.flags |= Incomplete;
            returnFiber.subtreeFlags = NoFlags$1;
            returnFiber.deletions = null;
          }
          incompleteWork = returnFiber;
          workInProgress = incompleteWork;
        } while (incompleteWork !== null);
        workInProgressRootExitStatus = RootDidNotComplete;
        workInProgress = null;
      }
      function commitRoot(root2, recoverableErrors, transitions) {
        var previousUpdateLanePriority = getCurrentUpdatePriority();
        var prevTransition = ReactCurrentBatchConfig$1.transition;
        try {
          ReactCurrentBatchConfig$1.transition = null;
          setCurrentUpdatePriority(DiscreteEventPriority);
          commitRootImpl(root2, recoverableErrors, transitions, previousUpdateLanePriority);
        } finally {
          ReactCurrentBatchConfig$1.transition = prevTransition;
          setCurrentUpdatePriority(previousUpdateLanePriority);
        }
        return null;
      }
      function commitRootImpl(root2, recoverableErrors, transitions, renderPriorityLevel) {
        do {
          flushPassiveEffects();
        } while (rootWithPendingPassiveEffects !== null);
        flushRenderPhaseStrictModeWarningsInDEV();
        if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {
          throw new Error("Should not already be working.");
        }
        var finishedWork = root2.finishedWork;
        var lanes = root2.finishedLanes;
        {
          markCommitStarted(lanes);
        }
        if (finishedWork === null) {
          {
            markCommitStopped();
          }
          return null;
        } else {
          {
            if (lanes === NoLanes) {
              error("root.finishedLanes should not be empty during a commit. This is a " + "bug in React.");
            }
          }
        }
        root2.finishedWork = null;
        root2.finishedLanes = NoLanes;
        if (finishedWork === root2.current) {
          throw new Error("Cannot commit the same tree as before. This error is likely caused by " + "a bug in React. Please file an issue.");
        }
        root2.callbackNode = null;
        root2.callbackPriority = NoLane;
        root2.cancelPendingCommit = null;
        var remainingLanes = mergeLanes(finishedWork.lanes, finishedWork.childLanes);
        var concurrentlyUpdatedLanes2 = getConcurrentlyUpdatedLanes();
        remainingLanes = mergeLanes(remainingLanes, concurrentlyUpdatedLanes2);
        markRootFinished(root2, remainingLanes);
        if (root2 === workInProgressRoot) {
          workInProgressRoot = null;
          workInProgress = null;
          workInProgressRootRenderLanes = NoLanes;
        }
        if ((finishedWork.subtreeFlags & PassiveMask) !== NoFlags$1 || (finishedWork.flags & PassiveMask) !== NoFlags$1) {
          if (!rootDoesHavePassiveEffects) {
            rootDoesHavePassiveEffects = true;
            pendingPassiveEffectsRemainingLanes = remainingLanes;
            pendingPassiveTransitions = transitions;
            scheduleCallback(NormalPriority$1, function() {
              flushPassiveEffects();
              return null;
            });
          }
        }
        var subtreeHasEffects = (finishedWork.subtreeFlags & (BeforeMutationMask | MutationMask | LayoutMask | PassiveMask)) !== NoFlags$1;
        var rootHasEffect = (finishedWork.flags & (BeforeMutationMask | MutationMask | LayoutMask | PassiveMask)) !== NoFlags$1;
        if (subtreeHasEffects || rootHasEffect) {
          var prevTransition = ReactCurrentBatchConfig$1.transition;
          ReactCurrentBatchConfig$1.transition = null;
          var previousPriority = getCurrentUpdatePriority();
          setCurrentUpdatePriority(DiscreteEventPriority);
          var prevExecutionContext = executionContext;
          executionContext |= CommitContext;
          ReactCurrentOwner$1.current = null;
          commitBeforeMutationEffects(root2, finishedWork);
          {
            recordCommitTime();
          }
          commitMutationEffects(root2, finishedWork, lanes);
          resetAfterCommit();
          root2.current = finishedWork;
          {
            markLayoutEffectsStarted(lanes);
          }
          commitLayoutEffects(finishedWork, root2, lanes);
          {
            markLayoutEffectsStopped();
          }
          requestPaint();
          executionContext = prevExecutionContext;
          setCurrentUpdatePriority(previousPriority);
          ReactCurrentBatchConfig$1.transition = prevTransition;
        } else {
          root2.current = finishedWork;
          {
            recordCommitTime();
          }
        }
        var rootDidHavePassiveEffects = rootDoesHavePassiveEffects;
        if (rootDoesHavePassiveEffects) {
          rootDoesHavePassiveEffects = false;
          rootWithPendingPassiveEffects = root2;
          pendingPassiveEffectsLanes = lanes;
        } else {
          releaseRootPooledCache(root2, remainingLanes);
          {
            nestedPassiveUpdateCount = 0;
            rootWithPassiveNestedUpdates = null;
          }
        }
        remainingLanes = root2.pendingLanes;
        if (remainingLanes === NoLanes) {
          legacyErrorBoundariesThatAlreadyFailed = null;
        }
        {
          if (!rootDidHavePassiveEffects) {
            commitDoubleInvokeEffectsInDEV(root2, false);
          }
        }
        onCommitRoot$1(finishedWork.stateNode, renderPriorityLevel);
        {
          if (isDevToolsPresent) {
            root2.memoizedUpdaters.clear();
          }
        }
        {
          onCommitRoot();
        }
        ensureRootIsScheduled(root2);
        if (recoverableErrors !== null) {
          var onRecoverableError = root2.onRecoverableError;
          for (var i = 0;i < recoverableErrors.length; i++) {
            var recoverableError = recoverableErrors[i];
            var errorInfo = makeErrorInfo(recoverableError.digest, recoverableError.stack);
            onRecoverableError(recoverableError.value, errorInfo);
          }
        }
        if (hasUncaughtError) {
          hasUncaughtError = false;
          var error$1 = firstUncaughtError;
          firstUncaughtError = null;
          throw error$1;
        }
        if (includesSyncLane(pendingPassiveEffectsLanes) && root2.tag !== LegacyRoot) {
          flushPassiveEffects();
        }
        remainingLanes = root2.pendingLanes;
        if (includesSyncLane(remainingLanes)) {
          {
            markNestedUpdateScheduled();
          }
          if (root2 === rootWithNestedUpdates) {
            nestedUpdateCount++;
          } else {
            nestedUpdateCount = 0;
            rootWithNestedUpdates = root2;
          }
        } else {
          nestedUpdateCount = 0;
        }
        flushSyncWorkOnAllRoots();
        {
          markCommitStopped();
        }
        return null;
      }
      function makeErrorInfo(digest, componentStack) {
        {
          var errorInfo = {
            componentStack,
            digest
          };
          Object.defineProperty(errorInfo, "digest", {
            configurable: false,
            enumerable: true,
            get: function() {
              error('You are accessing "digest" from the errorInfo object passed to onRecoverableError.' + " This property is deprecated and will be removed in a future version of React." + " To access the digest of an Error look for this property on the Error instance itself.");
              return digest;
            }
          });
          return errorInfo;
        }
      }
      function releaseRootPooledCache(root2, remainingLanes) {
        {
          var pooledCacheLanes = root2.pooledCacheLanes &= remainingLanes;
          if (pooledCacheLanes === NoLanes) {
            var pooledCache = root2.pooledCache;
            if (pooledCache != null) {
              root2.pooledCache = null;
              releaseCache(pooledCache);
            }
          }
        }
      }
      function flushPassiveEffects() {
        if (rootWithPendingPassiveEffects !== null) {
          var root2 = rootWithPendingPassiveEffects;
          var remainingLanes = pendingPassiveEffectsRemainingLanes;
          pendingPassiveEffectsRemainingLanes = NoLanes;
          var renderPriority = lanesToEventPriority(pendingPassiveEffectsLanes);
          var priority = lowerEventPriority(DefaultEventPriority, renderPriority);
          var prevTransition = ReactCurrentBatchConfig$1.transition;
          var previousPriority = getCurrentUpdatePriority();
          try {
            ReactCurrentBatchConfig$1.transition = null;
            setCurrentUpdatePriority(priority);
            return flushPassiveEffectsImpl();
          } finally {
            setCurrentUpdatePriority(previousPriority);
            ReactCurrentBatchConfig$1.transition = prevTransition;
            releaseRootPooledCache(root2, remainingLanes);
          }
        }
        return false;
      }
      function enqueuePendingPassiveProfilerEffect(fiber) {
        {
          pendingPassiveProfilerEffects.push(fiber);
          if (!rootDoesHavePassiveEffects) {
            rootDoesHavePassiveEffects = true;
            scheduleCallback(NormalPriority$1, function() {
              flushPassiveEffects();
              return null;
            });
          }
        }
      }
      function flushPassiveEffectsImpl() {
        if (rootWithPendingPassiveEffects === null) {
          return false;
        }
        var transitions = pendingPassiveTransitions;
        pendingPassiveTransitions = null;
        var root2 = rootWithPendingPassiveEffects;
        var lanes = pendingPassiveEffectsLanes;
        rootWithPendingPassiveEffects = null;
        pendingPassiveEffectsLanes = NoLanes;
        if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {
          throw new Error("Cannot flush passive effects while already rendering.");
        }
        {
          isFlushingPassiveEffects = true;
          didScheduleUpdateDuringPassiveEffects = false;
        }
        {
          markPassiveEffectsStarted(lanes);
        }
        var prevExecutionContext = executionContext;
        executionContext |= CommitContext;
        commitPassiveUnmountEffects(root2.current);
        commitPassiveMountEffects(root2, root2.current, lanes, transitions);
        {
          var profilerEffects = pendingPassiveProfilerEffects;
          pendingPassiveProfilerEffects = [];
          for (var i = 0;i < profilerEffects.length; i++) {
            var fiber = profilerEffects[i];
            commitPassiveEffectDurations(root2, fiber);
          }
        }
        {
          markPassiveEffectsStopped();
        }
        {
          commitDoubleInvokeEffectsInDEV(root2, true);
        }
        executionContext = prevExecutionContext;
        flushSyncWorkOnAllRoots();
        {
          if (didScheduleUpdateDuringPassiveEffects) {
            if (root2 === rootWithPassiveNestedUpdates) {
              nestedPassiveUpdateCount++;
            } else {
              nestedPassiveUpdateCount = 0;
              rootWithPassiveNestedUpdates = root2;
            }
          } else {
            nestedPassiveUpdateCount = 0;
          }
          isFlushingPassiveEffects = false;
          didScheduleUpdateDuringPassiveEffects = false;
        }
        onPostCommitRoot(root2);
        {
          var stateNode = root2.current.stateNode;
          stateNode.effectDuration = 0;
          stateNode.passiveEffectDuration = 0;
        }
        return true;
      }
      function isAlreadyFailedLegacyErrorBoundary(instance) {
        return legacyErrorBoundariesThatAlreadyFailed !== null && legacyErrorBoundariesThatAlreadyFailed.has(instance);
      }
      function markLegacyErrorBoundaryAsFailed(instance) {
        if (legacyErrorBoundariesThatAlreadyFailed === null) {
          legacyErrorBoundariesThatAlreadyFailed = new Set([instance]);
        } else {
          legacyErrorBoundariesThatAlreadyFailed.add(instance);
        }
      }
      function prepareToThrowUncaughtError(error2) {
        if (!hasUncaughtError) {
          hasUncaughtError = true;
          firstUncaughtError = error2;
        }
      }
      var onUncaughtError = prepareToThrowUncaughtError;
      function captureCommitPhaseErrorOnRoot(rootFiber, sourceFiber, error2) {
        var errorInfo = createCapturedValueAtFiber(error2, sourceFiber);
        var update = createRootErrorUpdate(rootFiber, errorInfo, SyncLane);
        var root2 = enqueueUpdate(rootFiber, update, SyncLane);
        if (root2 !== null) {
          markRootUpdated(root2, SyncLane);
          ensureRootIsScheduled(root2);
        }
      }
      function captureCommitPhaseError(sourceFiber, nearestMountedAncestor, error$1) {
        {
          reportUncaughtErrorInDEV(error$1);
          setIsRunningInsertionEffect(false);
        }
        if (sourceFiber.tag === HostRoot) {
          captureCommitPhaseErrorOnRoot(sourceFiber, sourceFiber, error$1);
          return;
        }
        var fiber = nearestMountedAncestor;
        while (fiber !== null) {
          if (fiber.tag === HostRoot) {
            captureCommitPhaseErrorOnRoot(fiber, sourceFiber, error$1);
            return;
          } else if (fiber.tag === ClassComponent) {
            var ctor = fiber.type;
            var instance = fiber.stateNode;
            if (typeof ctor.getDerivedStateFromError === "function" || typeof instance.componentDidCatch === "function" && !isAlreadyFailedLegacyErrorBoundary(instance)) {
              var errorInfo = createCapturedValueAtFiber(error$1, sourceFiber);
              var update = createClassErrorUpdate(fiber, errorInfo, SyncLane);
              var root2 = enqueueUpdate(fiber, update, SyncLane);
              if (root2 !== null) {
                markRootUpdated(root2, SyncLane);
                ensureRootIsScheduled(root2);
              }
              return;
            }
          }
          fiber = fiber.return;
        }
        {
          error("Internal React error: Attempted to capture a commit phase error " + "inside a detached tree. This indicates a bug in React. Potential " + "causes include deleting the same fiber more than once, committing an " + `already-finished tree, or an inconsistent return pointer.

` + `Error message:

%s`, error$1);
        }
      }
      function attachPingListener(root2, wakeable, lanes) {
        var pingCache = root2.pingCache;
        var threadIDs;
        if (pingCache === null) {
          pingCache = root2.pingCache = new PossiblyWeakMap;
          threadIDs = new Set;
          pingCache.set(wakeable, threadIDs);
        } else {
          threadIDs = pingCache.get(wakeable);
          if (threadIDs === undefined) {
            threadIDs = new Set;
            pingCache.set(wakeable, threadIDs);
          }
        }
        if (!threadIDs.has(lanes)) {
          workInProgressRootDidAttachPingListener = true;
          threadIDs.add(lanes);
          var ping = pingSuspendedRoot.bind(null, root2, wakeable, lanes);
          {
            if (isDevToolsPresent) {
              restorePendingUpdaters(root2, lanes);
            }
          }
          wakeable.then(ping, ping);
        }
      }
      function pingSuspendedRoot(root2, wakeable, pingedLanes) {
        var pingCache = root2.pingCache;
        if (pingCache !== null) {
          pingCache.delete(wakeable);
        }
        markRootPinged(root2, pingedLanes);
        warnIfSuspenseResolutionNotWrappedWithActDEV(root2);
        if (workInProgressRoot === root2 && isSubsetOfLanes(workInProgressRootRenderLanes, pingedLanes)) {
          if (workInProgressRootExitStatus === RootSuspendedWithDelay || workInProgressRootExitStatus === RootSuspended && includesOnlyRetries(workInProgressRootRenderLanes) && now$1() - globalMostRecentFallbackTime < FALLBACK_THROTTLE_MS) {
            if ((executionContext & RenderContext) === NoContext) {
              prepareFreshStack(root2, NoLanes);
            }
          } else {
            workInProgressRootPingedLanes = mergeLanes(workInProgressRootPingedLanes, pingedLanes);
          }
        }
        ensureRootIsScheduled(root2);
      }
      function retryTimedOutBoundary(boundaryFiber, retryLane) {
        if (retryLane === NoLane) {
          retryLane = requestRetryLane(boundaryFiber);
        }
        var root2 = enqueueConcurrentRenderForLane(boundaryFiber, retryLane);
        if (root2 !== null) {
          markRootUpdated(root2, retryLane);
          ensureRootIsScheduled(root2);
        }
      }
      function retryDehydratedSuspenseBoundary(boundaryFiber) {
        var suspenseState = boundaryFiber.memoizedState;
        var retryLane = NoLane;
        if (suspenseState !== null) {
          retryLane = suspenseState.retryLane;
        }
        retryTimedOutBoundary(boundaryFiber, retryLane);
      }
      function resolveRetryWakeable(boundaryFiber, wakeable) {
        var retryLane = NoLane;
        var retryCache;
        switch (boundaryFiber.tag) {
          case SuspenseComponent:
            retryCache = boundaryFiber.stateNode;
            var suspenseState = boundaryFiber.memoizedState;
            if (suspenseState !== null) {
              retryLane = suspenseState.retryLane;
            }
            break;
          case SuspenseListComponent:
            retryCache = boundaryFiber.stateNode;
            break;
          case OffscreenComponent: {
            var instance = boundaryFiber.stateNode;
            retryCache = instance._retryCache;
            break;
          }
          default:
            throw new Error("Pinged unknown suspense boundary type. " + "This is probably a bug in React.");
        }
        if (retryCache !== null) {
          retryCache.delete(wakeable);
        }
        retryTimedOutBoundary(boundaryFiber, retryLane);
      }
      function throwIfInfiniteUpdateLoopDetected() {
        if (nestedUpdateCount > NESTED_UPDATE_LIMIT) {
          nestedUpdateCount = 0;
          nestedPassiveUpdateCount = 0;
          rootWithNestedUpdates = null;
          rootWithPassiveNestedUpdates = null;
          throw new Error("Maximum update depth exceeded. This can happen when a component " + "repeatedly calls setState inside componentWillUpdate or " + "componentDidUpdate. React limits the number of nested updates to " + "prevent infinite loops.");
        }
        {
          if (nestedPassiveUpdateCount > NESTED_PASSIVE_UPDATE_LIMIT) {
            nestedPassiveUpdateCount = 0;
            rootWithPassiveNestedUpdates = null;
            error("Maximum update depth exceeded. This can happen when a component " + "calls setState inside useEffect, but useEffect either doesn't " + "have a dependency array, or one of the dependencies changes on " + "every render.");
          }
        }
      }
      function flushRenderPhaseStrictModeWarningsInDEV() {
        {
          ReactStrictModeWarnings.flushLegacyContextWarning();
          ReactStrictModeWarnings.flushPendingUnsafeLifecycleWarnings();
        }
      }
      function commitDoubleInvokeEffectsInDEV(root2, hasPassiveEffects) {
        {
          {
            legacyCommitDoubleInvokeEffectsInDEV(root2.current, hasPassiveEffects);
          }
        }
      }
      function legacyCommitDoubleInvokeEffectsInDEV(fiber, hasPassiveEffects) {
        setCurrentFiber(fiber);
        invokeEffectsInDev(fiber, MountLayoutDev, invokeLayoutEffectUnmountInDEV);
        if (hasPassiveEffects) {
          invokeEffectsInDev(fiber, MountPassiveDev, invokePassiveEffectUnmountInDEV);
        }
        invokeEffectsInDev(fiber, MountLayoutDev, invokeLayoutEffectMountInDEV);
        if (hasPassiveEffects) {
          invokeEffectsInDev(fiber, MountPassiveDev, invokePassiveEffectMountInDEV);
        }
        resetCurrentFiber();
      }
      function invokeEffectsInDev(firstChild, fiberFlags, invokeEffectFn) {
        var current2 = firstChild;
        var subtreeRoot = null;
        while (current2 != null) {
          var primarySubtreeFlag = current2.subtreeFlags & fiberFlags;
          if (current2 !== subtreeRoot && current2.child != null && primarySubtreeFlag !== NoFlags$1) {
            current2 = current2.child;
          } else {
            if ((current2.flags & fiberFlags) !== NoFlags$1) {
              invokeEffectFn(current2);
            }
            if (current2.sibling !== null) {
              current2 = current2.sibling;
            } else {
              current2 = subtreeRoot = current2.return;
            }
          }
        }
      }
      var didWarnStateUpdateForNotYetMountedComponent = null;
      function warnAboutUpdateOnNotYetMountedFiberInDEV(fiber) {
        {
          if ((executionContext & RenderContext) !== NoContext) {
            return;
          }
          if (!(fiber.mode & ConcurrentMode)) {
            return;
          }
          var tag = fiber.tag;
          if (tag !== IndeterminateComponent && tag !== HostRoot && tag !== ClassComponent && tag !== FunctionComponent && tag !== ForwardRef && tag !== MemoComponent && tag !== SimpleMemoComponent) {
            return;
          }
          var componentName = getComponentNameFromFiber(fiber) || "ReactComponent";
          if (didWarnStateUpdateForNotYetMountedComponent !== null) {
            if (didWarnStateUpdateForNotYetMountedComponent.has(componentName)) {
              return;
            }
            didWarnStateUpdateForNotYetMountedComponent.add(componentName);
          } else {
            didWarnStateUpdateForNotYetMountedComponent = new Set([componentName]);
          }
          var previousFiber = current;
          try {
            setCurrentFiber(fiber);
            error("Can't perform a React state update on a component that hasn't mounted yet. " + "This indicates that you have a side-effect in your render function that " + "asynchronously later calls tries to update the component. Move this work to " + "useEffect instead.");
          } finally {
            if (previousFiber) {
              setCurrentFiber(fiber);
            } else {
              resetCurrentFiber();
            }
          }
        }
      }
      var beginWork;
      {
        var dummyFiber = null;
        beginWork = function(current2, unitOfWork, lanes) {
          var originalWorkInProgressCopy = assignFiberPropertiesInDEV(dummyFiber, unitOfWork);
          try {
            return beginWork$1(current2, unitOfWork, lanes);
          } catch (originalError) {
            if (didSuspendOrErrorWhileHydratingDEV() || originalError === SuspenseException || originalError === SelectiveHydrationException || originalError !== null && typeof originalError === "object" && typeof originalError.then === "function") {
              throw originalError;
            }
            resetSuspendedWorkLoopOnUnwind(unitOfWork);
            unwindInterruptedWork(current2, unitOfWork);
            assignFiberPropertiesInDEV(unitOfWork, originalWorkInProgressCopy);
            if (unitOfWork.mode & ProfileMode) {
              startProfilerTimer(unitOfWork);
            }
            invokeGuardedCallback(null, beginWork$1, null, current2, unitOfWork, lanes);
            if (hasCaughtError()) {
              var replayError = clearCaughtError();
              if (typeof replayError === "object" && replayError !== null && replayError._suppressLogging && typeof originalError === "object" && originalError !== null && !originalError._suppressLogging) {
                originalError._suppressLogging = true;
              }
            }
            throw originalError;
          }
        };
      }
      var didWarnAboutUpdateInRender = false;
      var didWarnAboutUpdateInRenderForAnotherComponent;
      {
        didWarnAboutUpdateInRenderForAnotherComponent = new Set;
      }
      function warnAboutRenderPhaseUpdatesInDEV(fiber) {
        {
          if (isRendering) {
            switch (fiber.tag) {
              case FunctionComponent:
              case ForwardRef:
              case SimpleMemoComponent: {
                var renderingComponentName = workInProgress && getComponentNameFromFiber(workInProgress) || "Unknown";
                var dedupeKey = renderingComponentName;
                if (!didWarnAboutUpdateInRenderForAnotherComponent.has(dedupeKey)) {
                  didWarnAboutUpdateInRenderForAnotherComponent.add(dedupeKey);
                  var setStateComponentName = getComponentNameFromFiber(fiber) || "Unknown";
                  error("Cannot update a component (`%s`) while rendering a " + "different component (`%s`). To locate the bad setState() call inside `%s`, " + "follow the stack trace as described in https://reactjs.org/link/setstate-in-render", setStateComponentName, renderingComponentName, renderingComponentName);
                }
                break;
              }
              case ClassComponent: {
                if (!didWarnAboutUpdateInRender) {
                  error("Cannot update during an existing state transition (such as " + "within `render`). Render methods should be a pure " + "function of props and state.");
                  didWarnAboutUpdateInRender = true;
                }
                break;
              }
            }
          }
        }
      }
      function restorePendingUpdaters(root2, lanes) {
        {
          if (isDevToolsPresent) {
            var memoizedUpdaters = root2.memoizedUpdaters;
            memoizedUpdaters.forEach(function(schedulingFiber) {
              addFiberToLanesMap(root2, schedulingFiber, lanes);
            });
          }
        }
      }
      var fakeActCallbackNode = {};
      function scheduleCallback(priorityLevel, callback) {
        {
          var actQueue = ReactCurrentActQueue.current;
          if (actQueue !== null) {
            actQueue.push(callback);
            return fakeActCallbackNode;
          } else {
            return scheduleCallback$3(priorityLevel, callback);
          }
        }
      }
      function shouldForceFlushFallbacksInDEV() {
        return ReactCurrentActQueue.current !== null;
      }
      function warnIfUpdatesNotWrappedWithActDEV(fiber) {
        {
          if (fiber.mode & ConcurrentMode) {
            if (!isConcurrentActEnvironment()) {
              return;
            }
          } else {
            if (!isLegacyActEnvironment()) {
              return;
            }
            if (executionContext !== NoContext) {
              return;
            }
            if (fiber.tag !== FunctionComponent && fiber.tag !== ForwardRef && fiber.tag !== SimpleMemoComponent) {
              return;
            }
          }
          if (ReactCurrentActQueue.current === null) {
            var previousFiber = current;
            try {
              setCurrentFiber(fiber);
              error(`An update to %s inside a test was not wrapped in act(...).

` + "When testing, code that causes React state updates should be " + `wrapped into act(...):

` + `act(() => {
` + `  /* fire events that update state */
` + `});
` + `/* assert on the output */

` + "This ensures that you're testing the behavior the user would see " + "in the browser." + " Learn more at https://reactjs.org/link/wrap-tests-with-act", getComponentNameFromFiber(fiber));
            } finally {
              if (previousFiber) {
                setCurrentFiber(fiber);
              } else {
                resetCurrentFiber();
              }
            }
          }
        }
      }
      function warnIfSuspenseResolutionNotWrappedWithActDEV(root2) {
        {
          if (root2.tag !== LegacyRoot && isConcurrentActEnvironment() && ReactCurrentActQueue.current === null) {
            error("A suspended resource finished loading inside a test, but the event " + `was not wrapped in act(...).

` + "When testing, code that resolves suspended data should be wrapped " + `into act(...):

` + `act(() => {
` + `  /* finish loading suspended data */
` + `});
` + `/* assert on the output */

` + "This ensures that you're testing the behavior the user would see " + "in the browser." + " Learn more at https://reactjs.org/link/wrap-tests-with-act");
          }
        }
      }
      function setIsRunningInsertionEffect(isRunning) {
        {
          isRunningInsertionEffect = isRunning;
        }
      }
      var resolveFamily = null;
      var failedBoundaries = null;
      var setRefreshHandler = function(handler) {
        {
          resolveFamily = handler;
        }
      };
      function resolveFunctionForHotReloading(type) {
        {
          if (resolveFamily === null) {
            return type;
          }
          var family = resolveFamily(type);
          if (family === undefined) {
            return type;
          }
          return family.current;
        }
      }
      function resolveClassForHotReloading(type) {
        return resolveFunctionForHotReloading(type);
      }
      function resolveForwardRefForHotReloading(type) {
        {
          if (resolveFamily === null) {
            return type;
          }
          var family = resolveFamily(type);
          if (family === undefined) {
            if (type !== null && type !== undefined && typeof type.render === "function") {
              var currentRender = resolveFunctionForHotReloading(type.render);
              if (type.render !== currentRender) {
                var syntheticType = {
                  $$typeof: REACT_FORWARD_REF_TYPE2,
                  render: currentRender
                };
                if (type.displayName !== undefined) {
                  syntheticType.displayName = type.displayName;
                }
                return syntheticType;
              }
            }
            return type;
          }
          return family.current;
        }
      }
      function isCompatibleFamilyForHotReloading(fiber, element) {
        {
          if (resolveFamily === null) {
            return false;
          }
          var prevType = fiber.elementType;
          var nextType = element.type;
          var needsCompareFamilies = false;
          var $$typeofNextType = typeof nextType === "object" && nextType !== null ? nextType.$$typeof : null;
          switch (fiber.tag) {
            case ClassComponent: {
              if (typeof nextType === "function") {
                needsCompareFamilies = true;
              }
              break;
            }
            case FunctionComponent: {
              if (typeof nextType === "function") {
                needsCompareFamilies = true;
              } else if ($$typeofNextType === REACT_LAZY_TYPE) {
                needsCompareFamilies = true;
              }
              break;
            }
            case ForwardRef: {
              if ($$typeofNextType === REACT_FORWARD_REF_TYPE2) {
                needsCompareFamilies = true;
              } else if ($$typeofNextType === REACT_LAZY_TYPE) {
                needsCompareFamilies = true;
              }
              break;
            }
            case MemoComponent:
            case SimpleMemoComponent: {
              if ($$typeofNextType === REACT_MEMO_TYPE) {
                needsCompareFamilies = true;
              } else if ($$typeofNextType === REACT_LAZY_TYPE) {
                needsCompareFamilies = true;
              }
              break;
            }
            default:
              return false;
          }
          if (needsCompareFamilies) {
            var prevFamily = resolveFamily(prevType);
            if (prevFamily !== undefined && prevFamily === resolveFamily(nextType)) {
              return true;
            }
          }
          return false;
        }
      }
      function markFailedErrorBoundaryForHotReloading(fiber) {
        {
          if (resolveFamily === null) {
            return;
          }
          if (typeof WeakSet !== "function") {
            return;
          }
          if (failedBoundaries === null) {
            failedBoundaries = new WeakSet;
          }
          failedBoundaries.add(fiber);
        }
      }
      var scheduleRefresh = function(root2, update) {
        {
          if (resolveFamily === null) {
            return;
          }
          var { staleFamilies, updatedFamilies } = update;
          flushPassiveEffects();
          flushSync$1(function() {
            scheduleFibersWithFamiliesRecursively(root2.current, updatedFamilies, staleFamilies);
          });
        }
      };
      var scheduleRoot = function(root2, element) {
        {
          if (root2.context !== emptyContextObject) {
            return;
          }
          flushPassiveEffects();
          flushSync$1(function() {
            updateContainer(element, root2, null, null);
          });
        }
      };
      function scheduleFibersWithFamiliesRecursively(fiber, updatedFamilies, staleFamilies) {
        {
          var { alternate, child, sibling, tag, type } = fiber;
          var candidateType = null;
          switch (tag) {
            case FunctionComponent:
            case SimpleMemoComponent:
            case ClassComponent:
              candidateType = type;
              break;
            case ForwardRef:
              candidateType = type.render;
              break;
          }
          if (resolveFamily === null) {
            throw new Error("Expected resolveFamily to be set during hot reload.");
          }
          var needsRender = false;
          var needsRemount = false;
          if (candidateType !== null) {
            var family = resolveFamily(candidateType);
            if (family !== undefined) {
              if (staleFamilies.has(family)) {
                needsRemount = true;
              } else if (updatedFamilies.has(family)) {
                if (tag === ClassComponent) {
                  needsRemount = true;
                } else {
                  needsRender = true;
                }
              }
            }
          }
          if (failedBoundaries !== null) {
            if (failedBoundaries.has(fiber) || alternate !== null && failedBoundaries.has(alternate)) {
              needsRemount = true;
            }
          }
          if (needsRemount) {
            fiber._debugNeedsRemount = true;
          }
          if (needsRemount || needsRender) {
            var root2 = enqueueConcurrentRenderForLane(fiber, SyncLane);
            if (root2 !== null) {
              scheduleUpdateOnFiber(root2, fiber, SyncLane);
            }
          }
          if (child !== null && !needsRemount) {
            scheduleFibersWithFamiliesRecursively(child, updatedFamilies, staleFamilies);
          }
          if (sibling !== null) {
            scheduleFibersWithFamiliesRecursively(sibling, updatedFamilies, staleFamilies);
          }
        }
      }
      var findHostInstancesForRefresh = function(root2, families) {
        {
          var hostInstances = new Set;
          var types = new Set(families.map(function(family) {
            return family.current;
          }));
          findHostInstancesForMatchingFibersRecursively(root2.current, types, hostInstances);
          return hostInstances;
        }
      };
      function findHostInstancesForMatchingFibersRecursively(fiber, types, hostInstances) {
        {
          var { child, sibling, tag, type } = fiber;
          var candidateType = null;
          switch (tag) {
            case FunctionComponent:
            case SimpleMemoComponent:
            case ClassComponent:
              candidateType = type;
              break;
            case ForwardRef:
              candidateType = type.render;
              break;
          }
          var didMatch = false;
          if (candidateType !== null) {
            if (types.has(candidateType)) {
              didMatch = true;
            }
          }
          if (didMatch) {
            findHostInstancesForFiberShallowly(fiber, hostInstances);
          } else {
            if (child !== null) {
              findHostInstancesForMatchingFibersRecursively(child, types, hostInstances);
            }
          }
          if (sibling !== null) {
            findHostInstancesForMatchingFibersRecursively(sibling, types, hostInstances);
          }
        }
      }
      function findHostInstancesForFiberShallowly(fiber, hostInstances) {
        {
          var foundHostInstances = findChildHostInstancesForFiberShallowly(fiber, hostInstances);
          if (foundHostInstances) {
            return;
          }
          var node = fiber;
          while (true) {
            switch (node.tag) {
              case HostSingleton:
              case HostComponent:
                hostInstances.add(node.stateNode);
                return;
              case HostPortal:
                hostInstances.add(node.stateNode.containerInfo);
                return;
              case HostRoot:
                hostInstances.add(node.stateNode.containerInfo);
                return;
            }
            if (node.return === null) {
              throw new Error("Expected to reach root first.");
            }
            node = node.return;
          }
        }
      }
      function findChildHostInstancesForFiberShallowly(fiber, hostInstances) {
        {
          var node = fiber;
          var foundHostInstances = false;
          while (true) {
            if (node.tag === HostComponent || node.tag === HostHoistable || node.tag === HostSingleton) {
              foundHostInstances = true;
              hostInstances.add(node.stateNode);
            } else if (node.child !== null) {
              node.child.return = node;
              node = node.child;
              continue;
            }
            if (node === fiber) {
              return foundHostInstances;
            }
            while (node.sibling === null) {
              if (node.return === null || node.return === fiber) {
                return foundHostInstances;
              }
              node = node.return;
            }
            node.sibling.return = node.return;
            node = node.sibling;
          }
        }
        return false;
      }
      var hasBadMapPolyfill;
      {
        hasBadMapPolyfill = false;
        try {
          var nonExtensibleObject = Object.preventExtensions({});
          new Map([[nonExtensibleObject, null]]);
          new Set([nonExtensibleObject]);
        } catch (e) {
          hasBadMapPolyfill = true;
        }
      }
      function FiberNode(tag, pendingProps, key, mode) {
        this.tag = tag;
        this.key = key;
        this.elementType = null;
        this.type = null;
        this.stateNode = null;
        this.return = null;
        this.child = null;
        this.sibling = null;
        this.index = 0;
        this.ref = null;
        this.refCleanup = null;
        this.pendingProps = pendingProps;
        this.memoizedProps = null;
        this.updateQueue = null;
        this.memoizedState = null;
        this.dependencies = null;
        this.mode = mode;
        this.flags = NoFlags$1;
        this.subtreeFlags = NoFlags$1;
        this.deletions = null;
        this.lanes = NoLanes;
        this.childLanes = NoLanes;
        this.alternate = null;
        {
          this.actualDuration = Number.NaN;
          this.actualStartTime = Number.NaN;
          this.selfBaseDuration = Number.NaN;
          this.treeBaseDuration = Number.NaN;
          this.actualDuration = 0;
          this.actualStartTime = -1;
          this.selfBaseDuration = 0;
          this.treeBaseDuration = 0;
        }
        {
          this._debugSource = null;
          this._debugOwner = null;
          this._debugNeedsRemount = false;
          this._debugHookTypes = null;
          if (!hasBadMapPolyfill && typeof Object.preventExtensions === "function") {
            Object.preventExtensions(this);
          }
        }
      }
      function createFiber(tag, pendingProps, key, mode) {
        return new FiberNode(tag, pendingProps, key, mode);
      }
      function shouldConstruct(Component) {
        var prototype = Component.prototype;
        return !!(prototype && prototype.isReactComponent);
      }
      function isSimpleFunctionComponent(type) {
        return typeof type === "function" && !shouldConstruct(type) && type.defaultProps === undefined;
      }
      function resolveLazyComponentTag(Component) {
        if (typeof Component === "function") {
          return shouldConstruct(Component) ? ClassComponent : FunctionComponent;
        } else if (Component !== undefined && Component !== null) {
          var $$typeof = Component.$$typeof;
          if ($$typeof === REACT_FORWARD_REF_TYPE2) {
            return ForwardRef;
          }
          if ($$typeof === REACT_MEMO_TYPE) {
            return MemoComponent;
          }
        }
        return IndeterminateComponent;
      }
      function createWorkInProgress(current2, pendingProps) {
        var workInProgress2 = current2.alternate;
        if (workInProgress2 === null) {
          workInProgress2 = createFiber(current2.tag, pendingProps, current2.key, current2.mode);
          workInProgress2.elementType = current2.elementType;
          workInProgress2.type = current2.type;
          workInProgress2.stateNode = current2.stateNode;
          {
            workInProgress2._debugSource = current2._debugSource;
            workInProgress2._debugOwner = current2._debugOwner;
            workInProgress2._debugHookTypes = current2._debugHookTypes;
          }
          workInProgress2.alternate = current2;
          current2.alternate = workInProgress2;
        } else {
          workInProgress2.pendingProps = pendingProps;
          workInProgress2.type = current2.type;
          workInProgress2.flags = NoFlags$1;
          workInProgress2.subtreeFlags = NoFlags$1;
          workInProgress2.deletions = null;
          {
            workInProgress2.actualDuration = 0;
            workInProgress2.actualStartTime = -1;
          }
        }
        workInProgress2.flags = current2.flags & StaticMask;
        workInProgress2.childLanes = current2.childLanes;
        workInProgress2.lanes = current2.lanes;
        workInProgress2.child = current2.child;
        workInProgress2.memoizedProps = current2.memoizedProps;
        workInProgress2.memoizedState = current2.memoizedState;
        workInProgress2.updateQueue = current2.updateQueue;
        var currentDependencies = current2.dependencies;
        workInProgress2.dependencies = currentDependencies === null ? null : {
          lanes: currentDependencies.lanes,
          firstContext: currentDependencies.firstContext
        };
        workInProgress2.sibling = current2.sibling;
        workInProgress2.index = current2.index;
        workInProgress2.ref = current2.ref;
        workInProgress2.refCleanup = current2.refCleanup;
        {
          workInProgress2.selfBaseDuration = current2.selfBaseDuration;
          workInProgress2.treeBaseDuration = current2.treeBaseDuration;
        }
        {
          workInProgress2._debugNeedsRemount = current2._debugNeedsRemount;
          switch (workInProgress2.tag) {
            case IndeterminateComponent:
            case FunctionComponent:
            case SimpleMemoComponent:
              workInProgress2.type = resolveFunctionForHotReloading(current2.type);
              break;
            case ClassComponent:
              workInProgress2.type = resolveClassForHotReloading(current2.type);
              break;
            case ForwardRef:
              workInProgress2.type = resolveForwardRefForHotReloading(current2.type);
              break;
          }
        }
        return workInProgress2;
      }
      function resetWorkInProgress(workInProgress2, renderLanes2) {
        workInProgress2.flags &= StaticMask | Placement;
        var current2 = workInProgress2.alternate;
        if (current2 === null) {
          workInProgress2.childLanes = NoLanes;
          workInProgress2.lanes = renderLanes2;
          workInProgress2.child = null;
          workInProgress2.subtreeFlags = NoFlags$1;
          workInProgress2.memoizedProps = null;
          workInProgress2.memoizedState = null;
          workInProgress2.updateQueue = null;
          workInProgress2.dependencies = null;
          workInProgress2.stateNode = null;
          {
            workInProgress2.selfBaseDuration = 0;
            workInProgress2.treeBaseDuration = 0;
          }
        } else {
          workInProgress2.childLanes = current2.childLanes;
          workInProgress2.lanes = current2.lanes;
          workInProgress2.child = current2.child;
          workInProgress2.subtreeFlags = NoFlags$1;
          workInProgress2.deletions = null;
          workInProgress2.memoizedProps = current2.memoizedProps;
          workInProgress2.memoizedState = current2.memoizedState;
          workInProgress2.updateQueue = current2.updateQueue;
          workInProgress2.type = current2.type;
          var currentDependencies = current2.dependencies;
          workInProgress2.dependencies = currentDependencies === null ? null : {
            lanes: currentDependencies.lanes,
            firstContext: currentDependencies.firstContext
          };
          {
            workInProgress2.selfBaseDuration = current2.selfBaseDuration;
            workInProgress2.treeBaseDuration = current2.treeBaseDuration;
          }
        }
        return workInProgress2;
      }
      function createHostRootFiber(tag, isStrictMode, concurrentUpdatesByDefaultOverride) {
        var mode;
        if (tag === ConcurrentRoot) {
          mode = ConcurrentMode;
          if (isStrictMode === true || createRootStrictEffectsByDefault) {
            mode |= StrictLegacyMode | StrictEffectsMode;
          }
        } else {
          mode = NoMode;
        }
        if (isDevToolsPresent) {
          mode |= ProfileMode;
        }
        return createFiber(HostRoot, null, null, mode);
      }
      function createFiberFromTypeAndProps(type, key, pendingProps, owner, mode, lanes) {
        var fiberTag = IndeterminateComponent;
        var resolvedType = type;
        if (typeof type === "function") {
          if (shouldConstruct(type)) {
            fiberTag = ClassComponent;
            {
              resolvedType = resolveClassForHotReloading(resolvedType);
            }
          } else {
            {
              resolvedType = resolveFunctionForHotReloading(resolvedType);
            }
          }
        } else if (typeof type === "string") {
          {
            var hostContext = getHostContext();
            fiberTag = isHostHoistableType(type, pendingProps, hostContext) ? HostHoistable : isHostSingletonType(type) ? HostSingleton : HostComponent;
          }
        } else {
          getTag:
            switch (type) {
              case REACT_FRAGMENT_TYPE:
                return createFiberFromFragment(pendingProps.children, mode, lanes, key);
              case REACT_STRICT_MODE_TYPE:
                fiberTag = Mode;
                mode |= StrictLegacyMode;
                if ((mode & ConcurrentMode) !== NoMode) {
                  mode |= StrictEffectsMode;
                }
                break;
              case REACT_PROFILER_TYPE:
                return createFiberFromProfiler(pendingProps, mode, lanes, key);
              case REACT_SUSPENSE_TYPE:
                return createFiberFromSuspense(pendingProps, mode, lanes, key);
              case REACT_SUSPENSE_LIST_TYPE:
                return createFiberFromSuspenseList(pendingProps, mode, lanes, key);
              case REACT_OFFSCREEN_TYPE:
                return createFiberFromOffscreen(pendingProps, mode, lanes, key);
              case REACT_LEGACY_HIDDEN_TYPE:
              case REACT_SCOPE_TYPE:
              case REACT_CACHE_TYPE: {
                return createFiberFromCache(pendingProps, mode, lanes, key);
              }
              case REACT_TRACING_MARKER_TYPE:
              case REACT_DEBUG_TRACING_MODE_TYPE:
              default: {
                if (typeof type === "object" && type !== null) {
                  switch (type.$$typeof) {
                    case REACT_PROVIDER_TYPE:
                      fiberTag = ContextProvider;
                      break getTag;
                    case REACT_CONTEXT_TYPE:
                      fiberTag = ContextConsumer;
                      break getTag;
                    case REACT_FORWARD_REF_TYPE2:
                      fiberTag = ForwardRef;
                      {
                        resolvedType = resolveForwardRefForHotReloading(resolvedType);
                      }
                      break getTag;
                    case REACT_MEMO_TYPE:
                      fiberTag = MemoComponent;
                      break getTag;
                    case REACT_LAZY_TYPE:
                      fiberTag = LazyComponent;
                      resolvedType = null;
                      break getTag;
                  }
                }
                var info2 = "";
                {
                  if (type === undefined || typeof type === "object" && type !== null && Object.keys(type).length === 0) {
                    info2 += " You likely forgot to export your component from the file " + "it's defined in, or you might have mixed up default and " + "named imports.";
                  }
                  var ownerName = owner ? getComponentNameFromFiber(owner) : null;
                  if (ownerName) {
                    info2 += `

Check the render method of \`` + ownerName + "`.";
                  }
                }
                throw new Error("Element type is invalid: expected a string (for built-in " + "components) or a class/function (for composite components) " + ("but got: " + (type == null ? type : typeof type) + "." + info2));
              }
            }
        }
        var fiber = createFiber(fiberTag, pendingProps, key, mode);
        fiber.elementType = type;
        fiber.type = resolvedType;
        fiber.lanes = lanes;
        {
          fiber._debugOwner = owner;
        }
        return fiber;
      }
      function createFiberFromElement(element, mode, lanes) {
        var owner = null;
        {
          owner = element._owner;
        }
        var type = element.type;
        var key = element.key;
        var pendingProps = element.props;
        var fiber = createFiberFromTypeAndProps(type, key, pendingProps, owner, mode, lanes);
        {
          fiber._debugSource = element._source;
          fiber._debugOwner = element._owner;
        }
        return fiber;
      }
      function createFiberFromFragment(elements, mode, lanes, key) {
        var fiber = createFiber(Fragment2, elements, key, mode);
        fiber.lanes = lanes;
        return fiber;
      }
      function createFiberFromProfiler(pendingProps, mode, lanes, key) {
        {
          if (typeof pendingProps.id !== "string") {
            error('Profiler must specify an "id" of type `string` as a prop. Received the type `%s` instead.', typeof pendingProps.id);
          }
        }
        var fiber = createFiber(Profiler, pendingProps, key, mode | ProfileMode);
        fiber.elementType = REACT_PROFILER_TYPE;
        fiber.lanes = lanes;
        {
          fiber.stateNode = {
            effectDuration: 0,
            passiveEffectDuration: 0
          };
        }
        return fiber;
      }
      function createFiberFromSuspense(pendingProps, mode, lanes, key) {
        var fiber = createFiber(SuspenseComponent, pendingProps, key, mode);
        fiber.elementType = REACT_SUSPENSE_TYPE;
        fiber.lanes = lanes;
        return fiber;
      }
      function createFiberFromSuspenseList(pendingProps, mode, lanes, key) {
        var fiber = createFiber(SuspenseListComponent, pendingProps, key, mode);
        fiber.elementType = REACT_SUSPENSE_LIST_TYPE;
        fiber.lanes = lanes;
        return fiber;
      }
      function createFiberFromOffscreen(pendingProps, mode, lanes, key) {
        var fiber = createFiber(OffscreenComponent, pendingProps, key, mode);
        fiber.elementType = REACT_OFFSCREEN_TYPE;
        fiber.lanes = lanes;
        var primaryChildInstance = {
          _visibility: OffscreenVisible,
          _pendingVisibility: OffscreenVisible,
          _pendingMarkers: null,
          _retryCache: null,
          _transitions: null,
          _current: null,
          detach: function() {
            return detachOffscreenInstance(primaryChildInstance);
          },
          attach: function() {
            return attachOffscreenInstance(primaryChildInstance);
          }
        };
        fiber.stateNode = primaryChildInstance;
        return fiber;
      }
      function createFiberFromCache(pendingProps, mode, lanes, key) {
        var fiber = createFiber(CacheComponent, pendingProps, key, mode);
        fiber.elementType = REACT_CACHE_TYPE;
        fiber.lanes = lanes;
        return fiber;
      }
      function createFiberFromText(content, mode, lanes) {
        var fiber = createFiber(HostText, content, null, mode);
        fiber.lanes = lanes;
        return fiber;
      }
      function createFiberFromHostInstanceForDeletion() {
        var fiber = createFiber(HostComponent, null, null, NoMode);
        fiber.elementType = "DELETED";
        return fiber;
      }
      function createFiberFromDehydratedFragment(dehydratedNode) {
        var fiber = createFiber(DehydratedFragment, null, null, NoMode);
        fiber.stateNode = dehydratedNode;
        return fiber;
      }
      function createFiberFromPortal(portal, mode, lanes) {
        var pendingProps = portal.children !== null ? portal.children : [];
        var fiber = createFiber(HostPortal, pendingProps, portal.key, mode);
        fiber.lanes = lanes;
        fiber.stateNode = {
          containerInfo: portal.containerInfo,
          pendingChildren: null,
          implementation: portal.implementation
        };
        return fiber;
      }
      function assignFiberPropertiesInDEV(target, source) {
        if (target === null) {
          target = createFiber(IndeterminateComponent, null, null, NoMode);
        }
        target.tag = source.tag;
        target.key = source.key;
        target.elementType = source.elementType;
        target.type = source.type;
        target.stateNode = source.stateNode;
        target.return = source.return;
        target.child = source.child;
        target.sibling = source.sibling;
        target.index = source.index;
        target.ref = source.ref;
        target.refCleanup = source.refCleanup;
        target.pendingProps = source.pendingProps;
        target.memoizedProps = source.memoizedProps;
        target.updateQueue = source.updateQueue;
        target.memoizedState = source.memoizedState;
        target.dependencies = source.dependencies;
        target.mode = source.mode;
        target.flags = source.flags;
        target.subtreeFlags = source.subtreeFlags;
        target.deletions = source.deletions;
        target.lanes = source.lanes;
        target.childLanes = source.childLanes;
        target.alternate = source.alternate;
        {
          target.actualDuration = source.actualDuration;
          target.actualStartTime = source.actualStartTime;
          target.selfBaseDuration = source.selfBaseDuration;
          target.treeBaseDuration = source.treeBaseDuration;
        }
        target._debugSource = source._debugSource;
        target._debugOwner = source._debugOwner;
        target._debugNeedsRemount = source._debugNeedsRemount;
        target._debugHookTypes = source._debugHookTypes;
        return target;
      }
      function FiberRootNode(containerInfo, tag, hydrate2, identifierPrefix, onRecoverableError) {
        this.tag = tag;
        this.containerInfo = containerInfo;
        this.pendingChildren = null;
        this.current = null;
        this.pingCache = null;
        this.finishedWork = null;
        this.timeoutHandle = noTimeout;
        this.cancelPendingCommit = null;
        this.context = null;
        this.pendingContext = null;
        this.next = null;
        this.callbackNode = null;
        this.callbackPriority = NoLane;
        this.expirationTimes = createLaneMap(NoTimestamp);
        this.pendingLanes = NoLanes;
        this.suspendedLanes = NoLanes;
        this.pingedLanes = NoLanes;
        this.expiredLanes = NoLanes;
        this.mutableReadLanes = NoLanes;
        this.finishedLanes = NoLanes;
        this.errorRecoveryDisabledLanes = NoLanes;
        this.entangledLanes = NoLanes;
        this.entanglements = createLaneMap(NoLanes);
        this.hiddenUpdates = createLaneMap(null);
        this.identifierPrefix = identifierPrefix;
        this.onRecoverableError = onRecoverableError;
        {
          this.pooledCache = null;
          this.pooledCacheLanes = NoLanes;
        }
        {
          this.mutableSourceEagerHydrationData = null;
        }
        this.incompleteTransitions = new Map;
        {
          this.effectDuration = 0;
          this.passiveEffectDuration = 0;
        }
        {
          this.memoizedUpdaters = new Set;
          var pendingUpdatersLaneMap = this.pendingUpdatersLaneMap = [];
          for (var _i = 0;_i < TotalLanes; _i++) {
            pendingUpdatersLaneMap.push(new Set);
          }
        }
        {
          switch (tag) {
            case ConcurrentRoot:
              this._debugRootType = hydrate2 ? "hydrateRoot()" : "createRoot()";
              break;
            case LegacyRoot:
              this._debugRootType = hydrate2 ? "hydrate()" : "render()";
              break;
          }
        }
      }
      function createFiberRoot(containerInfo, tag, hydrate2, initialChildren, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError, transitionCallbacks) {
        var root2 = new FiberRootNode(containerInfo, tag, hydrate2, identifierPrefix, onRecoverableError);
        var uninitializedFiber = createHostRootFiber(tag, isStrictMode);
        root2.current = uninitializedFiber;
        uninitializedFiber.stateNode = root2;
        {
          var initialCache = createCache();
          retainCache(initialCache);
          root2.pooledCache = initialCache;
          retainCache(initialCache);
          var initialState = {
            element: initialChildren,
            isDehydrated: hydrate2,
            cache: initialCache
          };
          uninitializedFiber.memoizedState = initialState;
        }
        initializeUpdateQueue(uninitializedFiber);
        return root2;
      }
      var ReactVersion = "18.3.0-experimental-df12d7eac-20230510";
      function createPortal$1(children, containerInfo, implementation) {
        var key = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;
        {
          checkKeyStringCoercion(key);
        }
        return {
          $$typeof: REACT_PORTAL_TYPE,
          key: key == null ? null : "" + key,
          children,
          containerInfo,
          implementation
        };
      }
      var didWarnAboutNestedUpdates;
      var didWarnAboutFindNodeInStrictMode;
      {
        didWarnAboutNestedUpdates = false;
        didWarnAboutFindNodeInStrictMode = {};
      }
      function getContextForSubtree(parentComponent) {
        if (!parentComponent) {
          return emptyContextObject;
        }
        var fiber = get2(parentComponent);
        var parentContext = findCurrentUnmaskedContext(fiber);
        if (fiber.tag === ClassComponent) {
          var Component = fiber.type;
          if (isContextProvider(Component)) {
            return processChildContext(fiber, Component, parentContext);
          }
        }
        return parentContext;
      }
      function findHostInstanceWithWarning(component, methodName) {
        {
          var fiber = get2(component);
          if (fiber === undefined) {
            if (typeof component.render === "function") {
              throw new Error("Unable to find node on an unmounted component.");
            } else {
              var keys = Object.keys(component).join(",");
              throw new Error("Argument appears to not be a ReactComponent. Keys: " + keys);
            }
          }
          var hostFiber = findCurrentHostFiber(fiber);
          if (hostFiber === null) {
            return null;
          }
          if (hostFiber.mode & StrictLegacyMode) {
            var componentName = getComponentNameFromFiber(fiber) || "Component";
            if (!didWarnAboutFindNodeInStrictMode[componentName]) {
              didWarnAboutFindNodeInStrictMode[componentName] = true;
              var previousFiber = current;
              try {
                setCurrentFiber(hostFiber);
                if (fiber.mode & StrictLegacyMode) {
                  error("%s is deprecated in StrictMode. " + "%s was passed an instance of %s which is inside StrictMode. " + "Instead, add a ref directly to the element you want to reference. " + "Learn more about using refs safely here: " + "https://reactjs.org/link/strict-mode-find-node", methodName, methodName, componentName);
                } else {
                  error("%s is deprecated in StrictMode. " + "%s was passed an instance of %s which renders StrictMode children. " + "Instead, add a ref directly to the element you want to reference. " + "Learn more about using refs safely here: " + "https://reactjs.org/link/strict-mode-find-node", methodName, methodName, componentName);
                }
              } finally {
                if (previousFiber) {
                  setCurrentFiber(previousFiber);
                } else {
                  resetCurrentFiber();
                }
              }
            }
          }
          return getPublicInstance(hostFiber.stateNode);
        }
      }
      function createContainer(containerInfo, tag, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError, transitionCallbacks) {
        var hydrate2 = false;
        var initialChildren = null;
        return createFiberRoot(containerInfo, tag, hydrate2, initialChildren, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError);
      }
      function createHydrationContainer(initialChildren, callback, containerInfo, tag, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError, transitionCallbacks) {
        var hydrate2 = true;
        var root2 = createFiberRoot(containerInfo, tag, hydrate2, initialChildren, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError);
        root2.context = getContextForSubtree(null);
        var current2 = root2.current;
        var lane = requestUpdateLane(current2);
        var update = createUpdate(lane);
        update.callback = callback !== undefined && callback !== null ? callback : null;
        enqueueUpdate(current2, update, lane);
        scheduleInitialHydrationOnRoot(root2, lane);
        return root2;
      }
      function updateContainer(element, container, parentComponent, callback) {
        {
          onScheduleRoot(container, element);
        }
        var current$1 = container.current;
        var lane = requestUpdateLane(current$1);
        {
          markRenderScheduled(lane);
        }
        var context = getContextForSubtree(parentComponent);
        if (container.context === null) {
          container.context = context;
        } else {
          container.pendingContext = context;
        }
        {
          if (isRendering && current !== null && !didWarnAboutNestedUpdates) {
            didWarnAboutNestedUpdates = true;
            error("Render methods should be a pure function of props and state; " + "triggering nested component updates from render is not allowed. " + `If necessary, trigger nested updates in componentDidUpdate.

` + "Check the render method of %s.", getComponentNameFromFiber(current) || "Unknown");
          }
        }
        var update = createUpdate(lane);
        update.payload = {
          element
        };
        callback = callback === undefined ? null : callback;
        if (callback !== null) {
          {
            if (typeof callback !== "function") {
              error("render(...): Expected the last optional `callback` argument to be a " + "function. Instead received: %s.", callback);
            }
          }
          update.callback = callback;
        }
        var root2 = enqueueUpdate(current$1, update, lane);
        if (root2 !== null) {
          scheduleUpdateOnFiber(root2, current$1, lane);
          entangleTransitions(root2, current$1, lane);
        }
        return lane;
      }
      function getPublicRootInstance(container) {
        var containerFiber = container.current;
        if (!containerFiber.child) {
          return null;
        }
        switch (containerFiber.child.tag) {
          case HostSingleton:
          case HostComponent:
            return getPublicInstance(containerFiber.child.stateNode);
          default:
            return containerFiber.child.stateNode;
        }
      }
      function attemptSynchronousHydration(fiber) {
        switch (fiber.tag) {
          case HostRoot: {
            var root2 = fiber.stateNode;
            if (isRootDehydrated(root2)) {
              var lanes = getHighestPriorityPendingLanes(root2);
              flushRoot(root2, lanes);
            }
            break;
          }
          case SuspenseComponent: {
            flushSync$1(function() {
              var root3 = enqueueConcurrentRenderForLane(fiber, SyncLane);
              if (root3 !== null) {
                scheduleUpdateOnFiber(root3, fiber, SyncLane);
              }
            });
            var retryLane = SyncLane;
            markRetryLaneIfNotHydrated(fiber, retryLane);
            break;
          }
        }
      }
      function markRetryLaneImpl(fiber, retryLane) {
        var suspenseState = fiber.memoizedState;
        if (suspenseState !== null && suspenseState.dehydrated !== null) {
          suspenseState.retryLane = higherPriorityLane(suspenseState.retryLane, retryLane);
        }
      }
      function markRetryLaneIfNotHydrated(fiber, retryLane) {
        markRetryLaneImpl(fiber, retryLane);
        var alternate = fiber.alternate;
        if (alternate) {
          markRetryLaneImpl(alternate, retryLane);
        }
      }
      function attemptContinuousHydration(fiber) {
        if (fiber.tag !== SuspenseComponent) {
          return;
        }
        var lane = SelectiveHydrationLane;
        var root2 = enqueueConcurrentRenderForLane(fiber, lane);
        if (root2 !== null) {
          scheduleUpdateOnFiber(root2, fiber, lane);
        }
        markRetryLaneIfNotHydrated(fiber, lane);
      }
      function attemptHydrationAtCurrentPriority(fiber) {
        if (fiber.tag !== SuspenseComponent) {
          return;
        }
        var lane = requestUpdateLane(fiber);
        var root2 = enqueueConcurrentRenderForLane(fiber, lane);
        if (root2 !== null) {
          scheduleUpdateOnFiber(root2, fiber, lane);
        }
        markRetryLaneIfNotHydrated(fiber, lane);
      }
      function findHostInstanceWithNoPortals(fiber) {
        var hostFiber = findCurrentHostFiberWithNoPortals(fiber);
        if (hostFiber === null) {
          return null;
        }
        return getPublicInstance(hostFiber.stateNode);
      }
      var shouldErrorImpl = function(fiber) {
        return null;
      };
      function shouldError(fiber) {
        return shouldErrorImpl(fiber);
      }
      var shouldSuspendImpl = function(fiber) {
        return false;
      };
      function shouldSuspend(fiber) {
        return shouldSuspendImpl(fiber);
      }
      var overrideHookState = null;
      var overrideHookStateDeletePath = null;
      var overrideHookStateRenamePath = null;
      var overrideProps = null;
      var overridePropsDeletePath = null;
      var overridePropsRenamePath = null;
      var scheduleUpdate = null;
      var setErrorHandler = null;
      var setSuspenseHandler = null;
      {
        var copyWithDeleteImpl = function(obj, path, index2) {
          var key = path[index2];
          var updated = isArray(obj) ? obj.slice() : assign({}, obj);
          if (index2 + 1 === path.length) {
            if (isArray(updated)) {
              updated.splice(key, 1);
            } else {
              delete updated[key];
            }
            return updated;
          }
          updated[key] = copyWithDeleteImpl(obj[key], path, index2 + 1);
          return updated;
        };
        var copyWithDelete = function(obj, path) {
          return copyWithDeleteImpl(obj, path, 0);
        };
        var copyWithRenameImpl = function(obj, oldPath, newPath, index2) {
          var oldKey = oldPath[index2];
          var updated = isArray(obj) ? obj.slice() : assign({}, obj);
          if (index2 + 1 === oldPath.length) {
            var newKey = newPath[index2];
            updated[newKey] = updated[oldKey];
            if (isArray(updated)) {
              updated.splice(oldKey, 1);
            } else {
              delete updated[oldKey];
            }
          } else {
            updated[oldKey] = copyWithRenameImpl(obj[oldKey], oldPath, newPath, index2 + 1);
          }
          return updated;
        };
        var copyWithRename = function(obj, oldPath, newPath) {
          if (oldPath.length !== newPath.length) {
            warn("copyWithRename() expects paths of the same length");
            return;
          } else {
            for (var i = 0;i < newPath.length - 1; i++) {
              if (oldPath[i] !== newPath[i]) {
                warn("copyWithRename() expects paths to be the same except for the deepest key");
                return;
              }
            }
          }
          return copyWithRenameImpl(obj, oldPath, newPath, 0);
        };
        var copyWithSetImpl = function(obj, path, index2, value) {
          if (index2 >= path.length) {
            return value;
          }
          var key = path[index2];
          var updated = isArray(obj) ? obj.slice() : assign({}, obj);
          updated[key] = copyWithSetImpl(obj[key], path, index2 + 1, value);
          return updated;
        };
        var copyWithSet = function(obj, path, value) {
          return copyWithSetImpl(obj, path, 0, value);
        };
        var findHook = function(fiber, id) {
          var currentHook2 = fiber.memoizedState;
          while (currentHook2 !== null && id > 0) {
            currentHook2 = currentHook2.next;
            id--;
          }
          return currentHook2;
        };
        overrideHookState = function(fiber, id, path, value) {
          var hook = findHook(fiber, id);
          if (hook !== null) {
            var newState = copyWithSet(hook.memoizedState, path, value);
            hook.memoizedState = newState;
            hook.baseState = newState;
            fiber.memoizedProps = assign({}, fiber.memoizedProps);
            var root2 = enqueueConcurrentRenderForLane(fiber, SyncLane);
            if (root2 !== null) {
              scheduleUpdateOnFiber(root2, fiber, SyncLane);
            }
          }
        };
        overrideHookStateDeletePath = function(fiber, id, path) {
          var hook = findHook(fiber, id);
          if (hook !== null) {
            var newState = copyWithDelete(hook.memoizedState, path);
            hook.memoizedState = newState;
            hook.baseState = newState;
            fiber.memoizedProps = assign({}, fiber.memoizedProps);
            var root2 = enqueueConcurrentRenderForLane(fiber, SyncLane);
            if (root2 !== null) {
              scheduleUpdateOnFiber(root2, fiber, SyncLane);
            }
          }
        };
        overrideHookStateRenamePath = function(fiber, id, oldPath, newPath) {
          var hook = findHook(fiber, id);
          if (hook !== null) {
            var newState = copyWithRename(hook.memoizedState, oldPath, newPath);
            hook.memoizedState = newState;
            hook.baseState = newState;
            fiber.memoizedProps = assign({}, fiber.memoizedProps);
            var root2 = enqueueConcurrentRenderForLane(fiber, SyncLane);
            if (root2 !== null) {
              scheduleUpdateOnFiber(root2, fiber, SyncLane);
            }
          }
        };
        overrideProps = function(fiber, path, value) {
          fiber.pendingProps = copyWithSet(fiber.memoizedProps, path, value);
          if (fiber.alternate) {
            fiber.alternate.pendingProps = fiber.pendingProps;
          }
          var root2 = enqueueConcurrentRenderForLane(fiber, SyncLane);
          if (root2 !== null) {
            scheduleUpdateOnFiber(root2, fiber, SyncLane);
          }
        };
        overridePropsDeletePath = function(fiber, path) {
          fiber.pendingProps = copyWithDelete(fiber.memoizedProps, path);
          if (fiber.alternate) {
            fiber.alternate.pendingProps = fiber.pendingProps;
          }
          var root2 = enqueueConcurrentRenderForLane(fiber, SyncLane);
          if (root2 !== null) {
            scheduleUpdateOnFiber(root2, fiber, SyncLane);
          }
        };
        overridePropsRenamePath = function(fiber, oldPath, newPath) {
          fiber.pendingProps = copyWithRename(fiber.memoizedProps, oldPath, newPath);
          if (fiber.alternate) {
            fiber.alternate.pendingProps = fiber.pendingProps;
          }
          var root2 = enqueueConcurrentRenderForLane(fiber, SyncLane);
          if (root2 !== null) {
            scheduleUpdateOnFiber(root2, fiber, SyncLane);
          }
        };
        scheduleUpdate = function(fiber) {
          var root2 = enqueueConcurrentRenderForLane(fiber, SyncLane);
          if (root2 !== null) {
            scheduleUpdateOnFiber(root2, fiber, SyncLane);
          }
        };
        setErrorHandler = function(newShouldErrorImpl) {
          shouldErrorImpl = newShouldErrorImpl;
        };
        setSuspenseHandler = function(newShouldSuspendImpl) {
          shouldSuspendImpl = newShouldSuspendImpl;
        };
      }
      function findHostInstanceByFiber(fiber) {
        var hostFiber = findCurrentHostFiber(fiber);
        if (hostFiber === null) {
          return null;
        }
        return hostFiber.stateNode;
      }
      function emptyFindFiberByHostInstance(instance) {
        return null;
      }
      function getCurrentFiberForDevTools() {
        return current;
      }
      function injectIntoDevTools(devToolsConfig) {
        var findFiberByHostInstance = devToolsConfig.findFiberByHostInstance;
        var ReactCurrentDispatcher2 = ReactSharedInternals.ReactCurrentDispatcher;
        return injectInternals({
          bundleType: devToolsConfig.bundleType,
          version: devToolsConfig.version,
          rendererPackageName: devToolsConfig.rendererPackageName,
          rendererConfig: devToolsConfig.rendererConfig,
          overrideHookState,
          overrideHookStateDeletePath,
          overrideHookStateRenamePath,
          overrideProps,
          overridePropsDeletePath,
          overridePropsRenamePath,
          setErrorHandler,
          setSuspenseHandler,
          scheduleUpdate,
          currentDispatcherRef: ReactCurrentDispatcher2,
          findHostInstanceByFiber,
          findFiberByHostInstance: findFiberByHostInstance || emptyFindFiberByHostInstance,
          findHostInstancesForRefresh,
          scheduleRefresh,
          scheduleRoot,
          setRefreshHandler,
          getCurrentFiber: getCurrentFiberForDevTools,
          reconcilerVersion: ReactVersion
        });
      }
      var isInsideEventHandler = false;
      function finishEventHandler() {
        var controlledComponentsHavePendingUpdates = needsStateRestore();
        if (controlledComponentsHavePendingUpdates) {
          flushSync$1();
          restoreStateIfNeeded();
        }
      }
      function batchedUpdates(fn, a, b) {
        if (isInsideEventHandler) {
          return fn(a, b);
        }
        isInsideEventHandler = true;
        try {
          return batchedUpdates$1(fn, a, b);
        } finally {
          isInsideEventHandler = false;
          finishEventHandler();
        }
      }
      function isInteractive(tag) {
        return tag === "button" || tag === "input" || tag === "select" || tag === "textarea";
      }
      function shouldPreventMouseEvent(name, type, props) {
        switch (name) {
          case "onClick":
          case "onClickCapture":
          case "onDoubleClick":
          case "onDoubleClickCapture":
          case "onMouseDown":
          case "onMouseDownCapture":
          case "onMouseMove":
          case "onMouseMoveCapture":
          case "onMouseUp":
          case "onMouseUpCapture":
          case "onMouseEnter":
            return !!(props.disabled && isInteractive(type));
          default:
            return false;
        }
      }
      function getListener(inst, registrationName) {
        var stateNode = inst.stateNode;
        if (stateNode === null) {
          return null;
        }
        var props = getFiberCurrentPropsFromNode(stateNode);
        if (props === null) {
          return null;
        }
        var listener = props[registrationName];
        if (shouldPreventMouseEvent(registrationName, inst.type, props)) {
          return null;
        }
        if (listener && typeof listener !== "function") {
          throw new Error("Expected `" + registrationName + "` listener to be a function, instead got a value of `" + typeof listener + "` type.");
        }
        return listener;
      }
      var passiveBrowserEventsSupported = false;
      if (canUseDOM) {
        try {
          var options = {};
          Object.defineProperty(options, "passive", {
            get: function() {
              passiveBrowserEventsSupported = true;
            }
          });
          window.addEventListener("test", options, options);
          window.removeEventListener("test", options, options);
        } catch (e) {
          passiveBrowserEventsSupported = false;
        }
      }
      function getEventCharCode(nativeEvent) {
        var charCode;
        var keyCode = nativeEvent.keyCode;
        if ("charCode" in nativeEvent) {
          charCode = nativeEvent.charCode;
          if (charCode === 0 && keyCode === 13) {
            charCode = 13;
          }
        } else {
          charCode = keyCode;
        }
        if (charCode === 10) {
          charCode = 13;
        }
        if (charCode >= 32 || charCode === 13) {
          return charCode;
        }
        return 0;
      }
      function functionThatReturnsTrue() {
        return true;
      }
      function functionThatReturnsFalse() {
        return false;
      }
      function createSyntheticEvent(Interface) {
        function SyntheticBaseEvent(reactName, reactEventType, targetInst, nativeEvent, nativeEventTarget) {
          this._reactName = reactName;
          this._targetInst = targetInst;
          this.type = reactEventType;
          this.nativeEvent = nativeEvent;
          this.target = nativeEventTarget;
          this.currentTarget = null;
          for (var propName in Interface) {
            if (!Interface.hasOwnProperty(propName)) {
              continue;
            }
            var normalize = Interface[propName];
            if (normalize) {
              this[propName] = normalize(nativeEvent);
            } else {
              this[propName] = nativeEvent[propName];
            }
          }
          var defaultPrevented = nativeEvent.defaultPrevented != null ? nativeEvent.defaultPrevented : nativeEvent.returnValue === false;
          if (defaultPrevented) {
            this.isDefaultPrevented = functionThatReturnsTrue;
          } else {
            this.isDefaultPrevented = functionThatReturnsFalse;
          }
          this.isPropagationStopped = functionThatReturnsFalse;
          return this;
        }
        assign(SyntheticBaseEvent.prototype, {
          preventDefault: function() {
            this.defaultPrevented = true;
            var event = this.nativeEvent;
            if (!event) {
              return;
            }
            if (event.preventDefault) {
              event.preventDefault();
            } else if (typeof event.returnValue !== "unknown") {
              event.returnValue = false;
            }
            this.isDefaultPrevented = functionThatReturnsTrue;
          },
          stopPropagation: function() {
            var event = this.nativeEvent;
            if (!event) {
              return;
            }
            if (event.stopPropagation) {
              event.stopPropagation();
            } else if (typeof event.cancelBubble !== "unknown") {
              event.cancelBubble = true;
            }
            this.isPropagationStopped = functionThatReturnsTrue;
          },
          persist: function() {},
          isPersistent: functionThatReturnsTrue
        });
        return SyntheticBaseEvent;
      }
      var EventInterface = {
        eventPhase: 0,
        bubbles: 0,
        cancelable: 0,
        timeStamp: function(event) {
          return event.timeStamp || Date.now();
        },
        defaultPrevented: 0,
        isTrusted: 0
      };
      var SyntheticEvent = createSyntheticEvent(EventInterface);
      var UIEventInterface = assign({}, EventInterface, {
        view: 0,
        detail: 0
      });
      var SyntheticUIEvent = createSyntheticEvent(UIEventInterface);
      var lastMovementX;
      var lastMovementY;
      var lastMouseEvent;
      function updateMouseMovementPolyfillState(event) {
        if (event !== lastMouseEvent) {
          if (lastMouseEvent && event.type === "mousemove") {
            lastMovementX = event.screenX - lastMouseEvent.screenX;
            lastMovementY = event.screenY - lastMouseEvent.screenY;
          } else {
            lastMovementX = 0;
            lastMovementY = 0;
          }
          lastMouseEvent = event;
        }
      }
      var MouseEventInterface = assign({}, UIEventInterface, {
        screenX: 0,
        screenY: 0,
        clientX: 0,
        clientY: 0,
        pageX: 0,
        pageY: 0,
        ctrlKey: 0,
        shiftKey: 0,
        altKey: 0,
        metaKey: 0,
        getModifierState: getEventModifierState,
        button: 0,
        buttons: 0,
        relatedTarget: function(event) {
          if (event.relatedTarget === undefined)
            return event.fromElement === event.srcElement ? event.toElement : event.fromElement;
          return event.relatedTarget;
        },
        movementX: function(event) {
          if ("movementX" in event) {
            return event.movementX;
          }
          updateMouseMovementPolyfillState(event);
          return lastMovementX;
        },
        movementY: function(event) {
          if ("movementY" in event) {
            return event.movementY;
          }
          return lastMovementY;
        }
      });
      var SyntheticMouseEvent = createSyntheticEvent(MouseEventInterface);
      var DragEventInterface = assign({}, MouseEventInterface, {
        dataTransfer: 0
      });
      var SyntheticDragEvent = createSyntheticEvent(DragEventInterface);
      var FocusEventInterface = assign({}, UIEventInterface, {
        relatedTarget: 0
      });
      var SyntheticFocusEvent = createSyntheticEvent(FocusEventInterface);
      var AnimationEventInterface = assign({}, EventInterface, {
        animationName: 0,
        elapsedTime: 0,
        pseudoElement: 0
      });
      var SyntheticAnimationEvent = createSyntheticEvent(AnimationEventInterface);
      var ClipboardEventInterface = assign({}, EventInterface, {
        clipboardData: function(event) {
          return "clipboardData" in event ? event.clipboardData : window.clipboardData;
        }
      });
      var SyntheticClipboardEvent = createSyntheticEvent(ClipboardEventInterface);
      var CompositionEventInterface = assign({}, EventInterface, {
        data: 0
      });
      var SyntheticCompositionEvent = createSyntheticEvent(CompositionEventInterface);
      var SyntheticInputEvent = SyntheticCompositionEvent;
      var normalizeKey = {
        Esc: "Escape",
        Spacebar: " ",
        Left: "ArrowLeft",
        Up: "ArrowUp",
        Right: "ArrowRight",
        Down: "ArrowDown",
        Del: "Delete",
        Win: "OS",
        Menu: "ContextMenu",
        Apps: "ContextMenu",
        Scroll: "ScrollLock",
        MozPrintableKey: "Unidentified"
      };
      var translateToKey = {
        "8": "Backspace",
        "9": "Tab",
        "12": "Clear",
        "13": "Enter",
        "16": "Shift",
        "17": "Control",
        "18": "Alt",
        "19": "Pause",
        "20": "CapsLock",
        "27": "Escape",
        "32": " ",
        "33": "PageUp",
        "34": "PageDown",
        "35": "End",
        "36": "Home",
        "37": "ArrowLeft",
        "38": "ArrowUp",
        "39": "ArrowRight",
        "40": "ArrowDown",
        "45": "Insert",
        "46": "Delete",
        "112": "F1",
        "113": "F2",
        "114": "F3",
        "115": "F4",
        "116": "F5",
        "117": "F6",
        "118": "F7",
        "119": "F8",
        "120": "F9",
        "121": "F10",
        "122": "F11",
        "123": "F12",
        "144": "NumLock",
        "145": "ScrollLock",
        "224": "Meta"
      };
      function getEventKey(nativeEvent) {
        if (nativeEvent.key) {
          var key = normalizeKey[nativeEvent.key] || nativeEvent.key;
          if (key !== "Unidentified") {
            return key;
          }
        }
        if (nativeEvent.type === "keypress") {
          var charCode = getEventCharCode(nativeEvent);
          return charCode === 13 ? "Enter" : String.fromCharCode(charCode);
        }
        if (nativeEvent.type === "keydown" || nativeEvent.type === "keyup") {
          return translateToKey[nativeEvent.keyCode] || "Unidentified";
        }
        return "";
      }
      var modifierKeyToProp = {
        Alt: "altKey",
        Control: "ctrlKey",
        Meta: "metaKey",
        Shift: "shiftKey"
      };
      function modifierStateGetter(keyArg) {
        var syntheticEvent = this;
        var nativeEvent = syntheticEvent.nativeEvent;
        if (nativeEvent.getModifierState) {
          return nativeEvent.getModifierState(keyArg);
        }
        var keyProp = modifierKeyToProp[keyArg];
        return keyProp ? !!nativeEvent[keyProp] : false;
      }
      function getEventModifierState(nativeEvent) {
        return modifierStateGetter;
      }
      var KeyboardEventInterface = assign({}, UIEventInterface, {
        key: getEventKey,
        code: 0,
        location: 0,
        ctrlKey: 0,
        shiftKey: 0,
        altKey: 0,
        metaKey: 0,
        repeat: 0,
        locale: 0,
        getModifierState: getEventModifierState,
        charCode: function(event) {
          if (event.type === "keypress") {
            return getEventCharCode(event);
          }
          return 0;
        },
        keyCode: function(event) {
          if (event.type === "keydown" || event.type === "keyup") {
            return event.keyCode;
          }
          return 0;
        },
        which: function(event) {
          if (event.type === "keypress") {
            return getEventCharCode(event);
          }
          if (event.type === "keydown" || event.type === "keyup") {
            return event.keyCode;
          }
          return 0;
        }
      });
      var SyntheticKeyboardEvent = createSyntheticEvent(KeyboardEventInterface);
      var PointerEventInterface = assign({}, MouseEventInterface, {
        pointerId: 0,
        width: 0,
        height: 0,
        pressure: 0,
        tangentialPressure: 0,
        tiltX: 0,
        tiltY: 0,
        twist: 0,
        pointerType: 0,
        isPrimary: 0
      });
      var SyntheticPointerEvent = createSyntheticEvent(PointerEventInterface);
      var TouchEventInterface = assign({}, UIEventInterface, {
        touches: 0,
        targetTouches: 0,
        changedTouches: 0,
        altKey: 0,
        metaKey: 0,
        ctrlKey: 0,
        shiftKey: 0,
        getModifierState: getEventModifierState
      });
      var SyntheticTouchEvent = createSyntheticEvent(TouchEventInterface);
      var TransitionEventInterface = assign({}, EventInterface, {
        propertyName: 0,
        elapsedTime: 0,
        pseudoElement: 0
      });
      var SyntheticTransitionEvent = createSyntheticEvent(TransitionEventInterface);
      var WheelEventInterface = assign({}, MouseEventInterface, {
        deltaX: function(event) {
          return "deltaX" in event ? event.deltaX : ("wheelDeltaX" in event) ? -event.wheelDeltaX : 0;
        },
        deltaY: function(event) {
          return "deltaY" in event ? event.deltaY : ("wheelDeltaY" in event) ? -event.wheelDeltaY : ("wheelDelta" in event) ? -event.wheelDelta : 0;
        },
        deltaZ: 0,
        deltaMode: 0
      });
      var SyntheticWheelEvent = createSyntheticEvent(WheelEventInterface);
      function extractEvents$6(dispatchQueue, domEventName, maybeTargetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
        if (domEventName !== "submit") {
          return;
        }
        if (!maybeTargetInst || maybeTargetInst.stateNode !== nativeEventTarget) {
          return;
        }
        var formInst = maybeTargetInst;
        var form = nativeEventTarget;
        var action = getFiberCurrentPropsFromNode(form).action;
        var submitter = nativeEvent.submitter;
        var submitterAction;
        if (submitter) {
          var submitterProps = getFiberCurrentPropsFromNode(submitter);
          submitterAction = submitterProps ? submitterProps.formAction : submitter.getAttribute("formAction");
          if (submitterAction != null) {
            action = submitterAction;
            submitter = null;
          }
        }
        if (typeof action !== "function") {
          return;
        }
        var event = new SyntheticEvent("action", "action", null, nativeEvent, nativeEventTarget);
        function submitForm() {
          if (nativeEvent.defaultPrevented) {
            return;
          }
          event.preventDefault();
          var formData;
          if (submitter) {
            var temp = submitter.ownerDocument.createElement("input");
            temp.name = submitter.name;
            temp.value = submitter.value;
            submitter.parentNode.insertBefore(temp, submitter);
            formData = new FormData(form);
            temp.parentNode.removeChild(temp);
          } else {
            formData = new FormData(form);
          }
          var pendingState = {
            pending: true,
            data: formData,
            method: form.method,
            action
          };
          {
            Object.freeze(pendingState);
          }
          startHostTransition(formInst, pendingState, action, formData);
        }
        dispatchQueue.push({
          event,
          listeners: [{
            instance: null,
            listener: submitForm,
            currentTarget: form
          }]
        });
      }
      function dispatchReplayedFormAction(formInst, form, action, formData) {
        var pendingState = {
          pending: true,
          data: formData,
          method: form.method,
          action
        };
        {
          Object.freeze(pendingState);
        }
        startHostTransition(formInst, pendingState, action, formData);
      }
      var hasScheduledReplayAttempt = false;
      var queuedFocus = null;
      var queuedDrag = null;
      var queuedMouse = null;
      var queuedPointers = new Map;
      var queuedPointerCaptures = new Map;
      var queuedExplicitHydrationTargets = [];
      var discreteReplayableEvents = [
        "mousedown",
        "mouseup",
        "touchcancel",
        "touchend",
        "touchstart",
        "auxclick",
        "dblclick",
        "pointercancel",
        "pointerdown",
        "pointerup",
        "dragend",
        "dragstart",
        "drop",
        "compositionend",
        "compositionstart",
        "keydown",
        "keypress",
        "keyup",
        "input",
        "textInput",
        "copy",
        "cut",
        "paste",
        "click",
        "change",
        "contextmenu",
        "reset"
      ];
      function isDiscreteEventThatRequiresHydration(eventType) {
        return discreteReplayableEvents.indexOf(eventType) > -1;
      }
      function createQueuedReplayableEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent) {
        return {
          blockedOn,
          domEventName,
          eventSystemFlags,
          nativeEvent,
          targetContainers: [targetContainer]
        };
      }
      function clearIfContinuousEvent(domEventName, nativeEvent) {
        switch (domEventName) {
          case "focusin":
          case "focusout":
            queuedFocus = null;
            break;
          case "dragenter":
          case "dragleave":
            queuedDrag = null;
            break;
          case "mouseover":
          case "mouseout":
            queuedMouse = null;
            break;
          case "pointerover":
          case "pointerout": {
            var pointerId = nativeEvent.pointerId;
            queuedPointers.delete(pointerId);
            break;
          }
          case "gotpointercapture":
          case "lostpointercapture": {
            var _pointerId = nativeEvent.pointerId;
            queuedPointerCaptures.delete(_pointerId);
            break;
          }
        }
      }
      function accumulateOrCreateContinuousQueuedReplayableEvent(existingQueuedEvent, blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent) {
        if (existingQueuedEvent === null || existingQueuedEvent.nativeEvent !== nativeEvent) {
          var queuedEvent = createQueuedReplayableEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent);
          if (blockedOn !== null) {
            var fiber = getInstanceFromNode(blockedOn);
            if (fiber !== null) {
              attemptContinuousHydration(fiber);
            }
          }
          return queuedEvent;
        }
        existingQueuedEvent.eventSystemFlags |= eventSystemFlags;
        var targetContainers = existingQueuedEvent.targetContainers;
        if (targetContainer !== null && targetContainers.indexOf(targetContainer) === -1) {
          targetContainers.push(targetContainer);
        }
        return existingQueuedEvent;
      }
      function queueIfContinuousEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent) {
        switch (domEventName) {
          case "focusin": {
            var focusEvent = nativeEvent;
            queuedFocus = accumulateOrCreateContinuousQueuedReplayableEvent(queuedFocus, blockedOn, domEventName, eventSystemFlags, targetContainer, focusEvent);
            return true;
          }
          case "dragenter": {
            var dragEvent = nativeEvent;
            queuedDrag = accumulateOrCreateContinuousQueuedReplayableEvent(queuedDrag, blockedOn, domEventName, eventSystemFlags, targetContainer, dragEvent);
            return true;
          }
          case "mouseover": {
            var mouseEvent = nativeEvent;
            queuedMouse = accumulateOrCreateContinuousQueuedReplayableEvent(queuedMouse, blockedOn, domEventName, eventSystemFlags, targetContainer, mouseEvent);
            return true;
          }
          case "pointerover": {
            var pointerEvent = nativeEvent;
            var pointerId = pointerEvent.pointerId;
            queuedPointers.set(pointerId, accumulateOrCreateContinuousQueuedReplayableEvent(queuedPointers.get(pointerId) || null, blockedOn, domEventName, eventSystemFlags, targetContainer, pointerEvent));
            return true;
          }
          case "gotpointercapture": {
            var _pointerEvent = nativeEvent;
            var _pointerId2 = _pointerEvent.pointerId;
            queuedPointerCaptures.set(_pointerId2, accumulateOrCreateContinuousQueuedReplayableEvent(queuedPointerCaptures.get(_pointerId2) || null, blockedOn, domEventName, eventSystemFlags, targetContainer, _pointerEvent));
            return true;
          }
        }
        return false;
      }
      function attemptExplicitHydrationTarget(queuedTarget) {
        var targetInst = getClosestInstanceFromNode(queuedTarget.target);
        if (targetInst !== null) {
          var nearestMounted = getNearestMountedFiber(targetInst);
          if (nearestMounted !== null) {
            var tag = nearestMounted.tag;
            if (tag === SuspenseComponent) {
              var instance = getSuspenseInstanceFromFiber(nearestMounted);
              if (instance !== null) {
                queuedTarget.blockedOn = instance;
                runWithPriority(queuedTarget.priority, function() {
                  attemptHydrationAtCurrentPriority(nearestMounted);
                });
                return;
              }
            } else if (tag === HostRoot) {
              var root2 = nearestMounted.stateNode;
              if (isRootDehydrated(root2)) {
                queuedTarget.blockedOn = getContainerFromFiber(nearestMounted);
                return;
              }
            }
          }
        }
        queuedTarget.blockedOn = null;
      }
      function queueExplicitHydrationTarget(target) {
        var updatePriority = getCurrentUpdatePriority();
        var queuedTarget = {
          blockedOn: null,
          target,
          priority: updatePriority
        };
        var i = 0;
        for (;i < queuedExplicitHydrationTargets.length; i++) {
          if (!isHigherEventPriority(updatePriority, queuedExplicitHydrationTargets[i].priority)) {
            break;
          }
        }
        queuedExplicitHydrationTargets.splice(i, 0, queuedTarget);
        if (i === 0) {
          attemptExplicitHydrationTarget(queuedTarget);
        }
      }
      function attemptReplayContinuousQueuedEvent(queuedEvent) {
        if (queuedEvent.blockedOn !== null) {
          return false;
        }
        var targetContainers = queuedEvent.targetContainers;
        while (targetContainers.length > 0) {
          var nextBlockedOn = findInstanceBlockingEvent(queuedEvent.nativeEvent);
          if (nextBlockedOn === null) {
            var nativeEvent = queuedEvent.nativeEvent;
            var nativeEventClone = new nativeEvent.constructor(nativeEvent.type, nativeEvent);
            setReplayingEvent(nativeEventClone);
            nativeEvent.target.dispatchEvent(nativeEventClone);
            resetReplayingEvent();
          } else {
            var fiber = getInstanceFromNode(nextBlockedOn);
            if (fiber !== null) {
              attemptContinuousHydration(fiber);
            }
            queuedEvent.blockedOn = nextBlockedOn;
            return false;
          }
          targetContainers.shift();
        }
        return true;
      }
      function attemptReplayContinuousQueuedEventInMap(queuedEvent, key, map) {
        if (attemptReplayContinuousQueuedEvent(queuedEvent)) {
          map.delete(key);
        }
      }
      function replayUnblockedEvents() {
        hasScheduledReplayAttempt = false;
        if (queuedFocus !== null && attemptReplayContinuousQueuedEvent(queuedFocus)) {
          queuedFocus = null;
        }
        if (queuedDrag !== null && attemptReplayContinuousQueuedEvent(queuedDrag)) {
          queuedDrag = null;
        }
        if (queuedMouse !== null && attemptReplayContinuousQueuedEvent(queuedMouse)) {
          queuedMouse = null;
        }
        queuedPointers.forEach(attemptReplayContinuousQueuedEventInMap);
        queuedPointerCaptures.forEach(attemptReplayContinuousQueuedEventInMap);
      }
      function scheduleCallbackIfUnblocked(queuedEvent, unblocked) {
        if (queuedEvent.blockedOn === unblocked) {
          queuedEvent.blockedOn = null;
          if (!hasScheduledReplayAttempt) {
            hasScheduledReplayAttempt = true;
            Scheduler.unstable_scheduleCallback(Scheduler.unstable_NormalPriority, replayUnblockedEvents);
          }
        }
      }
      var lastScheduledReplayQueue = null;
      function replayUnblockedFormActions(formReplayingQueue) {
        if (lastScheduledReplayQueue === formReplayingQueue) {
          lastScheduledReplayQueue = null;
        }
        for (var i = 0;i < formReplayingQueue.length; i += 3) {
          var form = formReplayingQueue[i];
          var submitterOrAction = formReplayingQueue[i + 1];
          var formData = formReplayingQueue[i + 2];
          if (typeof submitterOrAction !== "function") {
            var blockedOn = findInstanceBlockingTarget(submitterOrAction || form);
            if (blockedOn === null) {
              continue;
            } else {
              break;
            }
          }
          var formInst = getInstanceFromNode(form);
          if (formInst !== null) {
            formReplayingQueue.splice(i, 3);
            i -= 3;
            dispatchReplayedFormAction(formInst, form, submitterOrAction, formData);
            continue;
          }
        }
      }
      function scheduleReplayQueueIfNeeded(formReplayingQueue) {
        if (lastScheduledReplayQueue !== formReplayingQueue) {
          lastScheduledReplayQueue = formReplayingQueue;
          Scheduler.unstable_scheduleCallback(Scheduler.unstable_NormalPriority, function() {
            return replayUnblockedFormActions(formReplayingQueue);
          });
        }
      }
      function retryIfBlockedOn(unblocked) {
        if (queuedFocus !== null) {
          scheduleCallbackIfUnblocked(queuedFocus, unblocked);
        }
        if (queuedDrag !== null) {
          scheduleCallbackIfUnblocked(queuedDrag, unblocked);
        }
        if (queuedMouse !== null) {
          scheduleCallbackIfUnblocked(queuedMouse, unblocked);
        }
        var unblock = function(queuedEvent) {
          return scheduleCallbackIfUnblocked(queuedEvent, unblocked);
        };
        queuedPointers.forEach(unblock);
        queuedPointerCaptures.forEach(unblock);
        for (var i = 0;i < queuedExplicitHydrationTargets.length; i++) {
          var queuedTarget = queuedExplicitHydrationTargets[i];
          if (queuedTarget.blockedOn === unblocked) {
            queuedTarget.blockedOn = null;
          }
        }
        while (queuedExplicitHydrationTargets.length > 0) {
          var nextExplicitTarget = queuedExplicitHydrationTargets[0];
          if (nextExplicitTarget.blockedOn !== null) {
            break;
          } else {
            attemptExplicitHydrationTarget(nextExplicitTarget);
            if (nextExplicitTarget.blockedOn === null) {
              queuedExplicitHydrationTargets.shift();
            }
          }
        }
        {
          var root2 = unblocked.getRootNode();
          var formReplayingQueue = root2.$$reactFormReplay;
          if (formReplayingQueue != null) {
            for (var _i = 0;_i < formReplayingQueue.length; _i += 3) {
              var form = formReplayingQueue[_i];
              var submitterOrAction = formReplayingQueue[_i + 1];
              var formProps = getFiberCurrentPropsFromNode(form);
              if (typeof submitterOrAction === "function") {
                if (!formProps) {
                  scheduleReplayQueueIfNeeded(formReplayingQueue);
                }
                continue;
              }
              var target = form;
              if (formProps) {
                var action = null;
                var submitter = submitterOrAction;
                if (submitter && submitter.hasAttribute("formAction")) {
                  target = submitter;
                  var submitterProps = getFiberCurrentPropsFromNode(submitter);
                  if (submitterProps) {
                    action = submitterProps.formAction;
                  } else {
                    var blockedOn = findInstanceBlockingTarget(target);
                    if (blockedOn !== null) {
                      continue;
                    }
                  }
                } else {
                  action = formProps.action;
                }
                if (typeof action === "function") {
                  formReplayingQueue[_i + 1] = action;
                } else {
                  formReplayingQueue.splice(_i, 3);
                  _i -= 3;
                }
                scheduleReplayQueueIfNeeded(formReplayingQueue);
                continue;
              }
            }
          }
        }
      }
      var ReactCurrentBatchConfig = ReactSharedInternals.ReactCurrentBatchConfig;
      var _enabled = true;
      function setEnabled(enabled) {
        _enabled = !!enabled;
      }
      function isEnabled() {
        return _enabled;
      }
      function createEventListenerWrapperWithPriority(targetContainer, domEventName, eventSystemFlags) {
        var eventPriority = getEventPriority(domEventName);
        var listenerWrapper;
        switch (eventPriority) {
          case DiscreteEventPriority:
            listenerWrapper = dispatchDiscreteEvent;
            break;
          case ContinuousEventPriority:
            listenerWrapper = dispatchContinuousEvent;
            break;
          case DefaultEventPriority:
          default:
            listenerWrapper = dispatchEvent;
            break;
        }
        return listenerWrapper.bind(null, domEventName, eventSystemFlags, targetContainer);
      }
      function dispatchDiscreteEvent(domEventName, eventSystemFlags, container, nativeEvent) {
        var previousPriority = getCurrentUpdatePriority();
        var prevTransition = ReactCurrentBatchConfig.transition;
        ReactCurrentBatchConfig.transition = null;
        try {
          setCurrentUpdatePriority(DiscreteEventPriority);
          dispatchEvent(domEventName, eventSystemFlags, container, nativeEvent);
        } finally {
          setCurrentUpdatePriority(previousPriority);
          ReactCurrentBatchConfig.transition = prevTransition;
        }
      }
      function dispatchContinuousEvent(domEventName, eventSystemFlags, container, nativeEvent) {
        var previousPriority = getCurrentUpdatePriority();
        var prevTransition = ReactCurrentBatchConfig.transition;
        ReactCurrentBatchConfig.transition = null;
        try {
          setCurrentUpdatePriority(ContinuousEventPriority);
          dispatchEvent(domEventName, eventSystemFlags, container, nativeEvent);
        } finally {
          setCurrentUpdatePriority(previousPriority);
          ReactCurrentBatchConfig.transition = prevTransition;
        }
      }
      function dispatchEvent(domEventName, eventSystemFlags, targetContainer, nativeEvent) {
        if (!_enabled) {
          return;
        }
        var blockedOn = findInstanceBlockingEvent(nativeEvent);
        if (blockedOn === null) {
          dispatchEventForPluginEventSystem(domEventName, eventSystemFlags, nativeEvent, return_targetInst, targetContainer);
          clearIfContinuousEvent(domEventName, nativeEvent);
          return;
        }
        if (queueIfContinuousEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent)) {
          nativeEvent.stopPropagation();
          return;
        }
        clearIfContinuousEvent(domEventName, nativeEvent);
        if (eventSystemFlags & IS_CAPTURE_PHASE && isDiscreteEventThatRequiresHydration(domEventName)) {
          while (blockedOn !== null) {
            var fiber = getInstanceFromNode(blockedOn);
            if (fiber !== null) {
              attemptSynchronousHydration(fiber);
            }
            var nextBlockedOn = findInstanceBlockingEvent(nativeEvent);
            if (nextBlockedOn === null) {
              dispatchEventForPluginEventSystem(domEventName, eventSystemFlags, nativeEvent, return_targetInst, targetContainer);
            }
            if (nextBlockedOn === blockedOn) {
              break;
            }
            blockedOn = nextBlockedOn;
          }
          if (blockedOn !== null) {
            nativeEvent.stopPropagation();
          }
          return;
        }
        dispatchEventForPluginEventSystem(domEventName, eventSystemFlags, nativeEvent, null, targetContainer);
      }
      function findInstanceBlockingEvent(nativeEvent) {
        var nativeEventTarget = getEventTarget(nativeEvent);
        return findInstanceBlockingTarget(nativeEventTarget);
      }
      var return_targetInst = null;
      function findInstanceBlockingTarget(targetNode) {
        return_targetInst = null;
        var targetInst = getClosestInstanceFromNode(targetNode);
        if (targetInst !== null) {
          var nearestMounted = getNearestMountedFiber(targetInst);
          if (nearestMounted === null) {
            targetInst = null;
          } else {
            var tag = nearestMounted.tag;
            if (tag === SuspenseComponent) {
              var instance = getSuspenseInstanceFromFiber(nearestMounted);
              if (instance !== null) {
                return instance;
              }
              targetInst = null;
            } else if (tag === HostRoot) {
              var root2 = nearestMounted.stateNode;
              if (isRootDehydrated(root2)) {
                return getContainerFromFiber(nearestMounted);
              }
              targetInst = null;
            } else if (nearestMounted !== targetInst) {
              targetInst = null;
            }
          }
        }
        return_targetInst = targetInst;
        return null;
      }
      function getEventPriority(domEventName) {
        switch (domEventName) {
          case "cancel":
          case "click":
          case "close":
          case "contextmenu":
          case "copy":
          case "cut":
          case "auxclick":
          case "dblclick":
          case "dragend":
          case "dragstart":
          case "drop":
          case "focusin":
          case "focusout":
          case "input":
          case "invalid":
          case "keydown":
          case "keypress":
          case "keyup":
          case "mousedown":
          case "mouseup":
          case "paste":
          case "pause":
          case "play":
          case "pointercancel":
          case "pointerdown":
          case "pointerup":
          case "ratechange":
          case "reset":
          case "resize":
          case "seeked":
          case "submit":
          case "touchcancel":
          case "touchend":
          case "touchstart":
          case "volumechange":
          case "change":
          case "selectionchange":
          case "textInput":
          case "compositionstart":
          case "compositionend":
          case "compositionupdate":
          case "beforeblur":
          case "afterblur":
          case "beforeinput":
          case "blur":
          case "fullscreenchange":
          case "focus":
          case "hashchange":
          case "popstate":
          case "select":
          case "selectstart":
            return DiscreteEventPriority;
          case "drag":
          case "dragenter":
          case "dragexit":
          case "dragleave":
          case "dragover":
          case "mousemove":
          case "mouseout":
          case "mouseover":
          case "pointermove":
          case "pointerout":
          case "pointerover":
          case "scroll":
          case "toggle":
          case "touchmove":
          case "wheel":
          case "mouseenter":
          case "mouseleave":
          case "pointerenter":
          case "pointerleave":
            return ContinuousEventPriority;
          case "message": {
            var schedulerPriority = getCurrentPriorityLevel();
            switch (schedulerPriority) {
              case ImmediatePriority:
                return DiscreteEventPriority;
              case UserBlockingPriority:
                return ContinuousEventPriority;
              case NormalPriority$1:
              case LowPriority:
                return DefaultEventPriority;
              case IdlePriority:
                return IdleEventPriority;
              default:
                return DefaultEventPriority;
            }
          }
          default:
            return DefaultEventPriority;
        }
      }
      function addEventBubbleListener(target, eventType, listener) {
        target.addEventListener(eventType, listener, false);
        return listener;
      }
      function addEventCaptureListener(target, eventType, listener) {
        target.addEventListener(eventType, listener, true);
        return listener;
      }
      function addEventCaptureListenerWithPassiveFlag(target, eventType, listener, passive) {
        target.addEventListener(eventType, listener, {
          capture: true,
          passive
        });
        return listener;
      }
      function addEventBubbleListenerWithPassiveFlag(target, eventType, listener, passive) {
        target.addEventListener(eventType, listener, {
          passive
        });
        return listener;
      }
      var root = null;
      var startText = null;
      var fallbackText = null;
      function initialize(nativeEventTarget) {
        root = nativeEventTarget;
        startText = getText();
        return true;
      }
      function reset() {
        root = null;
        startText = null;
        fallbackText = null;
      }
      function getData() {
        if (fallbackText) {
          return fallbackText;
        }
        var start;
        var startValue = startText;
        var startLength = startValue.length;
        var end;
        var endValue = getText();
        var endLength = endValue.length;
        for (start = 0;start < startLength; start++) {
          if (startValue[start] !== endValue[start]) {
            break;
          }
        }
        var minEnd = startLength - start;
        for (end = 1;end <= minEnd; end++) {
          if (startValue[startLength - end] !== endValue[endLength - end]) {
            break;
          }
        }
        var sliceTail = end > 1 ? 1 - end : undefined;
        fallbackText = endValue.slice(start, sliceTail);
        return fallbackText;
      }
      function getText() {
        if ("value" in root) {
          return root.value;
        }
        return root.textContent;
      }
      var END_KEYCODES = [9, 13, 27, 32];
      var START_KEYCODE = 229;
      var canUseCompositionEvent = canUseDOM && "CompositionEvent" in window;
      var documentMode = null;
      if (canUseDOM && "documentMode" in document) {
        documentMode = document.documentMode;
      }
      var canUseTextInputEvent = canUseDOM && "TextEvent" in window && !documentMode;
      var useFallbackCompositionData = canUseDOM && (!canUseCompositionEvent || documentMode && documentMode > 8 && documentMode <= 11);
      var SPACEBAR_CODE = 32;
      var SPACEBAR_CHAR = String.fromCharCode(SPACEBAR_CODE);
      function registerEvents$3() {
        registerTwoPhaseEvent("onBeforeInput", ["compositionend", "keypress", "textInput", "paste"]);
        registerTwoPhaseEvent("onCompositionEnd", ["compositionend", "focusout", "keydown", "keypress", "keyup", "mousedown"]);
        registerTwoPhaseEvent("onCompositionStart", ["compositionstart", "focusout", "keydown", "keypress", "keyup", "mousedown"]);
        registerTwoPhaseEvent("onCompositionUpdate", ["compositionupdate", "focusout", "keydown", "keypress", "keyup", "mousedown"]);
      }
      var hasSpaceKeypress = false;
      function isKeypressCommand(nativeEvent) {
        return (nativeEvent.ctrlKey || nativeEvent.altKey || nativeEvent.metaKey) && !(nativeEvent.ctrlKey && nativeEvent.altKey);
      }
      function getCompositionEventType(domEventName) {
        switch (domEventName) {
          case "compositionstart":
            return "onCompositionStart";
          case "compositionend":
            return "onCompositionEnd";
          case "compositionupdate":
            return "onCompositionUpdate";
        }
      }
      function isFallbackCompositionStart(domEventName, nativeEvent) {
        return domEventName === "keydown" && nativeEvent.keyCode === START_KEYCODE;
      }
      function isFallbackCompositionEnd(domEventName, nativeEvent) {
        switch (domEventName) {
          case "keyup":
            return END_KEYCODES.indexOf(nativeEvent.keyCode) !== -1;
          case "keydown":
            return nativeEvent.keyCode !== START_KEYCODE;
          case "keypress":
          case "mousedown":
          case "focusout":
            return true;
          default:
            return false;
        }
      }
      function getDataFromCustomEvent(nativeEvent) {
        var detail = nativeEvent.detail;
        if (typeof detail === "object" && "data" in detail) {
          return detail.data;
        }
        return null;
      }
      function isUsingKoreanIME(nativeEvent) {
        return nativeEvent.locale === "ko";
      }
      var isComposing = false;
      function extractCompositionEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget) {
        var eventType;
        var fallbackData;
        if (canUseCompositionEvent) {
          eventType = getCompositionEventType(domEventName);
        } else if (!isComposing) {
          if (isFallbackCompositionStart(domEventName, nativeEvent)) {
            eventType = "onCompositionStart";
          }
        } else if (isFallbackCompositionEnd(domEventName, nativeEvent)) {
          eventType = "onCompositionEnd";
        }
        if (!eventType) {
          return null;
        }
        if (useFallbackCompositionData && !isUsingKoreanIME(nativeEvent)) {
          if (!isComposing && eventType === "onCompositionStart") {
            isComposing = initialize(nativeEventTarget);
          } else if (eventType === "onCompositionEnd") {
            if (isComposing) {
              fallbackData = getData();
            }
          }
        }
        var listeners = accumulateTwoPhaseListeners(targetInst, eventType);
        if (listeners.length > 0) {
          var event = new SyntheticCompositionEvent(eventType, domEventName, null, nativeEvent, nativeEventTarget);
          dispatchQueue.push({
            event,
            listeners
          });
          if (fallbackData) {
            event.data = fallbackData;
          } else {
            var customData = getDataFromCustomEvent(nativeEvent);
            if (customData !== null) {
              event.data = customData;
            }
          }
        }
      }
      function getNativeBeforeInputChars(domEventName, nativeEvent) {
        switch (domEventName) {
          case "compositionend":
            return getDataFromCustomEvent(nativeEvent);
          case "keypress":
            var which = nativeEvent.which;
            if (which !== SPACEBAR_CODE) {
              return null;
            }
            hasSpaceKeypress = true;
            return SPACEBAR_CHAR;
          case "textInput":
            var chars = nativeEvent.data;
            if (chars === SPACEBAR_CHAR && hasSpaceKeypress) {
              return null;
            }
            return chars;
          default:
            return null;
        }
      }
      function getFallbackBeforeInputChars(domEventName, nativeEvent) {
        if (isComposing) {
          if (domEventName === "compositionend" || !canUseCompositionEvent && isFallbackCompositionEnd(domEventName, nativeEvent)) {
            var chars = getData();
            reset();
            isComposing = false;
            return chars;
          }
          return null;
        }
        switch (domEventName) {
          case "paste":
            return null;
          case "keypress":
            if (!isKeypressCommand(nativeEvent)) {
              if (nativeEvent.char && nativeEvent.char.length > 1) {
                return nativeEvent.char;
              } else if (nativeEvent.which) {
                return String.fromCharCode(nativeEvent.which);
              }
            }
            return null;
          case "compositionend":
            return useFallbackCompositionData && !isUsingKoreanIME(nativeEvent) ? null : nativeEvent.data;
          default:
            return null;
        }
      }
      function extractBeforeInputEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget) {
        var chars;
        if (canUseTextInputEvent) {
          chars = getNativeBeforeInputChars(domEventName, nativeEvent);
        } else {
          chars = getFallbackBeforeInputChars(domEventName, nativeEvent);
        }
        if (!chars) {
          return null;
        }
        var listeners = accumulateTwoPhaseListeners(targetInst, "onBeforeInput");
        if (listeners.length > 0) {
          var event = new SyntheticInputEvent("onBeforeInput", "beforeinput", null, nativeEvent, nativeEventTarget);
          dispatchQueue.push({
            event,
            listeners
          });
          event.data = chars;
        }
      }
      function extractEvents$5(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
        extractCompositionEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
        extractBeforeInputEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
      }
      var supportedInputTypes = {
        color: true,
        date: true,
        datetime: true,
        "datetime-local": true,
        email: true,
        month: true,
        number: true,
        password: true,
        range: true,
        search: true,
        tel: true,
        text: true,
        time: true,
        url: true,
        week: true
      };
      function isTextInputElement(elem) {
        var nodeName = elem && elem.nodeName && elem.nodeName.toLowerCase();
        if (nodeName === "input") {
          return !!supportedInputTypes[elem.type];
        }
        if (nodeName === "textarea") {
          return true;
        }
        return false;
      }
      function isEventSupported(eventNameSuffix) {
        if (!canUseDOM) {
          return false;
        }
        var eventName = "on" + eventNameSuffix;
        var isSupported = eventName in document;
        if (!isSupported) {
          var element = document.createElement("div");
          element.setAttribute(eventName, "return;");
          isSupported = typeof element[eventName] === "function";
        }
        return isSupported;
      }
      function registerEvents$2() {
        registerTwoPhaseEvent("onChange", ["change", "click", "focusin", "focusout", "input", "keydown", "keyup", "selectionchange"]);
      }
      function createAndAccumulateChangeEvent(dispatchQueue, inst, nativeEvent, target) {
        enqueueStateRestore(target);
        var listeners = accumulateTwoPhaseListeners(inst, "onChange");
        if (listeners.length > 0) {
          var event = new SyntheticEvent("onChange", "change", null, nativeEvent, target);
          dispatchQueue.push({
            event,
            listeners
          });
        }
      }
      var activeElement$1 = null;
      var activeElementInst$1 = null;
      function shouldUseChangeEvent(elem) {
        var nodeName = elem.nodeName && elem.nodeName.toLowerCase();
        return nodeName === "select" || nodeName === "input" && elem.type === "file";
      }
      function manualDispatchChangeEvent(nativeEvent) {
        var dispatchQueue = [];
        createAndAccumulateChangeEvent(dispatchQueue, activeElementInst$1, nativeEvent, getEventTarget(nativeEvent));
        batchedUpdates(runEventInBatch, dispatchQueue);
      }
      function runEventInBatch(dispatchQueue) {
        processDispatchQueue(dispatchQueue, 0);
      }
      function getInstIfValueChanged(targetInst) {
        var targetNode = getNodeFromInstance(targetInst);
        if (updateValueIfChanged(targetNode)) {
          return targetInst;
        }
      }
      function getTargetInstForChangeEvent(domEventName, targetInst) {
        if (domEventName === "change") {
          return targetInst;
        }
      }
      var isInputEventSupported = false;
      if (canUseDOM) {
        isInputEventSupported = isEventSupported("input") && (!document.documentMode || document.documentMode > 9);
      }
      function startWatchingForValueChange(target, targetInst) {
        activeElement$1 = target;
        activeElementInst$1 = targetInst;
        activeElement$1.attachEvent("onpropertychange", handlePropertyChange);
      }
      function stopWatchingForValueChange() {
        if (!activeElement$1) {
          return;
        }
        activeElement$1.detachEvent("onpropertychange", handlePropertyChange);
        activeElement$1 = null;
        activeElementInst$1 = null;
      }
      function handlePropertyChange(nativeEvent) {
        if (nativeEvent.propertyName !== "value") {
          return;
        }
        if (getInstIfValueChanged(activeElementInst$1)) {
          manualDispatchChangeEvent(nativeEvent);
        }
      }
      function handleEventsForInputEventPolyfill(domEventName, target, targetInst) {
        if (domEventName === "focusin") {
          stopWatchingForValueChange();
          startWatchingForValueChange(target, targetInst);
        } else if (domEventName === "focusout") {
          stopWatchingForValueChange();
        }
      }
      function getTargetInstForInputEventPolyfill(domEventName, targetInst) {
        if (domEventName === "selectionchange" || domEventName === "keyup" || domEventName === "keydown") {
          return getInstIfValueChanged(activeElementInst$1);
        }
      }
      function shouldUseClickEvent(elem) {
        var nodeName = elem.nodeName;
        return nodeName && nodeName.toLowerCase() === "input" && (elem.type === "checkbox" || elem.type === "radio");
      }
      function getTargetInstForClickEvent(domEventName, targetInst) {
        if (domEventName === "click") {
          return getInstIfValueChanged(targetInst);
        }
      }
      function getTargetInstForInputOrChangeEvent(domEventName, targetInst) {
        if (domEventName === "input" || domEventName === "change") {
          return getInstIfValueChanged(targetInst);
        }
      }
      function handleControlledInputBlur(node, props) {
        if (node.type !== "number") {
          return;
        }
        {
          var isControlled = props.value != null;
          if (isControlled) {
            setDefaultValue(node, "number", node.value);
          }
        }
      }
      function extractEvents$4(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
        var targetNode = targetInst ? getNodeFromInstance(targetInst) : window;
        var getTargetInstFunc, handleEventFunc;
        if (shouldUseChangeEvent(targetNode)) {
          getTargetInstFunc = getTargetInstForChangeEvent;
        } else if (isTextInputElement(targetNode)) {
          if (isInputEventSupported) {
            getTargetInstFunc = getTargetInstForInputOrChangeEvent;
          } else {
            getTargetInstFunc = getTargetInstForInputEventPolyfill;
            handleEventFunc = handleEventsForInputEventPolyfill;
          }
        } else if (shouldUseClickEvent(targetNode)) {
          getTargetInstFunc = getTargetInstForClickEvent;
        } else if (targetInst && isCustomElement(targetInst.elementType)) {
          getTargetInstFunc = getTargetInstForChangeEvent;
        }
        if (getTargetInstFunc) {
          var inst = getTargetInstFunc(domEventName, targetInst);
          if (inst) {
            createAndAccumulateChangeEvent(dispatchQueue, inst, nativeEvent, nativeEventTarget);
            return;
          }
        }
        if (handleEventFunc) {
          handleEventFunc(domEventName, targetNode, targetInst);
        }
        if (domEventName === "focusout" && targetInst) {
          var props = targetInst.memoizedProps;
          handleControlledInputBlur(targetNode, props);
        }
      }
      function registerEvents$1() {
        registerDirectEvent("onMouseEnter", ["mouseout", "mouseover"]);
        registerDirectEvent("onMouseLeave", ["mouseout", "mouseover"]);
        registerDirectEvent("onPointerEnter", ["pointerout", "pointerover"]);
        registerDirectEvent("onPointerLeave", ["pointerout", "pointerover"]);
      }
      function extractEvents$3(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
        var isOverEvent = domEventName === "mouseover" || domEventName === "pointerover";
        var isOutEvent = domEventName === "mouseout" || domEventName === "pointerout";
        if (isOverEvent && !isReplayingEvent(nativeEvent)) {
          var related = nativeEvent.relatedTarget || nativeEvent.fromElement;
          if (related) {
            if (getClosestInstanceFromNode(related) || isContainerMarkedAsRoot(related)) {
              return;
            }
          }
        }
        if (!isOutEvent && !isOverEvent) {
          return;
        }
        var win;
        if (nativeEventTarget.window === nativeEventTarget) {
          win = nativeEventTarget;
        } else {
          var doc = nativeEventTarget.ownerDocument;
          if (doc) {
            win = doc.defaultView || doc.parentWindow;
          } else {
            win = window;
          }
        }
        var from;
        var to;
        if (isOutEvent) {
          var _related = nativeEvent.relatedTarget || nativeEvent.toElement;
          from = targetInst;
          to = _related ? getClosestInstanceFromNode(_related) : null;
          if (to !== null) {
            var nearestMounted = getNearestMountedFiber(to);
            var tag = to.tag;
            if (to !== nearestMounted || tag !== HostComponent && tag !== HostSingleton && tag !== HostText) {
              to = null;
            }
          }
        } else {
          from = null;
          to = targetInst;
        }
        if (from === to) {
          return;
        }
        var SyntheticEventCtor = SyntheticMouseEvent;
        var leaveEventType = "onMouseLeave";
        var enterEventType = "onMouseEnter";
        var eventTypePrefix = "mouse";
        if (domEventName === "pointerout" || domEventName === "pointerover") {
          SyntheticEventCtor = SyntheticPointerEvent;
          leaveEventType = "onPointerLeave";
          enterEventType = "onPointerEnter";
          eventTypePrefix = "pointer";
        }
        var fromNode = from == null ? win : getNodeFromInstance(from);
        var toNode = to == null ? win : getNodeFromInstance(to);
        var leave = new SyntheticEventCtor(leaveEventType, eventTypePrefix + "leave", from, nativeEvent, nativeEventTarget);
        leave.target = fromNode;
        leave.relatedTarget = toNode;
        var enter = null;
        var nativeTargetInst = getClosestInstanceFromNode(nativeEventTarget);
        if (nativeTargetInst === targetInst) {
          var enterEvent = new SyntheticEventCtor(enterEventType, eventTypePrefix + "enter", to, nativeEvent, nativeEventTarget);
          enterEvent.target = toNode;
          enterEvent.relatedTarget = fromNode;
          enter = enterEvent;
        }
        accumulateEnterLeaveTwoPhaseListeners(dispatchQueue, leave, enter, from, to);
      }
      function getLeafNode(node) {
        while (node && node.firstChild) {
          node = node.firstChild;
        }
        return node;
      }
      function getSiblingNode(node) {
        while (node) {
          if (node.nextSibling) {
            return node.nextSibling;
          }
          node = node.parentNode;
        }
      }
      function getNodeForCharacterOffset(root2, offset) {
        var node = getLeafNode(root2);
        var nodeStart = 0;
        var nodeEnd = 0;
        while (node) {
          if (node.nodeType === TEXT_NODE) {
            nodeEnd = nodeStart + node.textContent.length;
            if (nodeStart <= offset && nodeEnd >= offset) {
              return {
                node,
                offset: offset - nodeStart
              };
            }
            nodeStart = nodeEnd;
          }
          node = getLeafNode(getSiblingNode(node));
        }
      }
      function getOffsets(outerNode) {
        var ownerDocument = outerNode.ownerDocument;
        var win = ownerDocument && ownerDocument.defaultView || window;
        var selection = win.getSelection && win.getSelection();
        if (!selection || selection.rangeCount === 0) {
          return null;
        }
        var { anchorNode, anchorOffset, focusNode, focusOffset } = selection;
        try {
          anchorNode.nodeType;
          focusNode.nodeType;
        } catch (e) {
          return null;
        }
        return getModernOffsetsFromPoints(outerNode, anchorNode, anchorOffset, focusNode, focusOffset);
      }
      function getModernOffsetsFromPoints(outerNode, anchorNode, anchorOffset, focusNode, focusOffset) {
        var length = 0;
        var start = -1;
        var end = -1;
        var indexWithinAnchor = 0;
        var indexWithinFocus = 0;
        var node = outerNode;
        var parentNode = null;
        outer:
          while (true) {
            var next = null;
            while (true) {
              if (node === anchorNode && (anchorOffset === 0 || node.nodeType === TEXT_NODE)) {
                start = length + anchorOffset;
              }
              if (node === focusNode && (focusOffset === 0 || node.nodeType === TEXT_NODE)) {
                end = length + focusOffset;
              }
              if (node.nodeType === TEXT_NODE) {
                length += node.nodeValue.length;
              }
              if ((next = node.firstChild) === null) {
                break;
              }
              parentNode = node;
              node = next;
            }
            while (true) {
              if (node === outerNode) {
                break outer;
              }
              if (parentNode === anchorNode && ++indexWithinAnchor === anchorOffset) {
                start = length;
              }
              if (parentNode === focusNode && ++indexWithinFocus === focusOffset) {
                end = length;
              }
              if ((next = node.nextSibling) !== null) {
                break;
              }
              node = parentNode;
              parentNode = node.parentNode;
            }
            node = next;
          }
        if (start === -1 || end === -1) {
          return null;
        }
        return {
          start,
          end
        };
      }
      function setOffsets(node, offsets) {
        var doc = node.ownerDocument || document;
        var win = doc && doc.defaultView || window;
        if (!win.getSelection) {
          return;
        }
        var selection = win.getSelection();
        var length = node.textContent.length;
        var start = Math.min(offsets.start, length);
        var end = offsets.end === undefined ? start : Math.min(offsets.end, length);
        if (!selection.extend && start > end) {
          var temp = end;
          end = start;
          start = temp;
        }
        var startMarker = getNodeForCharacterOffset(node, start);
        var endMarker = getNodeForCharacterOffset(node, end);
        if (startMarker && endMarker) {
          if (selection.rangeCount === 1 && selection.anchorNode === startMarker.node && selection.anchorOffset === startMarker.offset && selection.focusNode === endMarker.node && selection.focusOffset === endMarker.offset) {
            return;
          }
          var range = doc.createRange();
          range.setStart(startMarker.node, startMarker.offset);
          selection.removeAllRanges();
          if (start > end) {
            selection.addRange(range);
            selection.extend(endMarker.node, endMarker.offset);
          } else {
            range.setEnd(endMarker.node, endMarker.offset);
            selection.addRange(range);
          }
        }
      }
      function isTextNode(node) {
        return node && node.nodeType === TEXT_NODE;
      }
      function containsNode(outerNode, innerNode) {
        if (!outerNode || !innerNode) {
          return false;
        } else if (outerNode === innerNode) {
          return true;
        } else if (isTextNode(outerNode)) {
          return false;
        } else if (isTextNode(innerNode)) {
          return containsNode(outerNode, innerNode.parentNode);
        } else if ("contains" in outerNode) {
          return outerNode.contains(innerNode);
        } else if (outerNode.compareDocumentPosition) {
          return !!(outerNode.compareDocumentPosition(innerNode) & 16);
        } else {
          return false;
        }
      }
      function isInDocument(node) {
        return node && node.ownerDocument && containsNode(node.ownerDocument.documentElement, node);
      }
      function isSameOriginFrame(iframe) {
        try {
          return typeof iframe.contentWindow.location.href === "string";
        } catch (err) {
          return false;
        }
      }
      function getActiveElementDeep() {
        var win = window;
        var element = getActiveElement();
        while (element instanceof win.HTMLIFrameElement) {
          if (isSameOriginFrame(element)) {
            win = element.contentWindow;
          } else {
            return element;
          }
          element = getActiveElement(win.document);
        }
        return element;
      }
      function hasSelectionCapabilities(elem) {
        var nodeName = elem && elem.nodeName && elem.nodeName.toLowerCase();
        return nodeName && (nodeName === "input" && (elem.type === "text" || elem.type === "search" || elem.type === "tel" || elem.type === "url" || elem.type === "password") || nodeName === "textarea" || elem.contentEditable === "true");
      }
      function getSelectionInformation() {
        var focusedElem = getActiveElementDeep();
        return {
          focusedElem,
          selectionRange: hasSelectionCapabilities(focusedElem) ? getSelection$1(focusedElem) : null
        };
      }
      function restoreSelection(priorSelectionInformation) {
        var curFocusedElem = getActiveElementDeep();
        var priorFocusedElem = priorSelectionInformation.focusedElem;
        var priorSelectionRange = priorSelectionInformation.selectionRange;
        if (curFocusedElem !== priorFocusedElem && isInDocument(priorFocusedElem)) {
          if (priorSelectionRange !== null && hasSelectionCapabilities(priorFocusedElem)) {
            setSelection(priorFocusedElem, priorSelectionRange);
          }
          var ancestors = [];
          var ancestor = priorFocusedElem;
          while (ancestor = ancestor.parentNode) {
            if (ancestor.nodeType === ELEMENT_NODE) {
              ancestors.push({
                element: ancestor,
                left: ancestor.scrollLeft,
                top: ancestor.scrollTop
              });
            }
          }
          if (typeof priorFocusedElem.focus === "function") {
            priorFocusedElem.focus();
          }
          for (var i = 0;i < ancestors.length; i++) {
            var info2 = ancestors[i];
            info2.element.scrollLeft = info2.left;
            info2.element.scrollTop = info2.top;
          }
        }
      }
      function getSelection$1(input) {
        var selection;
        if ("selectionStart" in input) {
          selection = {
            start: input.selectionStart,
            end: input.selectionEnd
          };
        } else {
          selection = getOffsets(input);
        }
        return selection || {
          start: 0,
          end: 0
        };
      }
      function setSelection(input, offsets) {
        var start = offsets.start;
        var end = offsets.end;
        if (end === undefined) {
          end = start;
        }
        if ("selectionStart" in input) {
          input.selectionStart = start;
          input.selectionEnd = Math.min(end, input.value.length);
        } else {
          setOffsets(input, offsets);
        }
      }
      var skipSelectionChangeEvent = canUseDOM && "documentMode" in document && document.documentMode <= 11;
      function registerEvents() {
        registerTwoPhaseEvent("onSelect", ["focusout", "contextmenu", "dragend", "focusin", "keydown", "keyup", "mousedown", "mouseup", "selectionchange"]);
      }
      var activeElement = null;
      var activeElementInst = null;
      var lastSelection = null;
      var mouseDown = false;
      function getSelection(node) {
        if ("selectionStart" in node && hasSelectionCapabilities(node)) {
          return {
            start: node.selectionStart,
            end: node.selectionEnd
          };
        } else {
          var win = node.ownerDocument && node.ownerDocument.defaultView || window;
          var selection = win.getSelection();
          return {
            anchorNode: selection.anchorNode,
            anchorOffset: selection.anchorOffset,
            focusNode: selection.focusNode,
            focusOffset: selection.focusOffset
          };
        }
      }
      function getEventTargetDocument(eventTarget) {
        return eventTarget.window === eventTarget ? eventTarget.document : eventTarget.nodeType === DOCUMENT_NODE ? eventTarget : eventTarget.ownerDocument;
      }
      function constructSelectEvent(dispatchQueue, nativeEvent, nativeEventTarget) {
        var doc = getEventTargetDocument(nativeEventTarget);
        if (mouseDown || activeElement == null || activeElement !== getActiveElement(doc)) {
          return;
        }
        var currentSelection = getSelection(activeElement);
        if (!lastSelection || !shallowEqual(lastSelection, currentSelection)) {
          lastSelection = currentSelection;
          var listeners = accumulateTwoPhaseListeners(activeElementInst, "onSelect");
          if (listeners.length > 0) {
            var event = new SyntheticEvent("onSelect", "select", null, nativeEvent, nativeEventTarget);
            dispatchQueue.push({
              event,
              listeners
            });
            event.target = activeElement;
          }
        }
      }
      function extractEvents$2(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
        var targetNode = targetInst ? getNodeFromInstance(targetInst) : window;
        switch (domEventName) {
          case "focusin":
            if (isTextInputElement(targetNode) || targetNode.contentEditable === "true") {
              activeElement = targetNode;
              activeElementInst = targetInst;
              lastSelection = null;
            }
            break;
          case "focusout":
            activeElement = null;
            activeElementInst = null;
            lastSelection = null;
            break;
          case "mousedown":
            mouseDown = true;
            break;
          case "contextmenu":
          case "mouseup":
          case "dragend":
            mouseDown = false;
            constructSelectEvent(dispatchQueue, nativeEvent, nativeEventTarget);
            break;
          case "selectionchange":
            if (skipSelectionChangeEvent) {
              break;
            }
          case "keydown":
          case "keyup":
            constructSelectEvent(dispatchQueue, nativeEvent, nativeEventTarget);
        }
      }
      function makePrefixMap(styleProp, eventName) {
        var prefixes = {};
        prefixes[styleProp.toLowerCase()] = eventName.toLowerCase();
        prefixes["Webkit" + styleProp] = "webkit" + eventName;
        prefixes["Moz" + styleProp] = "moz" + eventName;
        return prefixes;
      }
      var vendorPrefixes = {
        animationend: makePrefixMap("Animation", "AnimationEnd"),
        animationiteration: makePrefixMap("Animation", "AnimationIteration"),
        animationstart: makePrefixMap("Animation", "AnimationStart"),
        transitionend: makePrefixMap("Transition", "TransitionEnd")
      };
      var prefixedEventNames = {};
      var style = {};
      if (canUseDOM) {
        style = document.createElement("div").style;
        if (!("AnimationEvent" in window)) {
          delete vendorPrefixes.animationend.animation;
          delete vendorPrefixes.animationiteration.animation;
          delete vendorPrefixes.animationstart.animation;
        }
        if (!("TransitionEvent" in window)) {
          delete vendorPrefixes.transitionend.transition;
        }
      }
      function getVendorPrefixedEventName(eventName) {
        if (prefixedEventNames[eventName]) {
          return prefixedEventNames[eventName];
        } else if (!vendorPrefixes[eventName]) {
          return eventName;
        }
        var prefixMap = vendorPrefixes[eventName];
        for (var styleProp in prefixMap) {
          if (prefixMap.hasOwnProperty(styleProp) && styleProp in style) {
            return prefixedEventNames[eventName] = prefixMap[styleProp];
          }
        }
        return eventName;
      }
      var ANIMATION_END = getVendorPrefixedEventName("animationend");
      var ANIMATION_ITERATION = getVendorPrefixedEventName("animationiteration");
      var ANIMATION_START = getVendorPrefixedEventName("animationstart");
      var TRANSITION_END = getVendorPrefixedEventName("transitionend");
      var topLevelEventsToReactNames = new Map;
      var simpleEventPluginEvents = ["abort", "auxClick", "cancel", "canPlay", "canPlayThrough", "click", "close", "contextMenu", "copy", "cut", "drag", "dragEnd", "dragEnter", "dragExit", "dragLeave", "dragOver", "dragStart", "drop", "durationChange", "emptied", "encrypted", "ended", "error", "gotPointerCapture", "input", "invalid", "keyDown", "keyPress", "keyUp", "load", "loadedData", "loadedMetadata", "loadStart", "lostPointerCapture", "mouseDown", "mouseMove", "mouseOut", "mouseOver", "mouseUp", "paste", "pause", "play", "playing", "pointerCancel", "pointerDown", "pointerMove", "pointerOut", "pointerOver", "pointerUp", "progress", "rateChange", "reset", "resize", "seeked", "seeking", "stalled", "submit", "suspend", "timeUpdate", "touchCancel", "touchEnd", "touchStart", "volumeChange", "scroll", "toggle", "touchMove", "waiting", "wheel"];
      function registerSimpleEvent(domEventName, reactName) {
        topLevelEventsToReactNames.set(domEventName, reactName);
        registerTwoPhaseEvent(reactName, [domEventName]);
      }
      function registerSimpleEvents() {
        for (var i = 0;i < simpleEventPluginEvents.length; i++) {
          var eventName = simpleEventPluginEvents[i];
          var domEventName = eventName.toLowerCase();
          var capitalizedEvent = eventName[0].toUpperCase() + eventName.slice(1);
          registerSimpleEvent(domEventName, "on" + capitalizedEvent);
        }
        registerSimpleEvent(ANIMATION_END, "onAnimationEnd");
        registerSimpleEvent(ANIMATION_ITERATION, "onAnimationIteration");
        registerSimpleEvent(ANIMATION_START, "onAnimationStart");
        registerSimpleEvent("dblclick", "onDoubleClick");
        registerSimpleEvent("focusin", "onFocus");
        registerSimpleEvent("focusout", "onBlur");
        registerSimpleEvent(TRANSITION_END, "onTransitionEnd");
      }
      function extractEvents$1(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
        var reactName = topLevelEventsToReactNames.get(domEventName);
        if (reactName === undefined) {
          return;
        }
        var SyntheticEventCtor = SyntheticEvent;
        var reactEventType = domEventName;
        switch (domEventName) {
          case "keypress":
            if (getEventCharCode(nativeEvent) === 0) {
              return;
            }
          case "keydown":
          case "keyup":
            SyntheticEventCtor = SyntheticKeyboardEvent;
            break;
          case "focusin":
            reactEventType = "focus";
            SyntheticEventCtor = SyntheticFocusEvent;
            break;
          case "focusout":
            reactEventType = "blur";
            SyntheticEventCtor = SyntheticFocusEvent;
            break;
          case "beforeblur":
          case "afterblur":
            SyntheticEventCtor = SyntheticFocusEvent;
            break;
          case "click":
            if (nativeEvent.button === 2) {
              return;
            }
          case "auxclick":
          case "dblclick":
          case "mousedown":
          case "mousemove":
          case "mouseup":
          case "mouseout":
          case "mouseover":
          case "contextmenu":
            SyntheticEventCtor = SyntheticMouseEvent;
            break;
          case "drag":
          case "dragend":
          case "dragenter":
          case "dragexit":
          case "dragleave":
          case "dragover":
          case "dragstart":
          case "drop":
            SyntheticEventCtor = SyntheticDragEvent;
            break;
          case "touchcancel":
          case "touchend":
          case "touchmove":
          case "touchstart":
            SyntheticEventCtor = SyntheticTouchEvent;
            break;
          case ANIMATION_END:
          case ANIMATION_ITERATION:
          case ANIMATION_START:
            SyntheticEventCtor = SyntheticAnimationEvent;
            break;
          case TRANSITION_END:
            SyntheticEventCtor = SyntheticTransitionEvent;
            break;
          case "scroll":
            SyntheticEventCtor = SyntheticUIEvent;
            break;
          case "wheel":
            SyntheticEventCtor = SyntheticWheelEvent;
            break;
          case "copy":
          case "cut":
          case "paste":
            SyntheticEventCtor = SyntheticClipboardEvent;
            break;
          case "gotpointercapture":
          case "lostpointercapture":
          case "pointercancel":
          case "pointerdown":
          case "pointermove":
          case "pointerout":
          case "pointerover":
          case "pointerup":
            SyntheticEventCtor = SyntheticPointerEvent;
            break;
        }
        var inCapturePhase = (eventSystemFlags & IS_CAPTURE_PHASE) !== 0;
        {
          var accumulateTargetOnly = !inCapturePhase && domEventName === "scroll";
          var _listeners = accumulateSinglePhaseListeners(targetInst, reactName, nativeEvent.type, inCapturePhase, accumulateTargetOnly);
          if (_listeners.length > 0) {
            var _event = new SyntheticEventCtor(reactName, reactEventType, null, nativeEvent, nativeEventTarget);
            dispatchQueue.push({
              event: _event,
              listeners: _listeners
            });
          }
        }
      }
      registerSimpleEvents();
      registerEvents$1();
      registerEvents$2();
      registerEvents();
      registerEvents$3();
      function extractEvents(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
        extractEvents$1(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags);
        var shouldProcessPolyfillPlugins = (eventSystemFlags & SHOULD_NOT_PROCESS_POLYFILL_EVENT_PLUGINS) === 0;
        if (shouldProcessPolyfillPlugins) {
          extractEvents$3(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
          extractEvents$4(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
          extractEvents$2(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
          extractEvents$5(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
          {
            extractEvents$6(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
          }
        }
      }
      var mediaEventTypes = ["abort", "canplay", "canplaythrough", "durationchange", "emptied", "encrypted", "ended", "error", "loadeddata", "loadedmetadata", "loadstart", "pause", "play", "playing", "progress", "ratechange", "resize", "seeked", "seeking", "stalled", "suspend", "timeupdate", "volumechange", "waiting"];
      var nonDelegatedEvents = new Set(["cancel", "close", "invalid", "load", "scroll", "toggle"].concat(mediaEventTypes));
      function executeDispatch(event, listener, currentTarget) {
        var type = event.type || "unknown-event";
        event.currentTarget = currentTarget;
        invokeGuardedCallbackAndCatchFirstError(type, listener, undefined, event);
        event.currentTarget = null;
      }
      function processDispatchQueueItemsInOrder(event, dispatchListeners, inCapturePhase) {
        var previousInstance;
        if (inCapturePhase) {
          for (var i = dispatchListeners.length - 1;i >= 0; i--) {
            var _dispatchListeners$i = dispatchListeners[i], instance = _dispatchListeners$i.instance, currentTarget = _dispatchListeners$i.currentTarget, listener = _dispatchListeners$i.listener;
            if (instance !== previousInstance && event.isPropagationStopped()) {
              return;
            }
            executeDispatch(event, listener, currentTarget);
            previousInstance = instance;
          }
        } else {
          for (var _i = 0;_i < dispatchListeners.length; _i++) {
            var _dispatchListeners$_i = dispatchListeners[_i], _instance = _dispatchListeners$_i.instance, _currentTarget = _dispatchListeners$_i.currentTarget, _listener = _dispatchListeners$_i.listener;
            if (_instance !== previousInstance && event.isPropagationStopped()) {
              return;
            }
            executeDispatch(event, _listener, _currentTarget);
            previousInstance = _instance;
          }
        }
      }
      function processDispatchQueue(dispatchQueue, eventSystemFlags) {
        var inCapturePhase = (eventSystemFlags & IS_CAPTURE_PHASE) !== 0;
        for (var i = 0;i < dispatchQueue.length; i++) {
          var _dispatchQueue$i = dispatchQueue[i], event = _dispatchQueue$i.event, listeners = _dispatchQueue$i.listeners;
          processDispatchQueueItemsInOrder(event, listeners, inCapturePhase);
        }
        rethrowCaughtError();
      }
      function dispatchEventsForPlugins(domEventName, eventSystemFlags, nativeEvent, targetInst, targetContainer) {
        var nativeEventTarget = getEventTarget(nativeEvent);
        var dispatchQueue = [];
        extractEvents(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags);
        processDispatchQueue(dispatchQueue, eventSystemFlags);
      }
      function listenToNonDelegatedEvent(domEventName, targetElement) {
        {
          if (!nonDelegatedEvents.has(domEventName)) {
            error('Did not expect a listenToNonDelegatedEvent() call for "%s". ' + "This is a bug in React. Please file an issue.", domEventName);
          }
        }
        var isCapturePhaseListener = false;
        var listenerSet = getEventListenerSet(targetElement);
        var listenerSetKey = getListenerSetKey(domEventName, isCapturePhaseListener);
        if (!listenerSet.has(listenerSetKey)) {
          addTrappedEventListener(targetElement, domEventName, IS_NON_DELEGATED, isCapturePhaseListener);
          listenerSet.add(listenerSetKey);
        }
      }
      function listenToNativeEvent(domEventName, isCapturePhaseListener, target) {
        {
          if (nonDelegatedEvents.has(domEventName) && !isCapturePhaseListener) {
            error('Did not expect a listenToNativeEvent() call for "%s" in the bubble phase. ' + "This is a bug in React. Please file an issue.", domEventName);
          }
        }
        var eventSystemFlags = 0;
        if (isCapturePhaseListener) {
          eventSystemFlags |= IS_CAPTURE_PHASE;
        }
        addTrappedEventListener(target, domEventName, eventSystemFlags, isCapturePhaseListener);
      }
      var listeningMarker = "_reactListening" + Math.random().toString(36).slice(2);
      function listenToAllSupportedEvents(rootContainerElement) {
        if (!rootContainerElement[listeningMarker]) {
          rootContainerElement[listeningMarker] = true;
          allNativeEvents.forEach(function(domEventName) {
            if (domEventName !== "selectionchange") {
              if (!nonDelegatedEvents.has(domEventName)) {
                listenToNativeEvent(domEventName, false, rootContainerElement);
              }
              listenToNativeEvent(domEventName, true, rootContainerElement);
            }
          });
          var ownerDocument = rootContainerElement.nodeType === DOCUMENT_NODE ? rootContainerElement : rootContainerElement.ownerDocument;
          if (ownerDocument !== null) {
            if (!ownerDocument[listeningMarker]) {
              ownerDocument[listeningMarker] = true;
              listenToNativeEvent("selectionchange", false, ownerDocument);
            }
          }
        }
      }
      function addTrappedEventListener(targetContainer, domEventName, eventSystemFlags, isCapturePhaseListener, isDeferredListenerForLegacyFBSupport) {
        var listener = createEventListenerWrapperWithPriority(targetContainer, domEventName, eventSystemFlags);
        var isPassiveListener = undefined;
        if (passiveBrowserEventsSupported) {
          if (domEventName === "touchstart" || domEventName === "touchmove" || domEventName === "wheel") {
            isPassiveListener = true;
          }
        }
        targetContainer = targetContainer;
        if (isCapturePhaseListener) {
          if (isPassiveListener !== undefined) {
            addEventCaptureListenerWithPassiveFlag(targetContainer, domEventName, listener, isPassiveListener);
          } else {
            addEventCaptureListener(targetContainer, domEventName, listener);
          }
        } else {
          if (isPassiveListener !== undefined) {
            addEventBubbleListenerWithPassiveFlag(targetContainer, domEventName, listener, isPassiveListener);
          } else {
            addEventBubbleListener(targetContainer, domEventName, listener);
          }
        }
      }
      function isMatchingRootContainer(grandContainer, targetContainer) {
        return grandContainer === targetContainer || grandContainer.nodeType === COMMENT_NODE && grandContainer.parentNode === targetContainer;
      }
      function dispatchEventForPluginEventSystem(domEventName, eventSystemFlags, nativeEvent, targetInst, targetContainer) {
        var ancestorInst = targetInst;
        if ((eventSystemFlags & IS_EVENT_HANDLE_NON_MANAGED_NODE) === 0 && (eventSystemFlags & IS_NON_DELEGATED) === 0) {
          var targetContainerNode = targetContainer;
          if (targetInst !== null) {
            var node = targetInst;
            mainLoop:
              while (true) {
                if (node === null) {
                  return;
                }
                var nodeTag = node.tag;
                if (nodeTag === HostRoot || nodeTag === HostPortal) {
                  var container = node.stateNode.containerInfo;
                  if (isMatchingRootContainer(container, targetContainerNode)) {
                    break;
                  }
                  if (nodeTag === HostPortal) {
                    var grandNode = node.return;
                    while (grandNode !== null) {
                      var grandTag = grandNode.tag;
                      if (grandTag === HostRoot || grandTag === HostPortal) {
                        var grandContainer = grandNode.stateNode.containerInfo;
                        if (isMatchingRootContainer(grandContainer, targetContainerNode)) {
                          return;
                        }
                      }
                      grandNode = grandNode.return;
                    }
                  }
                  while (container !== null) {
                    var parentNode = getClosestInstanceFromNode(container);
                    if (parentNode === null) {
                      return;
                    }
                    var parentTag = parentNode.tag;
                    if (parentTag === HostComponent || parentTag === HostText || parentTag === HostHoistable || parentTag === HostSingleton) {
                      node = ancestorInst = parentNode;
                      continue mainLoop;
                    }
                    container = container.parentNode;
                  }
                }
                node = node.return;
              }
          }
        }
        batchedUpdates(function() {
          return dispatchEventsForPlugins(domEventName, eventSystemFlags, nativeEvent, ancestorInst);
        });
      }
      function createDispatchListener(instance, listener, currentTarget) {
        return {
          instance,
          listener,
          currentTarget
        };
      }
      function accumulateSinglePhaseListeners(targetFiber, reactName, nativeEventType, inCapturePhase, accumulateTargetOnly, nativeEvent) {
        var captureName = reactName !== null ? reactName + "Capture" : null;
        var reactEventName = inCapturePhase ? captureName : reactName;
        var listeners = [];
        var instance = targetFiber;
        var lastHostComponent = null;
        while (instance !== null) {
          var _instance2 = instance, stateNode = _instance2.stateNode, tag = _instance2.tag;
          if ((tag === HostComponent || tag === HostHoistable || tag === HostSingleton) && stateNode !== null) {
            lastHostComponent = stateNode;
            if (reactEventName !== null) {
              var listener = getListener(instance, reactEventName);
              if (listener != null) {
                listeners.push(createDispatchListener(instance, listener, lastHostComponent));
              }
            }
          }
          if (accumulateTargetOnly) {
            break;
          }
          instance = instance.return;
        }
        return listeners;
      }
      function accumulateTwoPhaseListeners(targetFiber, reactName) {
        var captureName = reactName + "Capture";
        var listeners = [];
        var instance = targetFiber;
        while (instance !== null) {
          var _instance3 = instance, stateNode = _instance3.stateNode, tag = _instance3.tag;
          if ((tag === HostComponent || tag === HostHoistable || tag === HostSingleton) && stateNode !== null) {
            var currentTarget = stateNode;
            var captureListener = getListener(instance, captureName);
            if (captureListener != null) {
              listeners.unshift(createDispatchListener(instance, captureListener, currentTarget));
            }
            var bubbleListener = getListener(instance, reactName);
            if (bubbleListener != null) {
              listeners.push(createDispatchListener(instance, bubbleListener, currentTarget));
            }
          }
          instance = instance.return;
        }
        return listeners;
      }
      function getParent(inst) {
        if (inst === null) {
          return null;
        }
        do {
          inst = inst.return;
        } while (inst && inst.tag !== HostComponent && inst.tag !== HostSingleton);
        if (inst) {
          return inst;
        }
        return null;
      }
      function getLowestCommonAncestor(instA, instB) {
        var nodeA = instA;
        var nodeB = instB;
        var depthA = 0;
        for (var tempA = nodeA;tempA; tempA = getParent(tempA)) {
          depthA++;
        }
        var depthB = 0;
        for (var tempB = nodeB;tempB; tempB = getParent(tempB)) {
          depthB++;
        }
        while (depthA - depthB > 0) {
          nodeA = getParent(nodeA);
          depthA--;
        }
        while (depthB - depthA > 0) {
          nodeB = getParent(nodeB);
          depthB--;
        }
        var depth = depthA;
        while (depth--) {
          if (nodeA === nodeB || nodeB !== null && nodeA === nodeB.alternate) {
            return nodeA;
          }
          nodeA = getParent(nodeA);
          nodeB = getParent(nodeB);
        }
        return null;
      }
      function accumulateEnterLeaveListenersForEvent(dispatchQueue, event, target, common, inCapturePhase) {
        var registrationName = event._reactName;
        var listeners = [];
        var instance = target;
        while (instance !== null) {
          if (instance === common) {
            break;
          }
          var _instance4 = instance, alternate = _instance4.alternate, stateNode = _instance4.stateNode, tag = _instance4.tag;
          if (alternate !== null && alternate === common) {
            break;
          }
          if ((tag === HostComponent || tag === HostHoistable || tag === HostSingleton) && stateNode !== null) {
            var currentTarget = stateNode;
            if (inCapturePhase) {
              var captureListener = getListener(instance, registrationName);
              if (captureListener != null) {
                listeners.unshift(createDispatchListener(instance, captureListener, currentTarget));
              }
            } else if (!inCapturePhase) {
              var bubbleListener = getListener(instance, registrationName);
              if (bubbleListener != null) {
                listeners.push(createDispatchListener(instance, bubbleListener, currentTarget));
              }
            }
          }
          instance = instance.return;
        }
        if (listeners.length !== 0) {
          dispatchQueue.push({
            event,
            listeners
          });
        }
      }
      function accumulateEnterLeaveTwoPhaseListeners(dispatchQueue, leaveEvent, enterEvent, from, to) {
        var common = from && to ? getLowestCommonAncestor(from, to) : null;
        if (from !== null) {
          accumulateEnterLeaveListenersForEvent(dispatchQueue, leaveEvent, from, common, false);
        }
        if (to !== null && enterEvent !== null) {
          accumulateEnterLeaveListenersForEvent(dispatchQueue, enterEvent, to, common, true);
        }
      }
      function getListenerSetKey(domEventName, capture) {
        return domEventName + "__" + (capture ? "capture" : "bubble");
      }
      var didWarnControlledToUncontrolled = false;
      var didWarnUncontrolledToControlled = false;
      var didWarnInvalidHydration = false;
      var didWarnFormActionType = false;
      var didWarnFormActionName = false;
      var didWarnFormActionTarget = false;
      var didWarnFormActionMethod = false;
      var canDiffStyleForHydrationWarning;
      {
        canDiffStyleForHydrationWarning = disableIEWorkarounds;
      }
      function validatePropertiesInDevelopment(type, props) {
        {
          validateProperties$2(type, props);
          validateProperties$1(type, props);
          validateProperties(type, props, {
            registrationNameDependencies,
            possibleRegistrationNames
          });
          if (props.contentEditable && !props.suppressContentEditableWarning && props.children != null) {
            error("A component is `contentEditable` and contains `children` managed by " + "React. It is now your responsibility to guarantee that none of " + "those nodes are unexpectedly modified or duplicated. This is " + "probably not intentional.");
          }
        }
      }
      function validateFormActionInDevelopment(tag, key, value, props) {
        {
          if (value == null) {
            return;
          }
          if (tag === "form") {
            if (key === "formAction") {
              error("You can only pass the formAction prop to <input> or <button>. Use the action prop on <form>.");
            } else if (typeof value === "function") {
              if ((props.encType != null || props.method != null) && !didWarnFormActionMethod) {
                didWarnFormActionMethod = true;
                error("Cannot specify a encType or method for a form that specifies a " + "function as the action. React provides those automatically. " + "They will get overridden.");
              }
              if (props.target != null && !didWarnFormActionTarget) {
                didWarnFormActionTarget = true;
                error("Cannot specify a target for a form that specifies a function as the action. " + "The function will always be executed in the same window.");
              }
            }
          } else if (tag === "input" || tag === "button") {
            if (key === "action") {
              error("You can only pass the action prop to <form>. Use the formAction prop on <input> or <button>.");
            } else if (tag === "input" && props.type !== "submit" && props.type !== "image" && !didWarnFormActionType) {
              didWarnFormActionType = true;
              error('An input can only specify a formAction along with type="submit" or type="image".');
            } else if (tag === "button" && props.type != null && props.type !== "submit" && !didWarnFormActionType) {
              didWarnFormActionType = true;
              error('A button can only specify a formAction along with type="submit" or no type.');
            } else if (typeof value === "function") {
              if (props.name != null && !didWarnFormActionName) {
                didWarnFormActionName = true;
                error('Cannot specify a "name" prop for a button that specifies a function as a formAction. ' + "React needs it to encode which action should be invoked. It will get overridden.");
              }
              if ((props.formEncType != null || props.formMethod != null) && !didWarnFormActionMethod) {
                didWarnFormActionMethod = true;
                error("Cannot specify a formEncType or formMethod for a button that specifies a " + "function as a formAction. React provides those automatically. They will get overridden.");
              }
              if (props.formTarget != null && !didWarnFormActionTarget) {
                didWarnFormActionTarget = true;
                error("Cannot specify a formTarget for a button that specifies a function as a formAction. " + "The function will always be executed in the same window.");
              }
            }
          } else {
            if (key === "action") {
              error("You can only pass the action prop to <form>.");
            } else {
              error("You can only pass the formAction prop to <input> or <button>.");
            }
          }
        }
      }
      function warnForPropDifference(propName, serverValue, clientValue) {
        {
          if (didWarnInvalidHydration) {
            return;
          }
          if (serverValue === clientValue) {
            return;
          }
          var normalizedClientValue = normalizeMarkupForTextOrAttribute(clientValue);
          var normalizedServerValue = normalizeMarkupForTextOrAttribute(serverValue);
          if (normalizedServerValue === normalizedClientValue) {
            return;
          }
          didWarnInvalidHydration = true;
          error("Prop `%s` did not match. Server: %s Client: %s", propName, JSON.stringify(normalizedServerValue), JSON.stringify(normalizedClientValue));
        }
      }
      function warnForExtraAttributes(attributeNames) {
        {
          if (didWarnInvalidHydration) {
            return;
          }
          didWarnInvalidHydration = true;
          var names = [];
          attributeNames.forEach(function(name) {
            names.push(name);
          });
          error("Extra attributes from the server: %s", names);
        }
      }
      function warnForInvalidEventListener(registrationName, listener) {
        {
          if (listener === false) {
            error("Expected `%s` listener to be a function, instead got `false`.\n\n" + "If you used to conditionally omit it with %s={condition && value}, " + "pass %s={condition ? value : undefined} instead.", registrationName, registrationName, registrationName);
          } else {
            error("Expected `%s` listener to be a function, instead got a value of `%s` type.", registrationName, typeof listener);
          }
        }
      }
      function normalizeHTML(parent, html) {
        {
          var testElement = parent.namespaceURI === MATH_NAMESPACE || parent.namespaceURI === SVG_NAMESPACE ? parent.ownerDocument.createElementNS(parent.namespaceURI, parent.tagName) : parent.ownerDocument.createElement(parent.tagName);
          testElement.innerHTML = html;
          return testElement.innerHTML;
        }
      }
      var NORMALIZE_NEWLINES_REGEX = /\r\n?/g;
      var NORMALIZE_NULL_AND_REPLACEMENT_REGEX = /\u0000|\uFFFD/g;
      function normalizeMarkupForTextOrAttribute(markup) {
        {
          checkHtmlStringCoercion(markup);
        }
        var markupString = typeof markup === "string" ? markup : "" + markup;
        return markupString.replace(NORMALIZE_NEWLINES_REGEX, `
`).replace(NORMALIZE_NULL_AND_REPLACEMENT_REGEX, "");
      }
      function checkForUnmatchedText(serverText, clientText, isConcurrentMode, shouldWarnDev) {
        var normalizedClientText = normalizeMarkupForTextOrAttribute(clientText);
        var normalizedServerText = normalizeMarkupForTextOrAttribute(serverText);
        if (normalizedServerText === normalizedClientText) {
          return;
        }
        if (shouldWarnDev) {
          {
            if (!didWarnInvalidHydration) {
              didWarnInvalidHydration = true;
              error('Text content did not match. Server: "%s" Client: "%s"', normalizedServerText, normalizedClientText);
            }
          }
        }
        if (isConcurrentMode && enableClientRenderFallbackOnTextMismatch) {
          throw new Error("Text content does not match server-rendered HTML.");
        }
      }
      function noop$1() {}
      function trapClickOnNonInteractiveElement(node) {
        node.onclick = noop$1;
      }
      var xlinkNamespace = "http://www.w3.org/1999/xlink";
      var xmlNamespace = "http://www.w3.org/XML/1998/namespace";
      function setProp(domElement, tag, key, value, props, prevValue) {
        switch (key) {
          case "children": {
            if (typeof value === "string") {
              {
                validateTextNesting(value, tag);
              }
              var canSetTextContent = tag !== "body" && (tag !== "textarea" || value !== "");
              if (canSetTextContent) {
                setTextContent(domElement, value);
              }
            } else if (typeof value === "number") {
              {
                validateTextNesting("" + value, tag);
              }
              var _canSetTextContent = tag !== "body";
              if (_canSetTextContent) {
                setTextContent(domElement, "" + value);
              }
            }
            break;
          }
          case "className":
            setValueForKnownAttribute(domElement, "class", value);
            break;
          case "tabIndex":
            setValueForKnownAttribute(domElement, "tabindex", value);
            break;
          case "dir":
          case "role":
          case "viewBox":
          case "width":
          case "height": {
            setValueForKnownAttribute(domElement, key, value);
            break;
          }
          case "style": {
            setValueForStyles(domElement, value, prevValue);
            break;
          }
          case "src":
          case "href": {
            {
              if (value === "") {
                {
                  if (key === "src") {
                    error('An empty string ("") was passed to the %s attribute. ' + "This may cause the browser to download the whole page again over the network. " + "To fix this, either do not render the element at all " + "or pass null to %s instead of an empty string.", key, key);
                  } else {
                    error('An empty string ("") was passed to the %s attribute. ' + "To fix this, either do not render the element at all " + "or pass null to %s instead of an empty string.", key, key);
                  }
                }
                domElement.removeAttribute(key);
                break;
              }
            }
            if (value == null || typeof value === "function" || typeof value === "symbol" || typeof value === "boolean") {
              domElement.removeAttribute(key);
              break;
            }
            {
              checkAttributeStringCoercion(value, key);
            }
            var sanitizedValue = sanitizeURL("" + value);
            domElement.setAttribute(key, sanitizedValue);
            break;
          }
          case "action":
          case "formAction": {
            {
              validateFormActionInDevelopment(tag, key, value, props);
            }
            {
              if (typeof value === "function") {
                domElement.setAttribute(key, "javascript:throw new Error('" + "A React form was unexpectedly submitted. If you called form.submit() manually, " + "consider using form.requestSubmit() instead. If you're trying to use " + "event.stopPropagation() in a submit event handler, consider also calling " + "event.preventDefault()." + "')");
                break;
              } else if (typeof prevValue === "function") {
                if (key === "formAction") {
                  if (tag !== "input") {
                    setProp(domElement, tag, "name", props.name, props, null);
                  }
                  setProp(domElement, tag, "formEncType", props.formEncType, props, null);
                  setProp(domElement, tag, "formMethod", props.formMethod, props, null);
                  setProp(domElement, tag, "formTarget", props.formTarget, props, null);
                } else {
                  setProp(domElement, tag, "encType", props.encType, props, null);
                  setProp(domElement, tag, "method", props.method, props, null);
                  setProp(domElement, tag, "target", props.target, props, null);
                }
              }
            }
            if (value == null || !enableFormActions || typeof value === "symbol" || typeof value === "boolean") {
              domElement.removeAttribute(key);
              break;
            }
            {
              checkAttributeStringCoercion(value, key);
            }
            var _sanitizedValue = sanitizeURL("" + value);
            domElement.setAttribute(key, _sanitizedValue);
            break;
          }
          case "onClick": {
            if (value != null) {
              if (typeof value !== "function") {
                warnForInvalidEventListener(key, value);
              }
              trapClickOnNonInteractiveElement(domElement);
            }
            break;
          }
          case "onScroll": {
            if (value != null) {
              if (typeof value !== "function") {
                warnForInvalidEventListener(key, value);
              }
              listenToNonDelegatedEvent("scroll", domElement);
            }
            break;
          }
          case "dangerouslySetInnerHTML": {
            if (value != null) {
              if (typeof value !== "object" || !("__html" in value)) {
                throw new Error("`props.dangerouslySetInnerHTML` must be in the form `{__html: ...}`. " + "Please visit https://reactjs.org/link/dangerously-set-inner-html " + "for more information.");
              }
              var nextHtml = value.__html;
              if (nextHtml != null) {
                if (props.children != null) {
                  throw new Error("Can only set one of `children` or `props.dangerouslySetInnerHTML`.");
                }
                {
                  domElement.innerHTML = nextHtml;
                }
              }
            }
            break;
          }
          case "multiple": {
            domElement.multiple = value && typeof value !== "function" && typeof value !== "symbol";
            break;
          }
          case "muted": {
            domElement.muted = value && typeof value !== "function" && typeof value !== "symbol";
            break;
          }
          case "suppressContentEditableWarning":
          case "suppressHydrationWarning":
          case "defaultValue":
          case "defaultChecked":
          case "innerHTML": {
            break;
          }
          case "autoFocus": {
            break;
          }
          case "xlinkHref": {
            if (value == null || typeof value === "function" || typeof value === "boolean" || typeof value === "symbol") {
              domElement.removeAttribute("xlink:href");
              break;
            }
            {
              checkAttributeStringCoercion(value, key);
            }
            var _sanitizedValue2 = sanitizeURL("" + value);
            domElement.setAttributeNS(xlinkNamespace, "xlink:href", _sanitizedValue2);
            break;
          }
          case "contentEditable":
          case "spellCheck":
          case "draggable":
          case "value":
          case "autoReverse":
          case "externalResourcesRequired":
          case "focusable":
          case "preserveAlpha": {
            if (value != null && typeof value !== "function" && typeof value !== "symbol") {
              {
                checkAttributeStringCoercion(value, key);
              }
              domElement.setAttribute(key, "" + value);
            } else {
              domElement.removeAttribute(key);
            }
            break;
          }
          case "allowFullScreen":
          case "async":
          case "autoPlay":
          case "controls":
          case "default":
          case "defer":
          case "disabled":
          case "disablePictureInPicture":
          case "disableRemotePlayback":
          case "formNoValidate":
          case "hidden":
          case "loop":
          case "noModule":
          case "noValidate":
          case "open":
          case "playsInline":
          case "readOnly":
          case "required":
          case "reversed":
          case "scoped":
          case "seamless":
          case "itemScope": {
            if (value && typeof value !== "function" && typeof value !== "symbol") {
              domElement.setAttribute(key, "");
            } else {
              domElement.removeAttribute(key);
            }
            break;
          }
          case "capture":
          case "download": {
            if (value === true) {
              domElement.setAttribute(key, "");
            } else if (value !== false && value != null && typeof value !== "function" && typeof value !== "symbol") {
              {
                checkAttributeStringCoercion(value, key);
              }
              domElement.setAttribute(key, value);
            } else {
              domElement.removeAttribute(key);
            }
            break;
          }
          case "cols":
          case "rows":
          case "size":
          case "span": {
            if (value != null && typeof value !== "function" && typeof value !== "symbol" && !isNaN(value) && value >= 1) {
              {
                checkAttributeStringCoercion(value, key);
              }
              domElement.setAttribute(key, value);
            } else {
              domElement.removeAttribute(key);
            }
            break;
          }
          case "rowSpan":
          case "start": {
            if (value != null && typeof value !== "function" && typeof value !== "symbol" && !isNaN(value)) {
              {
                checkAttributeStringCoercion(value, key);
              }
              domElement.setAttribute(key, value);
            } else {
              domElement.removeAttribute(key);
            }
            break;
          }
          case "xlinkActuate":
            setValueForNamespacedAttribute(domElement, xlinkNamespace, "xlink:actuate", value);
            break;
          case "xlinkArcrole":
            setValueForNamespacedAttribute(domElement, xlinkNamespace, "xlink:arcrole", value);
            break;
          case "xlinkRole":
            setValueForNamespacedAttribute(domElement, xlinkNamespace, "xlink:role", value);
            break;
          case "xlinkShow":
            setValueForNamespacedAttribute(domElement, xlinkNamespace, "xlink:show", value);
            break;
          case "xlinkTitle":
            setValueForNamespacedAttribute(domElement, xlinkNamespace, "xlink:title", value);
            break;
          case "xlinkType":
            setValueForNamespacedAttribute(domElement, xlinkNamespace, "xlink:type", value);
            break;
          case "xmlBase":
            setValueForNamespacedAttribute(domElement, xmlNamespace, "xml:base", value);
            break;
          case "xmlLang":
            setValueForNamespacedAttribute(domElement, xmlNamespace, "xml:lang", value);
            break;
          case "xmlSpace":
            setValueForNamespacedAttribute(domElement, xmlNamespace, "xml:space", value);
            break;
          case "is": {
            {
              if (prevValue != null) {
                error('Cannot update the "is" prop after it has been initialized.');
              }
            }
            setValueForAttribute(domElement, "is", value);
            break;
          }
          case "innerText":
          case "textContent": {
            break;
          }
          default: {
            if (key.length > 2 && (key[0] === "o" || key[0] === "O") && (key[1] === "n" || key[1] === "N")) {
              if (registrationNameDependencies.hasOwnProperty(key) && value != null && typeof value !== "function") {
                warnForInvalidEventListener(key, value);
              }
            } else {
              var attributeName = getAttributeAlias(key);
              setValueForAttribute(domElement, attributeName, value);
            }
          }
        }
      }
      function setPropOnCustomElement(domElement, tag, key, value, props, prevValue) {
        switch (key) {
          case "style": {
            setValueForStyles(domElement, value, prevValue);
            break;
          }
          case "dangerouslySetInnerHTML": {
            if (value != null) {
              if (typeof value !== "object" || !("__html" in value)) {
                throw new Error("`props.dangerouslySetInnerHTML` must be in the form `{__html: ...}`. " + "Please visit https://reactjs.org/link/dangerously-set-inner-html " + "for more information.");
              }
              var nextHtml = value.__html;
              if (nextHtml != null) {
                if (props.children != null) {
                  throw new Error("Can only set one of `children` or `props.dangerouslySetInnerHTML`.");
                }
                {
                  domElement.innerHTML = nextHtml;
                }
              }
            }
            break;
          }
          case "children": {
            if (typeof value === "string") {
              setTextContent(domElement, value);
            } else if (typeof value === "number") {
              setTextContent(domElement, "" + value);
            }
            break;
          }
          case "onScroll": {
            if (value != null) {
              if (typeof value !== "function") {
                warnForInvalidEventListener(key, value);
              }
              listenToNonDelegatedEvent("scroll", domElement);
            }
            break;
          }
          case "onClick": {
            if (value != null) {
              if (typeof value !== "function") {
                warnForInvalidEventListener(key, value);
              }
              trapClickOnNonInteractiveElement(domElement);
            }
            break;
          }
          case "suppressContentEditableWarning":
          case "suppressHydrationWarning":
          case "innerHTML": {
            break;
          }
          case "innerText":
          case "textContent": {
            break;
          }
          default: {
            if (registrationNameDependencies.hasOwnProperty(key)) {
              if (value != null && typeof value !== "function") {
                warnForInvalidEventListener(key, value);
              }
            } else {
              {
                setValueForPropertyOnCustomComponent(domElement, key, value);
              }
            }
          }
        }
      }
      function setInitialProperties(domElement, tag, props) {
        {
          validatePropertiesInDevelopment(tag, props);
        }
        switch (tag) {
          case "div":
          case "span":
          case "svg":
          case "path":
          case "a":
          case "g":
          case "p":
          case "li": {
            break;
          }
          case "input": {
            {
              checkControlledValueProps("input", props);
            }
            listenToNonDelegatedEvent("invalid", domElement);
            var name = null;
            var type = null;
            var value = null;
            var defaultValue = null;
            var checked = null;
            var defaultChecked = null;
            for (var propKey in props) {
              if (!props.hasOwnProperty(propKey)) {
                continue;
              }
              var propValue = props[propKey];
              if (propValue == null) {
                continue;
              }
              switch (propKey) {
                case "name": {
                  name = propValue;
                  break;
                }
                case "type": {
                  type = propValue;
                  break;
                }
                case "checked": {
                  checked = propValue;
                  break;
                }
                case "defaultChecked": {
                  defaultChecked = propValue;
                  break;
                }
                case "value": {
                  value = propValue;
                  break;
                }
                case "defaultValue": {
                  defaultValue = propValue;
                  break;
                }
                case "children":
                case "dangerouslySetInnerHTML": {
                  if (propValue != null) {
                    throw new Error(tag + " is a void element tag and must neither have `children` nor " + "use `dangerouslySetInnerHTML`.");
                  }
                  break;
                }
                default: {
                  setProp(domElement, tag, propKey, propValue, props, null);
                }
              }
            }
            validateInputProps(domElement, props);
            initInput(domElement, value, defaultValue, checked, defaultChecked, type, name, false);
            track(domElement);
            return;
          }
          case "select": {
            {
              checkControlledValueProps("select", props);
            }
            listenToNonDelegatedEvent("invalid", domElement);
            var _value = null;
            var _defaultValue = null;
            var multiple = null;
            for (var _propKey in props) {
              if (!props.hasOwnProperty(_propKey)) {
                continue;
              }
              var _propValue = props[_propKey];
              if (_propValue == null) {
                continue;
              }
              switch (_propKey) {
                case "value": {
                  _value = _propValue;
                  break;
                }
                case "defaultValue": {
                  _defaultValue = _propValue;
                  break;
                }
                case "multiple": {
                  multiple = _propValue;
                }
                default: {
                  setProp(domElement, tag, _propKey, _propValue, props, null);
                }
              }
            }
            validateSelectProps(domElement, props);
            initSelect(domElement, _value, _defaultValue, multiple);
            return;
          }
          case "textarea": {
            {
              checkControlledValueProps("textarea", props);
            }
            listenToNonDelegatedEvent("invalid", domElement);
            var _value2 = null;
            var _defaultValue2 = null;
            var children = null;
            for (var _propKey2 in props) {
              if (!props.hasOwnProperty(_propKey2)) {
                continue;
              }
              var _propValue2 = props[_propKey2];
              if (_propValue2 == null) {
                continue;
              }
              switch (_propKey2) {
                case "value": {
                  _value2 = _propValue2;
                  break;
                }
                case "defaultValue": {
                  _defaultValue2 = _propValue2;
                  break;
                }
                case "children": {
                  children = _propValue2;
                  break;
                }
                case "dangerouslySetInnerHTML": {
                  if (_propValue2 != null) {
                    throw new Error("`dangerouslySetInnerHTML` does not make sense on <textarea>.");
                  }
                  break;
                }
                default: {
                  setProp(domElement, tag, _propKey2, _propValue2, props, null);
                }
              }
            }
            validateTextareaProps(domElement, props);
            initTextarea(domElement, _value2, _defaultValue2, children);
            track(domElement);
            return;
          }
          case "option": {
            validateOptionProps(domElement, props);
            for (var _propKey3 in props) {
              if (!props.hasOwnProperty(_propKey3)) {
                continue;
              }
              var _propValue3 = props[_propKey3];
              if (_propValue3 == null) {
                continue;
              }
              switch (_propKey3) {
                case "selected": {
                  domElement.selected = _propValue3 && typeof _propValue3 !== "function" && typeof _propValue3 !== "symbol";
                  break;
                }
                default: {
                  setProp(domElement, tag, _propKey3, _propValue3, props, null);
                }
              }
            }
            return;
          }
          case "dialog": {
            listenToNonDelegatedEvent("cancel", domElement);
            listenToNonDelegatedEvent("close", domElement);
            break;
          }
          case "iframe":
          case "object": {
            listenToNonDelegatedEvent("load", domElement);
            break;
          }
          case "video":
          case "audio": {
            for (var i = 0;i < mediaEventTypes.length; i++) {
              listenToNonDelegatedEvent(mediaEventTypes[i], domElement);
            }
            break;
          }
          case "image": {
            listenToNonDelegatedEvent("error", domElement);
            listenToNonDelegatedEvent("load", domElement);
            break;
          }
          case "details": {
            listenToNonDelegatedEvent("toggle", domElement);
            break;
          }
          case "embed":
          case "source":
          case "img":
          case "link": {
            listenToNonDelegatedEvent("error", domElement);
            listenToNonDelegatedEvent("load", domElement);
          }
          case "area":
          case "base":
          case "br":
          case "col":
          case "hr":
          case "keygen":
          case "meta":
          case "param":
          case "track":
          case "wbr":
          case "menuitem": {
            for (var _propKey4 in props) {
              if (!props.hasOwnProperty(_propKey4)) {
                continue;
              }
              var _propValue4 = props[_propKey4];
              if (_propValue4 == null) {
                continue;
              }
              switch (_propKey4) {
                case "children":
                case "dangerouslySetInnerHTML": {
                  throw new Error(tag + " is a void element tag and must neither have `children` nor " + "use `dangerouslySetInnerHTML`.");
                }
                default: {
                  setProp(domElement, tag, _propKey4, _propValue4, props, null);
                }
              }
            }
            return;
          }
          default: {
            if (isCustomElement(tag)) {
              for (var _propKey5 in props) {
                if (!props.hasOwnProperty(_propKey5)) {
                  continue;
                }
                var _propValue5 = props[_propKey5];
                if (_propValue5 == null) {
                  continue;
                }
                setPropOnCustomElement(domElement, tag, _propKey5, _propValue5, props, null);
              }
              return;
            }
          }
        }
        for (var _propKey6 in props) {
          if (!props.hasOwnProperty(_propKey6)) {
            continue;
          }
          var _propValue6 = props[_propKey6];
          if (_propValue6 == null) {
            continue;
          }
          setProp(domElement, tag, _propKey6, _propValue6, props, null);
        }
      }
      function updateProperties(domElement, tag, lastProps, nextProps) {
        {
          validatePropertiesInDevelopment(tag, nextProps);
        }
        switch (tag) {
          case "div":
          case "span":
          case "svg":
          case "path":
          case "a":
          case "g":
          case "p":
          case "li": {
            break;
          }
          case "input": {
            var name = null;
            var type = null;
            var value = null;
            var defaultValue = null;
            var lastDefaultValue = null;
            var checked = null;
            var defaultChecked = null;
            for (var propKey in lastProps) {
              var lastProp = lastProps[propKey];
              if (lastProps.hasOwnProperty(propKey) && lastProp != null) {
                switch (propKey) {
                  case "checked": {
                    break;
                  }
                  case "value": {
                    break;
                  }
                  case "defaultValue": {
                    lastDefaultValue = lastProp;
                  }
                  default: {
                    if (!nextProps.hasOwnProperty(propKey))
                      setProp(domElement, tag, propKey, null, nextProps, lastProp);
                  }
                }
              }
            }
            for (var _propKey7 in nextProps) {
              var nextProp = nextProps[_propKey7];
              var _lastProp = lastProps[_propKey7];
              if (nextProps.hasOwnProperty(_propKey7) && (nextProp != null || _lastProp != null)) {
                switch (_propKey7) {
                  case "type": {
                    type = nextProp;
                    break;
                  }
                  case "name": {
                    name = nextProp;
                    break;
                  }
                  case "checked": {
                    checked = nextProp;
                    break;
                  }
                  case "defaultChecked": {
                    defaultChecked = nextProp;
                    break;
                  }
                  case "value": {
                    value = nextProp;
                    break;
                  }
                  case "defaultValue": {
                    defaultValue = nextProp;
                    break;
                  }
                  case "children":
                  case "dangerouslySetInnerHTML": {
                    if (nextProp != null) {
                      throw new Error(tag + " is a void element tag and must neither have `children` nor " + "use `dangerouslySetInnerHTML`.");
                    }
                    break;
                  }
                  default: {
                    if (nextProp !== _lastProp)
                      setProp(domElement, tag, _propKey7, nextProp, nextProps, _lastProp);
                  }
                }
              }
            }
            {
              var wasControlled = lastProps.type === "checkbox" || lastProps.type === "radio" ? lastProps.checked != null : lastProps.value != null;
              var isControlled = nextProps.type === "checkbox" || nextProps.type === "radio" ? nextProps.checked != null : nextProps.value != null;
              if (!wasControlled && isControlled && !didWarnUncontrolledToControlled) {
                error("A component is changing an uncontrolled input to be controlled. " + "This is likely caused by the value changing from undefined to " + "a defined value, which should not happen. " + "Decide between using a controlled or uncontrolled input " + "element for the lifetime of the component. More info: https://reactjs.org/link/controlled-components");
                didWarnUncontrolledToControlled = true;
              }
              if (wasControlled && !isControlled && !didWarnControlledToUncontrolled) {
                error("A component is changing a controlled input to be uncontrolled. " + "This is likely caused by the value changing from a defined to " + "undefined, which should not happen. " + "Decide between using a controlled or uncontrolled input " + "element for the lifetime of the component. More info: https://reactjs.org/link/controlled-components");
                didWarnControlledToUncontrolled = true;
              }
            }
            updateInput(domElement, value, defaultValue, lastDefaultValue, checked, defaultChecked, type, name);
            return;
          }
          case "select": {
            var _value3 = null;
            var _defaultValue3 = null;
            var multiple = null;
            var wasMultiple = null;
            for (var _propKey8 in lastProps) {
              var _lastProp2 = lastProps[_propKey8];
              if (lastProps.hasOwnProperty(_propKey8) && _lastProp2 != null) {
                switch (_propKey8) {
                  case "value": {
                    break;
                  }
                  case "multiple": {
                    wasMultiple = _lastProp2;
                  }
                  default: {
                    if (!nextProps.hasOwnProperty(_propKey8))
                      setProp(domElement, tag, _propKey8, null, nextProps, _lastProp2);
                  }
                }
              }
            }
            for (var _propKey9 in nextProps) {
              var _nextProp = nextProps[_propKey9];
              var _lastProp3 = lastProps[_propKey9];
              if (nextProps.hasOwnProperty(_propKey9) && (_nextProp != null || _lastProp3 != null)) {
                switch (_propKey9) {
                  case "value": {
                    _value3 = _nextProp;
                    break;
                  }
                  case "defaultValue": {
                    _defaultValue3 = _nextProp;
                    break;
                  }
                  case "multiple": {
                    multiple = _nextProp;
                  }
                  default: {
                    if (_nextProp !== _lastProp3)
                      setProp(domElement, tag, _propKey9, _nextProp, nextProps, _lastProp3);
                  }
                }
              }
            }
            updateSelect(domElement, _value3, _defaultValue3, multiple, wasMultiple);
            return;
          }
          case "textarea": {
            var _value4 = null;
            var _defaultValue4 = null;
            for (var _propKey10 in lastProps) {
              var _lastProp4 = lastProps[_propKey10];
              if (lastProps.hasOwnProperty(_propKey10) && _lastProp4 != null && !nextProps.hasOwnProperty(_propKey10)) {
                switch (_propKey10) {
                  case "value": {
                    break;
                  }
                  case "children": {
                    break;
                  }
                  default: {
                    setProp(domElement, tag, _propKey10, null, nextProps, _lastProp4);
                  }
                }
              }
            }
            for (var _propKey11 in nextProps) {
              var _nextProp2 = nextProps[_propKey11];
              var _lastProp5 = lastProps[_propKey11];
              if (nextProps.hasOwnProperty(_propKey11) && (_nextProp2 != null || _lastProp5 != null)) {
                switch (_propKey11) {
                  case "value": {
                    _value4 = _nextProp2;
                    break;
                  }
                  case "defaultValue": {
                    _defaultValue4 = _nextProp2;
                    break;
                  }
                  case "children": {
                    break;
                  }
                  case "dangerouslySetInnerHTML": {
                    if (_nextProp2 != null) {
                      throw new Error("`dangerouslySetInnerHTML` does not make sense on <textarea>.");
                    }
                    break;
                  }
                  default: {
                    if (_nextProp2 !== _lastProp5)
                      setProp(domElement, tag, _propKey11, _nextProp2, nextProps, _lastProp5);
                  }
                }
              }
            }
            updateTextarea(domElement, _value4, _defaultValue4);
            return;
          }
          case "option": {
            for (var _propKey12 in lastProps) {
              var _lastProp6 = lastProps[_propKey12];
              if (lastProps.hasOwnProperty(_propKey12) && _lastProp6 != null && !nextProps.hasOwnProperty(_propKey12)) {
                switch (_propKey12) {
                  case "selected": {
                    domElement.selected = false;
                    break;
                  }
                  default: {
                    setProp(domElement, tag, _propKey12, null, nextProps, _lastProp6);
                  }
                }
              }
            }
            for (var _propKey13 in nextProps) {
              var _nextProp3 = nextProps[_propKey13];
              var _lastProp7 = lastProps[_propKey13];
              if (nextProps.hasOwnProperty(_propKey13) && _nextProp3 !== _lastProp7 && (_nextProp3 != null || _lastProp7 != null)) {
                switch (_propKey13) {
                  case "selected": {
                    domElement.selected = _nextProp3 && typeof _nextProp3 !== "function" && typeof _nextProp3 !== "symbol";
                    break;
                  }
                  default: {
                    setProp(domElement, tag, _propKey13, _nextProp3, nextProps, _lastProp7);
                  }
                }
              }
            }
            return;
          }
          case "img":
          case "link":
          case "area":
          case "base":
          case "br":
          case "col":
          case "embed":
          case "hr":
          case "keygen":
          case "meta":
          case "param":
          case "source":
          case "track":
          case "wbr":
          case "menuitem": {
            for (var _propKey14 in lastProps) {
              var _lastProp8 = lastProps[_propKey14];
              if (lastProps.hasOwnProperty(_propKey14) && _lastProp8 != null && !nextProps.hasOwnProperty(_propKey14)) {
                setProp(domElement, tag, _propKey14, null, nextProps, _lastProp8);
              }
            }
            for (var _propKey15 in nextProps) {
              var _nextProp4 = nextProps[_propKey15];
              var _lastProp9 = lastProps[_propKey15];
              if (nextProps.hasOwnProperty(_propKey15) && _nextProp4 !== _lastProp9 && (_nextProp4 != null || _lastProp9 != null)) {
                switch (_propKey15) {
                  case "children":
                  case "dangerouslySetInnerHTML": {
                    if (_nextProp4 != null) {
                      throw new Error(tag + " is a void element tag and must neither have `children` nor " + "use `dangerouslySetInnerHTML`.");
                    }
                    break;
                  }
                  default: {
                    setProp(domElement, tag, _propKey15, _nextProp4, nextProps, _lastProp9);
                  }
                }
              }
            }
            return;
          }
          default: {
            if (isCustomElement(tag)) {
              for (var _propKey16 in lastProps) {
                var _lastProp10 = lastProps[_propKey16];
                if (lastProps.hasOwnProperty(_propKey16) && _lastProp10 != null && !nextProps.hasOwnProperty(_propKey16)) {
                  setPropOnCustomElement(domElement, tag, _propKey16, null, nextProps, _lastProp10);
                }
              }
              for (var _propKey17 in nextProps) {
                var _nextProp5 = nextProps[_propKey17];
                var _lastProp11 = lastProps[_propKey17];
                if (nextProps.hasOwnProperty(_propKey17) && _nextProp5 !== _lastProp11 && (_nextProp5 != null || _lastProp11 != null)) {
                  setPropOnCustomElement(domElement, tag, _propKey17, _nextProp5, nextProps, _lastProp11);
                }
              }
              return;
            }
          }
        }
        for (var _propKey18 in lastProps) {
          var _lastProp12 = lastProps[_propKey18];
          if (lastProps.hasOwnProperty(_propKey18) && _lastProp12 != null && !nextProps.hasOwnProperty(_propKey18)) {
            setProp(domElement, tag, _propKey18, null, nextProps, _lastProp12);
          }
        }
        for (var _propKey19 in nextProps) {
          var _nextProp6 = nextProps[_propKey19];
          var _lastProp13 = lastProps[_propKey19];
          if (nextProps.hasOwnProperty(_propKey19) && _nextProp6 !== _lastProp13 && (_nextProp6 != null || _lastProp13 != null)) {
            setProp(domElement, tag, _propKey19, _nextProp6, nextProps, _lastProp13);
          }
        }
      }
      function getPossibleStandardName(propName) {
        {
          var lowerCasedName = propName.toLowerCase();
          if (!possibleStandardNames.hasOwnProperty(lowerCasedName)) {
            return null;
          }
          return possibleStandardNames[lowerCasedName] || null;
        }
      }
      function diffHydratedStyles(domElement, value) {
        if (value != null && typeof value !== "object") {
          throw new Error("The `style` prop expects a mapping from style properties to values, " + "not a string. For example, style={{marginRight: spacing + 'em'}} when " + "using JSX.");
        }
        if (canDiffStyleForHydrationWarning) {
          var expectedStyle = createDangerousStringForStyles(value);
          var serverValue = domElement.getAttribute("style");
          warnForPropDifference("style", serverValue, expectedStyle);
        }
      }
      function hydrateAttribute(domElement, propKey, attributeName, value, extraAttributes) {
        extraAttributes.delete(attributeName);
        var serverValue = domElement.getAttribute(attributeName);
        if (serverValue === null) {
          switch (typeof value) {
            case "undefined":
            case "function":
            case "symbol":
            case "boolean":
              return;
          }
        } else {
          if (value == null)
            ;
          else {
            switch (typeof value) {
              case "function":
              case "symbol":
              case "boolean":
                break;
              default: {
                {
                  checkAttributeStringCoercion(value, propKey);
                }
                if (serverValue === "" + value) {
                  return;
                }
              }
            }
          }
        }
        warnForPropDifference(propKey, serverValue, value);
      }
      function hydrateBooleanAttribute(domElement, propKey, attributeName, value, extraAttributes) {
        extraAttributes.delete(attributeName);
        var serverValue = domElement.getAttribute(attributeName);
        if (serverValue === null) {
          switch (typeof value) {
            case "function":
            case "symbol":
              return;
          }
          if (!value) {
            return;
          }
        } else {
          switch (typeof value) {
            case "function":
            case "symbol":
              break;
            default: {
              if (value) {
                return;
              }
            }
          }
        }
        warnForPropDifference(propKey, serverValue, value);
      }
      function hydrateOverloadedBooleanAttribute(domElement, propKey, attributeName, value, extraAttributes) {
        extraAttributes.delete(attributeName);
        var serverValue = domElement.getAttribute(attributeName);
        if (serverValue === null) {
          switch (typeof value) {
            case "undefined":
            case "function":
            case "symbol":
              return;
            default:
              if (value === false) {
                return;
              }
          }
        } else {
          if (value == null)
            ;
          else {
            switch (typeof value) {
              case "function":
              case "symbol":
                break;
              case "boolean":
                if (value === true && serverValue === "") {
                  return;
                }
                break;
              default: {
                {
                  checkAttributeStringCoercion(value, propKey);
                }
                if (serverValue === "" + value) {
                  return;
                }
              }
            }
          }
        }
        warnForPropDifference(propKey, serverValue, value);
      }
      function hydrateBooleanishAttribute(domElement, propKey, attributeName, value, extraAttributes) {
        extraAttributes.delete(attributeName);
        var serverValue = domElement.getAttribute(attributeName);
        if (serverValue === null) {
          switch (typeof value) {
            case "undefined":
            case "function":
            case "symbol":
              return;
          }
        } else {
          if (value == null)
            ;
          else {
            switch (typeof value) {
              case "function":
              case "symbol":
                break;
              default: {
                {
                  checkAttributeStringCoercion(value, attributeName);
                }
                if (serverValue === "" + value) {
                  return;
                }
              }
            }
          }
        }
        warnForPropDifference(propKey, serverValue, value);
      }
      function hydrateNumericAttribute(domElement, propKey, attributeName, value, extraAttributes) {
        extraAttributes.delete(attributeName);
        var serverValue = domElement.getAttribute(attributeName);
        if (serverValue === null) {
          switch (typeof value) {
            case "undefined":
            case "function":
            case "symbol":
            case "boolean":
              return;
            default:
              if (isNaN(value)) {
                return;
              }
          }
        } else {
          if (value == null)
            ;
          else {
            switch (typeof value) {
              case "function":
              case "symbol":
              case "boolean":
                break;
              default: {
                if (isNaN(value)) {
                  break;
                }
                {
                  checkAttributeStringCoercion(value, propKey);
                }
                if (serverValue === "" + value) {
                  return;
                }
              }
            }
          }
        }
        warnForPropDifference(propKey, serverValue, value);
      }
      function hydratePositiveNumericAttribute(domElement, propKey, attributeName, value, extraAttributes) {
        extraAttributes.delete(attributeName);
        var serverValue = domElement.getAttribute(attributeName);
        if (serverValue === null) {
          switch (typeof value) {
            case "undefined":
            case "function":
            case "symbol":
            case "boolean":
              return;
            default:
              if (isNaN(value) || value < 1) {
                return;
              }
          }
        } else {
          if (value == null)
            ;
          else {
            switch (typeof value) {
              case "function":
              case "symbol":
              case "boolean":
                break;
              default: {
                if (isNaN(value) || value < 1) {
                  break;
                }
                {
                  checkAttributeStringCoercion(value, propKey);
                }
                if (serverValue === "" + value) {
                  return;
                }
              }
            }
          }
        }
        warnForPropDifference(propKey, serverValue, value);
      }
      function hydrateSanitizedAttribute(domElement, propKey, attributeName, value, extraAttributes) {
        extraAttributes.delete(attributeName);
        var serverValue = domElement.getAttribute(attributeName);
        if (serverValue === null) {
          switch (typeof value) {
            case "undefined":
            case "function":
            case "symbol":
            case "boolean":
              return;
          }
        } else {
          if (value == null)
            ;
          else {
            switch (typeof value) {
              case "function":
              case "symbol":
              case "boolean":
                break;
              default: {
                {
                  checkAttributeStringCoercion(value, propKey);
                }
                var sanitizedValue = sanitizeURL("" + value);
                if (serverValue === sanitizedValue) {
                  return;
                }
              }
            }
          }
        }
        warnForPropDifference(propKey, serverValue, value);
      }
      function diffHydratedCustomComponent(domElement, tag, props, hostContext, extraAttributes) {
        for (var propKey in props) {
          if (!props.hasOwnProperty(propKey)) {
            continue;
          }
          var value = props[propKey];
          if (value == null) {
            continue;
          }
          if (registrationNameDependencies.hasOwnProperty(propKey)) {
            if (typeof value !== "function") {
              warnForInvalidEventListener(propKey, value);
            }
            continue;
          }
          if (props.suppressHydrationWarning === true) {
            continue;
          }
          switch (propKey) {
            case "children":
            case "suppressContentEditableWarning":
            case "suppressHydrationWarning":
            case "defaultValue":
            case "defaultChecked":
            case "innerHTML":
              continue;
            case "dangerouslySetInnerHTML":
              var serverHTML = domElement.innerHTML;
              var nextHtml = value ? value.__html : undefined;
              if (nextHtml != null) {
                var expectedHTML = normalizeHTML(domElement, nextHtml);
                warnForPropDifference(propKey, serverHTML, expectedHTML);
              }
              continue;
            case "style":
              extraAttributes.delete(propKey);
              diffHydratedStyles(domElement, value);
              continue;
            case "offsetParent":
            case "offsetTop":
            case "offsetLeft":
            case "offsetWidth":
            case "offsetHeight":
            case "isContentEditable":
            case "outerText":
            case "outerHTML": {
              extraAttributes.delete(propKey.toLowerCase());
              {
                error("Assignment to read-only property will result in a no-op: `%s`", propKey);
              }
              continue;
            }
            case "className": {
              extraAttributes.delete("class");
              var serverValue = getValueForAttributeOnCustomComponent(domElement, "class", value);
              warnForPropDifference("className", serverValue, value);
              continue;
            }
            default: {
              var hostContextDev = hostContext;
              var hostContextProd = hostContextDev.context;
              if (hostContextProd === HostContextNamespaceNone && tag !== "svg" && tag !== "math") {
                extraAttributes.delete(propKey.toLowerCase());
              } else {
                extraAttributes.delete(propKey);
              }
              var _serverValue = getValueForAttributeOnCustomComponent(domElement, propKey, value);
              warnForPropDifference(propKey, _serverValue, value);
            }
          }
        }
      }
      var EXPECTED_FORM_ACTION_URL = "javascript:throw new Error('A React form was unexpectedly submitted.')";
      function diffHydratedGenericElement(domElement, tag, props, hostContext, extraAttributes) {
        for (var propKey in props) {
          if (!props.hasOwnProperty(propKey)) {
            continue;
          }
          var value = props[propKey];
          if (value == null) {
            continue;
          }
          if (registrationNameDependencies.hasOwnProperty(propKey)) {
            if (typeof value !== "function") {
              warnForInvalidEventListener(propKey, value);
            }
            continue;
          }
          if (props.suppressHydrationWarning === true) {
            continue;
          }
          switch (propKey) {
            case "children":
            case "suppressContentEditableWarning":
            case "suppressHydrationWarning":
            case "value":
            case "checked":
            case "selected":
            case "defaultValue":
            case "defaultChecked":
            case "innerHTML":
              continue;
            case "dangerouslySetInnerHTML":
              var serverHTML = domElement.innerHTML;
              var nextHtml = value ? value.__html : undefined;
              if (nextHtml != null) {
                var expectedHTML = normalizeHTML(domElement, nextHtml);
                warnForPropDifference(propKey, serverHTML, expectedHTML);
              }
              continue;
            case "className":
              hydrateAttribute(domElement, propKey, "class", value, extraAttributes);
              continue;
            case "tabIndex":
              hydrateAttribute(domElement, propKey, "tabindex", value, extraAttributes);
              continue;
            case "style":
              extraAttributes.delete(propKey);
              diffHydratedStyles(domElement, value);
              continue;
            case "multiple": {
              extraAttributes.delete(propKey);
              var serverValue = domElement.multiple;
              warnForPropDifference(propKey, serverValue, value);
              continue;
            }
            case "muted": {
              extraAttributes.delete(propKey);
              var _serverValue2 = domElement.muted;
              warnForPropDifference(propKey, _serverValue2, value);
              continue;
            }
            case "autoFocus": {
              extraAttributes.delete("autofocus");
              var _serverValue3 = domElement.autofocus;
              warnForPropDifference(propKey, _serverValue3, value);
              continue;
            }
            case "src":
            case "href":
              {
                if (value === "") {
                  {
                    if (propKey === "src") {
                      error('An empty string ("") was passed to the %s attribute. ' + "This may cause the browser to download the whole page again over the network. " + "To fix this, either do not render the element at all " + "or pass null to %s instead of an empty string.", propKey, propKey);
                    } else {
                      error('An empty string ("") was passed to the %s attribute. ' + "To fix this, either do not render the element at all " + "or pass null to %s instead of an empty string.", propKey, propKey);
                    }
                  }
                  hydrateSanitizedAttribute(domElement, propKey, propKey, null, extraAttributes);
                  continue;
                }
              }
              hydrateSanitizedAttribute(domElement, propKey, propKey, value, extraAttributes);
              continue;
            case "action":
            case "formAction":
              {
                var _serverValue4 = domElement.getAttribute(propKey);
                if (typeof value === "function") {
                  extraAttributes.delete(propKey.toLowerCase());
                  if (propKey === "formAction") {
                    extraAttributes.delete("name");
                    extraAttributes.delete("formenctype");
                    extraAttributes.delete("formmethod");
                    extraAttributes.delete("formtarget");
                  } else {
                    extraAttributes.delete("enctype");
                    extraAttributes.delete("method");
                    extraAttributes.delete("target");
                  }
                  continue;
                } else if (_serverValue4 === EXPECTED_FORM_ACTION_URL) {
                  extraAttributes.delete(propKey.toLowerCase());
                  warnForPropDifference(propKey, "function", value);
                  continue;
                }
              }
              hydrateSanitizedAttribute(domElement, propKey, propKey.toLowerCase(), value, extraAttributes);
              continue;
            case "xlinkHref":
              hydrateSanitizedAttribute(domElement, propKey, "xlink:href", value, extraAttributes);
              continue;
            case "contentEditable": {
              hydrateBooleanishAttribute(domElement, propKey, "contenteditable", value, extraAttributes);
              continue;
            }
            case "spellCheck": {
              hydrateBooleanishAttribute(domElement, propKey, "spellcheck", value, extraAttributes);
              continue;
            }
            case "draggable":
            case "autoReverse":
            case "externalResourcesRequired":
            case "focusable":
            case "preserveAlpha": {
              hydrateBooleanishAttribute(domElement, propKey, propKey, value, extraAttributes);
              continue;
            }
            case "allowFullScreen":
            case "async":
            case "autoPlay":
            case "controls":
            case "default":
            case "defer":
            case "disabled":
            case "disablePictureInPicture":
            case "disableRemotePlayback":
            case "formNoValidate":
            case "hidden":
            case "loop":
            case "noModule":
            case "noValidate":
            case "open":
            case "playsInline":
            case "readOnly":
            case "required":
            case "reversed":
            case "scoped":
            case "seamless":
            case "itemScope": {
              hydrateBooleanAttribute(domElement, propKey, propKey.toLowerCase(), value, extraAttributes);
              continue;
            }
            case "capture":
            case "download": {
              hydrateOverloadedBooleanAttribute(domElement, propKey, propKey, value, extraAttributes);
              continue;
            }
            case "cols":
            case "rows":
            case "size":
            case "span": {
              hydratePositiveNumericAttribute(domElement, propKey, propKey, value, extraAttributes);
              continue;
            }
            case "rowSpan": {
              hydrateNumericAttribute(domElement, propKey, "rowspan", value, extraAttributes);
              continue;
            }
            case "start": {
              hydrateNumericAttribute(domElement, propKey, propKey, value, extraAttributes);
              continue;
            }
            case "xHeight":
              hydrateAttribute(domElement, propKey, "x-height", value, extraAttributes);
              continue;
            case "xlinkActuate":
              hydrateAttribute(domElement, propKey, "xlink:actuate", value, extraAttributes);
              continue;
            case "xlinkArcrole":
              hydrateAttribute(domElement, propKey, "xlink:arcrole", value, extraAttributes);
              continue;
            case "xlinkRole":
              hydrateAttribute(domElement, propKey, "xlink:role", value, extraAttributes);
              continue;
            case "xlinkShow":
              hydrateAttribute(domElement, propKey, "xlink:show", value, extraAttributes);
              continue;
            case "xlinkTitle":
              hydrateAttribute(domElement, propKey, "xlink:title", value, extraAttributes);
              continue;
            case "xlinkType":
              hydrateAttribute(domElement, propKey, "xlink:type", value, extraAttributes);
              continue;
            case "xmlBase":
              hydrateAttribute(domElement, propKey, "xml:base", value, extraAttributes);
              continue;
            case "xmlLang":
              hydrateAttribute(domElement, propKey, "xml:lang", value, extraAttributes);
              continue;
            case "xmlSpace":
              hydrateAttribute(domElement, propKey, "xml:space", value, extraAttributes);
              continue;
            default: {
              if (propKey.length > 2 && (propKey[0] === "o" || propKey[0] === "O") && (propKey[1] === "n" || propKey[1] === "N")) {
                continue;
              }
              var attributeName = getAttributeAlias(propKey);
              var isMismatchDueToBadCasing = false;
              var hostContextDev = hostContext;
              var hostContextProd = hostContextDev.context;
              if (hostContextProd === HostContextNamespaceNone && tag !== "svg" && tag !== "math") {
                extraAttributes.delete(attributeName.toLowerCase());
              } else {
                var standardName = getPossibleStandardName(propKey);
                if (standardName !== null && standardName !== propKey) {
                  isMismatchDueToBadCasing = true;
                  extraAttributes.delete(standardName);
                }
                extraAttributes.delete(attributeName);
              }
              var _serverValue5 = getValueForAttribute(domElement, attributeName, value);
              if (!isMismatchDueToBadCasing) {
                warnForPropDifference(propKey, _serverValue5, value);
              }
            }
          }
        }
      }
      function diffHydratedProperties(domElement, tag, props, isConcurrentMode, shouldWarnDev, hostContext) {
        {
          validatePropertiesInDevelopment(tag, props);
        }
        switch (tag) {
          case "dialog":
            listenToNonDelegatedEvent("cancel", domElement);
            listenToNonDelegatedEvent("close", domElement);
            break;
          case "iframe":
          case "object":
          case "embed":
            listenToNonDelegatedEvent("load", domElement);
            break;
          case "video":
          case "audio":
            for (var i = 0;i < mediaEventTypes.length; i++) {
              listenToNonDelegatedEvent(mediaEventTypes[i], domElement);
            }
            break;
          case "source":
            listenToNonDelegatedEvent("error", domElement);
            break;
          case "img":
          case "image":
          case "link":
            listenToNonDelegatedEvent("error", domElement);
            listenToNonDelegatedEvent("load", domElement);
            break;
          case "details":
            listenToNonDelegatedEvent("toggle", domElement);
            break;
          case "input":
            {
              checkControlledValueProps("input", props);
            }
            listenToNonDelegatedEvent("invalid", domElement);
            validateInputProps(domElement, props);
            initInput(domElement, props.value, props.defaultValue, props.checked, props.defaultChecked, props.type, props.name, true);
            track(domElement);
            break;
          case "option":
            validateOptionProps(domElement, props);
            break;
          case "select":
            {
              checkControlledValueProps("select", props);
            }
            listenToNonDelegatedEvent("invalid", domElement);
            validateSelectProps(domElement, props);
            break;
          case "textarea":
            {
              checkControlledValueProps("textarea", props);
            }
            listenToNonDelegatedEvent("invalid", domElement);
            validateTextareaProps(domElement, props);
            initTextarea(domElement, props.value, props.defaultValue, props.children);
            track(domElement);
            break;
        }
        var updatePayload = null;
        var children = props.children;
        if (typeof children === "string" || typeof children === "number") {
          if (domElement.textContent !== "" + children) {
            if (props.suppressHydrationWarning !== true) {
              checkForUnmatchedText(domElement.textContent, children, isConcurrentMode, shouldWarnDev);
            }
            if (!isConcurrentMode || !enableClientRenderFallbackOnTextMismatch) {
              {
                if (tag !== "body") {
                  domElement.textContent = children;
                }
              }
            }
          }
        }
        if (props.onScroll != null) {
          listenToNonDelegatedEvent("scroll", domElement);
        }
        if (props.onClick != null) {
          trapClickOnNonInteractiveElement(domElement);
        }
        if (shouldWarnDev) {
          var extraAttributes = new Set;
          var attributes = domElement.attributes;
          for (var _i7 = 0;_i7 < attributes.length; _i7++) {
            var name = attributes[_i7].name.toLowerCase();
            switch (name) {
              case "value":
                break;
              case "checked":
                break;
              case "selected":
                break;
              default:
                extraAttributes.add(attributes[_i7].name);
            }
          }
          if (isCustomElement(tag)) {
            diffHydratedCustomComponent(domElement, tag, props, hostContext, extraAttributes);
          } else {
            diffHydratedGenericElement(domElement, tag, props, hostContext, extraAttributes);
          }
          if (extraAttributes.size > 0 && props.suppressHydrationWarning !== true) {
            warnForExtraAttributes(extraAttributes);
          }
        }
        return updatePayload;
      }
      function diffHydratedText(textNode, text, isConcurrentMode) {
        var isDifferent = textNode.nodeValue !== text;
        return isDifferent;
      }
      function warnForDeletedHydratableElement(parentNode, child) {
        {
          if (didWarnInvalidHydration) {
            return;
          }
          didWarnInvalidHydration = true;
          error("Did not expect server HTML to contain a <%s> in <%s>.", child.nodeName.toLowerCase(), parentNode.nodeName.toLowerCase());
        }
      }
      function warnForDeletedHydratableText(parentNode, child) {
        {
          if (didWarnInvalidHydration) {
            return;
          }
          didWarnInvalidHydration = true;
          error('Did not expect server HTML to contain the text node "%s" in <%s>.', child.nodeValue, parentNode.nodeName.toLowerCase());
        }
      }
      function warnForInsertedHydratedElement(parentNode, tag, props) {
        {
          if (didWarnInvalidHydration) {
            return;
          }
          didWarnInvalidHydration = true;
          error("Expected server HTML to contain a matching <%s> in <%s>.", tag, parentNode.nodeName.toLowerCase());
        }
      }
      function warnForInsertedHydratedText(parentNode, text) {
        {
          if (text === "") {
            return;
          }
          if (didWarnInvalidHydration) {
            return;
          }
          didWarnInvalidHydration = true;
          error('Expected server HTML to contain a matching text node for "%s" in <%s>.', text, parentNode.nodeName.toLowerCase());
        }
      }
      function restoreControlledState(domElement, tag, props) {
        switch (tag) {
          case "input":
            restoreControlledInputState(domElement, props);
            return;
          case "textarea":
            restoreControlledTextareaState(domElement, props);
            return;
          case "select":
            restoreControlledSelectState(domElement, props);
            return;
        }
      }
      function validateLinkPropsForStyleResource(props) {
        {
          var { href, onLoad, onError, disabled } = props;
          var includedProps = [];
          if (onLoad)
            includedProps.push("`onLoad`");
          if (onError)
            includedProps.push("`onError`");
          if (disabled != null)
            includedProps.push("`disabled`");
          var includedPropsPhrase = propNamesListJoin(includedProps, "and");
          includedPropsPhrase += includedProps.length === 1 ? " prop" : " props";
          var withArticlePhrase = includedProps.length === 1 ? "an " + includedPropsPhrase : "the " + includedPropsPhrase;
          if (includedProps.length) {
            error('React encountered a <link rel="stylesheet" href="%s" ... /> with a `precedence` prop that' + " also included %s. The presence of loading and error handlers indicates an intent to manage" + " the stylesheet loading state from your from your Component code and React will not hoist or" + " deduplicate this stylesheet. If your intent was to have React hoist and deduplciate this stylesheet" + " using the `precedence` prop remove the %s, otherwise remove the `precedence` prop.", href, withArticlePhrase, includedPropsPhrase);
            return true;
          }
        }
        return false;
      }
      function propNamesListJoin(list3, combinator) {
        switch (list3.length) {
          case 0:
            return "";
          case 1:
            return list3[0];
          case 2:
            return list3[0] + " " + combinator + " " + list3[1];
          default:
            return list3.slice(0, -1).join(", ") + ", " + combinator + " " + list3[list3.length - 1];
        }
      }
      function validatePreloadArguments(href, options2) {
        {
          if (!href || typeof href !== "string") {
            var typeOfArg = getValueDescriptorExpectingObjectForWarning(href);
            error("ReactDOM.preload() expected the first argument to be a string representing an href but found %s instead.", typeOfArg);
          } else if (typeof options2 !== "object" || options2 === null) {
            var _typeOfArg = getValueDescriptorExpectingObjectForWarning(options2);
            error('ReactDOM.preload() expected the second argument to be an options argument containing at least an "as" property' + ' specifying the Resource type. It found %s instead. The href for the preload call where this warning originated is "%s".', _typeOfArg, href);
          } else {
            var as = options2.as;
            switch (as) {
              case "font": {
                if (options2.crossOrigin === "use-credentials") {
                  error('ReactDOM.preload() was called with an "as" type of "font" and with a "crossOrigin" option of "use-credentials".' + ' Fonts preloading must use crossOrigin "anonymous" to be functional. Please update your font preload to omit' + ' the crossOrigin option or change it to any other value than "use-credentials" (Browsers default all other values' + ' to anonymous mode). The href for the preload call where this warning originated is "%s"', href);
                }
                break;
              }
              case "script":
              case "style": {
                break;
              }
              default: {
                var typeOfAs = getValueDescriptorExpectingEnumForWarning(as);
                error('ReactDOM.preload() expected a valid "as" type in the options (second) argument but found %s instead.' + " Please use one of the following valid values instead: %s. The href for the preload call where this" + ' warning originated is "%s".', typeOfAs, '"style", "font", or "script"', href);
              }
            }
          }
        }
      }
      function validatePreinitArguments(href, options2) {
        {
          if (!href || typeof href !== "string") {
            var typeOfArg = getValueDescriptorExpectingObjectForWarning(href);
            error("ReactDOM.preinit() expected the first argument to be a string representing an href but found %s instead.", typeOfArg);
          } else if (typeof options2 !== "object" || options2 === null) {
            var _typeOfArg2 = getValueDescriptorExpectingObjectForWarning(options2);
            error('ReactDOM.preinit() expected the second argument to be an options argument containing at least an "as" property' + ' specifying the Resource type. It found %s instead. The href for the preload call where this warning originated is "%s".', _typeOfArg2, href);
          } else {
            var as = options2.as;
            switch (as) {
              case "style":
              case "script": {
                break;
              }
              default: {
                var typeOfAs = getValueDescriptorExpectingEnumForWarning(as);
                error('ReactDOM.preinit() expected the second argument to be an options argument containing at least an "as" property' + ' specifying the Resource type. It found %s instead. Currently, valid resource types for for preinit are "style"' + ' and "script". The href for the preinit call where this warning originated is "%s".', typeOfAs, href);
              }
            }
          }
        }
      }
      function getValueDescriptorExpectingObjectForWarning(thing) {
        return thing === null ? "`null`" : thing === undefined ? "`undefined`" : thing === "" ? "an empty string" : 'something with type "' + typeof thing + '"';
      }
      function getValueDescriptorExpectingEnumForWarning(thing) {
        return thing === null ? "`null`" : thing === undefined ? "`undefined`" : thing === "" ? "an empty string" : typeof thing === "string" ? JSON.stringify(thing) : 'something with type "' + typeof thing + '"';
      }
      var SUPPRESS_HYDRATION_WARNING = "suppressHydrationWarning";
      var SUSPENSE_START_DATA = "$";
      var SUSPENSE_END_DATA = "/$";
      var SUSPENSE_PENDING_START_DATA = "$?";
      var SUSPENSE_FALLBACK_START_DATA = "$!";
      var STYLE = "style";
      var HostContextNamespaceNone = 0;
      var HostContextNamespaceSvg = 1;
      var HostContextNamespaceMath = 2;
      var eventsEnabled = null;
      var selectionInformation = null;
      function getOwnerDocumentFromRootContainer(rootContainerElement) {
        return rootContainerElement.nodeType === DOCUMENT_NODE ? rootContainerElement : rootContainerElement.ownerDocument;
      }
      function getRootHostContext(rootContainerInstance) {
        var type;
        var context;
        var nodeType = rootContainerInstance.nodeType;
        switch (nodeType) {
          case DOCUMENT_NODE:
          case DOCUMENT_FRAGMENT_NODE: {
            type = nodeType === DOCUMENT_NODE ? "#document" : "#fragment";
            var root2 = rootContainerInstance.documentElement;
            if (root2) {
              var namespaceURI = root2.namespaceURI;
              context = namespaceURI ? getOwnHostContext(namespaceURI) : HostContextNamespaceNone;
            } else {
              context = HostContextNamespaceNone;
            }
            break;
          }
          default: {
            var container = nodeType === COMMENT_NODE ? rootContainerInstance.parentNode : rootContainerInstance;
            type = container.tagName;
            var _namespaceURI = container.namespaceURI;
            if (!_namespaceURI) {
              switch (type) {
                case "svg":
                  context = HostContextNamespaceSvg;
                  break;
                case "math":
                  context = HostContextNamespaceMath;
                  break;
                default:
                  context = HostContextNamespaceNone;
                  break;
              }
            } else {
              var ownContext = getOwnHostContext(_namespaceURI);
              context = getChildHostContextProd(ownContext, type);
            }
            break;
          }
        }
        {
          var validatedTag = type.toLowerCase();
          var ancestorInfo = updatedAncestorInfoDev(null, validatedTag);
          return {
            context,
            ancestorInfo
          };
        }
      }
      function getOwnHostContext(namespaceURI) {
        switch (namespaceURI) {
          case SVG_NAMESPACE:
            return HostContextNamespaceSvg;
          case MATH_NAMESPACE:
            return HostContextNamespaceMath;
          default:
            return HostContextNamespaceNone;
        }
      }
      function getChildHostContextProd(parentNamespace, type) {
        if (parentNamespace === HostContextNamespaceNone) {
          switch (type) {
            case "svg":
              return HostContextNamespaceSvg;
            case "math":
              return HostContextNamespaceMath;
            default:
              return HostContextNamespaceNone;
          }
        }
        if (parentNamespace === HostContextNamespaceSvg && type === "foreignObject") {
          return HostContextNamespaceNone;
        }
        return parentNamespace;
      }
      function getChildHostContext(parentHostContext, type) {
        {
          var parentHostContextDev = parentHostContext;
          var context = getChildHostContextProd(parentHostContextDev.context, type);
          var ancestorInfo = updatedAncestorInfoDev(parentHostContextDev.ancestorInfo, type);
          return {
            context,
            ancestorInfo
          };
        }
      }
      function getPublicInstance(instance) {
        return instance;
      }
      function prepareForCommit(containerInfo) {
        eventsEnabled = isEnabled();
        selectionInformation = getSelectionInformation();
        var activeInstance = null;
        setEnabled(false);
        return activeInstance;
      }
      function resetAfterCommit(containerInfo) {
        restoreSelection(selectionInformation);
        setEnabled(eventsEnabled);
        eventsEnabled = null;
        selectionInformation = null;
      }
      function createHoistableInstance(type, props, rootContainerInstance, internalInstanceHandle) {
        var ownerDocument = getOwnerDocumentFromRootContainer(rootContainerInstance);
        var domElement = ownerDocument.createElement(type);
        precacheFiberNode(internalInstanceHandle, domElement);
        updateFiberProps(domElement, props);
        setInitialProperties(domElement, type, props);
        markNodeAsHoistable(domElement);
        return domElement;
      }
      var warnedUnknownTags = {
        dialog: true,
        webview: true
      };
      function createInstance(type, props, rootContainerInstance, hostContext, internalInstanceHandle) {
        var hostContextProd;
        {
          var hostContextDev = hostContext;
          validateDOMNesting(type, hostContextDev.ancestorInfo);
          hostContextProd = hostContextDev.context;
        }
        var ownerDocument = getOwnerDocumentFromRootContainer(rootContainerInstance);
        var domElement;
        switch (hostContextProd) {
          case HostContextNamespaceSvg:
            domElement = ownerDocument.createElementNS(SVG_NAMESPACE, type);
            break;
          case HostContextNamespaceMath:
            domElement = ownerDocument.createElementNS(MATH_NAMESPACE, type);
            break;
          default:
            switch (type) {
              case "svg": {
                domElement = ownerDocument.createElementNS(SVG_NAMESPACE, type);
                break;
              }
              case "math": {
                domElement = ownerDocument.createElementNS(MATH_NAMESPACE, type);
                break;
              }
              case "script": {
                var div = ownerDocument.createElement("div");
                div.innerHTML = "<script><" + "/script>";
                var firstChild = div.firstChild;
                domElement = div.removeChild(firstChild);
                break;
              }
              case "select": {
                if (typeof props.is === "string") {
                  domElement = ownerDocument.createElement("select", {
                    is: props.is
                  });
                } else {
                  domElement = ownerDocument.createElement("select");
                }
                if (props.multiple) {
                  domElement.multiple = true;
                } else if (props.size) {
                  domElement.size = props.size;
                }
                break;
              }
              default: {
                if (typeof props.is === "string") {
                  domElement = ownerDocument.createElement(type, {
                    is: props.is
                  });
                } else {
                  domElement = ownerDocument.createElement(type);
                }
                {
                  if (type.indexOf("-") === -1) {
                    if (type !== type.toLowerCase()) {
                      error("<%s /> is using incorrect casing. " + "Use PascalCase for React components, " + "or lowercase for HTML elements.", type);
                    }
                    if (Object.prototype.toString.call(domElement) === "[object HTMLUnknownElement]" && !hasOwnProperty.call(warnedUnknownTags, type)) {
                      warnedUnknownTags[type] = true;
                      error("The tag <%s> is unrecognized in this browser. " + "If you meant to render a React component, start its name with " + "an uppercase letter.", type);
                    }
                  }
                }
              }
            }
        }
        precacheFiberNode(internalInstanceHandle, domElement);
        updateFiberProps(domElement, props);
        return domElement;
      }
      function appendInitialChild(parentInstance, child) {
        parentInstance.appendChild(child);
      }
      function finalizeInitialChildren(domElement, type, props, hostContext) {
        setInitialProperties(domElement, type, props);
        switch (type) {
          case "button":
          case "input":
          case "select":
          case "textarea":
            return !!props.autoFocus;
          case "img":
            return true;
          default:
            return false;
        }
      }
      function shouldSetTextContent(type, props) {
        return type === "textarea" || type === "noscript" || typeof props.children === "string" || typeof props.children === "number" || typeof props.dangerouslySetInnerHTML === "object" && props.dangerouslySetInnerHTML !== null && props.dangerouslySetInnerHTML.__html != null;
      }
      function createTextInstance(text, rootContainerInstance, hostContext, internalInstanceHandle) {
        {
          var hostContextDev = hostContext;
          var ancestor = hostContextDev.ancestorInfo.current;
          if (ancestor != null) {
            validateTextNesting(text, ancestor.tag);
          }
        }
        var textNode = getOwnerDocumentFromRootContainer(rootContainerInstance).createTextNode(text);
        precacheFiberNode(internalInstanceHandle, textNode);
        return textNode;
      }
      function getCurrentEventPriority() {
        var currentEvent = window.event;
        if (currentEvent === undefined) {
          return DefaultEventPriority;
        }
        return getEventPriority(currentEvent.type);
      }
      function shouldAttemptEagerTransition() {
        return window.event && window.event.type === "popstate";
      }
      var scheduleTimeout = typeof setTimeout === "function" ? setTimeout : undefined;
      var cancelTimeout = typeof clearTimeout === "function" ? clearTimeout : undefined;
      var noTimeout = -1;
      var localPromise = typeof Promise === "function" ? Promise : undefined;
      function preparePortalMount(portalInstance) {
        listenToAllSupportedEvents(portalInstance);
      }
      var scheduleMicrotask = typeof queueMicrotask === "function" ? queueMicrotask : typeof localPromise !== "undefined" ? function(callback) {
        return localPromise.resolve(null).then(callback).catch(handleErrorInNextTick);
      } : scheduleTimeout;
      function handleErrorInNextTick(error2) {
        setTimeout(function() {
          throw error2;
        });
      }
      function commitMount(domElement, type, newProps, internalInstanceHandle) {
        switch (type) {
          case "button":
          case "input":
          case "select":
          case "textarea":
            if (newProps.autoFocus) {
              domElement.focus();
            }
            return;
          case "img": {
            if (newProps.src) {
              domElement.src = newProps.src;
            }
            return;
          }
        }
      }
      function commitUpdate(domElement, updatePayload, type, oldProps, newProps, internalInstanceHandle) {
        {
          updateProperties(domElement, type, oldProps, newProps);
        }
        updateFiberProps(domElement, newProps);
      }
      function resetTextContent(domElement) {
        setTextContent(domElement, "");
      }
      function commitTextUpdate(textInstance, oldText, newText) {
        textInstance.nodeValue = newText;
      }
      function appendChild(parentInstance, child) {
        parentInstance.appendChild(child);
      }
      function appendChildToContainer(container, child) {
        var parentNode;
        if (container.nodeType === COMMENT_NODE) {
          parentNode = container.parentNode;
          parentNode.insertBefore(child, container);
        } else {
          parentNode = container;
          parentNode.appendChild(child);
        }
        var reactRootContainer = container._reactRootContainer;
        if ((reactRootContainer === null || reactRootContainer === undefined) && parentNode.onclick === null) {
          trapClickOnNonInteractiveElement(parentNode);
        }
      }
      function insertBefore(parentInstance, child, beforeChild) {
        parentInstance.insertBefore(child, beforeChild);
      }
      function insertInContainerBefore(container, child, beforeChild) {
        if (container.nodeType === COMMENT_NODE) {
          container.parentNode.insertBefore(child, beforeChild);
        } else {
          container.insertBefore(child, beforeChild);
        }
      }
      function removeChild(parentInstance, child) {
        parentInstance.removeChild(child);
      }
      function removeChildFromContainer(container, child) {
        if (container.nodeType === COMMENT_NODE) {
          container.parentNode.removeChild(child);
        } else {
          container.removeChild(child);
        }
      }
      function clearSuspenseBoundary(parentInstance, suspenseInstance) {
        var node = suspenseInstance;
        var depth = 0;
        do {
          var nextNode = node.nextSibling;
          parentInstance.removeChild(node);
          if (nextNode && nextNode.nodeType === COMMENT_NODE) {
            var data = nextNode.data;
            if (data === SUSPENSE_END_DATA) {
              if (depth === 0) {
                parentInstance.removeChild(nextNode);
                retryIfBlockedOn(suspenseInstance);
                return;
              } else {
                depth--;
              }
            } else if (data === SUSPENSE_START_DATA || data === SUSPENSE_PENDING_START_DATA || data === SUSPENSE_FALLBACK_START_DATA) {
              depth++;
            }
          }
          node = nextNode;
        } while (node);
        retryIfBlockedOn(suspenseInstance);
      }
      function clearSuspenseBoundaryFromContainer(container, suspenseInstance) {
        if (container.nodeType === COMMENT_NODE) {
          clearSuspenseBoundary(container.parentNode, suspenseInstance);
        } else if (container.nodeType === ELEMENT_NODE) {
          clearSuspenseBoundary(container, suspenseInstance);
        } else
          ;
        retryIfBlockedOn(container);
      }
      function hideInstance(instance) {
        instance = instance;
        var style2 = instance.style;
        if (typeof style2.setProperty === "function") {
          style2.setProperty("display", "none", "important");
        } else {
          style2.display = "none";
        }
      }
      function hideTextInstance(textInstance) {
        textInstance.nodeValue = "";
      }
      function unhideInstance(instance, props) {
        instance = instance;
        var styleProp = props[STYLE];
        var display = styleProp !== undefined && styleProp !== null && styleProp.hasOwnProperty("display") ? styleProp.display : null;
        instance.style.display = display == null || typeof display === "boolean" ? "" : ("" + display).trim();
      }
      function unhideTextInstance(textInstance, text) {
        textInstance.nodeValue = text;
      }
      function clearContainer(container) {
        {
          var nodeType = container.nodeType;
          if (nodeType === DOCUMENT_NODE) {
            clearContainerSparingly(container);
          } else if (nodeType === ELEMENT_NODE) {
            switch (container.nodeName) {
              case "HEAD":
              case "HTML":
              case "BODY":
                clearContainerSparingly(container);
                return;
              default: {
                container.textContent = "";
              }
            }
          }
        }
      }
      function clearContainerSparingly(container) {
        var node;
        var nextNode = container.firstChild;
        if (nextNode && nextNode.nodeType === DOCUMENT_TYPE_NODE) {
          nextNode = nextNode.nextSibling;
        }
        while (nextNode) {
          node = nextNode;
          nextNode = nextNode.nextSibling;
          switch (node.nodeName) {
            case "HTML":
            case "HEAD":
            case "BODY": {
              var element = node;
              clearContainerSparingly(element);
              detachDeletedInstance(element);
              continue;
            }
            case "STYLE": {
              continue;
            }
            case "LINK": {
              if (node.rel.toLowerCase() === "stylesheet") {
                continue;
              }
            }
          }
          container.removeChild(node);
        }
        return;
      }
      function isHydratableType(type, props) {
        {
          if (type === "script") {
            var { async, onLoad, onError } = props;
            return !(async && (onLoad || onError));
          }
          return true;
        }
      }
      function isHydratableText(text) {
        return text !== "";
      }
      function canHydrateInstance(instance, type, props, inRootOrSingleton) {
        while (instance.nodeType === ELEMENT_NODE) {
          var element = instance;
          var anyProps = props;
          if (element.nodeName.toLowerCase() !== type.toLowerCase()) {
            if (!inRootOrSingleton || !enableHostSingletons) {
              if (element.nodeName === "INPUT" && element.type === "hidden")
                ;
              else {
                return null;
              }
            }
          } else if (!inRootOrSingleton || !enableHostSingletons) {
            if (type === "input" && element.type === "hidden" && anyProps.type !== "hidden")
              ;
            else {
              return element;
            }
          } else if (isMarkedHoistable(element))
            ;
          else {
            switch (type) {
              case "meta": {
                if (!element.hasAttribute("itemprop")) {
                  break;
                }
                return element;
              }
              case "link": {
                var rel = element.getAttribute("rel");
                if (rel === "stylesheet" && element.hasAttribute("data-precedence")) {
                  break;
                } else if (rel !== anyProps.rel || element.getAttribute("href") !== (anyProps.href == null ? null : anyProps.href) || element.getAttribute("crossorigin") !== (anyProps.crossOrigin == null ? null : anyProps.crossOrigin) || element.getAttribute("title") !== (anyProps.title == null ? null : anyProps.title)) {
                  break;
                }
                return element;
              }
              case "style": {
                if (element.hasAttribute("data-precedence")) {
                  break;
                }
                return element;
              }
              case "script": {
                var srcAttr = element.getAttribute("src");
                if (srcAttr && element.hasAttribute("async") && !element.hasAttribute("itemprop")) {
                  break;
                } else if (srcAttr !== (anyProps.src == null ? null : anyProps.src) || element.getAttribute("type") !== (anyProps.type == null ? null : anyProps.type) || element.getAttribute("crossorigin") !== (anyProps.crossOrigin == null ? null : anyProps.crossOrigin)) {
                  break;
                }
                return element;
              }
              default: {
                return element;
              }
            }
          }
          var nextInstance = getNextHydratableSibling(element);
          if (nextInstance === null) {
            break;
          }
          instance = nextInstance;
        }
        return null;
      }
      function canHydrateTextInstance(instance, text, inRootOrSingleton) {
        if (text === "")
          return null;
        while (instance.nodeType !== TEXT_NODE) {
          if (!inRootOrSingleton || !enableHostSingletons) {
            return null;
          }
          var nextInstance = getNextHydratableSibling(instance);
          if (nextInstance === null) {
            return null;
          }
          instance = nextInstance;
        }
        return instance;
      }
      function canHydrateSuspenseInstance(instance, inRootOrSingleton) {
        while (instance.nodeType !== COMMENT_NODE) {
          if (!inRootOrSingleton || !enableHostSingletons) {
            return null;
          }
          var nextInstance = getNextHydratableSibling(instance);
          if (nextInstance === null) {
            return null;
          }
          instance = nextInstance;
        }
        return instance;
      }
      function isSuspenseInstancePending(instance) {
        return instance.data === SUSPENSE_PENDING_START_DATA;
      }
      function isSuspenseInstanceFallback(instance) {
        return instance.data === SUSPENSE_FALLBACK_START_DATA;
      }
      function getSuspenseInstanceFallbackErrorDetails(instance) {
        var dataset = instance.nextSibling && instance.nextSibling.dataset;
        var digest, message, stack;
        if (dataset) {
          digest = dataset.dgst;
          {
            message = dataset.msg;
            stack = dataset.stck;
          }
        }
        {
          return {
            message,
            digest,
            stack
          };
        }
      }
      function registerSuspenseInstanceRetry(instance, callback) {
        instance._reactRetry = callback;
      }
      function getNextHydratable(node) {
        for (;node != null; node = node.nextSibling) {
          var nodeType = node.nodeType;
          if (nodeType === ELEMENT_NODE || nodeType === TEXT_NODE) {
            break;
          }
          if (nodeType === COMMENT_NODE) {
            var nodeData = node.data;
            if (nodeData === SUSPENSE_START_DATA || nodeData === SUSPENSE_FALLBACK_START_DATA || nodeData === SUSPENSE_PENDING_START_DATA) {
              break;
            }
            if (nodeData === SUSPENSE_END_DATA) {
              return null;
            }
          }
        }
        return node;
      }
      function getNextHydratableSibling(instance) {
        return getNextHydratable(instance.nextSibling);
      }
      function getFirstHydratableChild(parentInstance) {
        return getNextHydratable(parentInstance.firstChild);
      }
      function getFirstHydratableChildWithinContainer(parentContainer) {
        return getNextHydratable(parentContainer.firstChild);
      }
      function getFirstHydratableChildWithinSuspenseInstance(parentInstance) {
        return getNextHydratable(parentInstance.nextSibling);
      }
      function hydrateInstance(instance, type, props, hostContext, internalInstanceHandle, shouldWarnDev) {
        precacheFiberNode(internalInstanceHandle, instance);
        updateFiberProps(instance, props);
        var isConcurrentMode = (internalInstanceHandle.mode & ConcurrentMode) !== NoMode;
        return diffHydratedProperties(instance, type, props, isConcurrentMode, shouldWarnDev, hostContext);
      }
      function hydrateTextInstance(textInstance, text, internalInstanceHandle, shouldWarnDev) {
        precacheFiberNode(internalInstanceHandle, textInstance);
        return diffHydratedText(textInstance, text);
      }
      function hydrateSuspenseInstance(suspenseInstance, internalInstanceHandle) {
        precacheFiberNode(internalInstanceHandle, suspenseInstance);
      }
      function getNextHydratableInstanceAfterSuspenseInstance(suspenseInstance) {
        var node = suspenseInstance.nextSibling;
        var depth = 0;
        while (node) {
          if (node.nodeType === COMMENT_NODE) {
            var data = node.data;
            if (data === SUSPENSE_END_DATA) {
              if (depth === 0) {
                return getNextHydratableSibling(node);
              } else {
                depth--;
              }
            } else if (data === SUSPENSE_START_DATA || data === SUSPENSE_FALLBACK_START_DATA || data === SUSPENSE_PENDING_START_DATA) {
              depth++;
            }
          }
          node = node.nextSibling;
        }
        return null;
      }
      function getParentSuspenseInstance(targetInstance) {
        var node = targetInstance.previousSibling;
        var depth = 0;
        while (node) {
          if (node.nodeType === COMMENT_NODE) {
            var data = node.data;
            if (data === SUSPENSE_START_DATA || data === SUSPENSE_FALLBACK_START_DATA || data === SUSPENSE_PENDING_START_DATA) {
              if (depth === 0) {
                return node;
              } else {
                depth--;
              }
            } else if (data === SUSPENSE_END_DATA) {
              depth++;
            }
          }
          node = node.previousSibling;
        }
        return null;
      }
      function commitHydratedContainer(container) {
        retryIfBlockedOn(container);
      }
      function commitHydratedSuspenseInstance(suspenseInstance) {
        retryIfBlockedOn(suspenseInstance);
      }
      function shouldDeleteUnhydratedTailInstances(parentType) {
        return parentType !== "form" && parentType !== "button";
      }
      function didNotMatchHydratedContainerTextInstance(parentContainer, textInstance, text, isConcurrentMode, shouldWarnDev) {
        checkForUnmatchedText(textInstance.nodeValue, text, isConcurrentMode, shouldWarnDev);
      }
      function didNotMatchHydratedTextInstance(parentType, parentProps, parentInstance, textInstance, text, isConcurrentMode, shouldWarnDev) {
        if (parentProps[SUPPRESS_HYDRATION_WARNING] !== true) {
          checkForUnmatchedText(textInstance.nodeValue, text, isConcurrentMode, shouldWarnDev);
        }
      }
      function didNotHydrateInstanceWithinContainer(parentContainer, instance) {
        {
          if (instance.nodeType === ELEMENT_NODE) {
            warnForDeletedHydratableElement(parentContainer, instance);
          } else if (instance.nodeType === COMMENT_NODE)
            ;
          else {
            warnForDeletedHydratableText(parentContainer, instance);
          }
        }
      }
      function didNotHydrateInstanceWithinSuspenseInstance(parentInstance, instance) {
        {
          var parentNode = parentInstance.parentNode;
          if (parentNode !== null) {
            if (instance.nodeType === ELEMENT_NODE) {
              warnForDeletedHydratableElement(parentNode, instance);
            } else if (instance.nodeType === COMMENT_NODE)
              ;
            else {
              warnForDeletedHydratableText(parentNode, instance);
            }
          }
        }
      }
      function didNotHydrateInstance(parentType, parentProps, parentInstance, instance, isConcurrentMode) {
        {
          if (isConcurrentMode || parentProps[SUPPRESS_HYDRATION_WARNING] !== true) {
            if (instance.nodeType === ELEMENT_NODE) {
              warnForDeletedHydratableElement(parentInstance, instance);
            } else if (instance.nodeType === COMMENT_NODE)
              ;
            else {
              warnForDeletedHydratableText(parentInstance, instance);
            }
          }
        }
      }
      function didNotFindHydratableInstanceWithinContainer(parentContainer, type, props) {
        {
          warnForInsertedHydratedElement(parentContainer, type);
        }
      }
      function didNotFindHydratableTextInstanceWithinContainer(parentContainer, text) {
        {
          warnForInsertedHydratedText(parentContainer, text);
        }
      }
      function didNotFindHydratableInstanceWithinSuspenseInstance(parentInstance, type, props) {
        {
          var parentNode = parentInstance.parentNode;
          if (parentNode !== null)
            warnForInsertedHydratedElement(parentNode, type);
        }
      }
      function didNotFindHydratableTextInstanceWithinSuspenseInstance(parentInstance, text) {
        {
          var parentNode = parentInstance.parentNode;
          if (parentNode !== null)
            warnForInsertedHydratedText(parentNode, text);
        }
      }
      function didNotFindHydratableInstance(parentType, parentProps, parentInstance, type, props, isConcurrentMode) {
        {
          if (isConcurrentMode || parentProps[SUPPRESS_HYDRATION_WARNING] !== true) {
            warnForInsertedHydratedElement(parentInstance, type);
          }
        }
      }
      function didNotFindHydratableTextInstance(parentType, parentProps, parentInstance, text, isConcurrentMode) {
        {
          if (isConcurrentMode || parentProps[SUPPRESS_HYDRATION_WARNING] !== true) {
            warnForInsertedHydratedText(parentInstance, text);
          }
        }
      }
      function errorHydratingContainer(parentContainer) {
        {
          error("An error occurred during hydration. The server HTML was replaced with client content in <%s>.", parentContainer.nodeName.toLowerCase());
        }
      }
      function isHostSingletonType(type) {
        return type === "html" || type === "head" || type === "body";
      }
      function resolveSingletonInstance(type, props, rootContainerInstance, hostContext, validateDOMNestingDev) {
        {
          var hostContextDev = hostContext;
          if (validateDOMNestingDev) {
            validateDOMNesting(type, hostContextDev.ancestorInfo);
          }
        }
        var ownerDocument = getOwnerDocumentFromRootContainer(rootContainerInstance);
        switch (type) {
          case "html": {
            var documentElement = ownerDocument.documentElement;
            if (!documentElement) {
              throw new Error("React expected an <html> element (document.documentElement) to exist in the Document but one was" + " not found. React never removes the documentElement for any Document it renders into so" + " the cause is likely in some other script running on this page.");
            }
            return documentElement;
          }
          case "head": {
            var head = ownerDocument.head;
            if (!head) {
              throw new Error("React expected a <head> element (document.head) to exist in the Document but one was" + " not found. React never removes the head for any Document it renders into so" + " the cause is likely in some other script running on this page.");
            }
            return head;
          }
          case "body": {
            var body = ownerDocument.body;
            if (!body) {
              throw new Error("React expected a <body> element (document.body) to exist in the Document but one was" + " not found. React never removes the body for any Document it renders into so" + " the cause is likely in some other script running on this page.");
            }
            return body;
          }
          default: {
            throw new Error("resolveSingletonInstance was called with an element type that is not supported. This is a bug in React.");
          }
        }
      }
      function acquireSingletonInstance(type, props, instance, internalInstanceHandle) {
        {
          var currentInstanceHandle = getInstanceFromNode(instance);
          if (currentInstanceHandle) {
            var tagName = instance.tagName.toLowerCase();
            error("You are mounting a new %s component when a previous one has not first unmounted. It is an" + " error to render more than one %s component at a time and attributes and children of these" + " components will likely fail in unpredictable ways. Please only render a single instance of" + " <%s> and if you need to mount a new one, ensure any previous ones have unmounted first.", tagName, tagName, tagName);
          }
          switch (type) {
            case "html":
            case "head":
            case "body": {
              break;
            }
            default: {
              error("acquireSingletonInstance was called with an element type that is not supported. This is a bug in React.");
            }
          }
        }
        var attributes = instance.attributes;
        while (attributes.length) {
          instance.removeAttributeNode(attributes[0]);
        }
        setInitialProperties(instance, type, props);
        precacheFiberNode(internalInstanceHandle, instance);
        updateFiberProps(instance, props);
      }
      function releaseSingletonInstance(instance) {
        var attributes = instance.attributes;
        while (attributes.length) {
          instance.removeAttributeNode(attributes[0]);
        }
        detachDeletedInstance(instance);
      }
      function clearSingleton(instance) {
        var element = instance;
        var node = element.firstChild;
        while (node) {
          var nextNode = node.nextSibling;
          var nodeName = node.nodeName;
          if (isMarkedHoistable(node) || nodeName === "HEAD" || nodeName === "BODY" || nodeName === "STYLE" || nodeName === "LINK" && node.rel.toLowerCase() === "stylesheet")
            ;
          else {
            element.removeChild(node);
          }
          node = nextNode;
        }
        return;
      }
      var NotLoaded = 0;
      var Loaded = 1;
      var Errored = 2;
      var Settled = 3;
      var Inserted = 4;
      function prepareToCommitHoistables() {
        tagCaches = null;
      }
      var preloadPropsMap = new Map;
      var preconnectsSet = new Set;
      function getHoistableRoot(container) {
        return typeof container.getRootNode === "function" ? container.getRootNode() : container.ownerDocument;
      }
      function getCurrentResourceRoot() {
        var currentContainer = getCurrentRootHostContainer();
        return currentContainer ? getHoistableRoot(currentContainer) : null;
      }
      function getDocumentFromRoot(root2) {
        return root2.ownerDocument || root2;
      }
      var ReactDOMClientDispatcher = {
        prefetchDNS: prefetchDNS$1,
        preconnect: preconnect$1,
        preload: preload$1,
        preinit: preinit$1
      };
      function getDocumentForImperativeFloatMethods() {
        return document;
      }
      function preconnectAs(rel, crossOrigin, href) {
        var ownerDocument = getDocumentForImperativeFloatMethods();
        if (typeof href === "string" && href) {
          var limitedEscapedHref = escapeSelectorAttributeValueInsideDoubleQuotes(href);
          var key = 'link[rel="' + rel + '"][href="' + limitedEscapedHref + '"]';
          if (typeof crossOrigin === "string") {
            key += '[crossorigin="' + crossOrigin + '"]';
          }
          if (!preconnectsSet.has(key)) {
            preconnectsSet.add(key);
            var preconnectProps = {
              rel,
              crossOrigin,
              href
            };
            if (ownerDocument.querySelector(key) === null) {
              var instance = ownerDocument.createElement("link");
              setInitialProperties(instance, "link", preconnectProps);
              markNodeAsHoistable(instance);
              ownerDocument.head.appendChild(instance);
            }
          }
        }
      }
      function prefetchDNS$1(href, options2) {
        {
          if (typeof href !== "string" || !href) {
            error("ReactDOM.prefetchDNS(): Expected the `href` argument (first) to be a non-empty string but encountered %s instead.", getValueDescriptorExpectingObjectForWarning(href));
          } else if (options2 != null) {
            if (typeof options2 === "object" && hasOwnProperty.call(options2, "crossOrigin")) {
              error("ReactDOM.prefetchDNS(): Expected only one argument, `href`, but encountered %s as a second argument instead. This argument is reserved for future options and is currently disallowed. It looks like the you are attempting to set a crossOrigin property for this DNS lookup hint. Browsers do not perform DNS queries using CORS and setting this attribute on the resource hint has no effect. Try calling ReactDOM.prefetchDNS() with just a single string argument, `href`.", getValueDescriptorExpectingEnumForWarning(options2));
            } else {
              error("ReactDOM.prefetchDNS(): Expected only one argument, `href`, but encountered %s as a second argument instead. This argument is reserved for future options and is currently disallowed. Try calling ReactDOM.prefetchDNS() with just a single string argument, `href`.", getValueDescriptorExpectingEnumForWarning(options2));
            }
          }
        }
        preconnectAs("dns-prefetch", null, href);
      }
      function preconnect$1(href, options2) {
        {
          if (typeof href !== "string" || !href) {
            error("ReactDOM.preconnect(): Expected the `href` argument (first) to be a non-empty string but encountered %s instead.", getValueDescriptorExpectingObjectForWarning(href));
          } else if (options2 != null && typeof options2 !== "object") {
            error("ReactDOM.preconnect(): Expected the `options` argument (second) to be an object but encountered %s instead. The only supported option at this time is `crossOrigin` which accepts a string.", getValueDescriptorExpectingEnumForWarning(options2));
          } else if (options2 != null && typeof options2.crossOrigin !== "string") {
            error("ReactDOM.preconnect(): Expected the `crossOrigin` option (second argument) to be a string but encountered %s instead. Try removing this option or passing a string value instead.", getValueDescriptorExpectingObjectForWarning(options2.crossOrigin));
          }
        }
        var crossOrigin = options2 == null || typeof options2.crossOrigin !== "string" ? null : options2.crossOrigin === "use-credentials" ? "use-credentials" : "";
        preconnectAs("preconnect", crossOrigin, href);
      }
      function preload$1(href, options2) {
        {
          validatePreloadArguments(href, options2);
        }
        var ownerDocument = getDocumentForImperativeFloatMethods();
        if (typeof href === "string" && href && typeof options2 === "object" && options2 !== null && ownerDocument) {
          var as = options2.as;
          var limitedEscapedHref = escapeSelectorAttributeValueInsideDoubleQuotes(href);
          var preloadSelector = 'link[rel="preload"][as="' + as + '"][href="' + limitedEscapedHref + '"]';
          var key = preloadSelector;
          switch (as) {
            case "style":
              key = getStyleKey(href);
              break;
            case "script":
              key = getScriptKey(href);
              break;
          }
          if (!preloadPropsMap.has(key)) {
            var preloadProps = preloadPropsFromPreloadOptions(href, as, options2);
            preloadPropsMap.set(key, preloadProps);
            if (ownerDocument.querySelector(preloadSelector) === null) {
              if (as === "style" && ownerDocument.querySelector(getStylesheetSelectorFromKey(key))) {
                return;
              } else if (as === "script" && ownerDocument.querySelector(getScriptSelectorFromKey(key))) {
                return;
              }
              var instance = ownerDocument.createElement("link");
              setInitialProperties(instance, "link", preloadProps);
              markNodeAsHoistable(instance);
              ownerDocument.head.appendChild(instance);
            }
          }
        }
      }
      function preloadPropsFromPreloadOptions(href, as, options2) {
        return {
          href,
          rel: "preload",
          as,
          crossOrigin: as === "font" ? "" : options2.crossOrigin,
          integrity: options2.integrity,
          type: options2.type
        };
      }
      function preinit$1(href, options2) {
        {
          validatePreinitArguments(href, options2);
        }
        var ownerDocument = getDocumentForImperativeFloatMethods();
        if (typeof href === "string" && href && typeof options2 === "object" && options2 !== null) {
          var as = options2.as;
          switch (as) {
            case "style": {
              var styles = getResourcesFromRoot(ownerDocument).hoistableStyles;
              var key = getStyleKey(href);
              var precedence = options2.precedence || "default";
              var resource = styles.get(key);
              if (resource) {
                return;
              }
              var state = {
                loading: NotLoaded,
                preload: null
              };
              var instance = ownerDocument.querySelector(getStylesheetSelectorFromKey(key));
              if (instance) {
                state.loading = Loaded;
              } else {
                var stylesheetProps = stylesheetPropsFromPreinitOptions(href, precedence, options2);
                var preloadProps = preloadPropsMap.get(key);
                if (preloadProps) {
                  adoptPreloadPropsForStylesheet(stylesheetProps, preloadProps);
                }
                var link = instance = ownerDocument.createElement("link");
                markNodeAsHoistable(link);
                setInitialProperties(link, "link", stylesheetProps);
                link._p = new Promise(function(resolve, reject) {
                  link.onload = resolve;
                  link.onerror = reject;
                });
                link.addEventListener("load", function() {
                  state.loading |= Loaded;
                });
                link.addEventListener("error", function() {
                  state.loading |= Errored;
                });
                state.loading |= Inserted;
                insertStylesheet(instance, precedence, ownerDocument);
              }
              resource = {
                type: "stylesheet",
                instance,
                count: 1,
                state
              };
              styles.set(key, resource);
              return;
            }
            case "script": {
              var src = href;
              var scripts = getResourcesFromRoot(ownerDocument).hoistableScripts;
              var _key = getScriptKey(src);
              var _resource = scripts.get(_key);
              if (_resource) {
                return;
              }
              var _instance = ownerDocument.querySelector(getScriptSelectorFromKey(_key));
              if (!_instance) {
                var scriptProps = scriptPropsFromPreinitOptions(src, options2);
                var _preloadProps = preloadPropsMap.get(_key);
                if (_preloadProps) {
                  adoptPreloadPropsForScript(scriptProps, _preloadProps);
                }
                _instance = ownerDocument.createElement("script");
                markNodeAsHoistable(_instance);
                setInitialProperties(_instance, "link", scriptProps);
                ownerDocument.head.appendChild(_instance);
              }
              _resource = {
                type: "script",
                instance: _instance,
                count: 1,
                state: null
              };
              scripts.set(_key, _resource);
              return;
            }
          }
        }
      }
      function stylesheetPropsFromPreinitOptions(href, precedence, options2) {
        return {
          rel: "stylesheet",
          href,
          "data-precedence": precedence,
          crossOrigin: options2.crossOrigin
        };
      }
      function scriptPropsFromPreinitOptions(src, options2) {
        return {
          src,
          async: true,
          crossOrigin: options2.crossOrigin,
          integrity: options2.integrity,
          nonce: options2.nonce
        };
      }
      function getResource(type, currentProps, pendingProps) {
        var resourceRoot = getCurrentResourceRoot();
        if (!resourceRoot) {
          throw new Error('"resourceRoot" was expected to exist. This is a bug in React.');
        }
        switch (type) {
          case "meta":
          case "title": {
            return null;
          }
          case "style": {
            if (typeof pendingProps.precedence === "string" && typeof pendingProps.href === "string") {
              var key = getStyleKey(pendingProps.href);
              var styles = getResourcesFromRoot(resourceRoot).hoistableStyles;
              var resource = styles.get(key);
              if (!resource) {
                resource = {
                  type: "style",
                  instance: null,
                  count: 0,
                  state: null
                };
                styles.set(key, resource);
              }
              return resource;
            }
            return {
              type: "void",
              instance: null,
              count: 0,
              state: null
            };
          }
          case "link": {
            if (pendingProps.rel === "stylesheet" && typeof pendingProps.href === "string" && typeof pendingProps.precedence === "string") {
              var qualifiedProps = pendingProps;
              var _key2 = getStyleKey(qualifiedProps.href);
              var _styles = getResourcesFromRoot(resourceRoot).hoistableStyles;
              var _resource2 = _styles.get(_key2);
              if (!_resource2) {
                var ownerDocument = getDocumentFromRoot(resourceRoot);
                _resource2 = {
                  type: "stylesheet",
                  instance: null,
                  count: 0,
                  state: {
                    loading: NotLoaded,
                    preload: null
                  }
                };
                _styles.set(_key2, _resource2);
                if (!preloadPropsMap.has(_key2)) {
                  preloadStylesheet(ownerDocument, _key2, preloadPropsFromStylesheet(qualifiedProps), _resource2.state);
                }
              }
              return _resource2;
            }
            return null;
          }
          case "script": {
            if (typeof pendingProps.src === "string" && pendingProps.async === true) {
              var scriptProps = pendingProps;
              var _key3 = getScriptKey(scriptProps.src);
              var scripts = getResourcesFromRoot(resourceRoot).hoistableScripts;
              var _resource3 = scripts.get(_key3);
              if (!_resource3) {
                _resource3 = {
                  type: "script",
                  instance: null,
                  count: 0,
                  state: null
                };
                scripts.set(_key3, _resource3);
              }
              return _resource3;
            }
            return {
              type: "void",
              instance: null,
              count: 0,
              state: null
            };
          }
          default: {
            throw new Error('getResource encountered a type it did not expect: "' + type + '". this is a bug in React.');
          }
        }
      }
      function styleTagPropsFromRawProps(rawProps) {
        return assign({}, rawProps, {
          "data-href": rawProps.href,
          "data-precedence": rawProps.precedence,
          href: null,
          precedence: null
        });
      }
      function getStyleKey(href) {
        var limitedEscapedHref = escapeSelectorAttributeValueInsideDoubleQuotes(href);
        return 'href="' + limitedEscapedHref + '"';
      }
      function getStyleTagSelector(href) {
        var limitedEscapedHref = escapeSelectorAttributeValueInsideDoubleQuotes(href);
        return 'style[data-href~="' + limitedEscapedHref + '"]';
      }
      function getStylesheetSelectorFromKey(key) {
        return 'link[rel="stylesheet"][' + key + "]";
      }
      function getPreloadStylesheetSelectorFromKey(key) {
        return 'link[rel="preload"][as="style"][' + key + "]";
      }
      function stylesheetPropsFromRawProps(rawProps) {
        return assign({}, rawProps, {
          "data-precedence": rawProps.precedence,
          precedence: null
        });
      }
      function preloadStylesheet(ownerDocument, key, preloadProps, state) {
        preloadPropsMap.set(key, preloadProps);
        if (!ownerDocument.querySelector(getStylesheetSelectorFromKey(key))) {
          var preloadEl = ownerDocument.querySelector(getPreloadStylesheetSelectorFromKey(key));
          if (preloadEl) {
            state.loading = Loaded;
          } else {
            var instance = ownerDocument.createElement("link");
            state.preload = instance;
            instance.addEventListener("load", function() {
              return state.loading |= Loaded;
            });
            instance.addEventListener("error", function() {
              return state.loading |= Errored;
            });
            setInitialProperties(instance, "link", preloadProps);
            markNodeAsHoistable(instance);
            ownerDocument.head.appendChild(instance);
          }
        }
      }
      function preloadPropsFromStylesheet(props) {
        return {
          rel: "preload",
          as: "style",
          href: props.href,
          crossOrigin: props.crossOrigin,
          integrity: props.integrity,
          media: props.media,
          hrefLang: props.hrefLang,
          referrerPolicy: props.referrerPolicy
        };
      }
      function getScriptKey(src) {
        var limitedEscapedSrc = escapeSelectorAttributeValueInsideDoubleQuotes(src);
        return '[src="' + limitedEscapedSrc + '"]';
      }
      function getScriptSelectorFromKey(key) {
        return "script[async]" + key;
      }
      function acquireResource(hoistableRoot, resource, props) {
        resource.count++;
        if (resource.instance === null) {
          switch (resource.type) {
            case "style": {
              var qualifiedProps = props;
              var instance = hoistableRoot.querySelector(getStyleTagSelector(qualifiedProps.href));
              if (instance) {
                resource.instance = instance;
                markNodeAsHoistable(instance);
                return instance;
              }
              var styleProps = styleTagPropsFromRawProps(props);
              var ownerDocument = getDocumentFromRoot(hoistableRoot);
              instance = ownerDocument.createElement("style");
              markNodeAsHoistable(instance);
              setInitialProperties(instance, "style", styleProps);
              insertStylesheet(instance, qualifiedProps.precedence, hoistableRoot);
              resource.instance = instance;
              return instance;
            }
            case "stylesheet": {
              var _qualifiedProps = props;
              var key = getStyleKey(_qualifiedProps.href);
              var _instance2 = hoistableRoot.querySelector(getStylesheetSelectorFromKey(key));
              if (_instance2) {
                resource.instance = _instance2;
                markNodeAsHoistable(_instance2);
                return _instance2;
              }
              var stylesheetProps = stylesheetPropsFromRawProps(props);
              var preloadProps = preloadPropsMap.get(key);
              if (preloadProps) {
                adoptPreloadPropsForStylesheet(stylesheetProps, preloadProps);
              }
              var _ownerDocument = getDocumentFromRoot(hoistableRoot);
              _instance2 = _ownerDocument.createElement("link");
              markNodeAsHoistable(_instance2);
              var linkInstance = _instance2;
              linkInstance._p = new Promise(function(resolve, reject) {
                linkInstance.onload = resolve;
                linkInstance.onerror = reject;
              });
              setInitialProperties(_instance2, "link", stylesheetProps);
              resource.state.loading |= Inserted;
              insertStylesheet(_instance2, _qualifiedProps.precedence, hoistableRoot);
              resource.instance = _instance2;
              return _instance2;
            }
            case "script": {
              var borrowedScriptProps = props;
              var _key4 = getScriptKey(borrowedScriptProps.src);
              var _instance3 = hoistableRoot.querySelector(getScriptSelectorFromKey(_key4));
              if (_instance3) {
                resource.instance = _instance3;
                markNodeAsHoistable(_instance3);
                return _instance3;
              }
              var scriptProps = borrowedScriptProps;
              var _preloadProps2 = preloadPropsMap.get(_key4);
              if (_preloadProps2) {
                scriptProps = assign({}, borrowedScriptProps);
                adoptPreloadPropsForScript(scriptProps, _preloadProps2);
              }
              var _ownerDocument2 = getDocumentFromRoot(hoistableRoot);
              _instance3 = _ownerDocument2.createElement("script");
              markNodeAsHoistable(_instance3);
              setInitialProperties(_instance3, "link", scriptProps);
              _ownerDocument2.head.appendChild(_instance3);
              resource.instance = _instance3;
              return _instance3;
            }
            case "void": {
              return null;
            }
            default: {
              throw new Error('acquireResource encountered a resource type it did not expect: "' + resource.type + '". this is a bug in React.');
            }
          }
        } else {
          if (resource.type === "stylesheet" && (resource.state.loading & Inserted) === NotLoaded) {
            var _qualifiedProps2 = props;
            var _instance4 = resource.instance;
            resource.state.loading |= Inserted;
            insertStylesheet(_instance4, _qualifiedProps2.precedence, hoistableRoot);
          }
        }
        return resource.instance;
      }
      function releaseResource(resource) {
        resource.count--;
      }
      function insertStylesheet(instance, precedence, root2) {
        var nodes = root2.querySelectorAll('link[rel="stylesheet"][data-precedence],style[data-precedence]');
        var last = nodes.length ? nodes[nodes.length - 1] : null;
        var prior = last;
        for (var i = 0;i < nodes.length; i++) {
          var node = nodes[i];
          var nodePrecedence = node.dataset.precedence;
          if (nodePrecedence === precedence) {
            prior = node;
          } else if (prior !== last) {
            break;
          }
        }
        if (prior) {
          prior.parentNode.insertBefore(instance, prior.nextSibling);
        } else {
          var parent = root2.nodeType === DOCUMENT_NODE ? root2.head : root2;
          parent.insertBefore(instance, parent.firstChild);
        }
      }
      function adoptPreloadPropsForStylesheet(stylesheetProps, preloadProps) {
        if (stylesheetProps.crossOrigin == null)
          stylesheetProps.crossOrigin = preloadProps.crossOrigin;
        if (stylesheetProps.referrerPolicy == null)
          stylesheetProps.referrerPolicy = preloadProps.referrerPolicy;
        if (stylesheetProps.title == null)
          stylesheetProps.title = preloadProps.title;
      }
      function adoptPreloadPropsForScript(scriptProps, preloadProps) {
        if (scriptProps.crossOrigin == null)
          scriptProps.crossOrigin = preloadProps.crossOrigin;
        if (scriptProps.referrerPolicy == null)
          scriptProps.referrerPolicy = preloadProps.referrerPolicy;
        if (scriptProps.integrity == null)
          scriptProps.referrerPolicy = preloadProps.integrity;
      }
      var tagCaches = null;
      function hydrateHoistable(hoistableRoot, type, props, internalInstanceHandle) {
        var ownerDocument = getDocumentFromRoot(hoistableRoot);
        var instance = null;
        getInstance:
          switch (type) {
            case "title": {
              instance = ownerDocument.getElementsByTagName("title")[0];
              if (!instance || isOwnedInstance(instance) || instance.namespaceURI === SVG_NAMESPACE || instance.hasAttribute("itemprop")) {
                instance = ownerDocument.createElement(type);
                ownerDocument.head.insertBefore(instance, ownerDocument.querySelector("head > title"));
              }
              setInitialProperties(instance, type, props);
              precacheFiberNode(internalInstanceHandle, instance);
              markNodeAsHoistable(instance);
              return instance;
            }
            case "link": {
              var cache = getHydratableHoistableCache("link", "href", ownerDocument);
              var key = type + (props.href || "");
              var maybeNodes = cache.get(key);
              if (maybeNodes) {
                var nodes = maybeNodes;
                for (var i = 0;i < nodes.length; i++) {
                  var node = nodes[i];
                  if (node.getAttribute("href") !== (props.href == null ? null : props.href) || node.getAttribute("rel") !== (props.rel == null ? null : props.rel) || node.getAttribute("title") !== (props.title == null ? null : props.title) || node.getAttribute("crossorigin") !== (props.crossOrigin == null ? null : props.crossOrigin)) {
                    continue;
                  }
                  instance = node;
                  nodes.splice(i, 1);
                  break getInstance;
                }
              }
              instance = ownerDocument.createElement(type);
              setInitialProperties(instance, type, props);
              ownerDocument.head.appendChild(instance);
              break;
            }
            case "meta": {
              var _cache = getHydratableHoistableCache("meta", "content", ownerDocument);
              var _key5 = type + (props.content || "");
              var _maybeNodes = _cache.get(_key5);
              if (_maybeNodes) {
                var _nodes = _maybeNodes;
                for (var _i = 0;_i < _nodes.length; _i++) {
                  var _node = _nodes[_i];
                  {
                    checkAttributeStringCoercion(props.content, "content");
                  }
                  if (_node.getAttribute("content") !== (props.content == null ? null : "" + props.content) || _node.getAttribute("name") !== (props.name == null ? null : props.name) || _node.getAttribute("property") !== (props.property == null ? null : props.property) || _node.getAttribute("http-equiv") !== (props.httpEquiv == null ? null : props.httpEquiv) || _node.getAttribute("charset") !== (props.charSet == null ? null : props.charSet)) {
                    continue;
                  }
                  instance = _node;
                  _nodes.splice(_i, 1);
                  break getInstance;
                }
              }
              instance = ownerDocument.createElement(type);
              setInitialProperties(instance, type, props);
              ownerDocument.head.appendChild(instance);
              break;
            }
            default:
              throw new Error('getNodesForType encountered a type it did not expect: "' + type + '". This is a bug in React.');
          }
        precacheFiberNode(internalInstanceHandle, instance);
        markNodeAsHoistable(instance);
        return instance;
      }
      function getHydratableHoistableCache(type, keyAttribute, ownerDocument) {
        var cache;
        var caches;
        if (tagCaches === null) {
          cache = new Map;
          caches = tagCaches = new Map;
          caches.set(ownerDocument, cache);
        } else {
          caches = tagCaches;
          var maybeCache = caches.get(ownerDocument);
          if (!maybeCache) {
            cache = new Map;
            caches.set(ownerDocument, cache);
          } else {
            cache = maybeCache;
          }
        }
        if (cache.has(type)) {
          return cache;
        }
        cache.set(type, null);
        var nodes = ownerDocument.getElementsByTagName(type);
        for (var i = 0;i < nodes.length; i++) {
          var node = nodes[i];
          if (!isOwnedInstance(node) && (type !== "link" || node.getAttribute("rel") !== "stylesheet") && node.namespaceURI !== SVG_NAMESPACE) {
            var nodeKey = node.getAttribute(keyAttribute) || "";
            var key = type + nodeKey;
            var existing = cache.get(key);
            if (existing) {
              existing.push(node);
            } else {
              cache.set(key, [node]);
            }
          }
        }
        return cache;
      }
      function mountHoistable(hoistableRoot, type, instance) {
        var ownerDocument = getDocumentFromRoot(hoistableRoot);
        ownerDocument.head.insertBefore(instance, type === "title" ? ownerDocument.querySelector("head > title") : null);
      }
      function unmountHoistable(instance) {
        instance.parentNode.removeChild(instance);
      }
      function isHostHoistableType(type, props, hostContext) {
        var outsideHostContainerContext;
        var hostContextProd;
        {
          var hostContextDev = hostContext;
          outsideHostContainerContext = !hostContextDev.ancestorInfo.containerTagInScope;
          hostContextProd = hostContextDev.context;
        }
        if (hostContextProd === HostContextNamespaceSvg || props.itemProp != null) {
          {
            if (outsideHostContainerContext && props.itemProp != null && (type === "meta" || type === "title" || type === "style" || type === "link" || type === "script")) {
              error("Cannot render a <%s> outside the main document if it has an `itemProp` prop. `itemProp` suggests the tag belongs to an" + " `itemScope` which can appear anywhere in the DOM. If you were intending for React to hoist this <%s> remove the `itemProp` prop." + " Otherwise, try moving this tag into the <head> or <body> of the Document.", type, type);
            }
          }
          return false;
        }
        switch (type) {
          case "meta":
          case "title": {
            return true;
          }
          case "style": {
            if (typeof props.precedence !== "string" || typeof props.href !== "string" || props.href === "") {
              {
                if (outsideHostContainerContext) {
                  error("Cannot render a <style> outside the main document without knowing its precedence and a unique href key." + " React can hoist and deduplicate <style> tags if you provide a `precedence` prop along with an `href` prop that" + ' does not conflic with the `href` values used in any other hoisted <style> or <link rel="stylesheet" ...> tags. ' + " Note that hoisting <style> tags is considered an advanced feature that most will not use directly." + ' Consider moving the <style> tag to the <head> or consider adding a `precedence="default"` and `href="some unique resource identifier"`, or move the <style>' + " to the <style> tag.");
                }
              }
              return false;
            }
            return true;
          }
          case "link": {
            if (typeof props.rel !== "string" || typeof props.href !== "string" || props.href === "" || props.onLoad || props.onError) {
              {
                if (props.rel === "stylesheet" && typeof props.precedence === "string") {
                  validateLinkPropsForStyleResource(props);
                }
                if (outsideHostContainerContext) {
                  if (typeof props.rel !== "string" || typeof props.href !== "string" || props.href === "") {
                    error("Cannot render a <link> outside the main document without a `rel` and `href` prop." + " Try adding a `rel` and/or `href` prop to this <link> or moving the link into the <head> tag");
                  } else if (props.onError || props.onLoad) {
                    error("Cannot render a <link> with onLoad or onError listeners outside the main document." + " Try removing onLoad={...} and onError={...} or moving it into the root <head> tag or" + " somewhere in the <body>.");
                  }
                }
              }
              return false;
            }
            switch (props.rel) {
              case "stylesheet": {
                var { precedence, disabled } = props;
                {
                  if (typeof precedence !== "string") {
                    if (outsideHostContainerContext) {
                      error('Cannot render a <link rel="stylesheet" /> outside the main document without knowing its precedence.' + ' Consider adding precedence="default" or moving it into the root <head> tag.');
                    }
                  }
                }
                return typeof precedence === "string" && disabled == null;
              }
              default: {
                return true;
              }
            }
          }
          case "script": {
            if (props.async !== true || props.onLoad || props.onError || typeof props.src !== "string" || !props.src) {
              {
                if (outsideHostContainerContext) {
                  if (props.async !== true) {
                    error("Cannot render a sync or defer <script> outside the main document without knowing its order." + ' Try adding async="" or moving it into the root <head> tag.');
                  } else if (props.onLoad || props.onError) {
                    error("Cannot render a <script> with onLoad or onError listeners outside the main document." + " Try removing onLoad={...} and onError={...} or moving it into the root <head> tag or" + " somewhere in the <body>.");
                  } else {
                    error("Cannot render a <script> outside the main document without `async={true}` and a non-empty `src` prop." + " Ensure there is a valid `src` and either make the script async or move it into the root <head> tag or" + " somewhere in the <body>.");
                  }
                }
              }
              return false;
            }
            return true;
          }
          case "noscript":
          case "template": {
            {
              if (outsideHostContainerContext) {
                error("Cannot render <%s> outside the main document. Try moving it into the root <head> tag.", type);
              }
            }
            return false;
          }
        }
        return false;
      }
      function mayResourceSuspendCommit(resource) {
        return resource.type === "stylesheet" && (resource.state.loading & Inserted) === NotLoaded;
      }
      function preloadInstance(type, props) {
        return true;
      }
      function preloadResource(resource) {
        if (resource.type === "stylesheet" && (resource.state.loading & Settled) === NotLoaded) {
          return false;
        }
        return true;
      }
      var suspendedState = null;
      function noop() {}
      function startSuspendingCommit() {
        suspendedState = {
          stylesheets: null,
          count: 0,
          unsuspend: noop
        };
      }
      function suspendResource(hoistableRoot, resource, props) {
        if (suspendedState === null) {
          throw new Error("Internal React Error: suspendedState null when it was expected to exists. Please report this as a React bug.");
        }
        var state = suspendedState;
        if (resource.type === "stylesheet") {
          if (typeof props.media === "string") {
            if (matchMedia(props.media).matches === false) {
              return;
            }
          }
          if (resource.instance === null) {
            var qualifiedProps = props;
            var key = getStyleKey(qualifiedProps.href);
            var instance = hoistableRoot.querySelector(getStylesheetSelectorFromKey(key));
            if (instance) {
              var maybeLoadingState = instance._p;
              if (maybeLoadingState !== null && typeof maybeLoadingState === "object" && typeof maybeLoadingState.then === "function") {
                var loadingState = maybeLoadingState;
                state.count++;
                var ping = onUnsuspend.bind(state);
                loadingState.then(ping, ping);
              }
              resource.state.loading |= Inserted;
              resource.instance = instance;
              markNodeAsHoistable(instance);
              return;
            }
            var ownerDocument = getDocumentFromRoot(hoistableRoot);
            var stylesheetProps = stylesheetPropsFromRawProps(props);
            var preloadProps = preloadPropsMap.get(key);
            if (preloadProps) {
              adoptPreloadPropsForStylesheet(stylesheetProps, preloadProps);
            }
            instance = ownerDocument.createElement("link");
            markNodeAsHoistable(instance);
            var linkInstance = instance;
            linkInstance._p = new Promise(function(resolve, reject) {
              linkInstance.onload = resolve;
              linkInstance.onerror = reject;
            });
            setInitialProperties(instance, "link", stylesheetProps);
            resource.instance = instance;
          }
          if (state.stylesheets === null) {
            state.stylesheets = new Map;
          }
          state.stylesheets.set(resource, hoistableRoot);
          var preloadEl = resource.state.preload;
          if (preloadEl && (resource.state.loading & Settled) === NotLoaded) {
            state.count++;
            var _ping = onUnsuspend.bind(state);
            preloadEl.addEventListener("load", _ping);
            preloadEl.addEventListener("error", _ping);
          }
        }
      }
      function waitForCommitToBeReady() {
        if (suspendedState === null) {
          throw new Error("Internal React Error: suspendedState null when it was expected to exists. Please report this as a React bug.");
        }
        var state = suspendedState;
        if (state.stylesheets && state.count === 0) {
          insertSuspendedStylesheets(state, state.stylesheets);
        }
        if (state.count > 0) {
          return function(commit) {
            var stylesheetTimer = setTimeout(function() {
              if (state.stylesheets) {
                insertSuspendedStylesheets(state, state.stylesheets);
              }
              if (state.unsuspend) {
                var unsuspend = state.unsuspend;
                state.unsuspend = null;
                unsuspend();
              }
            }, 60000);
            state.unsuspend = commit;
            return function() {
              state.unsuspend = null;
              clearTimeout(stylesheetTimer);
            };
          };
        }
        return null;
      }
      function onUnsuspend() {
        this.count--;
        if (this.count === 0) {
          if (this.stylesheets) {
            insertSuspendedStylesheets(this, this.stylesheets);
          } else if (this.unsuspend) {
            var unsuspend = this.unsuspend;
            this.unsuspend = null;
            unsuspend();
          }
        }
      }
      var precedencesByRoot = null;
      function insertSuspendedStylesheets(state, resources) {
        state.stylesheets = null;
        if (state.unsuspend === null) {
          return;
        }
        state.count++;
        precedencesByRoot = new Map;
        resources.forEach(insertStylesheetIntoRoot, state);
        precedencesByRoot = null;
        onUnsuspend.call(state);
      }
      function insertStylesheetIntoRoot(root2, resource, map) {
        if (resource.state.loading & Inserted) {
          return;
        }
        var last;
        var precedences = precedencesByRoot.get(root2);
        if (!precedences) {
          precedences = new Map;
          precedencesByRoot.set(root2, precedences);
          var nodes = root2.querySelectorAll("link[data-precedence],style[data-precedence]");
          for (var i = 0;i < nodes.length; i++) {
            var node = nodes[i];
            if (node.nodeName === "link" || node.getAttribute("media") !== "not all") {
              precedences.set("p" + node.dataset.precedence, node);
              last = node;
            }
          }
          if (last) {
            precedences.set("last", last);
          }
        } else {
          last = precedences.get("last");
        }
        var instance = resource.instance;
        var precedence = instance.getAttribute("data-precedence");
        var prior = precedences.get("p" + precedence) || last;
        if (prior === last) {
          precedences.set("last", instance);
        }
        precedences.set(precedence, instance);
        this.count++;
        var onComplete = onUnsuspend.bind(this);
        instance.addEventListener("load", onComplete);
        instance.addEventListener("error", onComplete);
        if (prior) {
          prior.parentNode.insertBefore(instance, prior.nextSibling);
        } else {
          var parent = root2.nodeType === DOCUMENT_NODE ? root2.head : root2;
          parent.insertBefore(instance, parent.firstChild);
        }
        resource.state.loading |= Inserted;
      }
      var NotPendingTransition = NotPending;
      var Dispatcher$1 = Internals.Dispatcher;
      if (typeof document !== "undefined") {
        Dispatcher$1.current = ReactDOMClientDispatcher;
      }
      var defaultOnRecoverableError = typeof reportError === "function" ? reportError : function(error2) {
        console["error"](error2);
      };
      function ReactDOMRoot(internalRoot) {
        this._internalRoot = internalRoot;
      }
      ReactDOMHydrationRoot.prototype.render = ReactDOMRoot.prototype.render = function(children) {
        var root2 = this._internalRoot;
        if (root2 === null) {
          throw new Error("Cannot update an unmounted root.");
        }
        {
          if (typeof arguments[1] === "function") {
            error("render(...): does not support the second callback argument. " + "To execute a side effect after rendering, declare it in a component body with useEffect().");
          } else if (isValidContainer(arguments[1])) {
            error("You passed a container to the second argument of root.render(...). " + "You don't need to pass it again since you already passed it to create the root.");
          } else if (typeof arguments[1] !== "undefined") {
            error("You passed a second argument to root.render(...) but it only accepts " + "one argument.");
          }
        }
        updateContainer(children, root2, null, null);
      };
      ReactDOMHydrationRoot.prototype.unmount = ReactDOMRoot.prototype.unmount = function() {
        {
          if (typeof arguments[0] === "function") {
            error("unmount(...): does not support a callback argument. " + "To execute a side effect after rendering, declare it in a component body with useEffect().");
          }
        }
        var root2 = this._internalRoot;
        if (root2 !== null) {
          this._internalRoot = null;
          var container = root2.containerInfo;
          {
            if (isAlreadyRendering()) {
              error("Attempted to synchronously unmount a root while React was already " + "rendering. React cannot finish unmounting the root until the " + "current render has completed, which may lead to a race condition.");
            }
          }
          flushSync$1(function() {
            updateContainer(null, root2, null, null);
          });
          unmarkContainerAsRoot(container);
        }
      };
      function createRoot$1(container, options2) {
        if (!isValidContainer(container)) {
          throw new Error("createRoot(...): Target container is not a DOM element.");
        }
        warnIfReactDOMContainerInDEV(container);
        var isStrictMode = false;
        var concurrentUpdatesByDefaultOverride = false;
        var identifierPrefix = "";
        var onRecoverableError = defaultOnRecoverableError;
        if (options2 !== null && options2 !== undefined) {
          {
            if (options2.hydrate) {
              warn("hydrate through createRoot is deprecated. Use ReactDOMClient.hydrateRoot(container, <App />) instead.");
            } else {
              if (typeof options2 === "object" && options2 !== null && options2.$$typeof === REACT_ELEMENT_TYPE2) {
                error("You passed a JSX element to createRoot. You probably meant to " + "call root.render instead. " + `Example usage:

` + `  let root = createRoot(domContainer);
` + "  root.render(<App />);");
              }
            }
          }
          if (options2.unstable_strictMode === true) {
            isStrictMode = true;
          }
          if (options2.identifierPrefix !== undefined) {
            identifierPrefix = options2.identifierPrefix;
          }
          if (options2.onRecoverableError !== undefined) {
            onRecoverableError = options2.onRecoverableError;
          }
        }
        var root2 = createContainer(container, ConcurrentRoot, null, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError);
        markContainerAsRoot(root2.current, container);
        Dispatcher$1.current = ReactDOMClientDispatcher;
        var rootContainerElement = container.nodeType === COMMENT_NODE ? container.parentNode : container;
        listenToAllSupportedEvents(rootContainerElement);
        return new ReactDOMRoot(root2);
      }
      function ReactDOMHydrationRoot(internalRoot) {
        this._internalRoot = internalRoot;
      }
      function scheduleHydration(target) {
        if (target) {
          queueExplicitHydrationTarget(target);
        }
      }
      ReactDOMHydrationRoot.prototype.unstable_scheduleHydration = scheduleHydration;
      function hydrateRoot$1(container, initialChildren, options2) {
        if (!isValidContainer(container)) {
          throw new Error("hydrateRoot(...): Target container is not a DOM element.");
        }
        warnIfReactDOMContainerInDEV(container);
        {
          if (initialChildren === undefined) {
            error("Must provide initial children as second argument to hydrateRoot. " + "Example usage: hydrateRoot(domContainer, <App />)");
          }
        }
        var hydrationCallbacks = options2 != null ? options2 : null;
        var mutableSources = options2 != null && options2.hydratedSources || null;
        var isStrictMode = false;
        var concurrentUpdatesByDefaultOverride = false;
        var identifierPrefix = "";
        var onRecoverableError = defaultOnRecoverableError;
        if (options2 !== null && options2 !== undefined) {
          if (options2.unstable_strictMode === true) {
            isStrictMode = true;
          }
          if (options2.identifierPrefix !== undefined) {
            identifierPrefix = options2.identifierPrefix;
          }
          if (options2.onRecoverableError !== undefined) {
            onRecoverableError = options2.onRecoverableError;
          }
        }
        var root2 = createHydrationContainer(initialChildren, null, container, ConcurrentRoot, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError);
        markContainerAsRoot(root2.current, container);
        Dispatcher$1.current = ReactDOMClientDispatcher;
        listenToAllSupportedEvents(container);
        if (mutableSources) {
          for (var i = 0;i < mutableSources.length; i++) {
            var mutableSource = mutableSources[i];
            registerMutableSourceForHydration(root2, mutableSource);
          }
        }
        return new ReactDOMHydrationRoot(root2);
      }
      function isValidContainer(node) {
        return !!(node && (node.nodeType === ELEMENT_NODE || node.nodeType === DOCUMENT_NODE || node.nodeType === DOCUMENT_FRAGMENT_NODE || !disableCommentsAsDOMContainers));
      }
      function isValidContainerLegacy(node) {
        return !!(node && (node.nodeType === ELEMENT_NODE || node.nodeType === DOCUMENT_NODE || node.nodeType === DOCUMENT_FRAGMENT_NODE || node.nodeType === COMMENT_NODE && node.nodeValue === " react-mount-point-unstable "));
      }
      function warnIfReactDOMContainerInDEV(container) {
        {
          if (isContainerMarkedAsRoot(container)) {
            if (container._reactRootContainer) {
              error("You are calling ReactDOMClient.createRoot() on a container that was previously " + "passed to ReactDOM.render(). This is not supported.");
            } else {
              error("You are calling ReactDOMClient.createRoot() on a container that " + "has already been passed to createRoot() before. Instead, call " + "root.render() on the existing root instead if you want to update it.");
            }
          }
        }
      }
      var ReactCurrentOwner = ReactSharedInternals.ReactCurrentOwner;
      var topLevelUpdateWarnings;
      {
        topLevelUpdateWarnings = function(container) {
          if (container._reactRootContainer && container.nodeType !== COMMENT_NODE) {
            var hostInstance = findHostInstanceWithNoPortals(container._reactRootContainer.current);
            if (hostInstance) {
              if (hostInstance.parentNode !== container) {
                error("render(...): It looks like the React-rendered content of this " + "container was removed without using React. This is not " + "supported and will cause errors. Instead, call " + "ReactDOM.unmountComponentAtNode to empty a container.");
              }
            }
          }
          var isRootRenderedBySomeReact = !!container._reactRootContainer;
          var rootEl = getReactRootElementInContainer(container);
          var hasNonRootReactChild = !!(rootEl && getInstanceFromNode(rootEl));
          if (hasNonRootReactChild && !isRootRenderedBySomeReact) {
            error("render(...): Replacing React-rendered children with a new root " + "component. If you intended to update the children of this node, " + "you should instead have the existing children update their state " + "and render the new components instead of calling ReactDOM.render.");
          }
        };
      }
      function getReactRootElementInContainer(container) {
        if (!container) {
          return null;
        }
        if (container.nodeType === DOCUMENT_NODE) {
          return container.documentElement;
        } else {
          return container.firstChild;
        }
      }
      function noopOnRecoverableError() {}
      function legacyCreateRootFromDOMContainer(container, initialChildren, parentComponent, callback, isHydrationContainer) {
        if (isHydrationContainer) {
          if (typeof callback === "function") {
            var originalCallback = callback;
            callback = function() {
              var instance = getPublicRootInstance(root2);
              originalCallback.call(instance);
            };
          }
          var root2 = createHydrationContainer(initialChildren, callback, container, LegacyRoot, null, false, false, "", noopOnRecoverableError);
          container._reactRootContainer = root2;
          markContainerAsRoot(root2.current, container);
          var rootContainerElement = container.nodeType === COMMENT_NODE ? container.parentNode : container;
          listenToAllSupportedEvents(rootContainerElement);
          flushSync$1();
          return root2;
        } else {
          clearContainer(container);
          if (typeof callback === "function") {
            var _originalCallback = callback;
            callback = function() {
              var instance = getPublicRootInstance(_root);
              _originalCallback.call(instance);
            };
          }
          var _root = createContainer(container, LegacyRoot, null, false, false, "", noopOnRecoverableError);
          container._reactRootContainer = _root;
          markContainerAsRoot(_root.current, container);
          var _rootContainerElement = container.nodeType === COMMENT_NODE ? container.parentNode : container;
          listenToAllSupportedEvents(_rootContainerElement);
          flushSync$1(function() {
            updateContainer(initialChildren, _root, parentComponent, callback);
          });
          return _root;
        }
      }
      function warnOnInvalidCallback(callback, callerName) {
        {
          if (callback !== null && typeof callback !== "function") {
            error("%s(...): Expected the last optional `callback` argument to be a " + "function. Instead received: %s.", callerName, callback);
          }
        }
      }
      function legacyRenderSubtreeIntoContainer(parentComponent, children, container, forceHydrate, callback) {
        {
          topLevelUpdateWarnings(container);
          warnOnInvalidCallback(callback === undefined ? null : callback, "render");
        }
        var maybeRoot = container._reactRootContainer;
        var root2;
        if (!maybeRoot) {
          root2 = legacyCreateRootFromDOMContainer(container, children, parentComponent, callback, forceHydrate);
        } else {
          root2 = maybeRoot;
          if (typeof callback === "function") {
            var originalCallback = callback;
            callback = function() {
              var instance = getPublicRootInstance(root2);
              originalCallback.call(instance);
            };
          }
          updateContainer(children, root2, parentComponent, callback);
        }
        return getPublicRootInstance(root2);
      }
      function findDOMNode(componentOrElement) {
        {
          var owner = ReactCurrentOwner.current;
          if (owner !== null && owner.stateNode !== null) {
            var warnedAboutRefsInRender = owner.stateNode._warnedAboutRefsInRender;
            if (!warnedAboutRefsInRender) {
              error("%s is accessing findDOMNode inside its render(). " + "render() should be a pure function of props and state. It should " + "never access something that requires stale data from the previous " + "render, such as refs. Move this logic to componentDidMount and " + "componentDidUpdate instead.", getComponentNameFromType(owner.type) || "A component");
            }
            owner.stateNode._warnedAboutRefsInRender = true;
          }
        }
        if (componentOrElement == null) {
          return null;
        }
        if (componentOrElement.nodeType === ELEMENT_NODE) {
          return componentOrElement;
        }
        {
          return findHostInstanceWithWarning(componentOrElement, "findDOMNode");
        }
      }
      function hydrate(element, container, callback) {
        {
          error("ReactDOM.hydrate is no longer supported in React 18. Use hydrateRoot " + "instead. Until you switch to the new API, your app will behave as " + "if it's running React 17. Learn " + "more: https://reactjs.org/link/switch-to-createroot");
        }
        if (!isValidContainerLegacy(container)) {
          throw new Error("Target container is not a DOM element.");
        }
        {
          var isModernRoot = isContainerMarkedAsRoot(container) && container._reactRootContainer === undefined;
          if (isModernRoot) {
            error("You are calling ReactDOM.hydrate() on a container that was previously " + "passed to ReactDOMClient.createRoot(). This is not supported. " + "Did you mean to call hydrateRoot(container, element)?");
          }
        }
        return legacyRenderSubtreeIntoContainer(null, element, container, true, callback);
      }
      function render(element, container, callback) {
        {
          error("ReactDOM.render is no longer supported in React 18. Use createRoot " + "instead. Until you switch to the new API, your app will behave as " + "if it's running React 17. Learn " + "more: https://reactjs.org/link/switch-to-createroot");
        }
        if (!isValidContainerLegacy(container)) {
          throw new Error("Target container is not a DOM element.");
        }
        {
          var isModernRoot = isContainerMarkedAsRoot(container) && container._reactRootContainer === undefined;
          if (isModernRoot) {
            error("You are calling ReactDOM.render() on a container that was previously " + "passed to ReactDOMClient.createRoot(). This is not supported. " + "Did you mean to call root.render(element)?");
          }
        }
        return legacyRenderSubtreeIntoContainer(null, element, container, false, callback);
      }
      function unstable_renderSubtreeIntoContainer(parentComponent, element, containerNode, callback) {
        {
          error("ReactDOM.unstable_renderSubtreeIntoContainer() is no longer supported " + "in React 18. Consider using a portal instead. Until you switch to " + "the createRoot API, your app will behave as if it's running React " + "17. Learn more: https://reactjs.org/link/switch-to-createroot");
        }
        if (!isValidContainerLegacy(containerNode)) {
          throw new Error("Target container is not a DOM element.");
        }
        if (parentComponent == null || !has(parentComponent)) {
          throw new Error("parentComponent must be a valid React Component");
        }
        return legacyRenderSubtreeIntoContainer(parentComponent, element, containerNode, false, callback);
      }
      function unmountComponentAtNode(container) {
        if (!isValidContainerLegacy(container)) {
          throw new Error("unmountComponentAtNode(...): Target container is not a DOM element.");
        }
        {
          var isModernRoot = isContainerMarkedAsRoot(container) && container._reactRootContainer === undefined;
          if (isModernRoot) {
            error("You are calling ReactDOM.unmountComponentAtNode() on a container that was previously " + "passed to ReactDOMClient.createRoot(). This is not supported. Did you mean to call root.unmount()?");
          }
        }
        if (container._reactRootContainer) {
          {
            var rootEl = getReactRootElementInContainer(container);
            var renderedByDifferentReact = rootEl && !getInstanceFromNode(rootEl);
            if (renderedByDifferentReact) {
              error("unmountComponentAtNode(): The node you're attempting to unmount " + "was rendered by another copy of React.");
            }
          }
          flushSync$1(function() {
            legacyRenderSubtreeIntoContainer(null, null, container, false, function() {
              container._reactRootContainer = null;
              unmarkContainerAsRoot(container);
            });
          });
          return true;
        } else {
          {
            var _rootEl = getReactRootElementInContainer(container);
            var hasNonRootReactChild = !!(_rootEl && getInstanceFromNode(_rootEl));
            var isContainerReactRoot = container.nodeType === ELEMENT_NODE && isValidContainerLegacy(container.parentNode) && !!container.parentNode._reactRootContainer;
            if (hasNonRootReactChild) {
              error("unmountComponentAtNode(): The node you're attempting to unmount " + "was rendered by React and is not a top-level container. %s", isContainerReactRoot ? "You may have accidentally passed in a React root node instead " + "of its container." : "Instead, have the parent component update its state and " + "rerender in order to remove this component.");
            }
          }
          return false;
        }
      }
      var Dispatcher = Internals.Dispatcher;
      function prefetchDNS(href) {
        var passedOptionArg;
        {
          if (arguments[1] !== undefined) {
            passedOptionArg = arguments[1];
          }
        }
        var dispatcher = Dispatcher.current;
        if (dispatcher) {
          {
            if (passedOptionArg !== undefined) {
              dispatcher.prefetchDNS(href, passedOptionArg);
            } else {
              dispatcher.prefetchDNS(href);
            }
          }
        }
      }
      function preconnect(href, options2) {
        var dispatcher = Dispatcher.current;
        if (dispatcher) {
          dispatcher.preconnect(href, options2);
        }
      }
      function preload(href, options2) {
        var dispatcher = Dispatcher.current;
        if (dispatcher) {
          dispatcher.preload(href, options2);
        }
      }
      function preinit(href, options2) {
        var dispatcher = Dispatcher.current;
        if (dispatcher) {
          dispatcher.preinit(href, options2);
        }
      }
      {
        if (typeof Map !== "function" || Map.prototype == null || typeof Map.prototype.forEach !== "function" || typeof Set !== "function" || Set.prototype == null || typeof Set.prototype.clear !== "function" || typeof Set.prototype.forEach !== "function") {
          error("React depends on Map and Set built-in types. Make sure that you load a " + "polyfill in older browsers. https://reactjs.org/link/react-polyfills");
        }
      }
      function createPortal(children, container) {
        var key = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;
        if (!isValidContainer(container)) {
          throw new Error("Target container is not a DOM element.");
        }
        return createPortal$1(children, container, null, key);
      }
      function renderSubtreeIntoContainer(parentComponent, element, containerNode, callback) {
        return unstable_renderSubtreeIntoContainer(parentComponent, element, containerNode, callback);
      }
      function createRoot(container, options2) {
        {
          if (!Internals.usingClientEntryPoint && true) {
            error('You are importing createRoot from "react-dom" which is not supported. ' + 'You should instead import it from "react-dom/client".');
          }
        }
        return createRoot$1(container, options2);
      }
      function hydrateRoot(container, initialChildren, options2) {
        {
          if (!Internals.usingClientEntryPoint && true) {
            error('You are importing hydrateRoot from "react-dom" which is not supported. ' + 'You should instead import it from "react-dom/client".');
          }
        }
        return hydrateRoot$1(container, initialChildren, options2);
      }
      function flushSync(fn) {
        {
          if (isAlreadyRendering()) {
            error("flushSync was called from inside a lifecycle method. React cannot " + "flush when React is already rendering. Consider moving this call to " + "a scheduler task or micro task.");
          }
        }
        return flushSync$1(fn);
      }
      Internals.Events = [getInstanceFromNode, getNodeFromInstance, getFiberCurrentPropsFromNode, enqueueStateRestore, restoreStateIfNeeded, batchedUpdates$1];
      var foundDevTools = injectIntoDevTools({
        findFiberByHostInstance: getClosestInstanceFromNode,
        bundleType: 1,
        version: ReactVersion,
        rendererPackageName: "react-dom"
      });
      {
        if (!foundDevTools && canUseDOM && window.top === window.self) {
          if (navigator.userAgent.indexOf("Chrome") > -1 && navigator.userAgent.indexOf("Edge") === -1 || navigator.userAgent.indexOf("Firefox") > -1) {
            var protocol = window.location.protocol;
            if (/^(https?|file):$/.test(protocol)) {
              console.info("%cDownload the React DevTools " + "for a better development experience: " + "https://reactjs.org/link/react-devtools" + (protocol === "file:" ? `
You might need to use a local HTTP server (instead of file://): ` + "https://reactjs.org/link/react-devtools-faq" : ""), "font-weight:bold");
            }
          }
        }
      }
      exports.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = Internals;
      exports.createPortal = createPortal;
      exports.createRoot = createRoot;
      exports.experimental_useFormStatus = useFormStatus;
      exports.findDOMNode = findDOMNode;
      exports.flushSync = flushSync;
      exports.hydrate = hydrate;
      exports.hydrateRoot = hydrateRoot;
      exports.preconnect = preconnect;
      exports.prefetchDNS = prefetchDNS;
      exports.preinit = preinit;
      exports.preload = preload;
      exports.render = render;
      exports.unmountComponentAtNode = unmountComponentAtNode;
      exports.unstable_batchedUpdates = batchedUpdates$1;
      exports.unstable_renderSubtreeIntoContainer = renderSubtreeIntoContainer;
      exports.unstable_runWithPriority = runWithPriority;
      exports.version = ReactVersion;
      if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop === "function") {
        __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop(new Error);
      }
    })();
  }
});

// node_modules/react-dom/index.js
var require_react_dom = __commonJS((exports, module) => {
  if (false) {} else {
    module.exports = require_react_dom_development();
  }
});

// node_modules/react-dom/client.js
var require_client = __commonJS((exports) => {
  var m = __toESM(require_react_dom(), 1);
  if (false) {} else {
    i = m.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;
    exports.createRoot = function(c, o) {
      i.usingClientEntryPoint = true;
      try {
        return m.createRoot(c, o);
      } finally {
        i.usingClientEntryPoint = false;
      }
    };
    exports.hydrateRoot = function(c, h, o) {
      i.usingClientEntryPoint = true;
      try {
        return m.hydrateRoot(c, h, o);
      } finally {
        i.usingClientEntryPoint = false;
      }
    };
  }
  var i;
});

// node_modules/@ronin/blade/dist/chunk-FSLC75ZG.js
var CLIENT_REFERENCE = Symbol.for("react.client.reference");
var REACT_FORWARD_REF_TYPE = Symbol.for("react.forward_ref");
var wrapClientComponent = (component, name) => {
  const chunkId = name.toLowerCase();
  const isNetlify = typeof Netlify !== "undefined";
  if (typeof window === "undefined" || isNetlify) {
    Object.defineProperties(component.$$typeof === REACT_FORWARD_REF_TYPE ? component.render : component, {
      $$typeof: { value: CLIENT_REFERENCE },
      name: { value: name },
      chunk: { value: chunkId },
      id: { value: `native-${name}` }
    });
  } else {
    window.BLADE_CHUNKS[chunkId] = { [name]: component };
  }
};

// node_modules/@ronin/blade/dist/chunk-BQDZLM4F.js
var CLIENT_ASSET_PREFIX = "/client";
var IS_DEV = import.meta.env.BLADE_ENV === "development";
var populatePathSegments = (defaultHref, params) => {
  let href = defaultHref;
  const currentQuery = Object.assign({}, params);
  const pathSegments = Array.from(href.matchAll(/\[(.*?)\]/g));
  for (const pathSegment of pathSegments) {
    const [segment, segmentName] = pathSegment;
    const name = segmentName.replace("...", "");
    let value = currentQuery[name];
    if (!value)
      continue;
    if (Array.isArray(value)) {
      value = value.join("/");
    }
    href = href.replace(segment, value);
  }
  return href === "/" ? href : href.replace(/\/$/, "");
};
var getOutputFile = (bundleId, type) => {
  return `${CLIENT_ASSET_PREFIX}/main.${bundleId}.${type}`;
};

// node_modules/@ronin/blade/dist/chunk-2QIMAITT.js
var import_react = __toESM(require_react(), 1);
var RootServerContext = import_react.createContext(null);

// node_modules/@ronin/blade/dist/chunk-4VNS5WPM.js
var __create2 = Object.create;
var __defProp2 = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames2 = Object.getOwnPropertyNames;
var __getProtoOf2 = Object.getPrototypeOf;
var __hasOwnProp2 = Object.prototype.hasOwnProperty;
var __commonJS2 = (cb, mod) => function __require2() {
  return mod || (0, cb[__getOwnPropNames2(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames2(from))
      if (!__hasOwnProp2.call(to, key) && key !== except)
        __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM2 = (mod, isNodeMode, target) => (target = mod != null ? __create2(__getProtoOf2(mod)) : {}, __copyProps(isNodeMode || !mod || !mod.__esModule ? __defProp2(target, "default", { value: mod, enumerable: true }) : target, mod));

// node_modules/@ronin/blade/dist/chunk-6DGORCX6.js
var import_react2 = __toESM(require_react(), 1);
var require_eventemitter3 = __commonJS2({
  "node_modules/eventemitter3/index.js"(exports, module) {
    var has = Object.prototype.hasOwnProperty;
    var prefix = "~";
    function Events() {}
    if (Object.create) {
      Events.prototype = /* @__PURE__ */ Object.create(null);
      if (!new Events().__proto__)
        prefix = false;
    }
    function EE(fn, context, once) {
      this.fn = fn;
      this.context = context;
      this.once = once || false;
    }
    function addListener(emitter, event, fn, context, once) {
      if (typeof fn !== "function") {
        throw new TypeError("The listener must be a function");
      }
      var listener = new EE(fn, context || emitter, once), evt = prefix ? prefix + event : event;
      if (!emitter._events[evt])
        emitter._events[evt] = listener, emitter._eventsCount++;
      else if (!emitter._events[evt].fn)
        emitter._events[evt].push(listener);
      else
        emitter._events[evt] = [emitter._events[evt], listener];
      return emitter;
    }
    function clearEvent(emitter, evt) {
      if (--emitter._eventsCount === 0)
        emitter._events = new Events;
      else
        delete emitter._events[evt];
    }
    function EventEmitter2() {
      this._events = new Events;
      this._eventsCount = 0;
    }
    EventEmitter2.prototype.eventNames = function eventNames() {
      var names = [], events, name;
      if (this._eventsCount === 0)
        return names;
      for (name in events = this._events) {
        if (has.call(events, name))
          names.push(prefix ? name.slice(1) : name);
      }
      if (Object.getOwnPropertySymbols) {
        return names.concat(Object.getOwnPropertySymbols(events));
      }
      return names;
    };
    EventEmitter2.prototype.listeners = function listeners(event) {
      var evt = prefix ? prefix + event : event, handlers = this._events[evt];
      if (!handlers)
        return [];
      if (handlers.fn)
        return [handlers.fn];
      for (var i = 0, l = handlers.length, ee = new Array(l);i < l; i++) {
        ee[i] = handlers[i].fn;
      }
      return ee;
    };
    EventEmitter2.prototype.listenerCount = function listenerCount(event) {
      var evt = prefix ? prefix + event : event, listeners = this._events[evt];
      if (!listeners)
        return 0;
      if (listeners.fn)
        return 1;
      return listeners.length;
    };
    EventEmitter2.prototype.emit = function emit(event, a1, a2, a3, a4, a5) {
      var evt = prefix ? prefix + event : event;
      if (!this._events[evt])
        return false;
      var listeners = this._events[evt], len = arguments.length, args, i;
      if (listeners.fn) {
        if (listeners.once)
          this.removeListener(event, listeners.fn, undefined, true);
        switch (len) {
          case 1:
            return listeners.fn.call(listeners.context), true;
          case 2:
            return listeners.fn.call(listeners.context, a1), true;
          case 3:
            return listeners.fn.call(listeners.context, a1, a2), true;
          case 4:
            return listeners.fn.call(listeners.context, a1, a2, a3), true;
          case 5:
            return listeners.fn.call(listeners.context, a1, a2, a3, a4), true;
          case 6:
            return listeners.fn.call(listeners.context, a1, a2, a3, a4, a5), true;
        }
        for (i = 1, args = new Array(len - 1);i < len; i++) {
          args[i - 1] = arguments[i];
        }
        listeners.fn.apply(listeners.context, args);
      } else {
        var length = listeners.length, j;
        for (i = 0;i < length; i++) {
          if (listeners[i].once)
            this.removeListener(event, listeners[i].fn, undefined, true);
          switch (len) {
            case 1:
              listeners[i].fn.call(listeners[i].context);
              break;
            case 2:
              listeners[i].fn.call(listeners[i].context, a1);
              break;
            case 3:
              listeners[i].fn.call(listeners[i].context, a1, a2);
              break;
            case 4:
              listeners[i].fn.call(listeners[i].context, a1, a2, a3);
              break;
            default:
              if (!args)
                for (j = 1, args = new Array(len - 1);j < len; j++) {
                  args[j - 1] = arguments[j];
                }
              listeners[i].fn.apply(listeners[i].context, args);
          }
        }
      }
      return true;
    };
    EventEmitter2.prototype.on = function on(event, fn, context) {
      return addListener(this, event, fn, context, false);
    };
    EventEmitter2.prototype.once = function once(event, fn, context) {
      return addListener(this, event, fn, context, true);
    };
    EventEmitter2.prototype.removeListener = function removeListener(event, fn, context, once) {
      var evt = prefix ? prefix + event : event;
      if (!this._events[evt])
        return this;
      if (!fn) {
        clearEvent(this, evt);
        return this;
      }
      var listeners = this._events[evt];
      if (listeners.fn) {
        if (listeners.fn === fn && (!once || listeners.once) && (!context || listeners.context === context)) {
          clearEvent(this, evt);
        }
      } else {
        for (var i = 0, events = [], length = listeners.length;i < length; i++) {
          if (listeners[i].fn !== fn || once && !listeners[i].once || context && listeners[i].context !== context) {
            events.push(listeners[i]);
          }
        }
        if (events.length)
          this._events[evt] = events.length === 1 ? events[0] : events;
        else
          clearEvent(this, evt);
      }
      return this;
    };
    EventEmitter2.prototype.removeAllListeners = function removeAllListeners(event) {
      var evt;
      if (event) {
        evt = prefix ? prefix + event : event;
        if (this._events[evt])
          clearEvent(this, evt);
      } else {
        this._events = new Events;
        this._eventsCount = 0;
      }
      return this;
    };
    EventEmitter2.prototype.off = EventEmitter2.prototype.removeListener;
    EventEmitter2.prototype.addListener = EventEmitter2.prototype.on;
    EventEmitter2.prefixed = prefix;
    EventEmitter2.EventEmitter = EventEmitter2;
    if (typeof module !== "undefined") {
      module.exports = EventEmitter2;
    }
  }
});
var require_retry_operation = __commonJS2({
  "node_modules/retry/lib/retry_operation.js"(exports, module) {
    function RetryOperation(timeouts, options) {
      if (typeof options === "boolean") {
        options = { forever: options };
      }
      this._originalTimeouts = JSON.parse(JSON.stringify(timeouts));
      this._timeouts = timeouts;
      this._options = options || {};
      this._maxRetryTime = options && options.maxRetryTime || Infinity;
      this._fn = null;
      this._errors = [];
      this._attempts = 1;
      this._operationTimeout = null;
      this._operationTimeoutCb = null;
      this._timeout = null;
      this._operationStart = null;
      this._timer = null;
      if (this._options.forever) {
        this._cachedTimeouts = this._timeouts.slice(0);
      }
    }
    module.exports = RetryOperation;
    RetryOperation.prototype.reset = function() {
      this._attempts = 1;
      this._timeouts = this._originalTimeouts.slice(0);
    };
    RetryOperation.prototype.stop = function() {
      if (this._timeout) {
        clearTimeout(this._timeout);
      }
      if (this._timer) {
        clearTimeout(this._timer);
      }
      this._timeouts = [];
      this._cachedTimeouts = null;
    };
    RetryOperation.prototype.retry = function(err) {
      if (this._timeout) {
        clearTimeout(this._timeout);
      }
      if (!err) {
        return false;
      }
      var currentTime = (/* @__PURE__ */ new Date()).getTime();
      if (err && currentTime - this._operationStart >= this._maxRetryTime) {
        this._errors.push(err);
        this._errors.unshift(new Error("RetryOperation timeout occurred"));
        return false;
      }
      this._errors.push(err);
      var timeout = this._timeouts.shift();
      if (timeout === undefined) {
        if (this._cachedTimeouts) {
          this._errors.splice(0, this._errors.length - 1);
          timeout = this._cachedTimeouts.slice(-1);
        } else {
          return false;
        }
      }
      var self = this;
      this._timer = setTimeout(function() {
        self._attempts++;
        if (self._operationTimeoutCb) {
          self._timeout = setTimeout(function() {
            self._operationTimeoutCb(self._attempts);
          }, self._operationTimeout);
          if (self._options.unref) {
            self._timeout.unref();
          }
        }
        self._fn(self._attempts);
      }, timeout);
      if (this._options.unref) {
        this._timer.unref();
      }
      return true;
    };
    RetryOperation.prototype.attempt = function(fn, timeoutOps) {
      this._fn = fn;
      if (timeoutOps) {
        if (timeoutOps.timeout) {
          this._operationTimeout = timeoutOps.timeout;
        }
        if (timeoutOps.cb) {
          this._operationTimeoutCb = timeoutOps.cb;
        }
      }
      var self = this;
      if (this._operationTimeoutCb) {
        this._timeout = setTimeout(function() {
          self._operationTimeoutCb();
        }, self._operationTimeout);
      }
      this._operationStart = (/* @__PURE__ */ new Date()).getTime();
      this._fn(this._attempts);
    };
    RetryOperation.prototype.try = function(fn) {
      console.log("Using RetryOperation.try() is deprecated");
      this.attempt(fn);
    };
    RetryOperation.prototype.start = function(fn) {
      console.log("Using RetryOperation.start() is deprecated");
      this.attempt(fn);
    };
    RetryOperation.prototype.start = RetryOperation.prototype.try;
    RetryOperation.prototype.errors = function() {
      return this._errors;
    };
    RetryOperation.prototype.attempts = function() {
      return this._attempts;
    };
    RetryOperation.prototype.mainError = function() {
      if (this._errors.length === 0) {
        return null;
      }
      var counts = {};
      var mainError = null;
      var mainErrorCount = 0;
      for (var i = 0;i < this._errors.length; i++) {
        var error = this._errors[i];
        var message = error.message;
        var count = (counts[message] || 0) + 1;
        counts[message] = count;
        if (count >= mainErrorCount) {
          mainError = error;
          mainErrorCount = count;
        }
      }
      return mainError;
    };
  }
});
var require_retry = __commonJS2({
  "node_modules/retry/lib/retry.js"(exports) {
    var RetryOperation = require_retry_operation();
    exports.operation = function(options) {
      var timeouts = exports.timeouts(options);
      return new RetryOperation(timeouts, {
        forever: options && (options.forever || options.retries === Infinity),
        unref: options && options.unref,
        maxRetryTime: options && options.maxRetryTime
      });
    };
    exports.timeouts = function(options) {
      if (options instanceof Array) {
        return [].concat(options);
      }
      var opts = {
        retries: 10,
        factor: 2,
        minTimeout: 1 * 1000,
        maxTimeout: Infinity,
        randomize: false
      };
      for (var key in options) {
        opts[key] = options[key];
      }
      if (opts.minTimeout > opts.maxTimeout) {
        throw new Error("minTimeout is greater than maxTimeout");
      }
      var timeouts = [];
      for (var i = 0;i < opts.retries; i++) {
        timeouts.push(this.createTimeout(i, opts));
      }
      if (options && options.forever && !timeouts.length) {
        timeouts.push(this.createTimeout(i, opts));
      }
      timeouts.sort(function(a, b) {
        return a - b;
      });
      return timeouts;
    };
    exports.createTimeout = function(attempt, opts) {
      var random = opts.randomize ? Math.random() + 1 : 1;
      var timeout = Math.round(random * Math.max(opts.minTimeout, 1) * Math.pow(opts.factor, attempt));
      timeout = Math.min(timeout, opts.maxTimeout);
      return timeout;
    };
    exports.wrap = function(obj, options, methods) {
      if (options instanceof Array) {
        methods = options;
        options = null;
      }
      if (!methods) {
        methods = [];
        for (var key in obj) {
          if (typeof obj[key] === "function") {
            methods.push(key);
          }
        }
      }
      for (var i = 0;i < methods.length; i++) {
        var method = methods[i];
        var original = obj[method];
        obj[method] = function retryWrapper(original2) {
          var op = exports.operation(options);
          var args = Array.prototype.slice.call(arguments, 1);
          var callback = args.pop();
          args.push(function(err) {
            if (op.retry(err)) {
              return;
            }
            if (err) {
              arguments[0] = op.mainError();
            }
            callback.apply(this, arguments);
          });
          op.attempt(function() {
            original2.apply(obj, args);
          });
        }.bind(obj, original);
        obj[method].options = options;
      }
    };
  }
});
var require_retry2 = __commonJS2({
  "node_modules/retry/index.js"(exports, module) {
    module.exports = require_retry();
  }
});
var require_lib = __commonJS2({
  "node_modules/async-retry/lib/index.js"(exports, module) {
    var retrier = require_retry2();
    function retry2(fn, opts) {
      function run(resolve, reject) {
        var options = opts || {};
        var op;
        if (!("randomize" in options)) {
          options.randomize = true;
        }
        op = retrier.operation(options);
        function bail(err) {
          reject(err || new Error("Aborted"));
        }
        function onError(err, num) {
          if (err.bail) {
            bail(err);
            return;
          }
          if (!op.retry(err)) {
            reject(op.mainError());
          } else if (options.onRetry) {
            options.onRetry(err, num);
          }
        }
        function runAttempt(num) {
          var val;
          try {
            val = fn(bail, num);
          } catch (err) {
            onError(err, num);
            return;
          }
          Promise.resolve(val).then(resolve).catch(function catchIt(err) {
            onError(err, num);
          });
        }
        op.attempt(runAttempt);
      }
      return new Promise(run);
    }
    module.exports = retry2;
  }
});
var import_index = __toESM2(require_eventemitter3(), 1);
var TimeoutError = class extends Error {
  constructor(message) {
    super(message);
    this.name = "TimeoutError";
  }
};
var AbortError = class extends Error {
  constructor(message) {
    super();
    this.name = "AbortError";
    this.message = message;
  }
};
var getDOMException = (errorMessage) => globalThis.DOMException === undefined ? new AbortError(errorMessage) : new DOMException(errorMessage);
var getAbortedReason = (signal) => {
  const reason = signal.reason === undefined ? getDOMException("This operation was aborted.") : signal.reason;
  return reason instanceof Error ? reason : getDOMException(reason);
};
function pTimeout(promise, options) {
  const {
    milliseconds,
    fallback,
    message,
    customTimers = { setTimeout, clearTimeout }
  } = options;
  let timer;
  let abortHandler;
  const wrappedPromise = new Promise((resolve, reject) => {
    if (typeof milliseconds !== "number" || Math.sign(milliseconds) !== 1) {
      throw new TypeError(`Expected \`milliseconds\` to be a positive number, got \`${milliseconds}\``);
    }
    if (options.signal) {
      const { signal } = options;
      if (signal.aborted) {
        reject(getAbortedReason(signal));
      }
      abortHandler = () => {
        reject(getAbortedReason(signal));
      };
      signal.addEventListener("abort", abortHandler, { once: true });
    }
    if (milliseconds === Number.POSITIVE_INFINITY) {
      promise.then(resolve, reject);
      return;
    }
    const timeoutError = new TimeoutError;
    timer = customTimers.setTimeout.call(undefined, () => {
      if (fallback) {
        try {
          resolve(fallback());
        } catch (error) {
          reject(error);
        }
        return;
      }
      if (typeof promise.cancel === "function") {
        promise.cancel();
      }
      if (message === false) {
        resolve();
      } else if (message instanceof Error) {
        reject(message);
      } else {
        timeoutError.message = message ?? `Promise timed out after ${milliseconds} milliseconds`;
        reject(timeoutError);
      }
    }, milliseconds);
    (async () => {
      try {
        resolve(await promise);
      } catch (error) {
        reject(error);
      }
    })();
  });
  const cancelablePromise = wrappedPromise.finally(() => {
    cancelablePromise.clear();
    if (abortHandler && options.signal) {
      options.signal.removeEventListener("abort", abortHandler);
    }
  });
  cancelablePromise.clear = () => {
    customTimers.clearTimeout.call(undefined, timer);
    timer = undefined;
  };
  return cancelablePromise;
}
function lowerBound(array, value, comparator) {
  let first = 0;
  let count = array.length;
  while (count > 0) {
    const step = Math.trunc(count / 2);
    let it = first + step;
    if (comparator(array[it], value) <= 0) {
      first = ++it;
      count -= step + 1;
    } else {
      count = step;
    }
  }
  return first;
}
var PriorityQueue = class {
  #queue = [];
  enqueue(run, options) {
    options = {
      priority: 0,
      ...options
    };
    const element = {
      priority: options.priority,
      run
    };
    if (this.size && this.#queue[this.size - 1].priority >= options.priority) {
      this.#queue.push(element);
      return;
    }
    const index = lowerBound(this.#queue, element, (a, b) => b.priority - a.priority);
    this.#queue.splice(index, 0, element);
  }
  dequeue() {
    const item = this.#queue.shift();
    return item?.run;
  }
  filter(options) {
    return this.#queue.filter((element) => element.priority === options.priority).map((element) => element.run);
  }
  get size() {
    return this.#queue.length;
  }
};
var PQueue = class extends import_index.default {
  #carryoverConcurrencyCount;
  #isIntervalIgnored;
  #intervalCount = 0;
  #intervalCap;
  #interval;
  #intervalEnd = 0;
  #intervalId;
  #timeoutId;
  #queue;
  #queueClass;
  #pending = 0;
  #concurrency;
  #isPaused;
  #throwOnTimeout;
  timeout;
  constructor(options) {
    super();
    options = {
      carryoverConcurrencyCount: false,
      intervalCap: Number.POSITIVE_INFINITY,
      interval: 0,
      concurrency: Number.POSITIVE_INFINITY,
      autoStart: true,
      queueClass: PriorityQueue,
      ...options
    };
    if (!(typeof options.intervalCap === "number" && options.intervalCap >= 1)) {
      throw new TypeError(`Expected \`intervalCap\` to be a number from 1 and up, got \`${options.intervalCap?.toString() ?? ""}\` (${typeof options.intervalCap})`);
    }
    if (options.interval === undefined || !(Number.isFinite(options.interval) && options.interval >= 0)) {
      throw new TypeError(`Expected \`interval\` to be a finite number >= 0, got \`${options.interval?.toString() ?? ""}\` (${typeof options.interval})`);
    }
    this.#carryoverConcurrencyCount = options.carryoverConcurrencyCount;
    this.#isIntervalIgnored = options.intervalCap === Number.POSITIVE_INFINITY || options.interval === 0;
    this.#intervalCap = options.intervalCap;
    this.#interval = options.interval;
    this.#queue = new options.queueClass;
    this.#queueClass = options.queueClass;
    this.concurrency = options.concurrency;
    this.timeout = options.timeout;
    this.#throwOnTimeout = options.throwOnTimeout === true;
    this.#isPaused = options.autoStart === false;
  }
  get #doesIntervalAllowAnother() {
    return this.#isIntervalIgnored || this.#intervalCount < this.#intervalCap;
  }
  get #doesConcurrentAllowAnother() {
    return this.#pending < this.#concurrency;
  }
  #next() {
    this.#pending--;
    this.#tryToStartAnother();
    this.emit("next");
  }
  #onResumeInterval() {
    this.#onInterval();
    this.#initializeIntervalIfNeeded();
    this.#timeoutId = undefined;
  }
  get #isIntervalPaused() {
    const now = Date.now();
    if (this.#intervalId === undefined) {
      const delay = this.#intervalEnd - now;
      if (delay < 0) {
        this.#intervalCount = this.#carryoverConcurrencyCount ? this.#pending : 0;
      } else {
        if (this.#timeoutId === undefined) {
          this.#timeoutId = setTimeout(() => {
            this.#onResumeInterval();
          }, delay);
        }
        return true;
      }
    }
    return false;
  }
  #tryToStartAnother() {
    if (this.#queue.size === 0) {
      if (this.#intervalId) {
        clearInterval(this.#intervalId);
      }
      this.#intervalId = undefined;
      this.emit("empty");
      if (this.#pending === 0) {
        this.emit("idle");
      }
      return false;
    }
    if (!this.#isPaused) {
      const canInitializeInterval = !this.#isIntervalPaused;
      if (this.#doesIntervalAllowAnother && this.#doesConcurrentAllowAnother) {
        const job = this.#queue.dequeue();
        if (!job) {
          return false;
        }
        this.emit("active");
        job();
        if (canInitializeInterval) {
          this.#initializeIntervalIfNeeded();
        }
        return true;
      }
    }
    return false;
  }
  #initializeIntervalIfNeeded() {
    if (this.#isIntervalIgnored || this.#intervalId !== undefined) {
      return;
    }
    this.#intervalId = setInterval(() => {
      this.#onInterval();
    }, this.#interval);
    this.#intervalEnd = Date.now() + this.#interval;
  }
  #onInterval() {
    if (this.#intervalCount === 0 && this.#pending === 0 && this.#intervalId) {
      clearInterval(this.#intervalId);
      this.#intervalId = undefined;
    }
    this.#intervalCount = this.#carryoverConcurrencyCount ? this.#pending : 0;
    this.#processQueue();
  }
  #processQueue() {
    while (this.#tryToStartAnother()) {}
  }
  get concurrency() {
    return this.#concurrency;
  }
  set concurrency(newConcurrency) {
    if (!(typeof newConcurrency === "number" && newConcurrency >= 1)) {
      throw new TypeError(`Expected \`concurrency\` to be a number from 1 and up, got \`${newConcurrency}\` (${typeof newConcurrency})`);
    }
    this.#concurrency = newConcurrency;
    this.#processQueue();
  }
  async#throwOnAbort(signal) {
    return new Promise((_resolve, reject) => {
      signal.addEventListener("abort", () => {
        reject(signal.reason);
      }, { once: true });
    });
  }
  async add(function_, options = {}) {
    options = {
      timeout: this.timeout,
      throwOnTimeout: this.#throwOnTimeout,
      ...options
    };
    return new Promise((resolve, reject) => {
      this.#queue.enqueue(async () => {
        this.#pending++;
        this.#intervalCount++;
        try {
          options.signal?.throwIfAborted();
          let operation = function_({ signal: options.signal });
          if (options.timeout) {
            operation = pTimeout(Promise.resolve(operation), { milliseconds: options.timeout });
          }
          if (options.signal) {
            operation = Promise.race([operation, this.#throwOnAbort(options.signal)]);
          }
          const result = await operation;
          resolve(result);
          this.emit("completed", result);
        } catch (error) {
          if (error instanceof TimeoutError && !options.throwOnTimeout) {
            resolve();
            return;
          }
          reject(error);
          this.emit("error", error);
        } finally {
          this.#next();
        }
      }, options);
      this.emit("add");
      this.#tryToStartAnother();
    });
  }
  async addAll(functions, options) {
    return Promise.all(functions.map(async (function_) => this.add(function_, options)));
  }
  start() {
    if (!this.#isPaused) {
      return this;
    }
    this.#isPaused = false;
    this.#processQueue();
    return this;
  }
  pause() {
    this.#isPaused = true;
  }
  clear() {
    this.#queue = new this.#queueClass;
  }
  async onEmpty() {
    if (this.#queue.size === 0) {
      return;
    }
    await this.#onEvent("empty");
  }
  async onSizeLessThan(limit) {
    if (this.#queue.size < limit) {
      return;
    }
    await this.#onEvent("next", () => this.#queue.size < limit);
  }
  async onIdle() {
    if (this.#pending === 0 && this.#queue.size === 0) {
      return;
    }
    await this.#onEvent("idle");
  }
  async#onEvent(event, filter) {
    return new Promise((resolve) => {
      const listener = () => {
        if (filter && !filter()) {
          return;
        }
        this.off(event, listener);
        resolve();
      };
      this.on(event, listener);
    });
  }
  get size() {
    return this.#queue.size;
  }
  sizeBy(options) {
    return this.#queue.filter(options).length;
  }
  get pending() {
    return this.#pending;
  }
  get isPaused() {
    return this.#isPaused;
  }
};
var RootClientContext = import_react2.createContext(null);
var omit = (obj, keys2) => {
  if (!obj)
    return {};
  if (!keys2 || keys2.length === 0)
    return obj;
  return keys2.reduce((acc, key) => {
    delete acc[key];
    return acc;
  }, { ...obj });
};
var import_async_retry = __toESM2(require_lib(), 1);
var retryOptions = {
  minTimeout: 10,
  retries: 5,
  factor: 6,
  maxRetryAfter: 20
};
var fetchRetry = async (request, requestInit) => {
  return (0, import_async_retry.default)(async (bail) => {
    try {
      const response = await fetch(request, requestInit);
      if (response.status >= 500 && response.status < 600 || response.status === 429) {
        const retryAfter = response.headers.has("retry-after") ? Number.parseInt(response.headers.get("retry-after"), 10) : null;
        if (retryAfter) {
          if (retryAfter > retryOptions.maxRetryAfter) {
            return response;
          }
          await new Promise((r) => {
            setTimeout(r, retryAfter * 1000);
          });
        }
        const error = new Error(response.statusText);
        error.body = await response.text();
        error.statusCode = response.status;
        throw error;
      }
      return response;
    } catch (err) {
      const error = err;
      if (error.type === "aborted") {
        return bail(error);
      }
      throw err;
    }
  });
};
var REACT_ELEMENT_TYPE = Symbol.for("react.element");
var PENDING = "pending";
var BLOCKED = "blocked";
var RESOLVED_MODEL = "resolved_model";
var RESOLVED_MODULE = "resolved_module";
var INITIALIZED = "fulfilled";
var ERRORED = "rejected";
function Chunk(status, value, reason, response) {
  this.status = status;
  this.value = value;
  this.reason = reason;
  this._response = response;
}
Chunk.prototype = Object.create(Promise.prototype);
Chunk.prototype.then = function(resolve, reject) {
  switch (this.status) {
    case RESOLVED_MODEL:
      initializeModelChunk(this);
      break;
    case RESOLVED_MODULE:
      initializeModuleChunk(this);
      break;
  }
  switch (this.status) {
    case INITIALIZED:
      resolve?.(this.value);
      break;
    case PENDING:
    case BLOCKED:
      if (resolve) {
        if (this.value === null)
          this.value = [];
        if (Array.isArray(this.value))
          this.value?.push(resolve);
      }
      if (reject) {
        if (this.reason === null)
          this.reason = [];
        if (Array.isArray(this.reason))
          this.reason?.push(reject);
      }
      break;
    default:
      reject?.(this.reason);
      break;
  }
};
var parseModel = (response, json) => JSON.parse(json, response._fromJSON);
var createPendingChunk = (response) => new Chunk(PENDING, null, null, response);
var createBlockedChunk = (response) => new Chunk(BLOCKED, null, null, response);
var createErrorChunk = (response, error) => new Chunk(ERRORED, null, error, response);
var createResolvedModelChunk = (response, value) => {
  return new Chunk(RESOLVED_MODEL, value, null, response);
};
var wakeChunk = (listeners, value) => {
  for (let i = 0;i < listeners.length; i++) {
    const listener = listeners[i];
    listener(value);
  }
};
var wakeChunkIfInitialized = (chunk, resolveListeners, rejectListeners) => {
  switch (chunk.status) {
    case INITIALIZED:
      wakeChunk(resolveListeners, chunk.value);
      break;
    case PENDING:
    case BLOCKED:
      chunk.value = resolveListeners;
      chunk.reason = rejectListeners;
      break;
    case ERRORED:
      if (rejectListeners) {
        wakeChunk(rejectListeners, chunk.reason);
      }
      break;
  }
};
var triggerErrorOnChunk = (chunk, error) => {
  if (chunk.status !== PENDING && chunk.status !== BLOCKED)
    return;
  const listeners = chunk.reason;
  const erroredChunk = chunk;
  erroredChunk.status = ERRORED;
  erroredChunk.reason = error;
  if (listeners !== null)
    wakeChunk(listeners, error);
};
var resolveModelChunk = (chunk, value) => {
  if (chunk.status !== PENDING)
    return;
  const resolveListeners = chunk.value;
  const rejectListeners = chunk.reason;
  const resolvedChunk = chunk;
  resolvedChunk.status = RESOLVED_MODEL;
  resolvedChunk.value = value;
  if (resolveListeners !== null) {
    initializeModelChunk(resolvedChunk);
    wakeChunkIfInitialized(chunk, resolveListeners, rejectListeners);
  }
};
var resolveModuleChunk = (chunk, value) => {
  if (chunk.status !== PENDING && chunk.status !== BLOCKED)
    return;
  const resolveListeners = chunk.value;
  const rejectListeners = chunk.reason;
  const resolvedChunk = chunk;
  resolvedChunk.status = RESOLVED_MODULE;
  resolvedChunk.value = value;
  if (resolveListeners !== null) {
    initializeModuleChunk(resolvedChunk);
    wakeChunkIfInitialized(chunk, resolveListeners, rejectListeners);
  }
};
var initializingChunk = null;
var initializingChunkBlockedModel = null;
var initializeModelChunk = (chunk) => {
  const prevChunk = initializingChunk;
  const prevBlocked = initializingChunkBlockedModel;
  initializingChunk = chunk;
  initializingChunkBlockedModel = null;
  try {
    const value = parseModel(chunk._response, chunk.value);
    if (initializingChunkBlockedModel !== null && initializingChunkBlockedModel.deps > 0) {
      initializingChunkBlockedModel.value = value;
      const blockedChunk = chunk;
      blockedChunk.status = BLOCKED;
      blockedChunk.value = null;
      blockedChunk.reason = null;
    } else {
      const initializedChunk = chunk;
      initializedChunk.status = INITIALIZED;
      initializedChunk.value = value;
    }
  } catch (error) {
    const erroredChunk = chunk;
    erroredChunk.status = ERRORED;
    erroredChunk.reason = error;
  } finally {
    initializingChunk = prevChunk;
    initializingChunkBlockedModel = prevBlocked;
  }
};
var initializeModuleChunk = (chunk) => {
  try {
    const moduleExports = window["BLADE_CHUNKS"][chunk.value?.chunks[0]];
    const value = moduleExports[chunk.value?.name];
    const initializedChunk = chunk;
    initializedChunk.status = INITIALIZED;
    initializedChunk.value = value;
  } catch (error) {
    const erroredChunk = chunk;
    erroredChunk.status = ERRORED;
    erroredChunk.reason = error;
  }
};
var reportGlobalError = (response, error) => {
  response._chunks.forEach((chunk) => {
    if (chunk.status === PENDING)
      triggerErrorOnChunk(chunk, error);
  });
};
var createElement = (type, key, props) => {
  const element = {
    $$typeof: REACT_ELEMENT_TYPE,
    type,
    key,
    ref: null,
    props,
    _owner: null,
    _store: {}
  };
  Object.defineProperty(element._store, "validated", {
    configurable: false,
    enumerable: false,
    writable: true,
    value: true
  });
  Object.defineProperty(element, "_self", {
    configurable: false,
    enumerable: false,
    writable: false,
    value: null
  });
  Object.defineProperty(element, "_source", {
    configurable: false,
    enumerable: false,
    writable: false,
    value: null
  });
  return element;
};
var getChunk = (response, id) => {
  const chunks = response._chunks;
  let chunk = chunks.get(id);
  if (!chunk) {
    chunk = createPendingChunk(response);
    chunks.set(id, chunk);
  }
  return chunk;
};
var createModelResolver = (chunk, parentObject, key) => {
  let blocked;
  if (initializingChunkBlockedModel) {
    blocked = initializingChunkBlockedModel;
    blocked.deps++;
  } else {
    blocked = initializingChunkBlockedModel = {
      deps: 1,
      value: null
    };
  }
  return (value) => {
    parentObject[key] = value;
    blocked.deps--;
    if (blocked.deps === 0) {
      if (chunk.status !== BLOCKED)
        return;
      const resolveListeners = chunk.value;
      const initializedChunk = chunk;
      initializedChunk.status = INITIALIZED;
      initializedChunk.value = blocked.value;
      if (resolveListeners !== null) {
        wakeChunk(resolveListeners, blocked.value);
      }
    }
  };
};
var createModelReject = (chunk) => (error) => triggerErrorOnChunk(chunk, error);
var parseModelString = (response, parentObject, key, value) => {
  if (value === "$")
    return REACT_ELEMENT_TYPE;
  if (value[0] !== "$")
    return value;
  switch (value[1]) {
    case "$": {
      return value.substring(1);
    }
    case "S": {
      return Symbol.for(value.substring(2));
    }
    default: {
      const id = Number.parseInt(value.substring(1), 16);
      const chunk = getChunk(response, id);
      switch (chunk.status) {
        case RESOLVED_MODEL:
          initializeModelChunk(chunk);
          break;
        case RESOLVED_MODULE:
          initializeModuleChunk(chunk);
          break;
      }
      switch (chunk.status) {
        case INITIALIZED:
          return chunk.value;
        case PENDING:
        case BLOCKED: {
          const parentChunk = initializingChunk;
          chunk.then(createModelResolver(parentChunk, parentObject, key), createModelReject(parentChunk));
          return null;
        }
        default:
          throw chunk.reason;
      }
    }
  }
};
var parseModelTuple = (_response, value) => {
  return value[0] === REACT_ELEMENT_TYPE ? createElement(value[1], value[2], value[3]) : value;
};
var resolveModel = (response, id, model) => {
  const chunks = response._chunks;
  const chunk = chunks.get(id);
  if (chunk) {
    resolveModelChunk(chunk, model);
  } else {
    chunks.set(id, createResolvedModelChunk(response, model));
  }
};
var resolveModule = (response, id, model) => {
  const chunks = response._chunks;
  const chunk = chunks.get(id);
  const moduleReference = parseModel(response, model);
  let blockedChunk;
  if (chunk) {
    blockedChunk = chunk;
    blockedChunk.status = BLOCKED;
  } else {
    blockedChunk = createBlockedChunk(response);
    chunks.set(id, blockedChunk);
  }
  resolveModuleChunk(blockedChunk, moduleReference);
};
var resolveErrorDev = (response, id, digest, message, stack) => {
  const details = message || "A Server Components error occurred without a message";
  const error = new Error(details);
  error.stack = stack;
  error.digest = digest;
  const errorWithDigest = error;
  const chunks = response._chunks;
  const chunk = chunks.get(id);
  if (chunk) {
    triggerErrorOnChunk(chunk, errorWithDigest);
  } else {
    chunks.set(id, createErrorChunk(response, errorWithDigest));
  }
};
var processFullRow = (response, row) => {
  if (row === "")
    return;
  const colon = row.indexOf(":", 0);
  const id = Number.parseInt(row.substring(0, colon), 16);
  const tag = row[colon + 1];
  switch (tag) {
    case "I": {
      resolveModule(response, id, row.substring(colon + 2));
      return;
    }
    case "E": {
      const errorInfo = JSON.parse(row.substring(colon + 2));
      resolveErrorDev(response, id, errorInfo.digest, errorInfo.message, errorInfo.stack);
      return;
    }
    default: {
      resolveModel(response, id, row.substring(colon + 1));
      return;
    }
  }
};
var processBinaryChunk = (response, defaultChunk) => {
  let chunk = defaultChunk;
  const stringDecoder = new TextDecoder;
  let linebreak = chunk.indexOf(10);
  while (linebreak > -1) {
    const fullrow = response._partialRow + stringDecoder.decode(chunk.subarray(0, linebreak));
    processFullRow(response, fullrow);
    response._partialRow = "";
    chunk = chunk.subarray(linebreak + 1);
    linebreak = chunk.indexOf(10);
  }
  response._partialRow += stringDecoder.decode(chunk, {
    stream: true
  });
};
var createFromJSONCallback = (response) => (key, value) => {
  if (typeof value === "string")
    return parseModelString(response, undefined, key, value);
  if (typeof value === "object" && value !== null)
    return parseModelTuple(response, value);
  return value;
};
var startReadingFromStream = (response, stream) => {
  const reader = stream.getReader();
  const progress = (chunk) => {
    const { done, value } = chunk;
    if (done) {
      reportGlobalError(response, new Error("Connection closed."));
      return;
    }
    processBinaryChunk(response, value);
    return reader.read().then(progress).catch(error);
  };
  const error = (err) => reportGlobalError(response, err);
  reader.read().then(progress).catch(error);
};
var createFromReadableStream = (stream) => {
  const response = {
    _chunks: /* @__PURE__ */ new Map,
    _partialRow: ""
  };
  response._fromJSON = createFromJSONCallback(response);
  startReadingFromStream(response, stream);
  return getChunk(response, 0);
};
var loadResource = async (bundleId, type) => {
  return new Promise((resolve, reject) => {
    const link = document.createElement("link");
    link.rel = "preload";
    link.as = type;
    link.onload = resolve;
    link.onerror = reject;
    link.href = getOutputFile(bundleId, type === "style" ? "css" : "js");
    document.head.appendChild(link);
  });
};
var fetchPage = async (path, options) => {
  let body = null;
  if (options && Object.keys(options).length > 0) {
    const formData = new FormData;
    formData.append("options", JSON.stringify(omit(options, ["files"])));
    if (options.files) {
      for (const [identifier, value] of options.files.entries()) {
        formData.append("files", value, identifier);
      }
    }
    body = formData;
  }
  const headers = new Headers({
    Accept: "application/json",
    "X-Client-Bundle-Id": window["BLADE_BUNDLE"]
  });
  const response = await fetchRetry(path, { method: "POST", body, headers });
  if (!response.ok) {
    if (response.headers.get("Content-Type") === "application/json") {
      console.error(await response.json());
      return null;
    }
    throw new Error(await response.text());
  }
  const serverBundleId = response.headers.get("X-Server-Bundle-Id");
  if (!response.body)
    throw new Error("Missing response body on client.");
  if (!serverBundleId) {
    const updateTime = response.headers.get("X-Update-Time");
    if (!updateTime)
      throw new Error("Missing response headers on client.");
    return {
      body: await createFromReadableStream(response.body),
      time: Number.parseInt(updateTime)
    };
  }
  const [markup] = await Promise.all([
    response.text(),
    loadResource(serverBundleId, "style"),
    loadResource(serverBundleId, "script")
  ]);
  const root = window["BLADE_ROOT"];
  if (!root)
    throw new Error("Missing React root");
  root.unmount();
  window["BLADE_ROOT"] = null;
  const parser = new DOMParser;
  const newDocument = parser.parseFromString(markup, "text/html");
  document.documentElement.innerHTML = newDocument.documentElement.innerHTML;
  [...Array.from(newDocument.documentElement.attributes)].forEach(({ name, value }) => {
    document.documentElement.setAttribute(name, value);
  });
  for (const oldScript of Array.from(document.querySelectorAll("script.blade-script"))) {
    const newScript = document.createElement("script");
    for (const attr of Array.from(oldScript.attributes)) {
      newScript.setAttribute(attr.name, attr.value);
    }
    document.head.appendChild(newScript);
    oldScript.remove();
  }
  return null;
};
var fetch_page_default = fetchPage;
var getSerializableContext = (serverContext) => ({
  url: serverContext.url,
  params: serverContext.params,
  userAgent: serverContext.userAgent,
  lastUpdate: serverContext.lastUpdate,
  geoLocation: serverContext.geoLocation,
  addressBarInSync: serverContext.addressBarInSync,
  languages: serverContext.languages,
  collected: {
    queries: serverContext.collected.queries.filter((details) => details.type === "write")
  }
});
var useUniversalContext = () => {
  const isNetlify = typeof Netlify !== "undefined";
  if (typeof window === "undefined" || isNetlify) {
    const serverContext = import_react2.useContext(RootServerContext);
    if (!serverContext)
      throw new Error("Missing server context in `useUniversalContext`");
    return getSerializableContext(serverContext);
  }
  const clientContext = import_react2.useContext(RootClientContext);
  if (!clientContext)
    throw new Error("Missing client context in `useUniversalContext`");
  const { deferredPromises, ...universalContext } = clientContext;
  return universalContext;
};
var usePrivateLocation = () => {
  const url = new URL(useUniversalContext().url);
  const isNetlify = typeof Netlify !== "undefined";
  if (typeof window === "undefined" || isNetlify)
    return url;
  url.hash = window.location.hash;
  return url;
};
var info = (...args) => {
  if (IS_DEV) {
    console.log(...args);
    return;
  }
  console.debug(...args);
};
var logs_default = {
  info
};
var pageTransitionQueue = new PQueue({ concurrency: 1 });
var usePageTransition = () => {
  const cache = import_react2.useRef(/* @__PURE__ */ new Map);
  const clientContext = import_react2.useContext(RootClientContext);
  if (!clientContext)
    throw new Error("Missing client context in `usePageTransition`");
  const privateLocationRef = usePrivateLocationRef();
  const lastUpdateTime = import_react2.useRef(clientContext.lastUpdate);
  import_react2.useLayoutEffect(() => {
    lastUpdateTime.current = clientContext.lastUpdate;
  }, [clientContext.lastUpdate]);
  return (path, type, options) => {
    const cacheable = !(options?.queries || options?.immediatelyUpdateQueryParams);
    const privateLocation = privateLocationRef.current;
    if (cacheable) {
      const maxAge = Date.now() - 1e4;
      const cacheEntry = cache.current.get(path);
      if (cacheEntry && cacheEntry.time > maxAge) {
        return () => window["BLADE_ROOT"].render(cacheEntry.body);
      }
    }
    if (options?.immediatelyUpdateQueryParams) {
      const url = new URL(path, privateLocation.origin);
      history.replaceState(history.state, "", url);
      clientContext.setClientQueryParams(url.search);
    }
    if (type === "automatic" && (pageTransitionQueue.size > 0 || pageTransitionQueue.pending > 0)) {
      return () => {
        logs_default.info("Skipping automatic page transition because of other pending page transitions.");
      };
    }
    const ongoingManualAmount = pageTransitionQueue.sizeBy({ priority: 1 });
    const ongoingAutomaticAmount = pageTransitionQueue.sizeBy({ priority: 0 });
    if (ongoingManualAmount === 0 && ongoingAutomaticAmount > 0) {
      pageTransitionQueue.clear();
    }
    const pagePromise = pageTransitionQueue.add(() => fetch_page_default(path, options), {
      priority: type === "manual" ? 1 : 0
    });
    const pagePromiseChain = pagePromise.then((page) => {
      if (!page) {
        logs_default.info("Skipping page transition because it timed out or crashed.");
        return;
      }
      if (cacheable)
        cache.current.set(path, page);
      if (pageTransitionQueue.size > 0 || pageTransitionQueue.pending > 0) {
        logs_default.info("Skipping page transition because of a newer pending page transition.");
        return;
      }
      return page;
    });
    return () => {
      pagePromiseChain.then((page) => {
        if (!page)
          return;
        window["BLADE_ROOT"].render(page.body);
      });
    };
  };
};
var useRevalidation = () => {
  const transitionPage = usePageTransition();
  const privateLocationRef = usePrivateLocationRef();
  return (reason) => {
    const privateLocation = privateLocationRef.current;
    const filesUpdated = reason === "files updated";
    if ((!window.navigator.onLine || !document.hasFocus()) && !filesUpdated) {
      logs_default.info(`Skipping revalidation (${reason})`);
      return;
    }
    const path = privateLocation.pathname + privateLocation.search + privateLocation.hash;
    logs_default.info(`Revalidating ${path} (${reason})`);
    transitionPage(path, "automatic")();
  };
};
var usePrivateLocationRef = () => {
  const privateLocation = usePrivateLocation();
  const populatePathname = usePopulatePathname();
  privateLocation.pathname = populatePathname(privateLocation.pathname);
  const ref = import_react2.useRef(privateLocation);
  import_react2.useEffect(() => {
    ref.current = privateLocation;
  }, [privateLocation, privateLocation.href]);
  return ref;
};
var useParams = () => useUniversalContext().params;
var usePopulatePathname = () => {
  const params = useParams();
  return (pathname, extraParams) => {
    return populatePathSegments(pathname, Object.assign({}, params, extraParams));
  };
};

// node_modules/@ronin/blade/dist/chunk-HM6J3JLN.js
var import_react3 = __toESM(require_react(), 1);
var import_jsx_runtime = __toESM(require_jsx_runtime(), 1);
var HistoryContent = ({ children }) => {
  const universalContext = useUniversalContext();
  const transitionPage = usePageTransition();
  const revalidate = useRevalidation();
  const revalidationInterval = import_react3.useRef(null);
  const { pathname, search, hash } = usePrivateLocation();
  const populatePathname = usePopulatePathname();
  const populatedPathname = populatePathname(pathname);
  import_react3.useEffect(() => {
    const pageChanged = () => {
      const newLocation = window.location;
      const pathname2 = newLocation.pathname + newLocation.search + newLocation.hash;
      transitionPage(pathname2, "manual")();
    };
    window.addEventListener("popstate", pageChanged);
    return () => window.removeEventListener("popstate", pageChanged);
  }, [transitionPage]);
  import_react3.useEffect(() => {
    const focused = () => revalidate("window focused");
    window.addEventListener("focus", focused);
    return () => window.removeEventListener("focus", focused);
  }, [revalidate]);
  import_react3.useEffect(() => {
    const wentOnline = () => revalidate("went online");
    window.addEventListener("online", wentOnline);
    return () => window.removeEventListener("online", wentOnline);
  }, [revalidate]);
  import_react3.useEffect(() => {
    if (!IS_DEV)
      return;
    const url = new URL("/_blade/reload", window.location.origin);
    url.protocol = url.protocol.replace("http", "ws");
    const refresh = () => revalidate("files updated");
    let ws = new WebSocket(url.toString());
    const reconnect = () => {
      removeListeners();
      ws = new WebSocket(url.toString());
    };
    ws.addEventListener("close", reconnect);
    ws.addEventListener("message", refresh);
    const removeListeners = () => {
      ws.removeEventListener("close", reconnect);
      ws.removeEventListener("message", refresh);
    };
    return () => {
      removeListeners();
      ws.close();
    };
  }, [revalidate]);
  import_react3.useEffect(() => {
    if (revalidationInterval.current)
      return;
    revalidationInterval.current = setTimeout(() => {
      revalidate("interval");
      revalidationInterval.current = null;
    }, 5000);
  }, [revalidate, universalContext.lastUpdate]);
  import_react3.useLayoutEffect(() => {
    if (universalContext.addressBarInSync)
      history.pushState({}, "", populatedPathname + search + hash);
  }, [populatedPathname + search + hash]);
  import_react3.useLayoutEffect(() => {
    if (document.documentElement.scrollTop === 0 && document.body.scrollTop === 0)
      return;
    document.documentElement.scrollTop = 0;
    document.body.scrollTop = 0;
  }, [populatedPathname]);
  return /* @__PURE__ */ import_jsx_runtime.jsx(import_jsx_runtime.Fragment, { children });
};
var History = ({ children, universalContext }) => {
  const deferredPromises = import_react3.useRef({});
  const [clientQueryParams, setClientQueryParams] = import_react3.useState(null);
  import_react3.useEffect(() => setClientQueryParams(null), [universalContext.url]);
  const parsedURL = new URL(universalContext.url);
  if (clientQueryParams)
    parsedURL.search = clientQueryParams;
  return /* @__PURE__ */ import_jsx_runtime.jsx(RootClientContext.Provider, {
    value: {
      ...universalContext,
      url: parsedURL.href,
      setClientQueryParams,
      deferredPromises
    },
    children: /* @__PURE__ */ import_jsx_runtime.jsx(HistoryContent, { children })
  });
};
wrapClientComponent(History, "History");

// node_modules/@ronin/blade/dist/chunk-BDF4OKBO.js
var list = [
  EvalError,
  RangeError,
  ReferenceError,
  SyntaxError,
  TypeError,
  URIError,
  globalThis.DOMException,
  globalThis.AssertionError,
  globalThis.SystemError
].filter(Boolean).map((constructor) => [constructor.name, constructor]);
var errorConstructors = new Map(list);

// node_modules/@ronin/compiler/dist/index.js
var DML_QUERY_TYPES_READ = ["get", "count"];
var DML_QUERY_TYPES_WRITE = ["set", "add", "remove"];
var DML_QUERY_TYPES = [
  ...DML_QUERY_TYPES_READ,
  ...DML_QUERY_TYPES_WRITE
];
var DDL_QUERY_TYPES_READ = ["list"];
var DDL_QUERY_TYPES_WRITE = ["create", "alter", "drop"];
var DDL_QUERY_TYPES = [
  ...DDL_QUERY_TYPES_READ,
  ...DDL_QUERY_TYPES_WRITE
];
var QUERY_TYPES_READ = [
  ...DML_QUERY_TYPES_READ,
  ...DDL_QUERY_TYPES_READ
];
var QUERY_TYPES_WRITE = [
  ...DML_QUERY_TYPES_WRITE,
  ...DDL_QUERY_TYPES_WRITE
];
var QUERY_TYPES = [...DML_QUERY_TYPES, ...DDL_QUERY_TYPES];
var QUERY_SYMBOLS = {
  QUERY: "__RONIN_QUERY",
  EXPRESSION: "__RONIN_EXPRESSION",
  FIELD: "__RONIN_FIELD_",
  FIELD_PARENT: "__RONIN_FIELD_PARENT_",
  VALUE: "__RONIN_VALUE"
};
var RONIN_MODEL_FIELD_REGEX = new RegExp(`${QUERY_SYMBOLS.FIELD}[_a-zA-Z0-9.]+`, "g");
var RAW_FIELD_TYPES = ["string", "number", "boolean"];
var CURRENT_TIME_EXPRESSION = {
  [QUERY_SYMBOLS.EXPRESSION]: `strftime('%Y-%m-%dT%H:%M:%f', 'now') || 'Z'`
};
var MOUNTING_PATH_SUFFIX = /(.*?)(\{(\d+)\})?$/;
var composeMountingPath = (single, key, mountingPath) => {
  if (key === "ronin_root") {
    return mountingPath ? mountingPath.replace(MOUNTING_PATH_SUFFIX, (_, p, __, n) => `${p}{${n ? +n + 1 : 1}}`) : key;
  }
  return `${mountingPath ? `${mountingPath}.` : ""}${single ? key : `${key}[0]`}`;
};
var MODEL_ENTITY_ERROR_CODES = {
  field: "FIELD_NOT_FOUND",
  index: "INDEX_NOT_FOUND",
  preset: "PRESET_NOT_FOUND"
};
var RoninError = class extends Error {
  code;
  field;
  fields;
  issues;
  queries;
  constructor(details) {
    super(details.message);
    this.name = "RoninError";
    this.code = details.code;
    this.field = details.field;
    this.fields = details.fields;
    this.issues = details.issues;
    this.queries = details.queries || null;
  }
};
var SINGLE_QUOTE_REGEX = /'/g;
var DOUBLE_QUOTE_REGEX = /"/g;
var AMPERSAND_REGEX = /\s*&+\s*/g;
var SPECIAL_CHARACTERS_REGEX = /[^\w\s-]+/g;
var SPLIT_REGEX = /(?<=[a-z])(?=[A-Z])|(?<=[A-Z])(?=[A-Z][a-z])|[\s.\-_]+/;
var capitalize = (str) => {
  if (!str || str.length === 0)
    return "";
  return str.charAt(0).toUpperCase() + str.slice(1).toLowerCase();
};
var sanitize = (str) => {
  if (!str || str.length === 0)
    return "";
  return str.replace(SINGLE_QUOTE_REGEX, "").replace(DOUBLE_QUOTE_REGEX, "").replace(AMPERSAND_REGEX, " and ").replace(SPECIAL_CHARACTERS_REGEX, " ").trim();
};
var convertToSnakeCase = (str) => {
  if (!str || str.length === 0)
    return "";
  return sanitize(str).split(SPLIT_REGEX).map((part) => part.toLowerCase()).join("_");
};
var convertToCamelCase = (str) => {
  if (!str || str.length === 0)
    return "";
  return sanitize(str).split(SPLIT_REGEX).map((part, index) => index === 0 ? part.toLowerCase() : capitalize(part)).join("");
};
var isObject = (value) => value != null && typeof value === "object" && Array.isArray(value) === false;
var getQuerySymbol = (value) => {
  if (!isObject(value))
    return null;
  const objectValue = value;
  if (QUERY_SYMBOLS.QUERY in objectValue) {
    return {
      type: "query",
      value: objectValue[QUERY_SYMBOLS.QUERY]
    };
  }
  if (QUERY_SYMBOLS.EXPRESSION in objectValue) {
    return {
      type: "expression",
      value: objectValue[QUERY_SYMBOLS.EXPRESSION]
    };
  }
  return null;
};
var findInObject = (obj, pattern, replacer) => {
  let found = false;
  for (const key in obj) {
    if (!Object.hasOwn(obj, key))
      continue;
    const value = obj[key];
    if (isObject(value)) {
      found = findInObject(value, pattern, replacer);
    } else if (typeof value === "string" && value.startsWith(pattern)) {
      found = true;
      if (replacer) {
        obj[key] = value.replace(pattern, replacer);
      } else {
        return found;
      }
    }
  }
  return found;
};
var flatten = (obj, prefix = "", res = {}) => {
  for (const key in obj) {
    if (!Object.hasOwn(obj, key))
      continue;
    const path = prefix ? `${prefix}.${key}` : key;
    const value = obj[key];
    if (typeof value === "object" && value !== null && !getQuerySymbol(value)) {
      flatten(value, path, res);
    } else {
      res[path] = value;
    }
  }
  return res;
};
var omit2 = (obj, properties) => Object.fromEntries(Object.entries(obj).filter(([key]) => !properties.includes(key)));
var getProperty = (obj, path) => {
  return path.split(".").reduce((acc, key) => acc?.[key], obj);
};
var getPathSegments = (path) => {
  return path.split(/[.[\]]/g).filter((segment) => segment.trim().length > 0);
};
var setProperty = (obj, path, value) => {
  const segments = getPathSegments(path);
  const _set = (node) => {
    if (segments.length > 1) {
      const key = segments.shift();
      const nextIsNum = !Number.isNaN(Number.parseInt(segments[0]));
      if (typeof node[key] !== "object" || node[key] === null) {
        node[key] = nextIsNum ? [] : {};
      }
      _set(node[key]);
    } else {
      node[segments[0]] = value;
    }
  };
  _set(obj);
};
var deleteProperty = (obj, path) => {
  const segments = getPathSegments(path);
  const _delete = (node, segs) => {
    const key = segs[0];
    if (segs.length === 1) {
      delete node[key];
    } else if (node[key] && typeof node[key] === "object" && node[key] !== null) {
      const shouldCleanup = _delete(node[key], segs.slice(1));
      if (shouldCleanup)
        delete node[key];
    }
    return Object.keys(node).length === 0;
  };
  _delete(obj, segments);
};
var splitQuery = (query) => {
  const queryType = Object.keys(query)[0];
  const queryModel = Object.keys(query[queryType])[0];
  const queryInstructions = query[queryType][queryModel];
  return { queryType, queryModel, queryInstructions };
};
var CURSOR_SEPARATOR = ",";
var CURSOR_NULL_PLACEHOLDER = "RONIN_NULL";
var generatePaginationCursor = (model, orderedBy, record) => {
  const { ascending = [], descending = [] } = orderedBy || {};
  const keys = [...ascending, ...descending];
  if (keys.length === 0)
    keys.push("ronin.createdAt");
  const cursors = keys.map((fieldSlug) => {
    const property = getProperty(record, fieldSlug);
    if (property === null || property === undefined)
      return CURSOR_NULL_PLACEHOLDER;
    const { field } = getFieldFromModel(model, fieldSlug, {
      instructionName: "orderedBy"
    });
    if (field.type === "date")
      return new Date(property).getTime();
    return property;
  });
  return cursors.map((cursor) => encodeURIComponent(String(cursor))).join(CURSOR_SEPARATOR);
};
var handleBeforeOrAfter = (model, statementParams, queryType, instructions) => {
  if (!(instructions.before || instructions.after)) {
    throw new RoninError({
      message: "The `before` or `after` instruction must not be empty.",
      code: "MISSING_INSTRUCTION"
    });
  }
  if (instructions.before && instructions.after) {
    throw new RoninError({
      message: "The `before` and `after` instructions cannot co-exist. Choose one.",
      code: "MUTUALLY_EXCLUSIVE_INSTRUCTIONS"
    });
  }
  if (!instructions.limitedTo && queryType !== "count") {
    let message = "When providing a pagination cursor in the `before` or `after`";
    message += " instruction, a `limitedTo` instruction must be provided as well, to";
    message += " define the page size.";
    throw new RoninError({
      message,
      code: "MISSING_INSTRUCTION"
    });
  }
  const { ascending = [], descending = [] } = instructions.orderedBy || {};
  const clause = instructions.with ? "AND " : "";
  const chunks = (instructions.before || instructions.after).toString().split(CURSOR_SEPARATOR).map(decodeURIComponent);
  const keys = [...ascending, ...descending];
  const values = keys.map((key, index) => {
    const value = chunks[index];
    if (value === CURSOR_NULL_PLACEHOLDER) {
      return "NULL";
    }
    const { field } = getFieldFromModel(model, key, {
      instructionName: "orderedBy"
    });
    if (field.type === "boolean") {
      return prepareStatementValue(statementParams, value === "true");
    }
    if (field.type === "number") {
      return prepareStatementValue(statementParams, Number.parseInt(value));
    }
    if (field.type === "date") {
      return `'${new Date(Number.parseInt(value)).toJSON()}'`;
    }
    return prepareStatementValue(statementParams, value);
  });
  const compareOperators = [
    ...new Array(ascending.length).fill(instructions.before ? "<" : ">"),
    ...new Array(descending.length).fill(instructions.before ? ">" : "<")
  ];
  const conditions = new Array;
  for (let i = 0;i < keys.length; i++) {
    if (values[i] === "NULL" && compareOperators[i] === "<") {
      continue;
    }
    const condition = new Array;
    for (let j = 0;j <= i; j++) {
      const key = keys[j];
      const value = values[j];
      let { field, fieldSelector } = getFieldFromModel(model, key, {
        instructionName: "orderedBy"
      });
      if (j === i) {
        const closingParentheses = ")".repeat(condition.length);
        const operator = value === "NULL" ? "IS NOT" : compareOperators[j];
        const caseInsensitiveStatement = value !== "NULL" && field.type === "string" ? " COLLATE NOCASE" : "";
        if (value !== "NULL" && operator === "<" && !["ronin.createdAt", "ronin.updatedAt"].includes(key)) {
          fieldSelector = `IFNULL(${fieldSelector}, -1e999)`;
        }
        condition.push(`(${fieldSelector} ${operator} ${value}${caseInsensitiveStatement})${closingParentheses}`);
      } else {
        const operator = value === "NULL" ? "IS" : "=";
        condition.push(`(${fieldSelector} ${operator} ${value} AND`);
      }
    }
    conditions.push(condition.join(" "));
  }
  return `${clause}(${conditions.join(" OR ")})`;
};
var handleIncluding = (models, model, statementParams, single, instruction, options = {
  inlineDefaults: false
}) => {
  let statement = "";
  let tableSubQuery;
  for (const ephemeralFieldSlug in instruction) {
    if (!Object.hasOwn(instruction, ephemeralFieldSlug))
      continue;
    const symbol = getQuerySymbol(instruction[ephemeralFieldSlug]);
    if (symbol?.type !== "query")
      continue;
    const { queryType, queryModel, queryInstructions } = splitQuery(symbol.value);
    let modifiableQueryInstructions = queryInstructions;
    if (queryType === "count")
      continue;
    const relatedModel = getModelBySlug(models, queryModel);
    let joinType = "LEFT";
    let relatedTableSelector = `"${relatedModel.table}"`;
    const subSingle = queryModel !== relatedModel.pluralSlug;
    const subMountingPath = composeMountingPath(subSingle, ephemeralFieldSlug, options.mountingPath);
    const tableAlias = `including_${subMountingPath}`;
    if (!modifiableQueryInstructions?.with) {
      joinType = "CROSS";
      if (subSingle) {
        if (!modifiableQueryInstructions)
          modifiableQueryInstructions = {};
        modifiableQueryInstructions.limitedTo = 1;
      }
    }
    if (modifiableQueryInstructions?.limitedTo || modifiableQueryInstructions?.orderedBy) {
      const subSelect = compileQueryInput({
        [queryType]: {
          [queryModel]: modifiableQueryInstructions
        }
      }, models, statementParams, { parentModel: model, inlineDefaults: options.inlineDefaults });
      relatedTableSelector = `(${subSelect.main.statement})`;
    }
    statement += `${joinType} JOIN ${relatedTableSelector} as "${tableAlias}"`;
    model.tableAlias = model.tableAlias || model.table;
    if (joinType === "LEFT") {
      const subStatement = composeConditions(models, { ...relatedModel, tableAlias }, statementParams, "including", queryInstructions?.with, {
        parentModel: model
      });
      statement += ` ON (${subStatement})`;
    }
    if (single && !subSingle) {
      tableSubQuery = `SELECT * FROM "${model.table}" LIMIT 1`;
    }
    if (modifiableQueryInstructions?.including) {
      const subIncluding = handleIncluding(models, { ...relatedModel, tableAlias }, statementParams, subSingle, modifiableQueryInstructions.including, { mountingPath: subMountingPath, inlineDefaults: options.inlineDefaults });
      statement += ` ${subIncluding.statement}`;
    }
  }
  return { statement, tableSubQuery };
};
var handleLimitedTo = (single, instruction) => {
  let amount;
  if (instruction)
    amount = instruction + 1;
  if (single)
    amount = 1;
  return `LIMIT ${amount} `;
};
var handleOrderedBy = (model, instruction) => {
  let statement = "";
  const items = [
    ...(instruction.ascending || []).map((value) => ({ value, order: "ASC" })),
    ...(instruction.descending || []).map((value) => ({ value, order: "DESC" }))
  ];
  for (const item of items) {
    if (statement.length > 0) {
      statement += ", ";
    }
    const symbol = getQuerySymbol(item.value);
    const instructionName = item.order === "ASC" ? "orderedBy.ascending" : "orderedBy.descending";
    if (symbol?.type === "expression") {
      statement += `(${parseFieldExpression(model, instructionName, symbol.value)}) ${item.order}`;
      continue;
    }
    const { field: modelField, fieldSelector } = getFieldFromModel(model, item.value, { instructionName });
    const caseInsensitiveStatement = modelField.type === "string" ? " COLLATE NOCASE" : "";
    statement += `${fieldSelector}${caseInsensitiveStatement} ${item.order}`;
  }
  return `ORDER BY ${statement}`;
};
var handleSelecting = (models, model, statementParams, queryType, single, instructions, options = { inlineDefaults: false }) => {
  let isJoining = false;
  const selectedFields = filterSelectedFields(model, instructions.selecting).filter((field) => !(field.type === "link" && field.kind === "many")).map((field) => {
    const newField = { ...field, mountingPath: field.slug };
    if (options.mountingPath && options.mountingPath !== "ronin_root") {
      newField.mountingPath = `${options.mountingPath.replace(/\{\d+\}/g, "")}.${field.slug}`;
    }
    return newField;
  });
  const joinedSelectedFields = [];
  const joinedColumns = [];
  if (instructions.including) {
    const symbol = getQuerySymbol(instructions.including);
    if (symbol?.type === "query") {
      instructions.including.ronin_root = { ...instructions.including };
      delete instructions.including[QUERY_SYMBOLS.QUERY];
    }
    const flatObject = flatten(instructions.including);
    for (const [key, value] of Object.entries(flatObject)) {
      const symbol2 = getQuerySymbol(value);
      if (symbol2?.type === "query") {
        const { queryType: queryType2, queryModel, queryInstructions } = splitQuery(symbol2.value);
        const subQueryModel = getModelBySlug(models, queryModel);
        if (queryType2 === "count") {
          const subSelect = compileQueryInput(symbol2.value, models, statementParams, {
            parentModel: { ...model, tableAlias: model.table },
            inlineDefaults: options.inlineDefaults
          });
          selectedFields.push({
            slug: key,
            mountingPath: key,
            type: "number",
            mountedValue: `(${subSelect.main.statement})`
          });
          continue;
        }
        isJoining = true;
        const subSingle = queryModel !== subQueryModel.pluralSlug;
        if (!model.tableAlias)
          model.tableAlias = single && !subSingle ? `sub_${model.table}` : model.table;
        const subMountingPath = composeMountingPath(subSingle, key, options.mountingPath);
        const { columns: nestedColumns, selectedFields: nestedSelectedFields } = handleSelecting(models, { ...subQueryModel, tableAlias: `including_${subMountingPath}` }, statementParams, queryType2, subSingle, {
          selecting: queryInstructions?.selecting,
          including: queryInstructions?.including,
          orderedBy: queryInstructions?.orderedBy,
          limitedTo: queryInstructions?.limitedTo
        }, { ...options, mountingPath: subMountingPath });
        if (nestedColumns !== "*")
          joinedColumns.push(nestedColumns);
        joinedSelectedFields.push(...nestedSelectedFields);
        continue;
      }
      let mountedValue = value;
      if (symbol2?.type === "expression") {
        mountedValue = `(${parseFieldExpression(model, "including", symbol2.value)})`;
      } else {
        mountedValue = prepareStatementValue(statementParams, value);
      }
      const existingField = selectedFields.findIndex((field) => field.slug === key);
      if (existingField > -1)
        selectedFields.splice(existingField, 1);
      selectedFields.push({
        slug: key,
        mountingPath: key,
        type: RAW_FIELD_TYPES.includes(typeof value) ? typeof value : "string",
        mountedValue
      });
    }
  }
  if (queryType === "get" && !single && typeof instructions.limitedTo !== "undefined") {
    const orderedFields = Object.values(instructions.orderedBy || {}).flat().map((fieldSlug) => {
      return getFieldFromModel(model, fieldSlug, { instructionName: "orderedBy" });
    });
    for (const orderedField of orderedFields) {
      const { field } = orderedField;
      if (selectedFields.some(({ slug }) => slug === field.slug))
        continue;
      selectedFields.push({
        slug: field.slug,
        mountingPath: field.slug,
        excluded: true
      });
    }
  }
  const columns = selectedFields.map((selectedField) => {
    if (selectedField.mountedValue) {
      return `${selectedField.mountedValue} as "${selectedField.slug}"`;
    }
    const { fieldSelector } = getFieldFromModel(model, selectedField.slug, {
      instructionName: "selecting"
    });
    if (options.mountingPath) {
      return `${fieldSelector} as "${options.mountingPath}.${selectedField.slug}"`;
    }
    return fieldSelector;
  });
  columns.push(...joinedColumns);
  selectedFields.push(...joinedSelectedFields);
  return { columns: columns.join(", "), isJoining, selectedFields };
};
var conjunctions = [
  "for",
  "and",
  "nor",
  "but",
  "or",
  "yet",
  "so"
];
var articles = [
  "a",
  "an",
  "the"
];
var prepositions = [
  "aboard",
  "about",
  "above",
  "across",
  "after",
  "against",
  "along",
  "amid",
  "among",
  "anti",
  "around",
  "as",
  "at",
  "before",
  "behind",
  "below",
  "beneath",
  "beside",
  "besides",
  "between",
  "beyond",
  "but",
  "by",
  "concerning",
  "considering",
  "despite",
  "down",
  "during",
  "except",
  "excepting",
  "excluding",
  "following",
  "for",
  "from",
  "in",
  "inside",
  "into",
  "like",
  "minus",
  "near",
  "of",
  "off",
  "on",
  "onto",
  "opposite",
  "over",
  "past",
  "per",
  "plus",
  "regarding",
  "round",
  "save",
  "since",
  "than",
  "through",
  "to",
  "toward",
  "towards",
  "under",
  "underneath",
  "unlike",
  "until",
  "up",
  "upon",
  "versus",
  "via",
  "with",
  "within",
  "without"
];
var lowerCase = /* @__PURE__ */ new Set([
  ...conjunctions,
  ...articles,
  ...prepositions
]);
var specials = [
  "ZEIT",
  "ZEIT Inc.",
  "Vercel",
  "Vercel Inc.",
  "CLI",
  "API",
  "HTTP",
  "HTTPS",
  "JSX",
  "DNS",
  "URL",
  "now.sh",
  "now.json",
  "vercel.app",
  "vercel.json",
  "CI",
  "CD",
  "CDN",
  "package.json",
  "package.lock",
  "yarn.lock",
  "GitHub",
  "GitLab",
  "CSS",
  "Sass",
  "JS",
  "JavaScript",
  "TypeScript",
  "HTML",
  "WordPress",
  "Next.js",
  "Node.js",
  "Webpack",
  "Docker",
  "Bash",
  "Kubernetes",
  "SWR",
  "TinaCMS",
  "UI",
  "UX",
  "TS",
  "TSX",
  "iPhone",
  "iPad",
  "watchOS",
  "iOS",
  "iPadOS",
  "macOS",
  "PHP",
  "composer.json",
  "composer.lock",
  "CMS",
  "SQL",
  "C",
  "C#",
  "GraphQL",
  "GraphiQL",
  "JWT",
  "JWTs"
];
var word = `[^\\s'’\\(\\)!?;:"-]`;
var regex = new RegExp(`(?:(?:(\\s?(?:^|[.\\(\\)!?;:"-])\\s*)(${word}))|(${word}))(${word}*[’']*${word}*)`, "g");
var convertToRegExp = (specials2) => specials2.map((s) => [new RegExp(`\\b${s}\\b`, "gi"), s]);
function parseMatch(match) {
  const firstCharacter = match[0];
  if (/\s/.test(firstCharacter)) {
    return match.slice(1);
  }
  if (/[\(\)]/.test(firstCharacter)) {
    return null;
  }
  return match;
}
var src_default = (str, options = {}) => {
  str = str.toLowerCase().replace(regex, (m, lead = "", forced, lower, rest, offset, string) => {
    const isLastWord = m.length + offset >= string.length;
    const parsedMatch = parseMatch(m);
    if (!parsedMatch) {
      return m;
    }
    if (!forced) {
      const fullLower = lower + rest;
      if (lowerCase.has(fullLower) && !isLastWord) {
        return parsedMatch;
      }
    }
    return lead + (lower || forced).toUpperCase() + rest;
  });
  const customSpecials = options.special || [];
  const replace = [...specials, ...customSpecials];
  const replaceRegExp = convertToRegExp(replace);
  replaceRegExp.forEach(([pattern, s]) => {
    str = str.replace(pattern, s);
  });
  return str;
};
var slugToName = (slug) => {
  const name = slug.replace(/([a-z])([A-Z])/g, "$1 $2");
  return src_default(name);
};
var VOWELS = ["a", "e", "i", "o", "u"];
var pluralize = (word2) => {
  const lastLetter = word2.slice(-1).toLowerCase();
  const secondLastLetter = word2.slice(-2, -1).toLowerCase();
  if (lastLetter === "y" && !VOWELS.includes(secondLastLetter)) {
    return `${word2.slice(0, -1)}ies`;
  }
  if (lastLetter === "s" || word2.slice(-2).toLowerCase() === "ch" || word2.slice(-2).toLowerCase() === "sh" || word2.slice(-2).toLowerCase() === "ex") {
    return `${word2}es`;
  }
  return `${word2}s`;
};
var modelAttributes = [
  ["pluralSlug", "slug", pluralize, true],
  ["name", "slug", slugToName, false],
  ["pluralName", "pluralSlug", slugToName, false],
  ["idPrefix", "slug", (slug) => slug.slice(0, 3).toLowerCase(), false],
  ["table", "pluralSlug", convertToSnakeCase, true]
];
var getRecordIdentifier = (prefix) => {
  return `${prefix}_${Array.from(crypto.getRandomValues(new Uint8Array(12))).map((b) => b.toString(16).padStart(2, "0")).join("").slice(0, 16).toLowerCase()}`;
};
var addDefaultModelAttributes = (model, isNew) => {
  const copiedModel = { ...model };
  if (isNew && !copiedModel.id)
    copiedModel.id = getRecordIdentifier("mod");
  for (const [setting, base, generator, mustRegenerate] of modelAttributes) {
    if (!(isNew || mustRegenerate))
      continue;
    if (copiedModel[setting] || !copiedModel[base])
      continue;
    copiedModel[setting] = generator(copiedModel[base]);
  }
  const newFields = copiedModel.fields || [];
  if (isNew || Object.keys(newFields).length > 0) {
    if (!copiedModel.identifiers)
      copiedModel.identifiers = {};
    if (!copiedModel.identifiers.name) {
      const suitableField = Object.entries(newFields).find(([fieldSlug, field]) => field.type === "string" && field.required === true && ["name"].includes(fieldSlug));
      copiedModel.identifiers.name = suitableField?.[0] || "id";
    }
    if (!copiedModel.identifiers.slug) {
      const suitableField = Object.entries(newFields).find(([fieldSlug, field]) => field.type === "string" && field.unique === true && field.required === true && ["slug", "handle"].includes(fieldSlug));
      copiedModel.identifiers.slug = suitableField?.[0] || "id";
    }
  }
  return copiedModel;
};
var addDefaultModelFields = (model, isNew) => {
  const copiedModel = { ...model };
  const existingFields = copiedModel.fields || [];
  if (isNew || Object.keys(existingFields).length > 0) {
    const additionalFields = Object.fromEntries(Object.entries(getSystemFields(copiedModel.idPrefix)).filter(([newFieldSlug]) => {
      return !Object.hasOwn(existingFields, newFieldSlug);
    }));
    copiedModel.fields = { ...additionalFields, ...existingFields };
  }
  return copiedModel;
};
var addDefaultModelPresets = (list2, model) => {
  const defaultPresets = {};
  for (const [fieldSlug, rest] of Object.entries(model.fields || {})) {
    const field = { slug: fieldSlug, ...rest };
    if (field.type === "link" && !fieldSlug.startsWith("ronin.")) {
      const targetModel = getModelBySlug(list2, field.target);
      if (field.kind === "many") {
        const systemModel = list2.find(({ system }) => {
          return system?.model === model.id && system?.associationSlug === field.slug;
        });
        if (!systemModel)
          continue;
        const preset2 = {
          instructions: {
            including: {
              [fieldSlug]: {
                [QUERY_SYMBOLS.QUERY]: {
                  get: {
                    [systemModel.pluralSlug]: {
                      with: {
                        source: {
                          [QUERY_SYMBOLS.EXPRESSION]: `${QUERY_SYMBOLS.FIELD_PARENT}id`
                        }
                      },
                      including: {
                        [QUERY_SYMBOLS.QUERY]: {
                          get: {
                            [targetModel.slug]: {
                              with: {
                                id: {
                                  [QUERY_SYMBOLS.EXPRESSION]: `${QUERY_SYMBOLS.FIELD_PARENT}target`
                                }
                              }
                            }
                          }
                        }
                      },
                      selecting: ["**", "!source", "!target"]
                    }
                  }
                }
              }
            }
          },
          name: slugToName(fieldSlug),
          system: true
        };
        defaultPresets[fieldSlug] = preset2;
        continue;
      }
      const preset = {
        instructions: {
          including: {
            [fieldSlug]: {
              [QUERY_SYMBOLS.QUERY]: {
                get: {
                  [targetModel.slug]: {
                    with: {
                      id: {
                        [QUERY_SYMBOLS.EXPRESSION]: `${QUERY_SYMBOLS.FIELD_PARENT}${field.slug}`
                      }
                    }
                  }
                }
              }
            }
          }
        },
        name: slugToName(fieldSlug),
        system: true
      };
      defaultPresets[fieldSlug] = preset;
    }
  }
  const childModels = list2.map((subModel) => {
    if (subModel.system?.associationSlug)
      return null;
    const field = Object.entries(subModel.fields).find(([fieldSlug, rest]) => {
      const field2 = { slug: fieldSlug, ...rest };
      return field2.type === "link" && field2.target === model.slug;
    });
    if (!field)
      return null;
    return { model: subModel, field: { slug: field[0], ...field[1] } };
  }).filter((match) => match !== null);
  for (const childMatch of childModels) {
    const { model: childModel, field: childField } = childMatch;
    const pluralSlug = childModel.pluralSlug;
    const presetSlug = childModel.system?.associationSlug || pluralSlug;
    const preset = {
      instructions: {
        including: {
          [presetSlug]: {
            [QUERY_SYMBOLS.QUERY]: {
              get: {
                [pluralSlug]: {
                  with: {
                    [childField.slug]: {
                      [QUERY_SYMBOLS.EXPRESSION]: `${QUERY_SYMBOLS.FIELD_PARENT}id`
                    }
                  }
                }
              }
            }
          }
        }
      },
      name: slugToName(presetSlug),
      system: true
    };
    defaultPresets[presetSlug] = preset;
  }
  if (Object.keys(defaultPresets).length > 0) {
    const existingPresets = model.presets;
    const additionalPresets = Object.fromEntries(Object.entries(defaultPresets).filter(([newPresetSlug]) => {
      return !existingPresets?.[newPresetSlug];
    }));
    model.presets = { ...additionalPresets, ...existingPresets };
  }
  return model;
};
var handleTo = (models, model, statementParams, queryType, dependencyStatements, instructions, options) => {
  const { with: withInstruction, to: toInstruction } = instructions;
  const defaultFields = {};
  const currentTime = (/* @__PURE__ */ new Date()).toISOString();
  if (queryType === "add" && options?.inlineDefaults) {
    defaultFields.id = toInstruction.id || getRecordIdentifier(model.idPrefix);
  }
  if (queryType === "add" || queryType === "set" || toInstruction.ronin) {
    const defaults = options?.inlineDefaults ? {
      ...queryType === "add" && { createdAt: currentTime },
      updatedAt: currentTime,
      ...toInstruction.ronin
    } : {
      ...queryType === "set" ? { updatedAt: CURRENT_TIME_EXPRESSION } : {},
      ...toInstruction.ronin
    };
    if (Object.keys(defaults).length > 0)
      defaultFields.ronin = defaults;
  }
  const symbol = getQuerySymbol(toInstruction);
  if (symbol?.type === "query") {
    const { queryModel: subQueryModelSlug, queryInstructions: subQueryInstructions } = splitQuery(symbol.value);
    const subQueryModel = getModelBySlug(models, subQueryModelSlug);
    const subQuerySelectedFields = subQueryInstructions?.selecting;
    const subQueryIncludedFields = subQueryInstructions?.including;
    const subQueryFields = [
      ...filterSelectedFields(subQueryModel, subQuerySelectedFields).map((field) => field.slug),
      ...subQueryIncludedFields ? Object.keys(flatten(subQueryIncludedFields || {})) : []
    ];
    for (const field of subQueryFields || []) {
      getFieldFromModel(model, field, { instructionName: "to" });
    }
    let statement2 = "";
    if (subQuerySelectedFields) {
      const columns = subQueryFields.map((field) => {
        return getFieldFromModel(model, field, { instructionName: "to" }).fieldSelector;
      });
      statement2 = `(${columns.join(", ")}) `;
    }
    statement2 += compileQueryInput(symbol.value, models, statementParams, {
      inlineDefaults: options?.inlineDefaults || false
    }).main.statement;
    return statement2;
  }
  Object.assign(toInstruction, defaultFields);
  for (const fieldSlug in toInstruction) {
    if (!Object.hasOwn(toInstruction, fieldSlug))
      continue;
    const fieldValue = toInstruction[fieldSlug];
    const fieldDetails = getFieldFromModel(model, fieldSlug, { instructionName: "to" }, false);
    if (fieldDetails?.field.type === "link" && fieldDetails.field.kind === "many") {
      delete toInstruction[fieldSlug];
      const associativeModelSlug = composeAssociationModelSlug(model, fieldDetails.field);
      const composeStatement = (subQueryType, value) => {
        const source = queryType === "add" ? toInstruction : withInstruction;
        const recordDetails = { source };
        if (value)
          recordDetails.target = value;
        const query = compileQueryInput({
          [subQueryType]: {
            [associativeModelSlug]: { with: recordDetails }
          }
        }, models, [], { returning: false, inlineDefaults: options?.inlineDefaults || false }).main;
        dependencyStatements.push({ ...query, after: true });
      };
      if (Array.isArray(fieldValue)) {
        if (queryType === "set")
          composeStatement("remove");
        for (const record of fieldValue) {
          composeStatement("add", record);
        }
      } else if (isObject(fieldValue)) {
        const value = fieldValue;
        for (const recordToAdd of value.containing || []) {
          composeStatement("add", recordToAdd);
        }
        for (const recordToRemove of value.notContaining || []) {
          composeStatement("remove", recordToRemove);
        }
      }
    }
  }
  let statement = composeConditions(models, model, statementParams, "to", toInstruction, {
    parentModel: options?.parentModel,
    type: queryType === "add" ? "fields" : undefined
  });
  if (queryType === "add") {
    const deepStatement = composeConditions(models, model, statementParams, "to", toInstruction, {
      parentModel: options?.parentModel,
      type: "values"
    });
    statement = `(${statement}) VALUES (${deepStatement})`;
  } else if (queryType === "set") {
    statement = `SET ${statement}`;
  }
  return statement;
};
var handleUsing = (model, instructions) => {
  const normalizedUsing = Array.isArray(instructions.using) ? Object.fromEntries(instructions.using.map((presetSlug) => [presetSlug, null])) : instructions.using;
  if ("links" in normalizedUsing) {
    for (const [fieldSlug, rest] of Object.entries(model.fields)) {
      const field = { slug: fieldSlug, ...rest };
      if (field.type !== "link" || field.kind === "many")
        continue;
      normalizedUsing[fieldSlug] = null;
    }
  }
  for (const presetSlug in normalizedUsing) {
    if (!Object.hasOwn(normalizedUsing, presetSlug) || presetSlug === "links")
      continue;
    const arg = normalizedUsing[presetSlug];
    const preset = model.presets?.[presetSlug];
    if (!preset) {
      throw new RoninError({
        message: `Preset "${presetSlug}" does not exist in model "${model.name}".`,
        code: "PRESET_NOT_FOUND"
      });
    }
    const replacedUsingFilter = structuredClone(preset.instructions);
    if (arg !== null) {
      findInObject(replacedUsingFilter, QUERY_SYMBOLS.VALUE, (match) => match.replace(QUERY_SYMBOLS.VALUE, arg));
    }
    for (const subInstruction in replacedUsingFilter) {
      if (!Object.hasOwn(replacedUsingFilter, subInstruction))
        continue;
      const instructionName = subInstruction;
      const currentValue = instructions[instructionName];
      if (currentValue) {
        let newValue;
        if (Array.isArray(currentValue)) {
          newValue = Array.from(/* @__PURE__ */ new Set([
            ...replacedUsingFilter[instructionName],
            ...currentValue
          ]));
        } else if (isObject(currentValue)) {
          newValue = {
            ...replacedUsingFilter[instructionName],
            ...currentValue
          };
        }
        Object.assign(instructions, { [instructionName]: newValue });
        continue;
      }
      Object.assign(instructions, {
        [instructionName]: replacedUsingFilter[instructionName]
      });
    }
  }
  return instructions;
};
var compileQueryInput = (defaultQuery, models, statementParams, options) => {
  const dependencyStatements = [];
  const query = transformMetaQuery(models, dependencyStatements, statementParams, defaultQuery, {
    inlineDefaults: options?.inlineDefaults || false
  });
  if (query === null)
    return {
      dependencies: [],
      main: dependencyStatements[0],
      selectedFields: [],
      model: ROOT_MODEL_WITH_ATTRIBUTES,
      updatedQuery: defaultQuery
    };
  const parsedQuery = splitQuery(query);
  const { queryType, queryModel, queryInstructions } = parsedQuery;
  const model = getModelBySlug(models, queryModel);
  const single = queryModel !== model.pluralSlug;
  let instructions = formatIdentifiers(model, queryInstructions);
  const returning = options?.returning ?? true;
  if (instructions && typeof instructions.using !== "undefined") {
    instructions = handleUsing(model, instructions);
  }
  if (queryType === "count") {
    if (!instructions)
      instructions = {};
    instructions.selecting = ["amount"];
    instructions.including = Object.assign(instructions?.including || {}, {
      amount: {
        [QUERY_SYMBOLS.EXPRESSION]: "COUNT(*)"
      }
    });
  }
  if (!single && (queryType === "get" && instructions?.limitedTo || queryType === "count" && (instructions?.before || instructions?.after))) {
    instructions = instructions || {};
    instructions.orderedBy = instructions.orderedBy || {};
    instructions.orderedBy.ascending = instructions.orderedBy.ascending || [];
    instructions.orderedBy.descending = instructions.orderedBy.descending || [];
    if (![
      ...instructions.orderedBy.ascending,
      ...instructions.orderedBy.descending
    ].includes("ronin.createdAt")) {
      instructions.orderedBy.descending.push("ronin.createdAt");
    }
  }
  const { columns, isJoining, selectedFields } = handleSelecting(models, model, statementParams, queryType, single, {
    selecting: instructions?.selecting,
    including: instructions?.including,
    orderedBy: instructions?.orderedBy,
    limitedTo: instructions?.limitedTo
  }, { inlineDefaults: options?.inlineDefaults || false });
  let statement = "";
  switch (queryType) {
    case "get":
    case "count":
      statement += `SELECT ${columns} FROM `;
      break;
    case "set":
      statement += "UPDATE ";
      break;
    case "add":
      statement += "INSERT INTO ";
      break;
    case "remove":
      statement += "DELETE FROM ";
      break;
  }
  let isJoiningMultipleRows = false;
  if (isJoining) {
    const { statement: including, tableSubQuery } = handleIncluding(models, model, statementParams, single, instructions?.including);
    if (tableSubQuery) {
      statement += `(${tableSubQuery}) as ${model.tableAlias} `;
      isJoiningMultipleRows = true;
    } else {
      statement += `"${model.table}" `;
    }
    statement += `${including} `;
  } else {
    statement += `"${model.table}" `;
  }
  if (queryType === "add" || queryType === "set") {
    const instructionName = queryType === "add" ? "with" : "to";
    const instructionValue = instructions[instructionName];
    if (!(instructionValue && isObject(instructionValue)) || Object.keys(instructionValue).length === 0) {
      throw new RoninError({
        message: `When using a \`${queryType}\` query, the \`${instructionName}\` instruction must be a non-empty object.`,
        code: instructionName === "to" ? "INVALID_TO_VALUE" : "INVALID_WITH_VALUE",
        queries: [query]
      });
    }
    const toStatement = handleTo(models, model, statementParams, queryType, dependencyStatements, { with: instructions.with, to: instructionValue }, options);
    statement += `${toStatement} `;
  }
  const conditions = [];
  if (queryType !== "add" && instructions && Object.hasOwn(instructions, "with")) {
    const withStatement = handleWith(models, model, statementParams, instructions.with, options?.parentModel);
    if (withStatement.length > 0)
      conditions.push(withStatement);
  }
  if (instructions && (typeof instructions.before !== "undefined" || typeof instructions.after !== "undefined")) {
    if (single) {
      throw new RoninError({
        message: "The `before` and `after` instructions are not supported when querying for a single record.",
        code: "INVALID_BEFORE_OR_AFTER_INSTRUCTION",
        queries: [query]
      });
    }
    const beforeAndAfterStatement = handleBeforeOrAfter(model, statementParams, queryType, {
      before: instructions.before,
      after: instructions.after,
      with: instructions.with,
      orderedBy: instructions.orderedBy,
      limitedTo: instructions.limitedTo
    });
    conditions.push(beforeAndAfterStatement);
  }
  if (conditions.length > 0) {
    if (conditions.length === 1) {
      statement += `WHERE ${conditions[0]} `;
    } else {
      statement += `WHERE (${conditions.join(" ")}) `;
    }
  }
  if (instructions?.orderedBy) {
    const orderedByStatement = handleOrderedBy(model, instructions.orderedBy);
    statement += `${orderedByStatement} `;
  }
  if (queryType === "get" && !isJoiningMultipleRows && (single || instructions?.limitedTo)) {
    statement += handleLimitedTo(single, instructions?.limitedTo);
  }
  if (DML_QUERY_TYPES_WRITE.includes(queryType) && returning) {
    statement += `RETURNING ${columns}`;
  }
  const mainStatement = {
    statement: statement.trimEnd(),
    params: statementParams || []
  };
  if (returning)
    mainStatement.returning = true;
  return {
    dependencies: dependencyStatements,
    main: mainStatement,
    selectedFields,
    model,
    updatedQuery: query
  };
};
var replaceJSON = (key, value) => {
  if (key === QUERY_SYMBOLS.EXPRESSION)
    return value.replaceAll(`'`, `''`);
  return value;
};
var matchSelectedFields = (fields, pattern) => {
  let regexStr = pattern.replace(/\./g, "\\.");
  regexStr = regexStr.replace(/\*\*/g, "<<DOUBLESTAR>>");
  regexStr = regexStr.replace(/\*/g, "[^.]*");
  regexStr = regexStr.replace(/<<DOUBLESTAR>>/g, ".*");
  const regex2 = new RegExp(`^${regexStr}$`);
  return fields.filter((field) => regex2.test(field.slug));
};
var filterSelectedFields = (model, instruction) => {
  const mappedFields = Object.entries(model.fields).map(([fieldSlug, field]) => ({ slug: fieldSlug, ...field }));
  if (!instruction)
    return mappedFields;
  let selectedFields = [];
  for (const pattern of instruction) {
    const isNegative = pattern.startsWith("!");
    const cleanPattern = isNegative ? pattern.slice(1) : pattern;
    const matchedFields = matchSelectedFields(isNegative ? selectedFields : mappedFields, cleanPattern);
    if (isNegative) {
      selectedFields = selectedFields.filter((field) => !matchedFields.includes(field));
    } else {
      selectedFields.push(...matchedFields);
    }
  }
  return selectedFields;
};
var prepareStatementValue = (statementParams, value) => {
  const inlineParams = !statementParams;
  if (value === null)
    return "NULL";
  let formattedValue = value;
  if (Array.isArray(value) || isObject(value)) {
    formattedValue = JSON.stringify(value, inlineParams ? replaceJSON : undefined);
  } else if (typeof value === "boolean") {
    formattedValue = value ? 1 : 0;
  }
  if (!statementParams) {
    if (typeof formattedValue === "string")
      return `'${formattedValue}'`;
    return formattedValue.toString();
  }
  const index = statementParams.push(formattedValue);
  return `?${index}`;
};
var parseFieldExpression = (model, instructionName, expression, parentModel) => {
  return expression.replace(RONIN_MODEL_FIELD_REGEX, (match) => {
    let toReplace = QUERY_SYMBOLS.FIELD;
    let rootModel = model;
    if (match.startsWith(QUERY_SYMBOLS.FIELD_PARENT)) {
      rootModel = parentModel;
      toReplace = QUERY_SYMBOLS.FIELD_PARENT;
    }
    const fieldSlug = match.replace(toReplace, "");
    const field = getFieldFromModel(rootModel, fieldSlug, { instructionName });
    return field.fieldSelector;
  });
};
var composeFieldValues = (models, model, statementParams, instructionName, value, options) => {
  const { fieldSelector: conditionSelector } = getFieldFromModel(model, options.fieldSlug, { instructionName });
  const collectStatementValue = options.type !== "fields";
  const symbol = getQuerySymbol(value);
  let conditionMatcher = instructionName === "to" ? "=" : getMatcher(value, false);
  let conditionValue = value;
  if (options.condition) {
    [conditionMatcher, conditionValue] = WITH_CONDITIONS[options.condition](value);
  }
  if (symbol) {
    if (symbol?.type === "expression") {
      conditionValue = parseFieldExpression(model, instructionName, symbol.value, options.parentModel);
    }
    if (symbol.type === "query" && collectStatementValue) {
      conditionValue = `(${compileQueryInput(symbol.value, models, statementParams).main.statement})`;
    }
  } else if (collectStatementValue) {
    conditionValue = prepareStatementValue(statementParams, conditionValue);
  }
  if (options.type === "fields")
    return conditionSelector;
  if (options.type === "values")
    return conditionValue;
  return `${conditionSelector} ${conditionMatcher} ${conditionValue}`;
};
var composeConditions = (models, model, statementParams, instructionName, value, options) => {
  const isNested = isObject(value) && Object.keys(value).length > 0;
  if (isNested && Object.keys(value).every((key) => (key in WITH_CONDITIONS))) {
    const conditions = Object.entries(value).map(([conditionType, checkValue]) => composeConditions(models, model, statementParams, instructionName, checkValue, {
      ...options,
      condition: conditionType
    }));
    return conditions.join(" AND ");
  }
  if (options.fieldSlug) {
    const childField = Object.keys(model.fields).some((slug) => {
      return slug.includes(".") && slug.split(".")[0] === options.fieldSlug;
    });
    if (!childField) {
      const fieldDetails = getFieldFromModel(model, options.fieldSlug, {
        instructionName
      });
      const { field: modelField } = fieldDetails || {};
      const fieldIsJSON = (modelField?.type === "json" || modelField?.type === "blob") && instructionName === "to";
      const valueIsJSON = isObject(value) || (modelField?.type === "blob" ? null : Array.isArray(value));
      if (!valueIsJSON || getQuerySymbol(value) || fieldIsJSON) {
        if (modelField && fieldIsJSON && !valueIsJSON && value !== null) {
          const messagePrefix = "The provided field value is not";
          const message = modelField.type === "json" ? `${messagePrefix} valid JSON. Only objects and arrays should be provided. Other types of values should be stored in their respective primitive field types.` : `${messagePrefix} a valid Blob reference.`;
          throw new RoninError({
            message,
            field: modelField?.slug,
            code: "INVALID_FIELD_VALUE"
          });
        }
        return composeFieldValues(models, model, statementParams, instructionName, value, { ...options, fieldSlug: options.fieldSlug });
      }
      if (modelField?.type === "link" && isNested) {
        const keys = Object.keys(value);
        const values = Object.values(value);
        let recordTarget;
        if (keys.length === 1 && keys[0] === "id") {
          recordTarget = values[0];
        } else {
          const relatedModel = getModelBySlug(models, modelField.target);
          const subQuery = {
            get: {
              [relatedModel.slug]: {
                with: value,
                selecting: ["id"]
              }
            }
          };
          recordTarget = {
            [QUERY_SYMBOLS.QUERY]: subQuery
          };
        }
        return composeConditions(models, model, statementParams, instructionName, recordTarget, options);
      }
    }
  }
  if (isNested) {
    const conditions = Object.entries(value).map(([field, value2]) => {
      const nestedFieldSlug = options.fieldSlug ? `${options.fieldSlug}.${field}` : field;
      return composeConditions(models, model, statementParams, instructionName, value2, {
        ...options,
        fieldSlug: nestedFieldSlug
      });
    });
    const joiner = instructionName === "to" ? ", " : " AND ";
    if (instructionName === "to")
      return `${conditions.join(joiner)}`;
    return conditions.length === 1 ? conditions[0] : options.fieldSlug ? `(${conditions.join(joiner)})` : conditions.join(joiner);
  }
  if (Array.isArray(value)) {
    const conditions = value.map((filter) => composeConditions(models, model, statementParams, instructionName, filter, options));
    return conditions.join(" OR ");
  }
  throw new RoninError({
    message: `The \`with\` instruction must not contain an empty field. The following fields are empty: \`${options.fieldSlug}\`. If you meant to query by an empty field, try using \`null\` instead.`,
    code: "INVALID_WITH_VALUE",
    queries: null
  });
};
var formatIdentifiers = ({ identifiers }, queryInstructions) => {
  if (!queryInstructions)
    return queryInstructions;
  const type = "with" in queryInstructions ? "with" : null;
  if (!type)
    return queryInstructions;
  const nestedInstructions = queryInstructions[type];
  if (!nestedInstructions || Array.isArray(nestedInstructions))
    return queryInstructions;
  const newNestedInstructions = { ...nestedInstructions };
  for (const oldKey of Object.keys(newNestedInstructions)) {
    if (oldKey !== "nameIdentifier" && oldKey !== "slugIdentifier")
      continue;
    const identifierName = oldKey === "nameIdentifier" ? "name" : "slug";
    const value = newNestedInstructions[oldKey];
    const newKey = identifiers[identifierName];
    newNestedInstructions[newKey] = value;
    delete newNestedInstructions[oldKey];
  }
  return {
    ...queryInstructions,
    [type]: newNestedInstructions
  };
};
var getMatcher = (value, negative) => {
  if (negative) {
    if (value === null)
      return "IS NOT";
    return "!=";
  }
  if (value === null)
    return "IS";
  return "=";
};
var WITH_CONDITIONS = {
  being: (value) => [getMatcher(value, false), value],
  notBeing: (value) => [getMatcher(value, true), value],
  startingWith: (value) => ["LIKE", `${value}%`],
  notStartingWith: (value) => ["NOT LIKE", `${value}%`],
  endingWith: (value) => ["LIKE", `%${value}`],
  notEndingWith: (value) => ["NOT LIKE", `%${value}`],
  containing: (value) => ["LIKE", `%${value}%`],
  notContaining: (value) => ["NOT LIKE", `%${value}%`],
  greaterThan: (value) => [">", value],
  greaterOrEqual: (value) => [">=", value],
  lessThan: (value) => ["<", value],
  lessOrEqual: (value) => ["<=", value]
};
var handleWith = (models, model, statementParams, instruction, parentModel) => {
  return composeConditions(models, model, statementParams, "with", instruction, {
    parentModel
  });
};
var getModelBySlug = (models, slug) => {
  const model = models.find((model2) => {
    return model2.slug === slug || model2.pluralSlug === slug;
  });
  if (!model) {
    throw new RoninError({
      message: `No matching model with either Slug or Plural Slug of "${slug}" could be found.`,
      code: "MODEL_NOT_FOUND"
    });
  }
  return model;
};
var composeAssociationModelSlug = (model, field) => convertToCamelCase(`ronin_link_${model.slug}_${field.slug}`);
var getFieldSelector = (model, field, fieldPath, writing) => {
  const symbol = model.tableAlias?.startsWith(QUERY_SYMBOLS.FIELD_PARENT) ? `${model.tableAlias.replace(QUERY_SYMBOLS.FIELD_PARENT, "").slice(0, -1)}.` : "";
  const tablePrefix = symbol || (model.tableAlias ? `"${model.tableAlias}".` : "");
  if ((field.type === "json" || field.type === "blob") && !writing && fieldPath.length > field.slug.length) {
    const jsonField = fieldPath.replace(`${field.slug}.`, "");
    return `json_extract(${tablePrefix + field.slug}, '$.${jsonField}')`;
  }
  return `${tablePrefix}"${fieldPath}"`;
};
function getFieldFromModel(model, fieldPath, source, shouldThrow = true) {
  const writingField = "instructionName" in source ? source.instructionName === "to" : true;
  const errorTarget = "instructionName" in source ? `\`${source.instructionName}\`` : `${source.modelEntityType} "${source.modelEntityName}"`;
  const errorPrefix = `Field "${fieldPath}" defined for ${errorTarget}`;
  const modelFields = Object.entries(model.fields).map(([fieldSlug, field]) => ({
    slug: fieldSlug,
    ...field
  }));
  let modelField;
  if (fieldPath.includes(".")) {
    modelField = modelFields.find((field) => field.slug === fieldPath.split(".")[0]);
    if (modelField?.type === "json" || modelField?.type === "blob") {
      const fieldSelector2 = getFieldSelector(model, modelField, fieldPath, writingField);
      return { field: modelField, fieldSelector: fieldSelector2 };
    }
  }
  modelField = modelFields.find((field) => field.slug === fieldPath);
  if (!modelField) {
    if (shouldThrow) {
      throw new RoninError({
        message: `${errorPrefix} does not exist in model "${model.name}".`,
        code: "FIELD_NOT_FOUND",
        field: fieldPath,
        queries: null
      });
    }
    return null;
  }
  const fieldSelector = getFieldSelector(model, modelField, fieldPath, writingField);
  return { field: modelField, fieldSelector };
}
var getSystemFields = (idPrefix) => ({
  id: {
    name: "ID",
    type: "string",
    defaultValue: {
      [QUERY_SYMBOLS.EXPRESSION]: `'${idPrefix}_' || lower(substr(hex(randomblob(12)), 1, 16))`
    },
    system: true
  },
  "ronin.createdAt": {
    name: "RONIN - Created At",
    type: "date",
    defaultValue: CURRENT_TIME_EXPRESSION,
    system: true
  },
  "ronin.createdBy": {
    name: "RONIN - Created By",
    type: "string",
    system: true
  },
  "ronin.updatedAt": {
    name: "RONIN - Updated At",
    type: "date",
    defaultValue: CURRENT_TIME_EXPRESSION,
    system: true
  },
  "ronin.updatedBy": {
    name: "RONIN - Updated By",
    type: "string",
    system: true
  }
});
var ROOT_MODEL = {
  id: "mod_26cedf5fc602c3ba",
  slug: "roninModel",
  pluralSlug: "roninModels",
  name: "Ronin Model",
  pluralName: "Ronin Models",
  identifiers: {
    name: "name",
    slug: "slug"
  },
  idPrefix: "mod",
  table: "ronin_schema",
  system: { model: "root" },
  fields: {
    name: { type: "string" },
    pluralName: { type: "string" },
    slug: { type: "string" },
    pluralSlug: { type: "string" },
    idPrefix: { type: "string" },
    table: { type: "string" },
    "identifiers.name": { type: "string" },
    "identifiers.slug": { type: "string" },
    fields: { type: "json", defaultValue: {} },
    indexes: { type: "json", defaultValue: {} },
    presets: { type: "json", defaultValue: {} }
  }
};
var ROOT_MODEL_WITH_ATTRIBUTES = addDefaultModelAttributes(ROOT_MODEL, true);
var getSystemModels = (models, model) => {
  const addedModels = [];
  for (const [fieldSlug, rest] of Object.entries(model.fields || {})) {
    const field = { slug: fieldSlug, ...rest };
    if (field.type === "link" && !fieldSlug.startsWith("ronin.")) {
      const relatedModel = getModelBySlug(models, field.target);
      let fieldSlug2 = relatedModel.slug;
      if (field.kind === "many") {
        fieldSlug2 = composeAssociationModelSlug(model, field);
        addedModels.push({
          pluralSlug: fieldSlug2,
          slug: fieldSlug2,
          system: {
            model: model.id,
            associationSlug: field.slug
          },
          fields: {
            source: {
              type: "link",
              target: model.slug,
              actions: {
                onDelete: "CASCADE",
                onUpdate: "CASCADE"
              }
            },
            target: {
              type: "link",
              target: relatedModel.slug,
              actions: {
                onDelete: "CASCADE",
                onUpdate: "CASCADE"
              }
            }
          }
        });
      }
    }
  }
  return addedModels.map((model2) => addDefaultModelAttributes(model2, true));
};
var typesInSQLite = {
  link: "TEXT",
  string: "TEXT",
  date: "DATETIME",
  blob: "TEXT",
  boolean: "BOOLEAN",
  number: "INTEGER",
  json: "TEXT"
};
var getFieldStatement = (models, model, field) => {
  let statement = `"${field.slug}" ${typesInSQLite[field.type || "string"]}`;
  if (field.slug === "id")
    statement += " PRIMARY KEY";
  if (field.unique === true)
    statement += " UNIQUE";
  if (field.required === true)
    statement += " NOT NULL";
  if (typeof field.defaultValue !== "undefined") {
    const symbol = getQuerySymbol(field.defaultValue);
    let value = typeof field.defaultValue === "string" ? `'${field.defaultValue}'` : field.defaultValue;
    if (symbol)
      value = `(${parseFieldExpression(model, "to", symbol.value)})`;
    if (field.type === "json") {
      if (!isObject(field.defaultValue)) {
        throw new RoninError({
          message: `The default value of JSON field "${field.slug}" must be an object.`,
          code: "INVALID_MODEL_VALUE",
          field: "fields"
        });
      }
      value = `'${JSON.stringify(field.defaultValue)}'`;
    }
    statement += ` DEFAULT ${value}`;
  }
  if (field.type === "string" && field.collation) {
    statement += ` COLLATE ${field.collation}`;
  }
  if (field.type === "number" && field.increment === true) {
    statement += " AUTOINCREMENT";
  }
  if (typeof field.check !== "undefined") {
    const symbol = getQuerySymbol(field.check);
    statement += ` CHECK (${parseFieldExpression(model, "to", symbol?.value)})`;
  }
  if (typeof field.computedAs !== "undefined") {
    const { kind, value } = field.computedAs;
    const symbol = getQuerySymbol(value);
    statement += ` GENERATED ALWAYS AS (${parseFieldExpression(model, "to", symbol?.value)}) ${kind}`;
  }
  if (field.type === "link") {
    if (field.kind === "many")
      return null;
    const actions = field.actions || {};
    const modelList = models.some((item) => item.slug === model.slug) ? models : [...models, model];
    const targetTable = getModelBySlug(modelList, field.target).table;
    statement += ` REFERENCES ${targetTable}("id")`;
    for (const cause in actions) {
      if (!Object.hasOwn(actions, cause))
        continue;
      const causeName = cause.toUpperCase().slice(2);
      const action = actions[cause];
      statement += ` ON ${causeName} ${action}`;
    }
  }
  return statement;
};
var PLURAL_MODEL_ENTITIES = {
  field: "fields",
  index: "indexes",
  preset: "presets"
};
var PLURAL_MODEL_ENTITIES_VALUES = Object.values(PLURAL_MODEL_ENTITIES);
var handleSystemModel = (models, dependencyStatements, action, inlineDefaults, systemModel, newModel) => {
  const { system: _, ...systemModelClean } = systemModel;
  const query = {
    [action]: { model: action === "create" ? systemModelClean : systemModelClean.slug }
  };
  if (action === "alter" && newModel && "alter" in query && query.alter) {
    const { system: _2, ...newModelClean } = newModel;
    query.alter.to = newModelClean;
  }
  const statement = compileQueryInput(query, models, [], { inlineDefaults });
  dependencyStatements.push(...statement.dependencies);
};
var handleSystemModels = (models, dependencyStatements, previousModel, newModel, inlineDefaults) => {
  const currentSystemModels = models.filter(({ system }) => {
    return system?.model === newModel.id;
  });
  const newSystemModels = getSystemModels(models, newModel);
  const matchSystemModels = (oldSystemModel, newSystemModel) => {
    const conditions = [
      oldSystemModel.system?.model === newSystemModel.system?.model
    ];
    if (oldSystemModel.system?.associationSlug) {
      const oldFieldIndex = Object.keys(previousModel.fields).findIndex((slug) => {
        return slug === newSystemModel.system?.associationSlug;
      });
      const newFieldIndex = Object.keys(newModel.fields).findIndex((slug) => {
        return slug === oldSystemModel.system?.associationSlug;
      });
      conditions.push(oldFieldIndex === newFieldIndex);
    }
    return conditions.every((condition) => condition === true);
  };
  for (const systemModel of currentSystemModels) {
    const exists = newSystemModels.find(matchSystemModels.bind(null, systemModel));
    if (exists) {
      if (exists.slug !== systemModel.slug) {
        handleSystemModel(models, dependencyStatements, "alter", inlineDefaults, systemModel, exists);
      }
      continue;
    }
    handleSystemModel(models, dependencyStatements, "drop", inlineDefaults, systemModel);
  }
  for (const systemModel of newSystemModels) {
    const exists = currentSystemModels.find(matchSystemModels.bind(null, systemModel));
    if (exists)
      continue;
    handleSystemModel(models, dependencyStatements, "create", inlineDefaults, systemModel);
  }
};
var transformMetaQuery = (models, dependencyStatements, statementParams, query, options) => {
  const { queryType } = splitQuery(query);
  const subAltering = "alter" in query && query.alter && !("to" in query.alter);
  const action = subAltering && query.alter ? Object.keys(query.alter).filter((key) => key !== "model")[0] : queryType;
  const actionReadable = action === "create" ? "creating" : action === "alter" ? "altering" : "dropping";
  const entity = subAltering && query.alter ? Object.keys(query.alter[action])[0] : "model";
  let slug = entity === "model" && action === "create" ? null : query[queryType] && ("model" in query[queryType]) ? query[queryType].model : null;
  let modelSlug = slug;
  let jsonValue;
  if ("list" in query && query.list) {
    if (slug) {
      return { get: { roninModel: { with: { slug } } } };
    }
    return { get: { roninModels: {} } };
  }
  if ("create" in query && query.create) {
    const init = query.create.model;
    jsonValue = "to" in query.create ? { slug: init, ...query.create.to } : init;
    slug = modelSlug = jsonValue.slug;
  }
  if ("alter" in query && query.alter) {
    if ("to" in query.alter) {
      jsonValue = query.alter.to;
    } else {
      slug = query.alter[action][entity];
      if ("create" in query.alter) {
        const item = query.alter.create[entity];
        slug = item.slug;
        jsonValue = { slug, ...item };
      }
      if ("alter" in query.alter && query.alter.alter)
        jsonValue = query.alter.alter.to;
    }
  }
  if (!(modelSlug && slug))
    return query;
  const model = action === "create" && entity === "model" ? null : getModelBySlug(models, modelSlug);
  if (entity === "model") {
    let queryTypeDetails = {};
    if (action === "create") {
      const newModel = jsonValue;
      const modelWithAttributes = addDefaultModelAttributes(newModel, true);
      const modelWithFields = addDefaultModelFields(modelWithAttributes, true);
      const modelWithPresets = addDefaultModelPresets([...models, modelWithFields], modelWithFields);
      modelWithPresets.fields = Object.fromEntries(Object.entries(modelWithPresets.fields).map(([fieldSlug, rest]) => [
        fieldSlug,
        {
          ...rest,
          type: rest.type || "string",
          name: rest.name || slugToName(fieldSlug)
        }
      ]));
      const columns = Object.entries(modelWithPresets.fields).map(([fieldSlug, rest]) => getFieldStatement(models, modelWithPresets, {
        slug: fieldSlug,
        ...rest
      })).filter(Boolean);
      models.push(modelWithPresets);
      dependencyStatements.push({
        statement: `CREATE TABLE "${modelWithPresets.table}" (${columns.join(", ")})`,
        params: []
      });
      const entityList = modelWithPresets.indexes;
      for (const [itemSlug, item] of Object.entries(entityList || {})) {
        const query2 = {
          alter: {
            model: modelWithPresets.slug,
            create: {
              index: { slug: itemSlug, ...item }
            }
          }
        };
        const tempModels = [
          ...models.filter((model2) => model2.slug !== modelWithPresets.slug),
          { ...modelWithPresets, indexes: {} }
        ];
        transformMetaQuery(tempModels, dependencyStatements, null, query2, {
          inlineDefaults: options.inlineDefaults
        });
      }
      queryTypeDetails = { with: modelWithPresets };
      getSystemModels(models, modelWithPresets).map((systemModel) => {
        return handleSystemModel(models, dependencyStatements, "create", options.inlineDefaults, systemModel);
      });
    }
    if (action === "alter" && model) {
      const modelBeforeUpdate2 = structuredClone(model);
      const newModel = jsonValue;
      const modelWithAttributes = addDefaultModelAttributes(newModel, false);
      const modelWithFields = addDefaultModelFields(modelWithAttributes, false);
      const modelWithPresets = addDefaultModelPresets(models, modelWithFields);
      const newTableName = modelWithPresets.table;
      if (newTableName) {
        dependencyStatements.push({
          statement: `ALTER TABLE "${model.table}" RENAME TO "${newTableName}"`,
          params: []
        });
      }
      Object.assign(model, modelWithPresets);
      queryTypeDetails = {
        with: {
          slug
        },
        to: modelWithPresets
      };
      handleSystemModels(models, dependencyStatements, modelBeforeUpdate2, model, options.inlineDefaults);
    }
    if (action === "drop" && model) {
      models.splice(models.indexOf(model), 1);
      dependencyStatements.push({ statement: `DROP TABLE "${model.table}"`, params: [] });
      queryTypeDetails = { with: { slug } };
      models.filter(({ system }) => system?.model === model.id).map((systemModel) => {
        return handleSystemModel(models, dependencyStatements, "drop", options.inlineDefaults, systemModel);
      });
    }
    const modelSlug2 = "to" in queryTypeDetails ? queryTypeDetails?.to?.slug : ("with" in queryTypeDetails) ? queryTypeDetails?.with?.slug : undefined;
    if (modelSlug2 === "roninModel")
      return null;
    const queryTypeAction = action === "create" ? "add" : action === "alter" ? "set" : "remove";
    return {
      [queryTypeAction]: {
        roninModel: queryTypeDetails
      }
    };
  }
  const modelBeforeUpdate = structuredClone(model);
  const existingModel = model;
  const pluralType = PLURAL_MODEL_ENTITIES[entity];
  const existingEntity = existingModel[pluralType]?.[slug];
  if ((action === "alter" || action === "drop") && !existingEntity) {
    throw new RoninError({
      message: `No ${entity} with slug "${slug}" defined in model "${existingModel.name}".`,
      code: MODEL_ENTITY_ERROR_CODES[entity]
    });
  }
  if (action === "create" && existingEntity) {
    throw new RoninError({
      message: `A ${entity} with the slug "${slug}" already exists.`,
      code: "EXISTING_MODEL_ENTITY",
      fields: ["slug"]
    });
  }
  if (entity === "field") {
    const statement = `ALTER TABLE "${existingModel.table}"`;
    const existingField = existingEntity;
    const existingLinkField = existingField?.type === "link" && existingField.kind === "many";
    if (action === "create") {
      const field2 = jsonValue;
      field2.type = field2.type || "string";
      field2.name = field2.name || slugToName(field2.slug);
      const fieldStatement = getFieldStatement(models, existingModel, field2);
      if (fieldStatement) {
        dependencyStatements.push({
          statement: `${statement} ADD COLUMN ${fieldStatement}`,
          params: []
        });
      }
    } else if (action === "alter") {
      const field2 = jsonValue;
      const newSlug = field2.slug;
      if (newSlug) {
        field2.name = field2.name || slugToName(field2.slug);
        if (!existingLinkField) {
          dependencyStatements.push({
            statement: `${statement} RENAME COLUMN "${slug}" TO "${newSlug}"`,
            params: []
          });
        }
      }
    } else if (action === "drop" && !existingLinkField) {
      const systemFields = getSystemFields(existingModel.idPrefix);
      const isSystemField = slug in systemFields;
      if (isSystemField) {
        throw new RoninError({
          message: `The ${entity} "${slug}" is a system ${entity} and cannot be removed.`,
          code: "REQUIRED_MODEL_ENTITY"
        });
      }
      dependencyStatements.push({
        statement: `${statement} DROP COLUMN "${slug}"`,
        params: []
      });
    }
  }
  const statementAction = action.toUpperCase();
  if (entity === "index") {
    const index = jsonValue;
    const indexName = convertToSnakeCase(slug);
    let statement = `${statementAction}${index?.unique ? " UNIQUE" : ""} INDEX "${indexName}"`;
    if (action === "create") {
      if (!Array.isArray(index.fields) || index.fields.length === 0) {
        throw new RoninError({
          message: `When ${actionReadable} ${PLURAL_MODEL_ENTITIES[entity]}, at least one field must be provided.`,
          code: "INVALID_MODEL_VALUE",
          field: PLURAL_MODEL_ENTITIES[entity]
        });
      }
      const columns = index.fields.map((field2) => {
        let fieldSelector = "";
        if ("slug" in field2) {
          ({ fieldSelector } = getFieldFromModel(existingModel, field2.slug, {
            modelEntityType: "index",
            modelEntityName: indexName
          }));
        } else if ("expression" in field2) {
          fieldSelector = parseFieldExpression(existingModel, "to", field2.expression);
        }
        if (field2.collation)
          fieldSelector += ` COLLATE ${field2.collation}`;
        if (field2.order)
          fieldSelector += ` ${field2.order}`;
        return fieldSelector;
      });
      statement += ` ON "${existingModel.table}" (${columns.join(", ")})`;
      if (index.filter) {
        const withStatement = handleWith(models, existingModel, null, index.filter);
        statement += ` WHERE (${withStatement})`;
      }
    }
    dependencyStatements.push({ statement, params: [] });
  }
  const field = `${QUERY_SYMBOLS.FIELD}${pluralType}`;
  let json;
  switch (action) {
    case "create": {
      const { slug: slug2, ...entityValue } = jsonValue;
      const value = prepareStatementValue(statementParams, entityValue);
      json = `json_insert(${field}, '$.${slug2}', json(${value}))`;
      if (!existingModel[pluralType])
        existingModel[pluralType] = {};
      existingModel[pluralType][slug2] = entityValue;
      break;
    }
    case "alter": {
      const targetEntities = existingModel[pluralType];
      if (jsonValue?.slug && jsonValue.slug !== slug) {
        const { slug: newSlug, ...entityValue } = jsonValue;
        Object.defineProperty(targetEntities, newSlug, Object.getOwnPropertyDescriptor(targetEntities, slug));
        Object.assign(targetEntities[newSlug], entityValue);
        delete targetEntities[slug];
        const value = prepareStatementValue(statementParams, targetEntities[newSlug]);
        json = `json_insert(json_remove(${field}, '$.${slug}'), '$.${newSlug}', json(${value}))`;
      } else {
        Object.assign(targetEntities[slug], jsonValue);
        const value = prepareStatementValue(statementParams, jsonValue);
        json = `json_set(${field}, '$.${slug}', json_patch(json_extract(${field}, '$.${slug}'), ${value}))`;
      }
      break;
    }
    case "drop": {
      json = `json_remove(${field}, '$.${slug}')`;
      const targetEntities = existingModel[pluralType];
      delete targetEntities[slug];
    }
  }
  handleSystemModels(models, dependencyStatements, modelBeforeUpdate, existingModel, options.inlineDefaults);
  return {
    set: {
      roninModel: {
        with: { slug: modelSlug },
        to: {
          [pluralType]: { [QUERY_SYMBOLS.EXPRESSION]: json }
        }
      }
    }
  };
};
var Transaction = class {
  statements = [];
  models = [];
  #internalQueries = [];
  constructor(queries, options) {
    const models = options?.models || [];
    this.#internalQueries = queries.map((query) => ({
      query,
      selectedFields: [],
      models: []
    }));
    this.#compileQueries(models, options);
  }
  #compileQueries = (models, options) => {
    const modelsWithAttributes = models.map((model) => {
      return addDefaultModelAttributes(model, true);
    });
    const modelsWithFields = [
      ...modelsWithAttributes.flatMap((model) => {
        return getSystemModels(modelsWithAttributes, model);
      }),
      ...[ROOT_MODEL_WITH_ATTRIBUTES, ...modelsWithAttributes]
    ].map((model) => {
      return addDefaultModelFields(model, true);
    });
    const modelsWithPresets = modelsWithFields.map((model) => {
      return addDefaultModelPresets(modelsWithFields, model);
    });
    const statements = [];
    const expandedQueries = this.#internalQueries.flatMap(({ query }, index) => {
      const { queryType, queryModel, queryInstructions } = splitQuery(query);
      if (queryModel === "all") {
        const {
          for: forInstruction,
          on: onInstruction,
          ...restInstructions
        } = queryInstructions || {};
        let modelList = modelsWithPresets.filter((model) => {
          return model.slug !== ROOT_MODEL.slug;
        });
        if (forInstruction) {
          const mainModel = getModelBySlug(modelList, forInstruction);
          modelList = Object.values(mainModel.fields || {}).filter((field) => field.type === "link").map((field) => {
            return modelList.find((model) => model.slug === field.target);
          });
        }
        return modelList.map((model) => {
          const instructions = Object.assign({}, restInstructions, onInstruction?.[model.pluralSlug]);
          const query2 = {
            [queryType]: { [model.pluralSlug]: instructions }
          };
          return { query: query2, index, expansion: true };
        });
      }
      return { query, index };
    });
    for (const { query, index, expansion } of expandedQueries) {
      const { dependencies, main, selectedFields, model, updatedQuery } = compileQueryInput(query, modelsWithPresets, options?.inlineParams ? null : [], { inlineDefaults: options?.inlineDefaults || false });
      const preDependencies = dependencies.filter(({ after }) => !after);
      const postDependencies = dependencies.map(({ after, ...rest }) => after ? rest : null).filter((item) => item != null);
      const subStatements = [...preDependencies, main, ...postDependencies];
      this.statements.push(...subStatements);
      this.#internalQueries[index].selectedFields.push(selectedFields);
      this.#internalQueries[index].models.push(model);
      if (!expansion)
        this.#internalQueries[index].query = updatedQuery;
    }
    this.models = modelsWithPresets;
    return statements;
  };
  #formatRows(fields, rows, single) {
    const records = [];
    for (const row of rows) {
      const record = fields.reduce((acc, field, fieldIndex) => {
        let newSlug = field.mountingPath;
        let newValue = row[fieldIndex];
        if (newValue !== null) {
          if (field.type === "json" || field.type === "blob") {
            newValue = JSON.parse(newValue);
          } else if (field.type === "boolean") {
            newValue = Boolean(newValue);
          }
        }
        const { parentField, parentIsArray } = (() => {
          const lastDotIndex = newSlug.lastIndexOf(".");
          if (lastDotIndex === -1)
            return { parentField: null };
          const parent = newSlug.slice(0, lastDotIndex);
          if (parent.endsWith("[0]")) {
            return { parentField: parent.slice(0, -3), parentIsArray: true };
          }
          return { parentField: parent };
        })();
        if (parentField) {
          if (field.slug === "id" && newValue === null) {
            newSlug = parentField;
            newValue = parentIsArray ? [] : null;
          }
          const parentFields = newSlug.split(".").map((_, index, array) => array.slice(0, index + 1).join(".")).reverse();
          if (parentFields.some((item) => {
            const isArray = item.endsWith("[0]");
            const value = getProperty(acc, item.replaceAll("[0]", ""));
            return isArray ? Array.isArray(value) && value.length === 0 : value === null;
          })) {
            return acc;
          }
        }
        setProperty(acc, newSlug, newValue);
        return acc;
      }, {});
      const existingRecord = record.id ? records.find((existingRecord2) => {
        return existingRecord2.id === record.id;
      }) : null;
      if (!existingRecord) {
        records.push(record);
        continue;
      }
      const joinFields = fields.reduce((acc, { mountingPath }) => {
        if (mountingPath.includes("[0]"))
          acc.add(mountingPath.split("[0]")[0]);
        return acc;
      }, /* @__PURE__ */ new Set);
      for (const arrayField of joinFields.values()) {
        const currentValue = existingRecord[arrayField];
        const newValue = record[arrayField];
        for (const newRecord of newValue) {
          if ("id" in newRecord) {
            const existingIndex = currentValue.findIndex((value) => {
              return value.id === newRecord.id;
            });
            if (existingIndex > -1) {
              Object.assign(currentValue[existingIndex], newRecord);
              continue;
            }
          }
          currentValue.push(newRecord);
        }
      }
    }
    return single ? records[0] : records;
  }
  formatIndividualResult(queryType, queryInstructions, model, rows, selectedFields, single) {
    const modelFields = Object.fromEntries(Object.entries(model.fields).map(([slug, rest]) => [slug, rest.type]));
    if (queryType === "count") {
      return { amount: rows[0][0] };
    }
    if (single) {
      return {
        record: rows[0] ? this.#formatRows(selectedFields, rows, true) : null,
        modelFields
      };
    }
    const pageSize = queryInstructions?.limitedTo;
    const result = {
      records: this.#formatRows(selectedFields, rows, false),
      modelFields
    };
    if (pageSize && result.records.length > 0) {
      if (result.records.length > pageSize) {
        if (queryInstructions?.before) {
          result.records.shift();
        } else {
          result.records.pop();
        }
        const direction = queryInstructions?.before ? "moreBefore" : "moreAfter";
        const lastRecord = result.records.at(direction === "moreAfter" ? -1 : 0);
        result[direction] = generatePaginationCursor(model, queryInstructions.orderedBy, lastRecord);
      }
      if (queryInstructions?.before || queryInstructions?.after) {
        const direction = queryInstructions?.before ? "moreAfter" : "moreBefore";
        const firstRecord = result.records.at(direction === "moreAfter" ? -1 : 0);
        result[direction] = generatePaginationCursor(model, queryInstructions.orderedBy, firstRecord);
      }
    }
    for (const field of selectedFields) {
      if (!field.excluded)
        continue;
      for (const record of result.records) {
        deleteProperty(record, field.slug);
      }
    }
    return result;
  }
  formatResults(results, raw = false) {
    const cleanResults = results.filter((_, index) => this.statements[index].returning);
    let resultIndex = 0;
    return this.#internalQueries.reduce((finalResults, internalQuery) => {
      const { query, selectedFields, models: affectedModels } = internalQuery;
      const { queryType, queryModel, queryInstructions } = splitQuery(query);
      const absoluteResults = raw ? cleanResults : cleanResults.map((rows) => {
        return rows.map((row) => {
          if (Array.isArray(row))
            return row;
          if (queryType === "count")
            return [row.amount];
          return Object.values(row);
        });
      });
      if (queryModel === "all") {
        const models = {};
        const { on: onInstruction, ...restInstructions } = queryInstructions || {};
        for (let index = 0;index < affectedModels.length; index++) {
          const model = affectedModels[index];
          const fields = selectedFields[index];
          const instructions = Object.assign({}, restInstructions, onInstruction?.[model.pluralSlug]);
          const result = this.formatIndividualResult(queryType, instructions, model, absoluteResults[resultIndex++], fields, false);
          models[model.pluralSlug] = result;
        }
        finalResults.push({ models });
      } else {
        const model = affectedModels[0];
        const fields = selectedFields[0];
        const result = this.formatIndividualResult(queryType, queryInstructions, model, absoluteResults[resultIndex++], fields, queryModel !== model.pluralSlug);
        finalResults.push(result);
      }
      return finalResults;
    }, []);
  }
};
var CLEAN_ROOT_MODEL = omit2(ROOT_MODEL, ["system"]);

// node_modules/@ronin/syntax/dist/chunk-3SFT4KYJ.js
var getPathSegments2 = (path) => {
  const segments = path.replace(/\\\./g, "​").split(/[[.]/g).map((s) => s.replace(/\u200B/g, ".")).filter((x) => !!x.trim()).map((x) => x.replaceAll("\\.", "."));
  return segments;
};
var setPropertyViaPathSegments = (obj, pathSegments, value) => {
  let current = obj;
  for (let i = 0;i < pathSegments.length; i++) {
    const key = pathSegments[i];
    const isLastKey = i === pathSegments.length - 1;
    if (isLastKey) {
      current[key] = typeof value === "function" ? value(current[key]) : value;
    } else {
      if (!Object.prototype.hasOwnProperty.call(current, key) || typeof current[key] !== "object") {
        current[key] = {};
      }
      current = current[key];
    }
  }
};
var setProperty2 = (obj, path, value) => {
  if (path === ".") {
    Object.assign(obj, value);
  } else {
    const segments = getPathSegments2(path);
    setPropertyViaPathSegments(obj, segments, value);
  }
  return obj;
};
var getProperty2 = (obj, path) => {
  const pathSegments = getPathSegments2(path);
  let current = obj;
  for (const key of pathSegments) {
    if (current[key] === null || current[key] === undefined)
      return;
    current = current[key];
  }
  return current;
};
var isPlainObject = (value) => {
  return Object.prototype.toString.call(value) === "[object Object]";
};
var mutateStructure = (obj, callback) => {
  if (Array.isArray(obj)) {
    obj.map((item) => mutateStructure(item, callback));
    return obj;
  }
  if (isPlainObject(obj)) {
    for (const key in obj) {
      if (Object.prototype.hasOwnProperty.call(obj, key)) {
        if (obj[key] === undefined) {
          delete obj[key];
          continue;
        }
        if (isPlainObject(obj[key])) {
          mutateStructure(obj[key], callback);
          continue;
        }
        if (Array.isArray(obj[key])) {
          obj[key].map((item) => mutateStructure(item, callback));
          continue;
        }
        obj[key] = callback(obj[key]);
      }
    }
    return obj;
  }
  return callback(obj);
};
var MULTILINE_SQL_COMMENTS = /\/\*[\s\S]*?\*\//g;
var SINGLELINE_SQL_COMMENTS = /--[^\n]*\n/g;
var IN_SQL_BATCH = false;
var getSyntaxProxySQL = (options) => {
  return (strings, ...values) => {
    let text = "";
    const params = [];
    strings.forEach((string, i) => {
      const processedString = string.replace(MULTILINE_SQL_COMMENTS, "").replace(SINGLELINE_SQL_COMMENTS, `
`);
      text += processedString;
      if (i < values.length) {
        text += `$${i + 1}`;
        params.push(values[i]);
      }
    });
    const statement = {
      statement: text.replace(/\s+/g, " ").trim(),
      params
    };
    if (IN_SQL_BATCH)
      return statement;
    return options.callback(statement);
  };
};
var getBatchProxySQL = (operations) => {
  let statements = [];
  IN_SQL_BATCH = true;
  statements = operations();
  IN_SQL_BATCH = false;
  return statements;
};
var getSyntaxProxy = (config) => {
  const propertyValue = typeof config?.propertyValue === "undefined" ? {} : config.propertyValue;
  const shouldAllowChaining = config?.chaining ?? true;
  const createProxy = (path = [], targetProps, assign) => {
    let target;
    if (assign) {
      target = { ...targetProps };
    } else {
      target = () => {
        return;
      };
      target();
      delete target.name;
    }
    return new Proxy(target, {
      apply(_, __, args) {
        let value = args[0];
        const options = args[1];
        if (typeof value === "undefined") {
          value = propertyValue;
        } else {
          value = mutateStructure(value, (value2) => {
            return serializeValue(value2, config?.replacer);
          });
        }
        const structure = { ...targetProps };
        const pathParts = config?.root ? [config.root, ...path] : path;
        const pathJoined = pathParts.length > 0 ? pathParts.join(".") : ".";
        setProperty2(structure, pathJoined, value);
        if (globalThis.IN_RONIN_BATCH || !config?.callback) {
          const newPath = path.slice(0, -1);
          const details = { ...structure };
          if (options)
            details.options = options;
          return shouldAllowChaining ? createProxy(newPath, details, true) : details;
        }
        return config.callback(structure, options);
      },
      get(target2, nextProp, receiver) {
        if (Object.hasOwn(target2, nextProp)) {
          return Reflect.get(target2, nextProp, receiver);
        }
        if (nextProp === "toJSON")
          return targetProps;
        return createProxy(path.concat([nextProp]), targetProps);
      }
    });
  };
  return createProxy();
};
var getBatchProxy = (operations) => {
  let queries = [];
  globalThis.IN_RONIN_BATCH = true;
  try {
    queries = operations();
  } finally {
    globalThis.IN_RONIN_BATCH = false;
  }
  return queries.map((details) => {
    if (!isPlainObject(details))
      return { structure: details };
    const item = {
      structure: details[QUERY_SYMBOLS.QUERY]
    };
    if ("options" in details)
      item.options = details.options;
    return item;
  });
};
var serializeValue = (defaultValue, replacer) => {
  let value = defaultValue;
  if (typeof value === "undefined")
    return value;
  if (typeof value === "function") {
    const ORIGINAL_IN_RONIN_BATCH = globalThis.IN_RONIN_BATCH;
    globalThis.IN_RONIN_BATCH = true;
    const fieldProxy = new Proxy({}, {
      get(_target, property) {
        const name = property.toString();
        return {
          [QUERY_SYMBOLS.EXPRESSION]: `${QUERY_SYMBOLS.FIELD}${name}`
        };
      }
    });
    try {
      value = value(fieldProxy);
    } finally {
      globalThis.IN_RONIN_BATCH = ORIGINAL_IN_RONIN_BATCH;
    }
  }
  if (replacer) {
    const replacedValue = replacer(value);
    if (typeof replacedValue !== "undefined")
      return replacedValue;
  }
  return JSON.parse(JSON.stringify(value));
};

// node_modules/@ronin/blade/dist/chunk-SJQLAUZ6.js
var import_react4 = __toESM(require_react(), 1);

// node_modules/ronin/node_modules/@ronin/compiler/dist/index.js
var DML_QUERY_TYPES_READ2 = ["get", "count"];
var DML_QUERY_TYPES_WRITE2 = ["set", "add", "remove"];
var DML_QUERY_TYPES2 = [
  ...DML_QUERY_TYPES_READ2,
  ...DML_QUERY_TYPES_WRITE2
];
var DDL_QUERY_TYPES_READ2 = ["list"];
var DDL_QUERY_TYPES_WRITE2 = ["create", "alter", "drop"];
var DDL_QUERY_TYPES2 = [
  ...DDL_QUERY_TYPES_READ2,
  ...DDL_QUERY_TYPES_WRITE2
];
var QUERY_TYPES_READ2 = [
  ...DML_QUERY_TYPES_READ2,
  ...DDL_QUERY_TYPES_READ2
];
var QUERY_TYPES_WRITE2 = [
  ...DML_QUERY_TYPES_WRITE2,
  ...DDL_QUERY_TYPES_WRITE2
];
var QUERY_TYPES2 = [...DML_QUERY_TYPES2, ...DDL_QUERY_TYPES2];
var QUERY_SYMBOLS2 = {
  QUERY: "__RONIN_QUERY",
  EXPRESSION: "__RONIN_EXPRESSION",
  FIELD: "__RONIN_FIELD_",
  FIELD_PARENT: "__RONIN_FIELD_PARENT_",
  VALUE: "__RONIN_VALUE"
};
var RONIN_MODEL_FIELD_REGEX2 = new RegExp(`${QUERY_SYMBOLS2.FIELD}[_a-zA-Z0-9.]+`, "g");
var RAW_FIELD_TYPES2 = ["string", "number", "boolean"];
var CURRENT_TIME_EXPRESSION2 = {
  [QUERY_SYMBOLS2.EXPRESSION]: `strftime('%Y-%m-%dT%H:%M:%f', 'now') || 'Z'`
};
var MOUNTING_PATH_SUFFIX2 = /(.*?)(\{(\d+)\})?$/;
var composeMountingPath2 = (single, key, mountingPath) => {
  if (key === "ronin_root") {
    return mountingPath ? mountingPath.replace(MOUNTING_PATH_SUFFIX2, (_, p, __, n) => `${p}{${n ? +n + 1 : 1}}`) : key;
  }
  return `${mountingPath ? `${mountingPath}.` : ""}${single ? key : `${key}[0]`}`;
};
var MODEL_ENTITY_ERROR_CODES2 = {
  field: "FIELD_NOT_FOUND",
  index: "INDEX_NOT_FOUND",
  preset: "PRESET_NOT_FOUND"
};
var CompilerError = class extends Error {
  code;
  field;
  fields;
  issues;
  queries;
  constructor(details) {
    super(details.message);
    this.name = "CompilerError";
    this.code = details.code;
    this.field = details.field;
    this.fields = details.fields;
    this.issues = details.issues;
    this.queries = details.queries || null;
  }
};
var SINGLE_QUOTE_REGEX2 = /'/g;
var DOUBLE_QUOTE_REGEX2 = /"/g;
var AMPERSAND_REGEX2 = /\s*&+\s*/g;
var SPECIAL_CHARACTERS_REGEX2 = /[^\w\s-]+/g;
var SPLIT_REGEX2 = /(?<=[a-z])(?=[A-Z])|(?<=[A-Z])(?=[A-Z][a-z])|[\s.\-_]+/;
var capitalize2 = (str) => {
  if (!str || str.length === 0)
    return "";
  return str.charAt(0).toUpperCase() + str.slice(1).toLowerCase();
};
var sanitize2 = (str) => {
  if (!str || str.length === 0)
    return "";
  return str.replace(SINGLE_QUOTE_REGEX2, "").replace(DOUBLE_QUOTE_REGEX2, "").replace(AMPERSAND_REGEX2, " and ").replace(SPECIAL_CHARACTERS_REGEX2, " ").trim();
};
var convertToSnakeCase2 = (str) => {
  if (!str || str.length === 0)
    return "";
  return sanitize2(str).split(SPLIT_REGEX2).map((part) => part.toLowerCase()).join("_");
};
var convertToCamelCase2 = (str) => {
  if (!str || str.length === 0)
    return "";
  return sanitize2(str).split(SPLIT_REGEX2).map((part, index) => index === 0 ? part.toLowerCase() : capitalize2(part)).join("");
};
var isObject2 = (value) => value != null && typeof value === "object" && Array.isArray(value) === false;
var getQuerySymbol2 = (value) => {
  if (!isObject2(value))
    return null;
  const objectValue = value;
  if (QUERY_SYMBOLS2.QUERY in objectValue) {
    return {
      type: "query",
      value: objectValue[QUERY_SYMBOLS2.QUERY]
    };
  }
  if (QUERY_SYMBOLS2.EXPRESSION in objectValue) {
    return {
      type: "expression",
      value: objectValue[QUERY_SYMBOLS2.EXPRESSION]
    };
  }
  return null;
};
var findInObject2 = (obj, pattern, replacer) => {
  let found = false;
  for (const key in obj) {
    if (!Object.hasOwn(obj, key))
      continue;
    const value = obj[key];
    if (isObject2(value)) {
      found = findInObject2(value, pattern, replacer);
    } else if (typeof value === "string" && value.startsWith(pattern)) {
      found = true;
      if (replacer) {
        obj[key] = value.replace(pattern, replacer);
      } else {
        return found;
      }
    }
  }
  return found;
};
var flatten2 = (obj, prefix = "", res = {}) => {
  for (const key in obj) {
    if (!Object.hasOwn(obj, key))
      continue;
    const path = prefix ? `${prefix}.${key}` : key;
    const value = obj[key];
    if (typeof value === "object" && value !== null && !getQuerySymbol2(value)) {
      flatten2(value, path, res);
    } else {
      res[path] = value;
    }
  }
  return res;
};
var omit3 = (obj, properties) => Object.fromEntries(Object.entries(obj).filter(([key]) => !properties.includes(key)));
var getProperty3 = (obj, path) => {
  return path.split(".").reduce((acc, key) => acc?.[key], obj);
};
var getPathSegments3 = (path) => {
  return path.split(/[.[\]]/g).filter((segment) => segment.trim().length > 0);
};
var setProperty3 = (obj, path, value) => {
  const segments = getPathSegments3(path);
  const _set = (node) => {
    if (segments.length > 1) {
      const key = segments.shift();
      const nextIsNum = !Number.isNaN(Number.parseInt(segments[0]));
      if (typeof node[key] !== "object" || node[key] === null) {
        node[key] = nextIsNum ? [] : {};
      }
      _set(node[key]);
    } else {
      node[segments[0]] = value;
    }
  };
  _set(obj);
};
var deleteProperty2 = (obj, path) => {
  const segments = getPathSegments3(path);
  const _delete = (node, segs) => {
    const key = segs[0];
    if (segs.length === 1) {
      delete node[key];
    } else if (node[key] && typeof node[key] === "object" && node[key] !== null) {
      const shouldCleanup = _delete(node[key], segs.slice(1));
      if (shouldCleanup)
        delete node[key];
    }
    return Object.keys(node).length === 0;
  };
  _delete(obj, segments);
};
var splitQuery2 = (query) => {
  const queryType = Object.keys(query)[0];
  const queryModel = Object.keys(query[queryType])[0];
  const queryInstructions = query[queryType][queryModel];
  return { queryType, queryModel, queryInstructions };
};
var CURSOR_SEPARATOR2 = ",";
var CURSOR_NULL_PLACEHOLDER2 = "RONIN_NULL";
var generatePaginationCursor2 = (model, orderedBy, record) => {
  const { ascending = [], descending = [] } = orderedBy || {};
  const keys = [...ascending, ...descending];
  if (keys.length === 0)
    keys.push("ronin.createdAt");
  const cursors = keys.map((fieldSlug) => {
    const property = getProperty3(record, fieldSlug);
    if (property === null || property === undefined)
      return CURSOR_NULL_PLACEHOLDER2;
    const { field } = getFieldFromModel2(model, fieldSlug, {
      instructionName: "orderedBy"
    });
    if (field.type === "date")
      return new Date(property).getTime();
    return property;
  });
  return cursors.map((cursor) => encodeURIComponent(String(cursor))).join(CURSOR_SEPARATOR2);
};
var handleBeforeOrAfter2 = (model, statementParams, queryType, instructions) => {
  if (!(instructions.before || instructions.after)) {
    throw new CompilerError({
      message: "The `before` or `after` instruction must not be empty.",
      code: "MISSING_INSTRUCTION"
    });
  }
  if (instructions.before && instructions.after) {
    throw new CompilerError({
      message: "The `before` and `after` instructions cannot co-exist. Choose one.",
      code: "MUTUALLY_EXCLUSIVE_INSTRUCTIONS"
    });
  }
  if (!instructions.limitedTo && queryType !== "count") {
    let message = "When providing a pagination cursor in the `before` or `after`";
    message += " instruction, a `limitedTo` instruction must be provided as well, to";
    message += " define the page size.";
    throw new CompilerError({
      message,
      code: "MISSING_INSTRUCTION"
    });
  }
  const { ascending = [], descending = [] } = instructions.orderedBy || {};
  const clause = instructions.with ? "AND " : "";
  const chunks = (instructions.before || instructions.after).toString().split(CURSOR_SEPARATOR2).map(decodeURIComponent);
  const keys = [...ascending, ...descending];
  const values = keys.map((key, index) => {
    const value = chunks[index];
    if (value === CURSOR_NULL_PLACEHOLDER2) {
      return "NULL";
    }
    const { field } = getFieldFromModel2(model, key, {
      instructionName: "orderedBy"
    });
    if (field.type === "boolean") {
      return prepareStatementValue2(statementParams, value === "true");
    }
    if (field.type === "number") {
      return prepareStatementValue2(statementParams, Number.parseInt(value));
    }
    if (field.type === "date") {
      return `'${new Date(Number.parseInt(value)).toJSON()}'`;
    }
    return prepareStatementValue2(statementParams, value);
  });
  const compareOperators = [
    ...new Array(ascending.length).fill(instructions.before ? "<" : ">"),
    ...new Array(descending.length).fill(instructions.before ? ">" : "<")
  ];
  const conditions = new Array;
  for (let i = 0;i < keys.length; i++) {
    if (values[i] === "NULL" && compareOperators[i] === "<") {
      continue;
    }
    const condition = new Array;
    for (let j = 0;j <= i; j++) {
      const key = keys[j];
      const value = values[j];
      let { field, fieldSelector } = getFieldFromModel2(model, key, {
        instructionName: "orderedBy"
      });
      if (j === i) {
        const closingParentheses = ")".repeat(condition.length);
        const operator = value === "NULL" ? "IS NOT" : compareOperators[j];
        const caseInsensitiveStatement = value !== "NULL" && field.type === "string" ? " COLLATE NOCASE" : "";
        if (value !== "NULL" && operator === "<" && !["ronin.createdAt", "ronin.updatedAt"].includes(key)) {
          fieldSelector = `IFNULL(${fieldSelector}, -1e999)`;
        }
        condition.push(`(${fieldSelector} ${operator} ${value}${caseInsensitiveStatement})${closingParentheses}`);
      } else {
        const operator = value === "NULL" ? "IS" : "=";
        condition.push(`(${fieldSelector} ${operator} ${value} AND`);
      }
    }
    conditions.push(condition.join(" "));
  }
  return `${clause}(${conditions.join(" OR ")})`;
};
var handleIncluding2 = (models, model, statementParams, single, instruction, options = {
  inlineDefaults: false
}) => {
  let statement = "";
  let tableSubQuery;
  for (const ephemeralFieldSlug in instruction) {
    if (!Object.hasOwn(instruction, ephemeralFieldSlug))
      continue;
    const symbol = getQuerySymbol2(instruction[ephemeralFieldSlug]);
    if (symbol?.type !== "query")
      continue;
    const { queryType, queryModel, queryInstructions } = splitQuery2(symbol.value);
    let modifiableQueryInstructions = queryInstructions;
    if (queryType === "count")
      continue;
    const relatedModel = getModelBySlug2(models, queryModel);
    let joinType = "LEFT";
    let relatedTableSelector = `"${relatedModel.table}"`;
    const subSingle = queryModel !== relatedModel.pluralSlug;
    const subMountingPath = composeMountingPath2(subSingle, ephemeralFieldSlug, options.mountingPath);
    const tableAlias = `including_${subMountingPath}`;
    if (!modifiableQueryInstructions?.with) {
      joinType = "CROSS";
      if (subSingle) {
        if (!modifiableQueryInstructions)
          modifiableQueryInstructions = {};
        modifiableQueryInstructions.limitedTo = 1;
      }
    }
    if (modifiableQueryInstructions?.limitedTo || modifiableQueryInstructions?.orderedBy) {
      const subSelect = compileQueryInput2({
        [queryType]: {
          [queryModel]: modifiableQueryInstructions
        }
      }, models, statementParams, { parentModel: model, inlineDefaults: options.inlineDefaults });
      relatedTableSelector = `(${subSelect.main.statement})`;
    }
    statement += `${joinType} JOIN ${relatedTableSelector} as "${tableAlias}"`;
    model.tableAlias = model.tableAlias || model.table;
    if (joinType === "LEFT") {
      const subStatement = composeConditions2(models, { ...relatedModel, tableAlias }, statementParams, "including", queryInstructions?.with, {
        parentModel: model
      });
      statement += ` ON (${subStatement})`;
    }
    if (single && !subSingle) {
      tableSubQuery = `SELECT * FROM "${model.table}" LIMIT 1`;
    }
    if (modifiableQueryInstructions?.including) {
      const subIncluding = handleIncluding2(models, { ...relatedModel, tableAlias }, statementParams, subSingle, modifiableQueryInstructions.including, { mountingPath: subMountingPath, inlineDefaults: options.inlineDefaults });
      statement += ` ${subIncluding.statement}`;
    }
  }
  return { statement, tableSubQuery };
};
var handleLimitedTo2 = (single, instruction) => {
  let amount;
  if (instruction)
    amount = instruction + 1;
  if (single)
    amount = 1;
  return `LIMIT ${amount} `;
};
var handleOrderedBy2 = (model, instruction) => {
  let statement = "";
  const items = [
    ...(instruction.ascending || []).map((value) => ({ value, order: "ASC" })),
    ...(instruction.descending || []).map((value) => ({ value, order: "DESC" }))
  ];
  for (const item of items) {
    if (statement.length > 0) {
      statement += ", ";
    }
    const symbol = getQuerySymbol2(item.value);
    const instructionName = item.order === "ASC" ? "orderedBy.ascending" : "orderedBy.descending";
    if (symbol?.type === "expression") {
      statement += `(${parseFieldExpression2(model, instructionName, symbol.value)}) ${item.order}`;
      continue;
    }
    const { field: modelField, fieldSelector } = getFieldFromModel2(model, item.value, { instructionName });
    const caseInsensitiveStatement = modelField.type === "string" ? " COLLATE NOCASE" : "";
    statement += `${fieldSelector}${caseInsensitiveStatement} ${item.order}`;
  }
  return `ORDER BY ${statement}`;
};
var handleSelecting2 = (models, model, statementParams, queryType, single, instructions, options = { inlineDefaults: false }) => {
  let isJoining = false;
  const selectedFields = filterSelectedFields2(model, instructions.selecting).filter((field) => !(field.type === "link" && field.kind === "many")).map((field) => {
    const newField = { ...field, mountingPath: field.slug };
    if (options.mountingPath && options.mountingPath !== "ronin_root") {
      newField.mountingPath = `${options.mountingPath.replace(/\{\d+\}/g, "")}.${field.slug}`;
    }
    return newField;
  });
  const joinedSelectedFields = [];
  const joinedColumns = [];
  if (instructions.including) {
    const symbol = getQuerySymbol2(instructions.including);
    if (symbol?.type === "query") {
      instructions.including.ronin_root = { ...instructions.including };
      delete instructions.including[QUERY_SYMBOLS2.QUERY];
    }
    const flatObject = flatten2(instructions.including);
    for (const [key, value] of Object.entries(flatObject)) {
      const symbol2 = getQuerySymbol2(value);
      if (symbol2?.type === "query") {
        const { queryType: queryType2, queryModel, queryInstructions } = splitQuery2(symbol2.value);
        const subQueryModel = getModelBySlug2(models, queryModel);
        if (queryType2 === "count") {
          const subSelect = compileQueryInput2(symbol2.value, models, statementParams, {
            parentModel: { ...model, tableAlias: model.table },
            inlineDefaults: options.inlineDefaults
          });
          selectedFields.push({
            slug: key,
            mountingPath: key,
            type: "number",
            mountedValue: `(${subSelect.main.statement})`
          });
          continue;
        }
        isJoining = true;
        const subSingle = queryModel !== subQueryModel.pluralSlug;
        if (!model.tableAlias)
          model.tableAlias = single && !subSingle ? `sub_${model.table}` : model.table;
        const subMountingPath = composeMountingPath2(subSingle, key, options.mountingPath);
        const { columns: nestedColumns, selectedFields: nestedSelectedFields } = handleSelecting2(models, { ...subQueryModel, tableAlias: `including_${subMountingPath}` }, statementParams, queryType2, subSingle, {
          selecting: queryInstructions?.selecting,
          including: queryInstructions?.including,
          orderedBy: queryInstructions?.orderedBy,
          limitedTo: queryInstructions?.limitedTo
        }, { ...options, mountingPath: subMountingPath });
        if (nestedColumns !== "*")
          joinedColumns.push(nestedColumns);
        joinedSelectedFields.push(...nestedSelectedFields);
        continue;
      }
      let mountedValue = value;
      if (symbol2?.type === "expression") {
        mountedValue = `(${parseFieldExpression2(model, "including", symbol2.value)})`;
      } else {
        mountedValue = prepareStatementValue2(statementParams, value);
      }
      const existingField = selectedFields.findIndex((field) => field.slug === key);
      if (existingField > -1)
        selectedFields.splice(existingField, 1);
      selectedFields.push({
        slug: key,
        mountingPath: key,
        type: RAW_FIELD_TYPES2.includes(typeof value) ? typeof value : "string",
        mountedValue
      });
    }
  }
  if (queryType === "get" && !single && typeof instructions.limitedTo !== "undefined") {
    const orderedFields = Object.values(instructions.orderedBy || {}).flat().map((fieldSlug) => {
      return getFieldFromModel2(model, fieldSlug, { instructionName: "orderedBy" });
    });
    for (const orderedField of orderedFields) {
      const { field } = orderedField;
      if (selectedFields.some(({ slug }) => slug === field.slug))
        continue;
      selectedFields.push({
        slug: field.slug,
        mountingPath: field.slug,
        excluded: true
      });
    }
  }
  const columns = selectedFields.map((selectedField) => {
    if (selectedField.mountedValue) {
      return `${selectedField.mountedValue} as "${selectedField.slug}"`;
    }
    const { fieldSelector } = getFieldFromModel2(model, selectedField.slug, {
      instructionName: "selecting"
    });
    if (options.mountingPath) {
      return `${fieldSelector} as "${options.mountingPath}.${selectedField.slug}"`;
    }
    return fieldSelector;
  });
  columns.push(...joinedColumns);
  selectedFields.push(...joinedSelectedFields);
  return { columns: columns.join(", "), isJoining, selectedFields };
};
var conjunctions2 = [
  "for",
  "and",
  "nor",
  "but",
  "or",
  "yet",
  "so"
];
var articles2 = [
  "a",
  "an",
  "the"
];
var prepositions2 = [
  "aboard",
  "about",
  "above",
  "across",
  "after",
  "against",
  "along",
  "amid",
  "among",
  "anti",
  "around",
  "as",
  "at",
  "before",
  "behind",
  "below",
  "beneath",
  "beside",
  "besides",
  "between",
  "beyond",
  "but",
  "by",
  "concerning",
  "considering",
  "despite",
  "down",
  "during",
  "except",
  "excepting",
  "excluding",
  "following",
  "for",
  "from",
  "in",
  "inside",
  "into",
  "like",
  "minus",
  "near",
  "of",
  "off",
  "on",
  "onto",
  "opposite",
  "over",
  "past",
  "per",
  "plus",
  "regarding",
  "round",
  "save",
  "since",
  "than",
  "through",
  "to",
  "toward",
  "towards",
  "under",
  "underneath",
  "unlike",
  "until",
  "up",
  "upon",
  "versus",
  "via",
  "with",
  "within",
  "without"
];
var lowerCase2 = /* @__PURE__ */ new Set([
  ...conjunctions2,
  ...articles2,
  ...prepositions2
]);
var specials2 = [
  "ZEIT",
  "ZEIT Inc.",
  "Vercel",
  "Vercel Inc.",
  "CLI",
  "API",
  "HTTP",
  "HTTPS",
  "JSX",
  "DNS",
  "URL",
  "now.sh",
  "now.json",
  "vercel.app",
  "vercel.json",
  "CI",
  "CD",
  "CDN",
  "package.json",
  "package.lock",
  "yarn.lock",
  "GitHub",
  "GitLab",
  "CSS",
  "Sass",
  "JS",
  "JavaScript",
  "TypeScript",
  "HTML",
  "WordPress",
  "Next.js",
  "Node.js",
  "Webpack",
  "Docker",
  "Bash",
  "Kubernetes",
  "SWR",
  "TinaCMS",
  "UI",
  "UX",
  "TS",
  "TSX",
  "iPhone",
  "iPad",
  "watchOS",
  "iOS",
  "iPadOS",
  "macOS",
  "PHP",
  "composer.json",
  "composer.lock",
  "CMS",
  "SQL",
  "C",
  "C#",
  "GraphQL",
  "GraphiQL",
  "JWT",
  "JWTs"
];
var word2 = `[^\\s'’\\(\\)!?;:"-]`;
var regex2 = new RegExp(`(?:(?:(\\s?(?:^|[.\\(\\)!?;:"-])\\s*)(${word2}))|(${word2}))(${word2}*[’']*${word2}*)`, "g");
var convertToRegExp2 = (specials22) => specials22.map((s) => [new RegExp(`\\b${s}\\b`, "gi"), s]);
function parseMatch2(match) {
  const firstCharacter = match[0];
  if (/\s/.test(firstCharacter)) {
    return match.slice(1);
  }
  if (/[\(\)]/.test(firstCharacter)) {
    return null;
  }
  return match;
}
var src_default2 = (str, options = {}) => {
  str = str.toLowerCase().replace(regex2, (m, lead = "", forced, lower, rest, offset, string) => {
    const isLastWord = m.length + offset >= string.length;
    const parsedMatch = parseMatch2(m);
    if (!parsedMatch) {
      return m;
    }
    if (!forced) {
      const fullLower = lower + rest;
      if (lowerCase2.has(fullLower) && !isLastWord) {
        return parsedMatch;
      }
    }
    return lead + (lower || forced).toUpperCase() + rest;
  });
  const customSpecials = options.special || [];
  const replace = [...specials2, ...customSpecials];
  const replaceRegExp = convertToRegExp2(replace);
  replaceRegExp.forEach(([pattern, s]) => {
    str = str.replace(pattern, s);
  });
  return str;
};
var slugToName2 = (slug) => {
  const name = slug.replace(/([a-z])([A-Z])/g, "$1 $2");
  return src_default2(name);
};
var VOWELS2 = ["a", "e", "i", "o", "u"];
var pluralize2 = (word22) => {
  const lastLetter = word22.slice(-1).toLowerCase();
  const secondLastLetter = word22.slice(-2, -1).toLowerCase();
  if (lastLetter === "y" && !VOWELS2.includes(secondLastLetter)) {
    return `${word22.slice(0, -1)}ies`;
  }
  if (lastLetter === "s" || word22.slice(-2).toLowerCase() === "ch" || word22.slice(-2).toLowerCase() === "sh" || word22.slice(-2).toLowerCase() === "ex") {
    return `${word22}es`;
  }
  return `${word22}s`;
};
var modelAttributes2 = [
  ["pluralSlug", "slug", pluralize2, true],
  ["name", "slug", slugToName2, false],
  ["pluralName", "pluralSlug", slugToName2, false],
  ["idPrefix", "slug", (slug) => slug.slice(0, 3).toLowerCase(), false],
  ["table", "pluralSlug", convertToSnakeCase2, true]
];
var getRecordIdentifier2 = (prefix) => {
  return `${prefix}_${Array.from(crypto.getRandomValues(new Uint8Array(12))).map((b) => b.toString(16).padStart(2, "0")).join("").slice(0, 16).toLowerCase()}`;
};
var addDefaultModelAttributes2 = (model, isNew) => {
  const copiedModel = { ...model };
  if (isNew && !copiedModel.id)
    copiedModel.id = getRecordIdentifier2("mod");
  for (const [setting, base, generator, mustRegenerate] of modelAttributes2) {
    if (!(isNew || mustRegenerate))
      continue;
    if (copiedModel[setting] || !copiedModel[base])
      continue;
    copiedModel[setting] = generator(copiedModel[base]);
  }
  const newFields = copiedModel.fields || [];
  if (isNew || Object.keys(newFields).length > 0) {
    if (!copiedModel.identifiers)
      copiedModel.identifiers = {};
    if (!copiedModel.identifiers.name) {
      const suitableField = Object.entries(newFields).find(([fieldSlug, field]) => field.type === "string" && field.required === true && ["name"].includes(fieldSlug));
      copiedModel.identifiers.name = suitableField?.[0] || "id";
    }
    if (!copiedModel.identifiers.slug) {
      const suitableField = Object.entries(newFields).find(([fieldSlug, field]) => field.type === "string" && field.unique === true && field.required === true && ["slug", "handle"].includes(fieldSlug));
      copiedModel.identifiers.slug = suitableField?.[0] || "id";
    }
  }
  return copiedModel;
};
var addDefaultModelFields2 = (model, isNew) => {
  const copiedModel = { ...model };
  const existingFields = copiedModel.fields || [];
  if (isNew || Object.keys(existingFields).length > 0) {
    const additionalFields = Object.fromEntries(Object.entries(getSystemFields2(copiedModel.idPrefix)).filter(([newFieldSlug]) => {
      return !Object.hasOwn(existingFields, newFieldSlug);
    }));
    copiedModel.fields = { ...additionalFields, ...existingFields };
  }
  return copiedModel;
};
var addDefaultModelPresets2 = (list2, model) => {
  const defaultPresets = {};
  for (const [fieldSlug, rest] of Object.entries(model.fields || {})) {
    const field = { slug: fieldSlug, ...rest };
    if (field.type === "link" && !fieldSlug.startsWith("ronin.")) {
      const targetModel = getModelBySlug2(list2, field.target);
      if (field.kind === "many") {
        const systemModel = list2.find(({ system }) => {
          return system?.model === model.id && system?.associationSlug === field.slug;
        });
        if (!systemModel)
          continue;
        const preset2 = {
          instructions: {
            including: {
              [fieldSlug]: {
                [QUERY_SYMBOLS2.QUERY]: {
                  get: {
                    [systemModel.pluralSlug]: {
                      with: {
                        source: {
                          [QUERY_SYMBOLS2.EXPRESSION]: `${QUERY_SYMBOLS2.FIELD_PARENT}id`
                        }
                      },
                      including: {
                        [QUERY_SYMBOLS2.QUERY]: {
                          get: {
                            [targetModel.slug]: {
                              with: {
                                id: {
                                  [QUERY_SYMBOLS2.EXPRESSION]: `${QUERY_SYMBOLS2.FIELD_PARENT}target`
                                }
                              }
                            }
                          }
                        }
                      },
                      selecting: ["**", "!source", "!target"]
                    }
                  }
                }
              }
            }
          },
          name: slugToName2(fieldSlug),
          system: true
        };
        defaultPresets[fieldSlug] = preset2;
        continue;
      }
      const preset = {
        instructions: {
          including: {
            [fieldSlug]: {
              [QUERY_SYMBOLS2.QUERY]: {
                get: {
                  [targetModel.slug]: {
                    with: {
                      id: {
                        [QUERY_SYMBOLS2.EXPRESSION]: `${QUERY_SYMBOLS2.FIELD_PARENT}${field.slug}`
                      }
                    }
                  }
                }
              }
            }
          }
        },
        name: slugToName2(fieldSlug),
        system: true
      };
      defaultPresets[fieldSlug] = preset;
    }
  }
  const childModels = list2.map((subModel) => {
    if (subModel.system?.associationSlug)
      return null;
    const field = Object.entries(subModel.fields).find(([fieldSlug, rest]) => {
      const field2 = { slug: fieldSlug, ...rest };
      return field2.type === "link" && field2.target === model.slug;
    });
    if (!field)
      return null;
    return { model: subModel, field: { slug: field[0], ...field[1] } };
  }).filter((match) => match !== null);
  for (const childMatch of childModels) {
    const { model: childModel, field: childField } = childMatch;
    const pluralSlug = childModel.pluralSlug;
    const presetSlug = childModel.system?.associationSlug || pluralSlug;
    const preset = {
      instructions: {
        including: {
          [presetSlug]: {
            [QUERY_SYMBOLS2.QUERY]: {
              get: {
                [pluralSlug]: {
                  with: {
                    [childField.slug]: {
                      [QUERY_SYMBOLS2.EXPRESSION]: `${QUERY_SYMBOLS2.FIELD_PARENT}id`
                    }
                  }
                }
              }
            }
          }
        }
      },
      name: slugToName2(presetSlug),
      system: true
    };
    defaultPresets[presetSlug] = preset;
  }
  if (Object.keys(defaultPresets).length > 0) {
    const existingPresets = model.presets;
    const additionalPresets = Object.fromEntries(Object.entries(defaultPresets).filter(([newPresetSlug]) => {
      return !existingPresets?.[newPresetSlug];
    }));
    model.presets = { ...additionalPresets, ...existingPresets };
  }
  return model;
};
var handleTo2 = (models, model, statementParams, queryType, dependencyStatements, instructions, options) => {
  const { with: withInstruction, to: toInstruction } = instructions;
  const defaultFields = {};
  const currentTime = (/* @__PURE__ */ new Date()).toISOString();
  if (queryType === "add" && options?.inlineDefaults) {
    defaultFields.id = toInstruction.id || getRecordIdentifier2(model.idPrefix);
  }
  if (queryType === "add" || queryType === "set" || toInstruction.ronin) {
    const defaults = options?.inlineDefaults ? {
      ...queryType === "add" && { createdAt: currentTime },
      updatedAt: currentTime,
      ...toInstruction.ronin
    } : {
      ...queryType === "set" ? { updatedAt: CURRENT_TIME_EXPRESSION2 } : {},
      ...toInstruction.ronin
    };
    if (Object.keys(defaults).length > 0)
      defaultFields.ronin = defaults;
  }
  const symbol = getQuerySymbol2(toInstruction);
  if (symbol?.type === "query") {
    const { queryModel: subQueryModelSlug, queryInstructions: subQueryInstructions } = splitQuery2(symbol.value);
    const subQueryModel = getModelBySlug2(models, subQueryModelSlug);
    const subQuerySelectedFields = subQueryInstructions?.selecting;
    const subQueryIncludedFields = subQueryInstructions?.including;
    const subQueryFields = [
      ...filterSelectedFields2(subQueryModel, subQuerySelectedFields).map((field) => field.slug),
      ...subQueryIncludedFields ? Object.keys(flatten2(subQueryIncludedFields || {})) : []
    ];
    for (const field of subQueryFields || []) {
      getFieldFromModel2(model, field, { instructionName: "to" });
    }
    let statement2 = "";
    if (subQuerySelectedFields) {
      const columns = subQueryFields.map((field) => {
        return getFieldFromModel2(model, field, { instructionName: "to" }).fieldSelector;
      });
      statement2 = `(${columns.join(", ")}) `;
    }
    statement2 += compileQueryInput2(symbol.value, models, statementParams, {
      inlineDefaults: options?.inlineDefaults || false
    }).main.statement;
    return statement2;
  }
  Object.assign(toInstruction, defaultFields);
  for (const fieldSlug in toInstruction) {
    if (!Object.hasOwn(toInstruction, fieldSlug))
      continue;
    const fieldValue = toInstruction[fieldSlug];
    const fieldDetails = getFieldFromModel2(model, fieldSlug, { instructionName: "to" }, false);
    if (fieldDetails?.field.type === "link" && fieldDetails.field.kind === "many") {
      delete toInstruction[fieldSlug];
      const associativeModelSlug = composeAssociationModelSlug2(model, fieldDetails.field);
      const composeStatement = (subQueryType, value) => {
        const source = queryType === "add" ? toInstruction : withInstruction;
        const recordDetails = { source };
        if (value)
          recordDetails.target = value;
        const query = compileQueryInput2({
          [subQueryType]: {
            [associativeModelSlug]: { with: recordDetails }
          }
        }, models, [], { returning: false, inlineDefaults: options?.inlineDefaults || false }).main;
        dependencyStatements.push({ ...query, after: true });
      };
      if (Array.isArray(fieldValue)) {
        if (queryType === "set")
          composeStatement("remove");
        for (const record of fieldValue) {
          composeStatement("add", record);
        }
      } else if (isObject2(fieldValue)) {
        const value = fieldValue;
        for (const recordToAdd of value.containing || []) {
          composeStatement("add", recordToAdd);
        }
        for (const recordToRemove of value.notContaining || []) {
          composeStatement("remove", recordToRemove);
        }
      }
    }
  }
  let statement = composeConditions2(models, model, statementParams, "to", toInstruction, {
    parentModel: options?.parentModel,
    type: queryType === "add" ? "fields" : undefined
  });
  if (queryType === "add") {
    const deepStatement = composeConditions2(models, model, statementParams, "to", toInstruction, {
      parentModel: options?.parentModel,
      type: "values"
    });
    statement = `(${statement}) VALUES (${deepStatement})`;
  } else if (queryType === "set") {
    statement = `SET ${statement}`;
  }
  return statement;
};
var handleUsing2 = (model, instructions) => {
  const normalizedUsing = Array.isArray(instructions.using) ? Object.fromEntries(instructions.using.map((presetSlug) => [presetSlug, null])) : instructions.using;
  if ("links" in normalizedUsing) {
    for (const [fieldSlug, rest] of Object.entries(model.fields)) {
      const field = { slug: fieldSlug, ...rest };
      if (field.type !== "link" || field.kind === "many")
        continue;
      normalizedUsing[fieldSlug] = null;
    }
  }
  for (const presetSlug in normalizedUsing) {
    if (!Object.hasOwn(normalizedUsing, presetSlug) || presetSlug === "links")
      continue;
    const arg = normalizedUsing[presetSlug];
    const preset = model.presets?.[presetSlug];
    if (!preset) {
      throw new CompilerError({
        message: `Preset "${presetSlug}" does not exist in model "${model.name}".`,
        code: "PRESET_NOT_FOUND"
      });
    }
    const replacedUsingFilter = structuredClone(preset.instructions);
    if (arg !== null) {
      findInObject2(replacedUsingFilter, QUERY_SYMBOLS2.VALUE, (match) => match.replace(QUERY_SYMBOLS2.VALUE, arg));
    }
    for (const subInstruction in replacedUsingFilter) {
      if (!Object.hasOwn(replacedUsingFilter, subInstruction))
        continue;
      const instructionName = subInstruction;
      const currentValue = instructions[instructionName];
      if (currentValue) {
        let newValue;
        if (Array.isArray(currentValue)) {
          newValue = Array.from(/* @__PURE__ */ new Set([
            ...replacedUsingFilter[instructionName],
            ...currentValue
          ]));
        } else if (isObject2(currentValue)) {
          newValue = {
            ...replacedUsingFilter[instructionName],
            ...currentValue
          };
        }
        Object.assign(instructions, { [instructionName]: newValue });
        continue;
      }
      Object.assign(instructions, {
        [instructionName]: replacedUsingFilter[instructionName]
      });
    }
  }
  return instructions;
};
var compileQueryInput2 = (defaultQuery, models, statementParams, options) => {
  const dependencyStatements = [];
  const query = transformMetaQuery2(models, dependencyStatements, statementParams, defaultQuery, {
    inlineDefaults: options?.inlineDefaults || false
  });
  if (query === null)
    return {
      dependencies: [],
      main: dependencyStatements[0],
      selectedFields: [],
      model: ROOT_MODEL_WITH_ATTRIBUTES2,
      updatedQuery: defaultQuery
    };
  const parsedQuery = splitQuery2(query);
  const { queryType, queryModel, queryInstructions } = parsedQuery;
  const model = getModelBySlug2(models, queryModel);
  const single = queryModel !== model.pluralSlug;
  let instructions = formatIdentifiers2(model, queryInstructions);
  const returning = options?.returning ?? true;
  if (instructions && typeof instructions.using !== "undefined") {
    instructions = handleUsing2(model, instructions);
  }
  if (queryType === "count") {
    if (!instructions)
      instructions = {};
    instructions.selecting = ["amount"];
    instructions.including = Object.assign(instructions?.including || {}, {
      amount: {
        [QUERY_SYMBOLS2.EXPRESSION]: "COUNT(*)"
      }
    });
  }
  if (!single && (queryType === "get" && instructions?.limitedTo || queryType === "count" && (instructions?.before || instructions?.after))) {
    instructions = instructions || {};
    instructions.orderedBy = instructions.orderedBy || {};
    instructions.orderedBy.ascending = instructions.orderedBy.ascending || [];
    instructions.orderedBy.descending = instructions.orderedBy.descending || [];
    if (![
      ...instructions.orderedBy.ascending,
      ...instructions.orderedBy.descending
    ].includes("ronin.createdAt")) {
      instructions.orderedBy.descending.push("ronin.createdAt");
    }
  }
  const { columns, isJoining, selectedFields } = handleSelecting2(models, model, statementParams, queryType, single, {
    selecting: instructions?.selecting,
    including: instructions?.including,
    orderedBy: instructions?.orderedBy,
    limitedTo: instructions?.limitedTo
  }, { inlineDefaults: options?.inlineDefaults || false });
  let statement = "";
  switch (queryType) {
    case "get":
    case "count":
      statement += `SELECT ${columns} FROM `;
      break;
    case "set":
      statement += "UPDATE ";
      break;
    case "add":
      statement += "INSERT INTO ";
      break;
    case "remove":
      statement += "DELETE FROM ";
      break;
  }
  let isJoiningMultipleRows = false;
  if (isJoining) {
    const { statement: including, tableSubQuery } = handleIncluding2(models, model, statementParams, single, instructions?.including);
    if (tableSubQuery) {
      statement += `(${tableSubQuery}) as ${model.tableAlias} `;
      isJoiningMultipleRows = true;
    } else {
      statement += `"${model.table}" `;
    }
    statement += `${including} `;
  } else {
    statement += `"${model.table}" `;
  }
  if (queryType === "add" || queryType === "set") {
    const instructionName = queryType === "add" ? "with" : "to";
    const instructionValue = instructions[instructionName];
    if (!(instructionValue && isObject2(instructionValue)) || Object.keys(instructionValue).length === 0) {
      throw new CompilerError({
        message: `When using a \`${queryType}\` query, the \`${instructionName}\` instruction must be a non-empty object.`,
        code: instructionName === "to" ? "INVALID_TO_VALUE" : "INVALID_WITH_VALUE",
        queries: [query]
      });
    }
    const toStatement = handleTo2(models, model, statementParams, queryType, dependencyStatements, { with: instructions.with, to: instructionValue }, options);
    statement += `${toStatement} `;
  }
  const conditions = [];
  if (queryType !== "add" && instructions && Object.hasOwn(instructions, "with")) {
    const withStatement = handleWith2(models, model, statementParams, instructions.with, options?.parentModel);
    if (withStatement.length > 0)
      conditions.push(withStatement);
  }
  if (instructions && (typeof instructions.before !== "undefined" || typeof instructions.after !== "undefined")) {
    if (single) {
      throw new CompilerError({
        message: "The `before` and `after` instructions are not supported when querying for a single record.",
        code: "INVALID_BEFORE_OR_AFTER_INSTRUCTION",
        queries: [query]
      });
    }
    const beforeAndAfterStatement = handleBeforeOrAfter2(model, statementParams, queryType, {
      before: instructions.before,
      after: instructions.after,
      with: instructions.with,
      orderedBy: instructions.orderedBy,
      limitedTo: instructions.limitedTo
    });
    conditions.push(beforeAndAfterStatement);
  }
  if (conditions.length > 0) {
    if (conditions.length === 1) {
      statement += `WHERE ${conditions[0]} `;
    } else {
      statement += `WHERE (${conditions.join(" ")}) `;
    }
  }
  if (instructions?.orderedBy) {
    const orderedByStatement = handleOrderedBy2(model, instructions.orderedBy);
    statement += `${orderedByStatement} `;
  }
  if (queryType === "get" && !isJoiningMultipleRows && (single || instructions?.limitedTo)) {
    statement += handleLimitedTo2(single, instructions?.limitedTo);
  }
  if (DML_QUERY_TYPES_WRITE2.includes(queryType) && returning) {
    statement += `RETURNING ${columns}`;
  }
  const mainStatement = {
    statement: statement.trimEnd(),
    params: statementParams || []
  };
  if (returning)
    mainStatement.returning = true;
  return {
    dependencies: dependencyStatements,
    main: mainStatement,
    selectedFields,
    model,
    updatedQuery: query
  };
};
var replaceJSON2 = (key, value) => {
  if (key === QUERY_SYMBOLS2.EXPRESSION)
    return value.replaceAll(`'`, `''`);
  return value;
};
var matchSelectedFields2 = (fields, pattern) => {
  let regexStr = pattern.replace(/\./g, "\\.");
  regexStr = regexStr.replace(/\*\*/g, "<<DOUBLESTAR>>");
  regexStr = regexStr.replace(/\*/g, "[^.]*");
  regexStr = regexStr.replace(/<<DOUBLESTAR>>/g, ".*");
  const regex22 = new RegExp(`^${regexStr}$`);
  return fields.filter((field) => regex22.test(field.slug));
};
var filterSelectedFields2 = (model, instruction) => {
  const mappedFields = Object.entries(model.fields).map(([fieldSlug, field]) => ({ slug: fieldSlug, ...field }));
  if (!instruction)
    return mappedFields;
  let selectedFields = [];
  for (const pattern of instruction) {
    const isNegative = pattern.startsWith("!");
    const cleanPattern = isNegative ? pattern.slice(1) : pattern;
    const matchedFields = matchSelectedFields2(isNegative ? selectedFields : mappedFields, cleanPattern);
    if (isNegative) {
      selectedFields = selectedFields.filter((field) => !matchedFields.includes(field));
    } else {
      selectedFields.push(...matchedFields);
    }
  }
  return selectedFields;
};
var prepareStatementValue2 = (statementParams, value) => {
  const inlineParams = !statementParams;
  if (value === null)
    return "NULL";
  let formattedValue = value;
  if (Array.isArray(value) || isObject2(value)) {
    formattedValue = JSON.stringify(value, inlineParams ? replaceJSON2 : undefined);
  } else if (typeof value === "boolean") {
    formattedValue = value ? 1 : 0;
  }
  if (!statementParams) {
    if (typeof formattedValue === "string")
      return `'${formattedValue}'`;
    return formattedValue.toString();
  }
  const index = statementParams.push(formattedValue);
  return `?${index}`;
};
var parseFieldExpression2 = (model, instructionName, expression, parentModel) => {
  return expression.replace(RONIN_MODEL_FIELD_REGEX2, (match) => {
    let toReplace = QUERY_SYMBOLS2.FIELD;
    let rootModel = model;
    if (match.startsWith(QUERY_SYMBOLS2.FIELD_PARENT)) {
      rootModel = parentModel;
      toReplace = QUERY_SYMBOLS2.FIELD_PARENT;
    }
    const fieldSlug = match.replace(toReplace, "");
    const field = getFieldFromModel2(rootModel, fieldSlug, { instructionName });
    return field.fieldSelector;
  });
};
var composeFieldValues2 = (models, model, statementParams, instructionName, value, options) => {
  const { fieldSelector: conditionSelector } = getFieldFromModel2(model, options.fieldSlug, { instructionName });
  const collectStatementValue = options.type !== "fields";
  const symbol = getQuerySymbol2(value);
  let conditionMatcher = instructionName === "to" ? "=" : getMatcher2(value, false);
  let conditionValue = value;
  if (options.condition) {
    [conditionMatcher, conditionValue] = WITH_CONDITIONS2[options.condition](value);
  }
  if (symbol) {
    if (symbol?.type === "expression") {
      conditionValue = parseFieldExpression2(model, instructionName, symbol.value, options.parentModel);
    }
    if (symbol.type === "query" && collectStatementValue) {
      conditionValue = `(${compileQueryInput2(symbol.value, models, statementParams).main.statement})`;
    }
  } else if (collectStatementValue) {
    conditionValue = prepareStatementValue2(statementParams, conditionValue);
  }
  if (options.type === "fields")
    return conditionSelector;
  if (options.type === "values")
    return conditionValue;
  return `${conditionSelector} ${conditionMatcher} ${conditionValue}`;
};
var composeConditions2 = (models, model, statementParams, instructionName, value, options) => {
  const isNested = isObject2(value) && Object.keys(value).length > 0;
  if (isNested && Object.keys(value).every((key) => (key in WITH_CONDITIONS2))) {
    const conditions = Object.entries(value).map(([conditionType, checkValue]) => composeConditions2(models, model, statementParams, instructionName, checkValue, {
      ...options,
      condition: conditionType
    }));
    return conditions.join(" AND ");
  }
  if (options.fieldSlug) {
    const childField = Object.keys(model.fields).some((slug) => {
      return slug.includes(".") && slug.split(".")[0] === options.fieldSlug;
    });
    if (!childField) {
      const fieldDetails = getFieldFromModel2(model, options.fieldSlug, {
        instructionName
      });
      const { field: modelField } = fieldDetails || {};
      const fieldIsJSON = (modelField?.type === "json" || modelField?.type === "blob") && instructionName === "to";
      const valueIsJSON = isObject2(value) || (modelField?.type === "blob" ? null : Array.isArray(value));
      if (!valueIsJSON || getQuerySymbol2(value) || fieldIsJSON) {
        if (modelField && fieldIsJSON && !valueIsJSON && value !== null) {
          const messagePrefix = "The provided field value is not";
          const message = modelField.type === "json" ? `${messagePrefix} valid JSON. Only objects and arrays should be provided. Other types of values should be stored in their respective primitive field types.` : `${messagePrefix} a valid Blob reference.`;
          throw new CompilerError({
            message,
            field: modelField?.slug,
            code: "INVALID_FIELD_VALUE"
          });
        }
        return composeFieldValues2(models, model, statementParams, instructionName, value, { ...options, fieldSlug: options.fieldSlug });
      }
      if (modelField?.type === "link" && isNested) {
        const keys = Object.keys(value);
        const values = Object.values(value);
        let recordTarget;
        if (keys.length === 1 && keys[0] === "id") {
          recordTarget = values[0];
        } else {
          const relatedModel = getModelBySlug2(models, modelField.target);
          const subQuery = {
            get: {
              [relatedModel.slug]: {
                with: value,
                selecting: ["id"]
              }
            }
          };
          recordTarget = {
            [QUERY_SYMBOLS2.QUERY]: subQuery
          };
        }
        return composeConditions2(models, model, statementParams, instructionName, recordTarget, options);
      }
    }
  }
  if (isNested) {
    const conditions = Object.entries(value).map(([field, value2]) => {
      const nestedFieldSlug = options.fieldSlug ? `${options.fieldSlug}.${field}` : field;
      return composeConditions2(models, model, statementParams, instructionName, value2, {
        ...options,
        fieldSlug: nestedFieldSlug
      });
    });
    const joiner = instructionName === "to" ? ", " : " AND ";
    if (instructionName === "to")
      return `${conditions.join(joiner)}`;
    return conditions.length === 1 ? conditions[0] : options.fieldSlug ? `(${conditions.join(joiner)})` : conditions.join(joiner);
  }
  if (Array.isArray(value)) {
    const conditions = value.map((filter) => composeConditions2(models, model, statementParams, instructionName, filter, options));
    return conditions.join(" OR ");
  }
  throw new CompilerError({
    message: `The \`with\` instruction must not contain an empty field. The following fields are empty: \`${options.fieldSlug}\`. If you meant to query by an empty field, try using \`null\` instead.`,
    code: "INVALID_WITH_VALUE",
    queries: null
  });
};
var formatIdentifiers2 = ({ identifiers }, queryInstructions) => {
  if (!queryInstructions)
    return queryInstructions;
  const type = "with" in queryInstructions ? "with" : null;
  if (!type)
    return queryInstructions;
  const nestedInstructions = queryInstructions[type];
  if (!nestedInstructions || Array.isArray(nestedInstructions))
    return queryInstructions;
  const newNestedInstructions = { ...nestedInstructions };
  for (const oldKey of Object.keys(newNestedInstructions)) {
    if (oldKey !== "nameIdentifier" && oldKey !== "slugIdentifier")
      continue;
    const identifierName = oldKey === "nameIdentifier" ? "name" : "slug";
    const value = newNestedInstructions[oldKey];
    const newKey = identifiers[identifierName];
    newNestedInstructions[newKey] = value;
    delete newNestedInstructions[oldKey];
  }
  return {
    ...queryInstructions,
    [type]: newNestedInstructions
  };
};
var getMatcher2 = (value, negative) => {
  if (negative) {
    if (value === null)
      return "IS NOT";
    return "!=";
  }
  if (value === null)
    return "IS";
  return "=";
};
var WITH_CONDITIONS2 = {
  being: (value) => [getMatcher2(value, false), value],
  notBeing: (value) => [getMatcher2(value, true), value],
  startingWith: (value) => ["LIKE", `${value}%`],
  notStartingWith: (value) => ["NOT LIKE", `${value}%`],
  endingWith: (value) => ["LIKE", `%${value}`],
  notEndingWith: (value) => ["NOT LIKE", `%${value}`],
  containing: (value) => ["LIKE", `%${value}%`],
  notContaining: (value) => ["NOT LIKE", `%${value}%`],
  greaterThan: (value) => [">", value],
  greaterOrEqual: (value) => [">=", value],
  lessThan: (value) => ["<", value],
  lessOrEqual: (value) => ["<=", value]
};
var handleWith2 = (models, model, statementParams, instruction, parentModel) => {
  return composeConditions2(models, model, statementParams, "with", instruction, {
    parentModel
  });
};
var getModelBySlug2 = (models, slug) => {
  const model = models.find((model2) => {
    return model2.slug === slug || model2.pluralSlug === slug;
  });
  if (!model) {
    throw new CompilerError({
      message: `No matching model with either Slug or Plural Slug of "${slug}" could be found.`,
      code: "MODEL_NOT_FOUND"
    });
  }
  return model;
};
var composeAssociationModelSlug2 = (model, field) => convertToCamelCase2(`ronin_link_${model.slug}_${field.slug}`);
var getFieldSelector2 = (model, field, fieldPath, writing) => {
  const symbol = model.tableAlias?.startsWith(QUERY_SYMBOLS2.FIELD_PARENT) ? `${model.tableAlias.replace(QUERY_SYMBOLS2.FIELD_PARENT, "").slice(0, -1)}.` : "";
  const tablePrefix = symbol || (model.tableAlias ? `"${model.tableAlias}".` : "");
  if ((field.type === "json" || field.type === "blob") && !writing && fieldPath.length > field.slug.length) {
    const jsonField = fieldPath.replace(`${field.slug}.`, "");
    return `json_extract(${tablePrefix + field.slug}, '$.${jsonField}')`;
  }
  return `${tablePrefix}"${fieldPath}"`;
};
function getFieldFromModel2(model, fieldPath, source, shouldThrow = true) {
  const writingField = "instructionName" in source ? source.instructionName === "to" : true;
  const errorTarget = "instructionName" in source ? `\`${source.instructionName}\`` : `${source.modelEntityType} "${source.modelEntityName}"`;
  const errorPrefix = `Field "${fieldPath}" defined for ${errorTarget}`;
  const modelFields = Object.entries(model.fields).map(([fieldSlug, field]) => ({
    slug: fieldSlug,
    ...field
  }));
  let modelField;
  if (fieldPath.includes(".")) {
    modelField = modelFields.find((field) => field.slug === fieldPath.split(".")[0]);
    if (modelField?.type === "json" || modelField?.type === "blob") {
      const fieldSelector2 = getFieldSelector2(model, modelField, fieldPath, writingField);
      return { field: modelField, fieldSelector: fieldSelector2 };
    }
  }
  modelField = modelFields.find((field) => field.slug === fieldPath);
  if (!modelField) {
    if (shouldThrow) {
      throw new CompilerError({
        message: `${errorPrefix} does not exist in model "${model.name}".`,
        code: "FIELD_NOT_FOUND",
        field: fieldPath,
        queries: null
      });
    }
    return null;
  }
  const fieldSelector = getFieldSelector2(model, modelField, fieldPath, writingField);
  return { field: modelField, fieldSelector };
}
var getSystemFields2 = (idPrefix) => ({
  id: {
    name: "ID",
    type: "string",
    defaultValue: {
      [QUERY_SYMBOLS2.EXPRESSION]: `'${idPrefix}_' || lower(substr(hex(randomblob(12)), 1, 16))`
    },
    system: true
  },
  "ronin.createdAt": {
    name: "RONIN - Created At",
    type: "date",
    defaultValue: CURRENT_TIME_EXPRESSION2,
    system: true
  },
  "ronin.createdBy": {
    name: "RONIN - Created By",
    type: "string",
    system: true
  },
  "ronin.updatedAt": {
    name: "RONIN - Updated At",
    type: "date",
    defaultValue: CURRENT_TIME_EXPRESSION2,
    system: true
  },
  "ronin.updatedBy": {
    name: "RONIN - Updated By",
    type: "string",
    system: true
  }
});
var ROOT_MODEL2 = {
  id: "mod_26cedf5fc602c3ba",
  slug: "roninModel",
  pluralSlug: "roninModels",
  name: "Ronin Model",
  pluralName: "Ronin Models",
  identifiers: {
    name: "name",
    slug: "slug"
  },
  idPrefix: "mod",
  table: "ronin_schema",
  system: { model: "root" },
  fields: {
    name: { type: "string" },
    pluralName: { type: "string" },
    slug: { type: "string" },
    pluralSlug: { type: "string" },
    idPrefix: { type: "string" },
    table: { type: "string" },
    "identifiers.name": { type: "string" },
    "identifiers.slug": { type: "string" },
    fields: { type: "json", defaultValue: {} },
    indexes: { type: "json", defaultValue: {} },
    presets: { type: "json", defaultValue: {} }
  }
};
var ROOT_MODEL_WITH_ATTRIBUTES2 = addDefaultModelAttributes2(ROOT_MODEL2, true);
var getSystemModels2 = (models, model) => {
  const addedModels = [];
  for (const [fieldSlug, rest] of Object.entries(model.fields || {})) {
    const field = { slug: fieldSlug, ...rest };
    if (field.type === "link" && !fieldSlug.startsWith("ronin.")) {
      const relatedModel = getModelBySlug2(models, field.target);
      let fieldSlug2 = relatedModel.slug;
      if (field.kind === "many") {
        fieldSlug2 = composeAssociationModelSlug2(model, field);
        addedModels.push({
          pluralSlug: fieldSlug2,
          slug: fieldSlug2,
          system: {
            model: model.id,
            associationSlug: field.slug
          },
          fields: {
            source: {
              type: "link",
              target: model.slug,
              actions: {
                onDelete: "CASCADE",
                onUpdate: "CASCADE"
              }
            },
            target: {
              type: "link",
              target: relatedModel.slug,
              actions: {
                onDelete: "CASCADE",
                onUpdate: "CASCADE"
              }
            }
          }
        });
      }
    }
  }
  return addedModels.map((model2) => addDefaultModelAttributes2(model2, true));
};
var typesInSQLite2 = {
  link: "TEXT",
  string: "TEXT",
  date: "DATETIME",
  blob: "TEXT",
  boolean: "BOOLEAN",
  number: "INTEGER",
  json: "TEXT"
};
var getFieldStatement2 = (models, model, field) => {
  let statement = `"${field.slug}" ${typesInSQLite2[field.type || "string"]}`;
  if (field.slug === "id")
    statement += " PRIMARY KEY";
  if (field.unique === true)
    statement += " UNIQUE";
  if (field.required === true)
    statement += " NOT NULL";
  if (typeof field.defaultValue !== "undefined") {
    const symbol = getQuerySymbol2(field.defaultValue);
    let value = typeof field.defaultValue === "string" ? `'${field.defaultValue}'` : field.defaultValue;
    if (symbol)
      value = `(${parseFieldExpression2(model, "to", symbol.value)})`;
    if (field.type === "json") {
      if (!isObject2(field.defaultValue)) {
        throw new CompilerError({
          message: `The default value of JSON field "${field.slug}" must be an object.`,
          code: "INVALID_MODEL_VALUE",
          field: "fields"
        });
      }
      value = `'${JSON.stringify(field.defaultValue)}'`;
    }
    statement += ` DEFAULT ${value}`;
  }
  if (field.type === "string" && field.collation) {
    statement += ` COLLATE ${field.collation}`;
  }
  if (field.type === "number" && field.increment === true) {
    statement += " AUTOINCREMENT";
  }
  if (typeof field.check !== "undefined") {
    const symbol = getQuerySymbol2(field.check);
    statement += ` CHECK (${parseFieldExpression2(model, "to", symbol?.value)})`;
  }
  if (typeof field.computedAs !== "undefined") {
    const { kind, value } = field.computedAs;
    const symbol = getQuerySymbol2(value);
    statement += ` GENERATED ALWAYS AS (${parseFieldExpression2(model, "to", symbol?.value)}) ${kind}`;
  }
  if (field.type === "link") {
    if (field.kind === "many")
      return null;
    const actions = field.actions || {};
    const modelList = models.some((item) => item.slug === model.slug) ? models : [...models, model];
    const targetTable = getModelBySlug2(modelList, field.target).table;
    statement += ` REFERENCES ${targetTable}("id")`;
    for (const cause in actions) {
      if (!Object.hasOwn(actions, cause))
        continue;
      const causeName = cause.toUpperCase().slice(2);
      const action = actions[cause];
      statement += ` ON ${causeName} ${action}`;
    }
  }
  return statement;
};
var PLURAL_MODEL_ENTITIES2 = {
  field: "fields",
  index: "indexes",
  preset: "presets"
};
var PLURAL_MODEL_ENTITIES_VALUES2 = Object.values(PLURAL_MODEL_ENTITIES2);
var handleSystemModel2 = (models, dependencyStatements, action, inlineDefaults, systemModel, newModel) => {
  const { system: _, ...systemModelClean } = systemModel;
  const query = {
    [action]: { model: action === "create" ? systemModelClean : systemModelClean.slug }
  };
  if (action === "alter" && newModel && "alter" in query && query.alter) {
    const { system: _2, ...newModelClean } = newModel;
    query.alter.to = newModelClean;
  }
  const statement = compileQueryInput2(query, models, [], { inlineDefaults });
  dependencyStatements.push(...statement.dependencies);
};
var handleSystemModels2 = (models, dependencyStatements, previousModel, newModel, inlineDefaults) => {
  const currentSystemModels = models.filter(({ system }) => {
    return system?.model === newModel.id;
  });
  const newSystemModels = getSystemModels2(models, newModel);
  const matchSystemModels = (oldSystemModel, newSystemModel) => {
    const conditions = [
      oldSystemModel.system?.model === newSystemModel.system?.model
    ];
    if (oldSystemModel.system?.associationSlug) {
      const oldFieldIndex = Object.keys(previousModel.fields).findIndex((slug) => {
        return slug === newSystemModel.system?.associationSlug;
      });
      const newFieldIndex = Object.keys(newModel.fields).findIndex((slug) => {
        return slug === oldSystemModel.system?.associationSlug;
      });
      conditions.push(oldFieldIndex === newFieldIndex);
    }
    return conditions.every((condition) => condition === true);
  };
  for (const systemModel of currentSystemModels) {
    const exists = newSystemModels.find(matchSystemModels.bind(null, systemModel));
    if (exists) {
      if (exists.slug !== systemModel.slug) {
        handleSystemModel2(models, dependencyStatements, "alter", inlineDefaults, systemModel, exists);
      }
      continue;
    }
    handleSystemModel2(models, dependencyStatements, "drop", inlineDefaults, systemModel);
  }
  for (const systemModel of newSystemModels) {
    const exists = currentSystemModels.find(matchSystemModels.bind(null, systemModel));
    if (exists)
      continue;
    handleSystemModel2(models, dependencyStatements, "create", inlineDefaults, systemModel);
  }
};
var transformMetaQuery2 = (models, dependencyStatements, statementParams, query, options) => {
  const { queryType } = splitQuery2(query);
  const subAltering = "alter" in query && query.alter && !("to" in query.alter);
  const action = subAltering && query.alter ? Object.keys(query.alter).filter((key) => key !== "model")[0] : queryType;
  const actionReadable = action === "create" ? "creating" : action === "alter" ? "altering" : "dropping";
  const entity = subAltering && query.alter ? Object.keys(query.alter[action])[0] : "model";
  let slug = entity === "model" && action === "create" ? null : query[queryType] && ("model" in query[queryType]) ? query[queryType].model : null;
  let modelSlug = slug;
  let jsonValue;
  if ("list" in query && query.list) {
    if (slug) {
      return { get: { roninModel: { with: { slug } } } };
    }
    return { get: { roninModels: {} } };
  }
  if ("create" in query && query.create) {
    const init = query.create.model;
    jsonValue = "to" in query.create ? { slug: init, ...query.create.to } : init;
    slug = modelSlug = jsonValue.slug;
  }
  if ("alter" in query && query.alter) {
    if ("to" in query.alter) {
      jsonValue = query.alter.to;
    } else {
      slug = query.alter[action][entity];
      if ("create" in query.alter) {
        const item = query.alter.create[entity];
        slug = item.slug;
        jsonValue = { slug, ...item };
      }
      if ("alter" in query.alter && query.alter.alter)
        jsonValue = query.alter.alter.to;
    }
  }
  if (!(modelSlug && slug))
    return query;
  const model = action === "create" && entity === "model" ? null : getModelBySlug2(models, modelSlug);
  if (entity === "model") {
    let queryTypeDetails = {};
    if (action === "create") {
      const newModel = jsonValue;
      const modelWithAttributes = addDefaultModelAttributes2(newModel, true);
      const modelWithFields = addDefaultModelFields2(modelWithAttributes, true);
      const modelWithPresets = addDefaultModelPresets2([...models, modelWithFields], modelWithFields);
      modelWithPresets.fields = Object.fromEntries(Object.entries(modelWithPresets.fields).map(([fieldSlug, rest]) => [
        fieldSlug,
        {
          ...rest,
          type: rest.type || "string",
          name: rest.name || slugToName2(fieldSlug)
        }
      ]));
      const columns = Object.entries(modelWithPresets.fields).map(([fieldSlug, rest]) => getFieldStatement2(models, modelWithPresets, {
        slug: fieldSlug,
        ...rest
      })).filter(Boolean);
      models.push(modelWithPresets);
      dependencyStatements.push({
        statement: `CREATE TABLE "${modelWithPresets.table}" (${columns.join(", ")})`,
        params: []
      });
      const entityList = modelWithPresets.indexes;
      for (const [itemSlug, item] of Object.entries(entityList || {})) {
        const query2 = {
          alter: {
            model: modelWithPresets.slug,
            create: {
              index: { slug: itemSlug, ...item }
            }
          }
        };
        const tempModels = [
          ...models.filter((model2) => model2.slug !== modelWithPresets.slug),
          { ...modelWithPresets, indexes: {} }
        ];
        transformMetaQuery2(tempModels, dependencyStatements, null, query2, {
          inlineDefaults: options.inlineDefaults
        });
      }
      queryTypeDetails = { with: modelWithPresets };
      getSystemModels2(models, modelWithPresets).map((systemModel) => {
        return handleSystemModel2(models, dependencyStatements, "create", options.inlineDefaults, systemModel);
      });
    }
    if (action === "alter" && model) {
      const modelBeforeUpdate2 = structuredClone(model);
      const newModel = jsonValue;
      const modelWithAttributes = addDefaultModelAttributes2(newModel, false);
      const modelWithFields = addDefaultModelFields2(modelWithAttributes, false);
      const modelWithPresets = addDefaultModelPresets2(models, modelWithFields);
      const newTableName = modelWithPresets.table;
      if (newTableName) {
        dependencyStatements.push({
          statement: `ALTER TABLE "${model.table}" RENAME TO "${newTableName}"`,
          params: []
        });
      }
      Object.assign(model, modelWithPresets);
      queryTypeDetails = {
        with: {
          slug
        },
        to: modelWithPresets
      };
      handleSystemModels2(models, dependencyStatements, modelBeforeUpdate2, model, options.inlineDefaults);
    }
    if (action === "drop" && model) {
      models.splice(models.indexOf(model), 1);
      dependencyStatements.push({ statement: `DROP TABLE "${model.table}"`, params: [] });
      queryTypeDetails = { with: { slug } };
      models.filter(({ system }) => system?.model === model.id).map((systemModel) => {
        return handleSystemModel2(models, dependencyStatements, "drop", options.inlineDefaults, systemModel);
      });
    }
    const modelSlug2 = "to" in queryTypeDetails ? queryTypeDetails?.to?.slug : ("with" in queryTypeDetails) ? queryTypeDetails?.with?.slug : undefined;
    if (modelSlug2 === "roninModel")
      return null;
    const queryTypeAction = action === "create" ? "add" : action === "alter" ? "set" : "remove";
    return {
      [queryTypeAction]: {
        roninModel: queryTypeDetails
      }
    };
  }
  const modelBeforeUpdate = structuredClone(model);
  const existingModel = model;
  const pluralType = PLURAL_MODEL_ENTITIES2[entity];
  const existingEntity = existingModel[pluralType]?.[slug];
  if ((action === "alter" || action === "drop") && !existingEntity) {
    throw new CompilerError({
      message: `No ${entity} with slug "${slug}" defined in model "${existingModel.name}".`,
      code: MODEL_ENTITY_ERROR_CODES2[entity]
    });
  }
  if (action === "create" && existingEntity) {
    throw new CompilerError({
      message: `A ${entity} with the slug "${slug}" already exists.`,
      code: "EXISTING_MODEL_ENTITY",
      fields: ["slug"]
    });
  }
  if (entity === "field") {
    const statement = `ALTER TABLE "${existingModel.table}"`;
    const existingField = existingEntity;
    const existingLinkField = existingField?.type === "link" && existingField.kind === "many";
    if (action === "create") {
      const field2 = jsonValue;
      field2.type = field2.type || "string";
      field2.name = field2.name || slugToName2(field2.slug);
      const fieldStatement = getFieldStatement2(models, existingModel, field2);
      if (fieldStatement) {
        dependencyStatements.push({
          statement: `${statement} ADD COLUMN ${fieldStatement}`,
          params: []
        });
      }
    } else if (action === "alter") {
      const field2 = jsonValue;
      const newSlug = field2.slug;
      if (newSlug) {
        field2.name = field2.name || slugToName2(field2.slug);
        if (!existingLinkField) {
          dependencyStatements.push({
            statement: `${statement} RENAME COLUMN "${slug}" TO "${newSlug}"`,
            params: []
          });
        }
      }
    } else if (action === "drop" && !existingLinkField) {
      const systemFields = getSystemFields2(existingModel.idPrefix);
      const isSystemField = slug in systemFields;
      if (isSystemField) {
        throw new CompilerError({
          message: `The ${entity} "${slug}" is a system ${entity} and cannot be removed.`,
          code: "REQUIRED_MODEL_ENTITY"
        });
      }
      dependencyStatements.push({
        statement: `${statement} DROP COLUMN "${slug}"`,
        params: []
      });
    }
  }
  const statementAction = action.toUpperCase();
  if (entity === "index") {
    const index = jsonValue;
    const indexName = convertToSnakeCase2(slug);
    let statement = `${statementAction}${index?.unique ? " UNIQUE" : ""} INDEX "${indexName}"`;
    if (action === "create") {
      if (!Array.isArray(index.fields) || index.fields.length === 0) {
        throw new CompilerError({
          message: `When ${actionReadable} ${PLURAL_MODEL_ENTITIES2[entity]}, at least one field must be provided.`,
          code: "INVALID_MODEL_VALUE",
          field: PLURAL_MODEL_ENTITIES2[entity]
        });
      }
      const columns = index.fields.map((field2) => {
        let fieldSelector = "";
        if ("slug" in field2) {
          ({ fieldSelector } = getFieldFromModel2(existingModel, field2.slug, {
            modelEntityType: "index",
            modelEntityName: indexName
          }));
        } else if ("expression" in field2) {
          fieldSelector = parseFieldExpression2(existingModel, "to", field2.expression);
        }
        if (field2.collation)
          fieldSelector += ` COLLATE ${field2.collation}`;
        if (field2.order)
          fieldSelector += ` ${field2.order}`;
        return fieldSelector;
      });
      statement += ` ON "${existingModel.table}" (${columns.join(", ")})`;
      if (index.filter) {
        const withStatement = handleWith2(models, existingModel, null, index.filter);
        statement += ` WHERE (${withStatement})`;
      }
    }
    dependencyStatements.push({ statement, params: [] });
  }
  const field = `${QUERY_SYMBOLS2.FIELD}${pluralType}`;
  let json;
  switch (action) {
    case "create": {
      const { slug: slug2, ...entityValue } = jsonValue;
      const value = prepareStatementValue2(statementParams, entityValue);
      json = `json_insert(${field}, '$.${slug2}', json(${value}))`;
      if (!existingModel[pluralType])
        existingModel[pluralType] = {};
      existingModel[pluralType][slug2] = entityValue;
      break;
    }
    case "alter": {
      const targetEntities = existingModel[pluralType];
      if (jsonValue?.slug && jsonValue.slug !== slug) {
        const { slug: newSlug, ...entityValue } = jsonValue;
        Object.defineProperty(targetEntities, newSlug, Object.getOwnPropertyDescriptor(targetEntities, slug));
        Object.assign(targetEntities[newSlug], entityValue);
        delete targetEntities[slug];
        const value = prepareStatementValue2(statementParams, targetEntities[newSlug]);
        json = `json_insert(json_remove(${field}, '$.${slug}'), '$.${newSlug}', json(${value}))`;
      } else {
        Object.assign(targetEntities[slug], jsonValue);
        const value = prepareStatementValue2(statementParams, jsonValue);
        json = `json_set(${field}, '$.${slug}', json_patch(json_extract(${field}, '$.${slug}'), ${value}))`;
      }
      break;
    }
    case "drop": {
      json = `json_remove(${field}, '$.${slug}')`;
      const targetEntities = existingModel[pluralType];
      delete targetEntities[slug];
    }
  }
  handleSystemModels2(models, dependencyStatements, modelBeforeUpdate, existingModel, options.inlineDefaults);
  return {
    set: {
      roninModel: {
        with: { slug: modelSlug },
        to: {
          [pluralType]: { [QUERY_SYMBOLS2.EXPRESSION]: json }
        }
      }
    }
  };
};
var Transaction2 = class {
  statements = [];
  models = [];
  #internalQueries = [];
  constructor(queries, options) {
    const models = options?.models || [];
    this.#internalQueries = queries.map((query) => ({
      query,
      selectedFields: [],
      models: []
    }));
    this.#compileQueries(models, options);
  }
  #compileQueries = (models, options) => {
    const modelsWithAttributes = models.map((model) => {
      return addDefaultModelAttributes2(model, true);
    });
    const modelsWithFields = [
      ...modelsWithAttributes.flatMap((model) => {
        return getSystemModels2(modelsWithAttributes, model);
      }),
      ...[ROOT_MODEL_WITH_ATTRIBUTES2, ...modelsWithAttributes]
    ].map((model) => {
      return addDefaultModelFields2(model, true);
    });
    const modelsWithPresets = modelsWithFields.map((model) => {
      return addDefaultModelPresets2(modelsWithFields, model);
    });
    const statements = [];
    const expandedQueries = this.#internalQueries.flatMap(({ query }, index) => {
      const { queryType, queryModel, queryInstructions } = splitQuery2(query);
      if (queryModel === "all") {
        const {
          for: forInstruction,
          on: onInstruction,
          ...restInstructions
        } = queryInstructions || {};
        let modelList = modelsWithPresets.filter((model) => {
          return model.slug !== ROOT_MODEL2.slug;
        });
        if (forInstruction) {
          const mainModel = getModelBySlug2(modelList, forInstruction);
          modelList = Object.values(mainModel.fields || {}).filter((field) => field.type === "link").map((field) => {
            return modelList.find((model) => model.slug === field.target);
          });
        }
        return modelList.map((model) => {
          const instructions = Object.assign({}, restInstructions, onInstruction?.[model.pluralSlug]);
          const query2 = {
            [queryType]: { [model.pluralSlug]: instructions }
          };
          return { query: query2, index, expansion: true };
        });
      }
      return { query, index };
    });
    for (const { query, index, expansion } of expandedQueries) {
      const { dependencies, main, selectedFields, model, updatedQuery } = compileQueryInput2(query, modelsWithPresets, options?.inlineParams ? null : [], { inlineDefaults: options?.inlineDefaults || false });
      const preDependencies = dependencies.filter(({ after }) => !after);
      const postDependencies = dependencies.map(({ after, ...rest }) => after ? rest : null).filter((item) => item != null);
      const subStatements = [...preDependencies, main, ...postDependencies];
      this.statements.push(...subStatements);
      this.#internalQueries[index].selectedFields.push(selectedFields);
      this.#internalQueries[index].models.push(model);
      if (!expansion)
        this.#internalQueries[index].query = updatedQuery;
    }
    this.models = modelsWithPresets;
    return statements;
  };
  #formatRows(fields, rows, single) {
    const records = [];
    for (const row of rows) {
      const record = fields.reduce((acc, field, fieldIndex) => {
        let newSlug = field.mountingPath;
        let newValue = row[fieldIndex];
        if (newValue !== null) {
          if (field.type === "json" || field.type === "blob") {
            newValue = JSON.parse(newValue);
          } else if (field.type === "boolean") {
            newValue = Boolean(newValue);
          }
        }
        const { parentField, parentIsArray } = (() => {
          const lastDotIndex = newSlug.lastIndexOf(".");
          if (lastDotIndex === -1)
            return { parentField: null };
          const parent = newSlug.slice(0, lastDotIndex);
          if (parent.endsWith("[0]")) {
            return { parentField: parent.slice(0, -3), parentIsArray: true };
          }
          return { parentField: parent };
        })();
        if (parentField) {
          if (field.slug === "id" && newValue === null) {
            newSlug = parentField;
            newValue = parentIsArray ? [] : null;
          }
          const parentFields = newSlug.split(".").map((_, index, array) => array.slice(0, index + 1).join(".")).reverse();
          if (parentFields.some((item) => {
            const isArray = item.endsWith("[0]");
            const value = getProperty3(acc, item.replaceAll("[0]", ""));
            return isArray ? Array.isArray(value) && value.length === 0 : value === null;
          })) {
            return acc;
          }
        }
        setProperty3(acc, newSlug, newValue);
        return acc;
      }, {});
      const existingRecord = record.id ? records.find((existingRecord2) => {
        return existingRecord2.id === record.id;
      }) : null;
      if (!existingRecord) {
        records.push(record);
        continue;
      }
      const joinFields = fields.reduce((acc, { mountingPath }) => {
        if (mountingPath.includes("[0]"))
          acc.add(mountingPath.split("[0]")[0]);
        return acc;
      }, /* @__PURE__ */ new Set);
      for (const arrayField of joinFields.values()) {
        const currentValue = existingRecord[arrayField];
        const newValue = record[arrayField];
        for (const newRecord of newValue) {
          if ("id" in newRecord) {
            const existingIndex = currentValue.findIndex((value) => {
              return value.id === newRecord.id;
            });
            if (existingIndex > -1) {
              Object.assign(currentValue[existingIndex], newRecord);
              continue;
            }
          }
          currentValue.push(newRecord);
        }
      }
    }
    return single ? records[0] : records;
  }
  formatIndividualResult(queryType, queryInstructions, model, rows, selectedFields, single) {
    const modelFields = Object.fromEntries(Object.entries(model.fields).map(([slug, rest]) => [slug, rest.type]));
    if (queryType === "count") {
      return { amount: rows[0][0] };
    }
    if (single) {
      return {
        record: rows[0] ? this.#formatRows(selectedFields, rows, true) : null,
        modelFields
      };
    }
    const pageSize = queryInstructions?.limitedTo;
    const result = {
      records: this.#formatRows(selectedFields, rows, false),
      modelFields
    };
    if (pageSize && result.records.length > 0) {
      if (result.records.length > pageSize) {
        if (queryInstructions?.before) {
          result.records.shift();
        } else {
          result.records.pop();
        }
        const direction = queryInstructions?.before ? "moreBefore" : "moreAfter";
        const lastRecord = result.records.at(direction === "moreAfter" ? -1 : 0);
        result[direction] = generatePaginationCursor2(model, queryInstructions.orderedBy, lastRecord);
      }
      if (queryInstructions?.before || queryInstructions?.after) {
        const direction = queryInstructions?.before ? "moreAfter" : "moreBefore";
        const firstRecord = result.records.at(direction === "moreAfter" ? -1 : 0);
        result[direction] = generatePaginationCursor2(model, queryInstructions.orderedBy, firstRecord);
      }
    }
    for (const field of selectedFields) {
      if (!field.excluded)
        continue;
      for (const record of result.records) {
        deleteProperty2(record, field.slug);
      }
    }
    return result;
  }
  formatResults(results, raw = false) {
    const cleanResults = results.filter((_, index) => this.statements[index].returning);
    let resultIndex = 0;
    return this.#internalQueries.reduce((finalResults, internalQuery) => {
      const { query, selectedFields, models: affectedModels } = internalQuery;
      const { queryType, queryModel, queryInstructions } = splitQuery2(query);
      const absoluteResults = raw ? cleanResults : cleanResults.map((rows) => {
        return rows.map((row) => {
          if (Array.isArray(row))
            return row;
          if (queryType === "count")
            return [row.amount];
          return Object.values(row);
        });
      });
      if (queryModel === "all") {
        const models = {};
        const { on: onInstruction, ...restInstructions } = queryInstructions || {};
        for (let index = 0;index < affectedModels.length; index++) {
          const model = affectedModels[index];
          const fields = selectedFields[index];
          const instructions = Object.assign({}, restInstructions, onInstruction?.[model.pluralSlug]);
          const result = this.formatIndividualResult(queryType, instructions, model, absoluteResults[resultIndex++], fields, false);
          models[model.pluralSlug] = result;
        }
        finalResults.push({ models });
      } else {
        const model = affectedModels[0];
        const fields = selectedFields[0];
        const result = this.formatIndividualResult(queryType, queryInstructions, model, absoluteResults[resultIndex++], fields, queryModel !== model.pluralSlug);
        finalResults.push(result);
      }
      return finalResults;
    }, []);
  }
};
var CLEAN_ROOT_MODEL2 = omit3(ROOT_MODEL2, ["system"]);

// node_modules/ronin/dist/chunk-RJ6L3NKJ.js
var ClientError = class extends Error {
  message;
  code;
  constructor(details) {
    super(details.message);
    this.name = "ClientError";
    this.message = details.message;
    this.code = details.code;
  }
};
var getResponseBody = async (response, options) => {
  if (response.ok)
    return response.json();
  const text = await response.text();
  let json;
  try {
    json = JSON.parse(text);
  } catch (_err) {
    throw new ClientError({
      message: `${options?.errorPrefix ? `${options.errorPrefix} ` : ""}${text}`,
      code: "JSON_PARSE_ERROR"
    });
  }
  if (json.error) {
    json.error.message = `${options?.errorPrefix ? `${options.errorPrefix} ` : ""}${json.error.message}`;
    throw new ClientError(json.error);
  }
  return json;
};
var isStorableObject = (value) => typeof File !== "undefined" && value instanceof File || typeof ReadableStream !== "undefined" && value instanceof ReadableStream || typeof Blob !== "undefined" && value instanceof Blob || typeof ArrayBuffer !== "undefined" && value instanceof ArrayBuffer || typeof Buffer !== "undefined" && Buffer.isBuffer(value);
var extractStorableObjects = (queries) => queries.reduce((references, query, queryIndex) => {
  return [
    ...references,
    ...Object.entries(query).reduce((references2, [queryType, query2]) => {
      if (!["set", "add"].includes(queryType))
        return references2;
      return [
        ...references2,
        ...Object.entries(query2).reduce((references3, [schema, instructions]) => {
          const fields = instructions[queryType === "set" ? "to" : "with"];
          return [
            ...references3,
            ...Object.entries(fields || {}).reduce((references4, [name, value]) => {
              if (!isStorableObject(value))
                return references4;
              const blobValue = value;
              const storarableObject = {
                query: {
                  index: queryIndex,
                  type: queryType
                },
                schema,
                field: name,
                value: blobValue
              };
              if ("type" in blobValue) {
                storarableObject.contentType = blobValue.type;
              }
              if ("name" in blobValue) {
                storarableObject.name = blobValue.name;
              }
              return [...references4, storarableObject];
            }, [])
          ];
        }, [])
      ];
    }, [])
  ];
}, []);
var uploadStorableObjects = (storableObjects, options = {}) => {
  const fetcher = typeof options?.fetch === "function" ? options.fetch : fetch;
  const requests = storableObjects.map(async ({ name, value, contentType }) => {
    const headers = new Headers;
    headers.set("Authorization", `Bearer ${options.token}`);
    if (contentType) {
      headers.set("Content-Type", contentType);
    }
    if (name) {
      headers.set("Content-Disposition", `form-data; filename="${encodeURIComponent(name)}"`);
    }
    const request = new Request("https://storage.ronin.co/", {
      method: "PUT",
      body: value,
      headers
    });
    const response = await fetcher(request);
    return getResponseBody(response, {
      errorPrefix: "An error occurred while uploading the binary objects included in the provided queries. Error:"
    });
  });
  return Promise.all(requests);
};
var processStorableObjects = async (queries, upload) => {
  const objects = extractStorableObjects(queries);
  if (objects.length > 0) {
    const storedObjects = await upload(objects);
    for (let index = 0;index < objects.length; index++) {
      const { query, schema, field } = objects[index];
      const reference = storedObjects[index];
      queries[query.index][query.type][schema][query.type === "set" ? "to" : "with"][field] = reference;
    }
  }
  return queries;
};
var WRITE_QUERY_TYPES = [
  ...DML_QUERY_TYPES_WRITE2,
  ...DDL_QUERY_TYPES2.filter((item) => item !== "list")
];
var toDashCase = (string) => {
  const capitalize3 = (str) => {
    const lower = str.toLowerCase();
    return lower.substring(0, 1).toUpperCase() + lower.substring(1, lower.length);
  };
  const parts = string?.replace(/([A-Z])+/g, capitalize3)?.split(/(?=[A-Z])|[.\-\s_]/).map((x) => x.toLowerCase()) ?? [];
  if (parts.length === 0)
    return "";
  if (parts.length === 1)
    return parts[0];
  return parts.reduce((acc, part) => `${acc}-${part.toLowerCase()}`);
};
var formatDateFields = (record, dateFields) => {
  for (const field of dateFields) {
    const value = getProperty2(record, field);
    if (typeof value === "undefined" || value === null)
      continue;
    setProperty2(record, field, new Date(value));
  }
};
var mergeOptions = (...options) => {
  return options.reduce((acc, opt) => {
    const resolvedOpt = typeof opt === "function" ? opt() : opt;
    Object.assign(acc, resolvedOpt);
    return acc;
  }, {});
};
var validateToken = (options = {}) => {
  if (!options.token && typeof process !== "undefined") {
    const token = typeof process?.env !== "undefined" ? process.env.RONIN_TOKEN : typeof import.meta?.env !== "undefined" ? import.meta.env.RONIN_TOKEN : undefined;
    if (!token || token === "undefined") {
      const message = "Please specify the `RONIN_TOKEN` environment variable or set the `token` option when invoking RONIN.";
      throw new Error(message);
    }
    options.token = token;
  }
  if (!options.token) {
    let message = "When invoking RONIN from an edge runtime, the";
    message += " `token` option must be set.";
    throw new Error(message);
  }
};
var omit4 = (obj, keys) => {
  if (!obj)
    return {};
  if (!keys || keys.length === 0)
    return obj;
  return keys.reduce((acc, key) => {
    delete acc[key];
    return acc;
  }, { ...obj });
};
var EMPTY = Symbol("empty");
var getModel = (instruction) => {
  const key = Object.keys(instruction)[0];
  let model = String(key);
  let multipleRecords = false;
  if (model.endsWith("s")) {
    model = model.substring(0, model.length - 1);
    multipleRecords = true;
  }
  return {
    key,
    model: toDashCase(model),
    multipleRecords
  };
};
var getMethodName = (triggerType, queryType) => {
  const capitalizedQueryType = queryType[0].toUpperCase() + queryType.slice(1);
  return triggerType === "during" ? queryType : triggerType + capitalizedQueryType;
};
var normalizeResults = (result) => {
  const value = Array.isArray(result) ? result : result === EMPTY ? [] : [result];
  return structuredClone(value);
};
var invokeTriggers = async (triggerType, definition, options) => {
  const { triggers, database, client } = options;
  const { query } = definition;
  const queryType = Object.keys(query)[0];
  let queryModel;
  let queryModelDashed;
  let multipleRecords;
  let oldInstruction;
  if (DDL_QUERY_TYPES2.includes(queryType)) {
    queryModel = queryModelDashed = "model";
    multipleRecords = false;
    oldInstruction = query[queryType];
  } else {
    const queryInstructions = query[queryType];
    ({
      key: queryModel,
      model: queryModelDashed,
      multipleRecords
    } = getModel(queryInstructions));
    oldInstruction = queryInstructions[queryModel];
  }
  const triggerFile = database ? "sink" : queryModelDashed;
  const triggersForModel = triggers[triggerFile];
  const triggerName = getMethodName(triggerType, queryType);
  const queryInstruction = oldInstruction ? structuredClone(oldInstruction) : {};
  if (triggersForModel && triggerName in triggersForModel) {
    const implicit = definition.implicit ?? false;
    const trigger = triggersForModel[triggerName];
    const triggerOptions = {
      implicit,
      client,
      ...triggerFile === "sink" ? { model: queryModel, database } : {}
    };
    const triggerResult = await (triggerType === "following" ? trigger(queryInstruction, multipleRecords, normalizeResults(definition.resultBefore), normalizeResults(definition.resultAfter), triggerOptions) : trigger(queryInstruction, multipleRecords, triggerOptions));
    if (triggerType === "before") {
      return { queries: triggerResult };
    }
    if (triggerType === "during") {
      const result = triggerResult;
      let newQuery = query;
      if (result && QUERY_TYPES2.some((type) => (type in result))) {
        newQuery = result;
      } else {
        newQuery = {
          [queryType]: {
            [queryModel]: result
          }
        };
      }
      return { queries: [newQuery] };
    }
    if (triggerType === "after") {
      return { queries: triggerResult };
    }
    if (triggerType === "resolving") {
      const result = triggerResult;
      return { queries: [], result };
    }
  }
  return { queries: [], result: EMPTY };
};
var runQueriesWithTriggers = async (queries, options = {}) => {
  const { triggers, waitUntil, requireTriggers } = options;
  const triggerErrorType = requireTriggers !== "all" ? ` ${requireTriggers}` : "";
  const triggerError = new ClientError({
    message: `Please define "during" triggers for the provided${triggerErrorType} queries.`,
    code: "TRIGGER_REQUIRED"
  });
  if (!triggers) {
    if (requireTriggers)
      throw triggerError;
    return runQueries(queries, options);
  }
  const client = createSyntaxFactory(omit4(options, ["requireTriggers"]));
  if (typeof process === "undefined" && !waitUntil) {
    let message = 'In the case that the "ronin" package receives a value for';
    message += " its `triggers` option, it must also receive a value for its";
    message += " `waitUntil` option. This requirement only applies when using";
    message += " an edge runtime and ensures that the edge worker continues to";
    message += ' execute until all "following" triggers have been executed.';
    throw new Error(message);
  }
  let queryList = queries.map(({ query, database }) => ({ query, result: EMPTY, database }));
  await Promise.all(queryList.map(async ({ query, database, implicit }, index) => {
    const triggerResults = await invokeTriggers("before", { query, implicit }, { triggers, database, client });
    const queriesToInsert = triggerResults.queries.map((query2) => ({
      query: query2,
      result: EMPTY,
      database,
      implicit: true
    }));
    queryList.splice(index, 0, ...queriesToInsert);
  }));
  await Promise.all(queryList.map(async ({ query, database, implicit }, index) => {
    const triggerResults = await invokeTriggers("during", { query, implicit }, { triggers, database, client });
    if (triggerResults.queries && triggerResults.queries.length > 0) {
      queryList[index].query = triggerResults.queries[0];
      return;
    }
    if (requireTriggers) {
      const queryType = Object.keys(query)[0];
      const requiredTypes = requireTriggers === "read" ? QUERY_TYPES_READ2 : requireTriggers === "write" ? QUERY_TYPES_WRITE2 : QUERY_TYPES2;
      if (requiredTypes.includes(queryType))
        throw triggerError;
    }
  }));
  await Promise.all(queryList.map(async ({ query, database, implicit }, index) => {
    const triggerResults = await invokeTriggers("after", { query, implicit }, { triggers, database, client });
    const queriesToInsert = triggerResults.queries.map((query2) => ({
      query: query2,
      result: EMPTY,
      database,
      implicit: true
    }));
    queryList.splice(index + 1, 0, ...queriesToInsert);
  }));
  queryList = queryList.flatMap((details, index) => {
    const { query, database } = details;
    if (query.set || query.alter) {
      let newQuery;
      if (query.set) {
        const modelSlug = Object.keys(query.set)[0];
        newQuery = {
          get: {
            [modelSlug]: {
              with: query.set[modelSlug].with
            }
          }
        };
      } else {
        newQuery = {
          list: {
            model: query.alter.model
          }
        };
      }
      const diffQuery = {
        query: newQuery,
        diffForIndex: index + 1,
        result: EMPTY,
        database
      };
      return [diffQuery, details];
    }
    return [details];
  });
  await Promise.all(queryList.map(async ({ query, database, implicit }, index) => {
    const triggerResults = await invokeTriggers("resolving", { query, implicit }, { triggers, database, client });
    queryList[index].result = triggerResults.result;
  }));
  const queriesWithoutResults = queryList.map((query, index) => ({ ...query, index })).filter((query) => query.result === EMPTY);
  if (queriesWithoutResults.length > 0) {
    const resultsFromDatabase = await runQueries(queriesWithoutResults, options);
    for (let index = 0;index < resultsFromDatabase.length; index++) {
      const query = queriesWithoutResults[index];
      const result = resultsFromDatabase[index].result;
      queryList[query.index].result = result;
    }
  }
  for (let index = 0;index < queryList.length; index++) {
    const { query, result, database, implicit } = queryList[index];
    const queryType = Object.keys(query)[0];
    if (!WRITE_QUERY_TYPES.includes(queryType))
      continue;
    const diffMatch = queryList.find((item) => item.diffForIndex === index);
    let resultBefore = diffMatch ? diffMatch.result : EMPTY;
    let resultAfter = result;
    if (queryType === "remove" || queryType === "drop") {
      resultBefore = result;
      resultAfter = EMPTY;
    }
    const promise = invokeTriggers("following", { query, resultBefore, resultAfter, implicit }, { triggers, database, client });
    const clearPromise = promise.then(() => {}, (error) => Promise.reject(error));
    if (waitUntil)
      waitUntil(clearPromise);
  }
  return queryList.filter((query) => typeof query.diffForIndex === "undefined" && typeof query.implicit === "undefined").map(({ result, database }) => ({
    result,
    database
  }));
};
var runQueries = async (queries, options = {}) => {
  validateToken(options);
  let hasWriteQuery = null;
  let hasSingleQuery = true;
  const operations = queries.reduce((acc, details) => {
    const { database = "default" } = details;
    if (!acc[database])
      acc[database] = {};
    if (database !== "default")
      hasSingleQuery = false;
    if ("query" in details) {
      const { query } = details;
      if (!acc[database].queries)
        acc[database].queries = [];
      acc[database].queries.push(query);
      const queryType = Object.keys(query)[0];
      hasWriteQuery = hasWriteQuery || WRITE_QUERY_TYPES.includes(queryType);
      return acc;
    }
    const { statement } = details;
    if (!acc[database].nativeQueries)
      acc[database].nativeQueries = [];
    acc[database].nativeQueries.push({
      query: statement.statement,
      values: statement.params
    });
    return acc;
  }, {});
  const requestBody = hasSingleQuery ? operations.default : operations;
  const hasCachingSupport = "cache" in new Request("https://ronin.co");
  const request = new Request("https://data.ronin.co", {
    method: "POST",
    headers: {
      "Content-Type": "application/json",
      Authorization: `Bearer ${options.token}`
    },
    body: JSON.stringify(requestBody),
    ...hasWriteQuery && hasCachingSupport ? { cache: "no-store" } : {},
    ...typeof options?.fetch === "object" ? options.fetch : {}
  });
  const fetcher = typeof options?.fetch === "function" ? options.fetch : fetch;
  const response = await fetcher(request);
  const responseResults = await getResponseBody(response);
  const startFormatting = performance.now();
  const formattedResults = [];
  if ("results" in responseResults) {
    const usableResults = responseResults.results;
    const finalResults = formatResults(usableResults);
    formattedResults.push(...finalResults.map((result) => ({ result })));
  } else {
    for (const [database, { results }] of Object.entries(responseResults)) {
      const finalResults = formatResults(results);
      formattedResults.push(...finalResults.map((result) => ({ result, database })));
    }
  }
  const endFormatting = performance.now();
  const VERBOSE_LOGGING = typeof process !== "undefined" && process?.env && process.env.__RENDER_DEBUG_LEVEL === "verbose" || typeof import.meta?.env !== "undefined" && import.meta.env.__RENDER_DEBUG_LEVEL === "verbose";
  if (VERBOSE_LOGGING) {
    console.log(`Formatting took ${endFormatting - startFormatting}ms`);
  }
  return formattedResults;
};
async function runQueriesWithStorageAndTriggers(queries, options = {}) {
  const singleDatabase = Array.isArray(queries);
  const normalizedQueries = singleDatabase ? { default: queries } : queries;
  const queriesWithReferences = (await Promise.all(Object.entries(normalizedQueries).map(async ([database, queries2]) => {
    const populatedQueries = await processStorableObjects(queries2, (objects) => {
      return uploadStorableObjects(objects, options);
    });
    return populatedQueries.map((query) => ({
      query,
      database: database === "default" ? undefined : database
    }));
  }))).flat();
  const results = await runQueriesWithTriggers(queriesWithReferences, options);
  if (singleDatabase)
    return results.filter(({ database }) => !database).map(({ result }) => result);
  return results.reduce((acc, { result, database = "default" }) => {
    if (!acc[database])
      acc[database] = [];
    acc[database].push(result);
    return acc;
  }, {});
}
var formatIndividualResult = (result) => {
  if ("amount" in result && typeof result.amount !== "undefined" && result.amount !== null) {
    return Number(result.amount);
  }
  const dateFields = "modelFields" in result ? Object.entries(result.modelFields).filter(([, type]) => type === "date").map(([slug]) => slug) : [];
  if ("record" in result) {
    if (result.record === null)
      return null;
    formatDateFields(result.record, dateFields);
    return result.record;
  }
  if ("records" in result) {
    for (const record of result.records) {
      formatDateFields(record, dateFields);
    }
    const formattedRecords = result.records;
    if (typeof result.moreBefore !== "undefined")
      formattedRecords.moreBefore = result.moreBefore;
    if (typeof result.moreAfter !== "undefined")
      formattedRecords.moreAfter = result.moreAfter;
    return formattedRecords;
  }
  return result;
};
var formatResults = (results) => {
  const formattedResults = [];
  for (const result of results) {
    if ("models" in result) {
      formattedResults.push(Object.fromEntries(Object.entries(result.models).map(([model, result2]) => {
        return [model, formatIndividualResult(result2)];
      })));
      continue;
    }
    formattedResults.push(formatIndividualResult(result));
  }
  return formattedResults;
};
var queriesHandler = async (queries, options = {}) => {
  if ("statements" in queries) {
    const results = await runQueries(queries.statements.map((statement) => ({ statement })), options);
    return results.map(({ result }) => result);
  }
  if (options.database) {
    const queryList = { [options.database]: queries };
    const result = await runQueriesWithStorageAndTriggers(queryList, options);
    return result[options.database];
  }
  return runQueriesWithStorageAndTriggers(queries, options);
};
var queryHandler = async (query, options) => {
  const input = "statement" in query ? { statements: [query.statement] } : [query];
  const results = await queriesHandler(input, options);
  return results[0];
};
var createSyntaxFactory = (options) => {
  const callback = (defaultQuery, queryOptions) => {
    const query = defaultQuery;
    return queryHandler(query[QUERY_SYMBOLS2.QUERY], mergeOptions(options, queryOptions));
  };
  const replacer = (value) => isStorableObject(value) ? value : undefined;
  return {
    get: getSyntaxProxy({
      root: `${QUERY_SYMBOLS2.QUERY}.get`,
      callback,
      replacer
    }),
    set: getSyntaxProxy({
      root: `${QUERY_SYMBOLS2.QUERY}.set`,
      callback,
      replacer
    }),
    add: getSyntaxProxy({
      root: `${QUERY_SYMBOLS2.QUERY}.add`,
      callback,
      replacer
    }),
    remove: getSyntaxProxy({
      root: `${QUERY_SYMBOLS2.QUERY}.remove`,
      callback,
      replacer
    }),
    count: getSyntaxProxy({
      root: `${QUERY_SYMBOLS2.QUERY}.count`,
      callback,
      replacer
    }),
    list: getSyntaxProxy({
      root: `${QUERY_SYMBOLS2.QUERY}.list`,
      callback,
      replacer
    }),
    create: getSyntaxProxy({
      root: `${QUERY_SYMBOLS2.QUERY}.create`,
      callback,
      replacer
    }),
    alter: getSyntaxProxy({
      root: `${QUERY_SYMBOLS2.QUERY}.alter`,
      callback,
      replacer
    }),
    drop: getSyntaxProxy({
      root: `${QUERY_SYMBOLS2.QUERY}.drop`,
      callback,
      replacer
    }),
    batch: (operations, queryOptions) => {
      const batchOperations = operations;
      const queries = getBatchProxy(batchOperations).map(({ structure }) => structure);
      const finalOptions = mergeOptions(options, queryOptions);
      return queriesHandler(queries, finalOptions);
    },
    sql: getSyntaxProxySQL({
      callback: (statement) => queryHandler({ statement }, mergeOptions(options, {}))
    }),
    sqlBatch: (operations, queryOptions) => {
      const batchOperations = operations;
      const statements = getBatchProxySQL(batchOperations);
      const finalOptions = mergeOptions(options, queryOptions);
      return queriesHandler({ statements }, finalOptions);
    }
  };
};
var factory = createSyntaxFactory({});
var get = factory.get;
var set = factory.set;
var add = factory.add;
var remove = factory.remove;
var count = factory.count;
var list2 = factory.list;
var create = factory.create;
var alter = factory.alter;
var drop = factory.drop;
var batch = factory.batch;
var sql = factory.sql;
var sqlBatch = factory.sqlBatch;

// node_modules/@ronin/blade/dist/chunk-SJQLAUZ6.js
var useLinkEvents = (destination) => {
  const transitionPage = usePageTransition();
  const populatePathname = usePopulatePathname();
  const activeTransition = import_react4.useRef();
  if (!destination) {
    return {
      onClick: undefined,
      onMouseEnter: undefined,
      onTouchStart: undefined
    };
  }
  const populatedPathname = populatePathname(destination);
  const primePage = () => {
    activeTransition.current = transitionPage(populatedPathname, "manual");
  };
  return {
    onMouseEnter: () => primePage(),
    onTouchStart: () => primePage(),
    onClick: (event) => {
      if (event.defaultPrevented)
        return;
      if (event.metaKey)
        return;
      event.preventDefault();
      if (!activeTransition.current)
        primePage();
      activeTransition.current();
      activeTransition.current = undefined;
    }
  };
};

// node_modules/@ronin/react/dist/index.js
var import_react5 = __toESM(require_react(), 1);
var import_jsx_runtime2 = __toESM(require_jsx_runtime(), 1);
var supportedFitValues = ["fill", "contain", "cover"];
var Image = import_react5.forwardRef(({
  src: input,
  alt,
  size: defaultSize,
  width: defaultWidth,
  height: defaultHeight,
  fit = "cover",
  format = "webp",
  quality = 80,
  aspect,
  loading,
  style,
  className
}, ref) => {
  const imageElement = import_react5.useRef(null);
  const renderTime = import_react5.useRef(Date.now());
  const isMediaObject = typeof input === "object" && input !== null;
  const width = defaultSize || defaultWidth;
  const height = defaultSize || defaultHeight;
  const onLoad = import_react5.useCallback(() => {
    const duration = Date.now() - renderTime.current;
    const threshold = 150;
    if (duration > threshold) {
      imageElement.current?.animate([
        { filter: "blur(4px)", opacity: 0 },
        { filter: "blur(0px)", opacity: 1 }
      ], {
        duration: 200
      });
    }
  }, []);
  if (!(height || width))
    throw new Error("Either `width`, `height`, or `size` must be defined for `Image`.");
  if (quality && (quality < 0 || quality > 100))
    throw new Error("The given `quality` was not in the range between 0 and 100.");
  const optimizationParams = new URLSearchParams({
    ...width ? { w: width.toString() } : {},
    ...height ? { h: height.toString() } : {},
    ...format !== "original" ? { fm: format } : {},
    fit: supportedFitValues.includes(fit) ? fit : "cover",
    q: quality.toString()
  });
  const responsiveOptimizationParams = new URLSearchParams({
    ...width ? { h: (width * 2).toString() } : {},
    ...height ? { h: (height * 2).toString() } : {},
    ...format !== "original" ? { fm: format } : {},
    fit: supportedFitValues.includes(fit) ? fit : "cover",
    q: quality.toString()
  });
  const source = isMediaObject ? `${input.src}?${optimizationParams}` : input;
  const responsiveSource = isMediaObject ? `${input.src}?${optimizationParams} 1x, ${input.src}?${responsiveOptimizationParams} 2x` : input;
  const placeholder = input && typeof input !== "string" ? input.placeholder?.base64 : null;
  return /* @__PURE__ */ import_jsx_runtime2.jsxs("div", {
    ref,
    className,
    style: {
      position: "relative",
      overflow: "hidden",
      flexShrink: 0,
      width: width || "100%",
      height: height || "100%",
      aspectRatio: aspect === "video" ? "16/9" : aspect === "square" ? "1/1" : "auto",
      ...style
    },
    children: [
      placeholder && /* @__PURE__ */ import_jsx_runtime2.jsx("img", {
        style: {
          position: "absolute",
          width: "100%",
          height: "100%",
          objectFit: fit
        },
        src: placeholder,
        alt
      }),
      /* @__PURE__ */ import_jsx_runtime2.jsx("img", {
        alt,
        style: {
          position: "absolute",
          width: "100%",
          height: "100%",
          objectFit: fit
        },
        decoding: "async",
        onLoad,
        loading,
        ref: imageElement,
        src: source,
        srcSet: responsiveSource
      })
    ]
  });
});

// node_modules/@ronin/blade/dist/chunk-JA4Y3TKL.js
var import_react7 = __toESM(require_react(), 1);
var normalizeURL = (url, currentURL) => {
  if (url instanceof URL)
    return url;
  const newURL = new URL(currentURL);
  for (const [key, value] of Object.entries(url)) {
    switch (key) {
      case "search":
        if (typeof url.search === "string") {
          newURL.search = url.search;
        } else if (url.search) {
          const params = Object.entries(url.search).filter(([, value2]) => {
            return typeof value2 !== "undefined" && value2 !== null;
          });
          newURL.search = new URLSearchParams(params).toString();
        }
        break;
      case "hash":
      case "host":
      case "hostname":
      case "href":
      case "password":
      case "pathname":
      case "port":
      case "protocol":
      case "username":
        newURL[key] = value;
    }
  }
  return newURL;
};
var getPathFromURL = (url, currentURL) => {
  const normalized = normalizeURL(url, currentURL);
  return normalized.pathname + normalized.search;
};
var Link = ({
  href: hrefDefault,
  segments,
  children,
  prefetch = true,
  ...extraProps
}) => {
  const universalContext = useUniversalContext();
  const href = typeof hrefDefault === "string" ? hrefDefault : getPathFromURL(hrefDefault, universalContext.url);
  const populatePathname = usePopulatePathname();
  const destination = populatePathname(href, segments);
  const linkEventHandlers = useLinkEvents(destination);
  const eventHandlers = prefetch ? linkEventHandlers : { onClick: linkEventHandlers.onClick };
  return import_react7.cloneElement(children, {
    href: destination,
    ...eventHandlers,
    ...extraProps,
    onClick: extraProps.onClick || linkEventHandlers.onClick,
    onMouseEnter: extraProps.onMouseEnter || linkEventHandlers.onMouseEnter,
    onTouchStart: extraProps.onTouchStart || linkEventHandlers.onTouchStart
  });
};
var Image2 = Image;
wrapClientComponent(Link, "Link");
wrapClientComponent(Image2, "Image");
// node_modules/@ronin/blade/dist/private/client/index.js
var import_client = __toESM(require_client(), 1);
if (!window["BLADE_ROOT"]) {
  const path = location.pathname + location.search + location.hash;
  fetch_page_default(path).then((page) => {
    if (!page)
      throw new Error("Fetched page missing for initial render.");
    window["BLADE_ROOT"] = import_client.hydrateRoot(document, page.body, {
      onRecoverableError(error, errorInfo) {
        console.error("Hydration error occurred:", error, errorInfo);
      }
    });
  });
}

//# debugId=2B30EC8DDBA86ACC64756E2164756E21
